//#region _

function __pictoG(key, x, y, w, h, fg, bg) {
	let ch = iconChars[key];
	let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';
	let text = String.fromCharCode('0x' + ch);
}
async function __start() {
	set_run_state_no_server();
	onpagedeactivated(() => { fiddleSave(); dbSave(); });
	await load_syms();
	await load_db();
	let dicode = CODE.di = await route_path_yaml_dict('../basejs/z_all.yaml');
	let dijustcode = CODE.justcode = await route_path_yaml_dict('../basejs/z_allcode.yaml');
	dTable = mSection({ h: window.innerHeight - 68 }, 'dTable');
	computeClosure();
}
function _addFilterHighlight(mobj) { mobj.highC('green'); }
function _addOnelineVars(superdi, o) {
	let [code, type] = [o.code, o.type];
	let crn = (code.match(/\r\n/g) || []).length;
	let oneliner = crn == 1;
	if (oneliner && type == 'var' && code.includes(',') && !code.includes('[') && !code.includes('{ ')) {
		let othervars = stringAfter(code, 'var').trim().split(',');
		othervars = othervars.map(x => firstWord(x, true));
		othervars.shift();
		for (const v of othervars) {
			let o1 = jsCopy(o);
			o1.lead = o.key;
			o1.key = v;
			o1.code = '';
			o1.sig = `var ${v};`;
			if (isNumber(v)) { continue; }
			lookupSetOverride(superdi, [type, v], o1);
		}
	}
}
function _addPicto(dParent, key) {
	let pic = picto(key, 0, 0, 50, 50, 'red', 'black');
	dParent.appendChild(pic);
	return pic;
}
function _addRelatives(id, oid) {
	if (isdef(oid2ids[oid])) {
		for (const idOther of oid2ids[oid]) {
			if (idOther == id) {
				console.log('object', id, 'already exists in oid2ids[', oid, ']');
				continue;
			}
			listKey(id2uids, id, idOther);
			listKey(id2uids, idOther, id);
		}
	}
}
function _addShape(mobj, w, h, color, shape, { dx = 0, dy = 0, x1, y1, x2, y2, border, thickness, alpha, n = 6, path, idx, rounding } = {}) {
	let r = mobj['_' + shape]();
	mobj.shape = shape;
	if (alpha) color = colorFrom(color, alpha);
	mobj.elem.setAttribute('fill', color);
	if (this.isLine) {
		dx = isdef(dx) ? dx + this.x : this.x;
		dy = isdef(dy) ? dy + this.y : this.y;
	}
	let t = getTypeOf(r);
	if (t == 'rect') { _setRectDims(r, w, h, dx, dy); }
	else if (t == 'ellipse') { _setEllipseDims(r, w, h, dx, dy); }
	else if (t == 'polygon') {
		let pts;
		if (shape == 'hex') { if (h <= 0) { h = (2 * w) / 1.73; } pts = size2hex(w, h, dx, dy); }
		else if (shape == 'triangle') { pts = size2triup(w, h, dx, dy); }
		else if (shape == 'triangleDown') { pts = size2tridown(w, h, dx, dy); }
		else if (shape == 'star') {
			h = h == 0 ? w : h;
			let rad = w / 2;
			let pOuter = getCirclePoints(rad, n);
			let pInner = getCirclePoints(rad / 2, n, 180 / n);
			let points = [];
			for (let i = 0; i < n; i++) {
				points.push(pOuter[i]);
				points.push(pInner[i]);
			}
			for (let i = 0; i < points.length; i++) {
				points[i].X = (points[i].X + w / 2) / w;
				points[i].Y = (points[i].Y + h / 2) / h;
			}
			pts = polyPointsFrom(w, h, dx, dy, points);
		}
		r.setAttribute('points', pts);
	} else if (t == 'image') { _setRectDims(r, w, h, dx, dy); r.setAttribute('href', path); }
	else if (t == 'line') { _setLineDims(r, x1, y1, x2, y2) }
	if (thickness) {
		r.setAttribute('stroke-width', thickness);
		r.setAttribute('stroke', border ? border : mobj.fg);
	}
	if (rounding) {
		r.setAttribute('rx', rounding);
		r.setAttribute('ry', rounding);
	}
	if (isdef(idx) && mobj.elem.childNodes.length > idx) {
		mobj.elem.insertBefore(r, mobj.elem.childNodes[idx]);
	} else {
		mobj.elem.appendChild(r);
	}
	return r;
}
function _addStandardInteraction(id) {
	let mobj = UIS[id];
	switch (id[2]) {
		case 'a':
			mobj.addClickHandler('elem', onClickSelectTuple);
			mobj.addMouseEnterHandler('title', highlightMsAndRelatives);
			mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);
			break;
		case 'l':
		case 'r':
			mobj.addMouseEnterHandler('title', highlightMsAndRelatives);
			mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);
			break;
		case 't':
			if (id[0] == 'm') {
				mobj.addClickHandler('elem', onClickFilterOrInfobox);
				if (mobj.isa.card) {
					mobj.addMouseEnterHandler('title', _highlightAndMagnify);
					mobj.addMouseLeaveHandler('title', _unhighlightAndMinify);
				} else {
					mobj.addMouseEnterHandler('title', highlightMsAndRelatives);
					mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);
				}
			} else {
				mobj.addClickHandler('elem', onClickFilterTuples);
				mobj.addMouseEnterHandler('title', highlightMsAndRelatives);
				mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);
			}
			break;
		default:
			mobj.addClickHandler('elem', onClickFilterTuples);
			mobj.addMouseEnterHandler('title', highlightMsAndRelatives);
			mobj.addMouseLeaveHandler('title', unhighlightMsAndRelatives);
			break;
	}
}
function _assemble_code_sorted(list, di, preserveRegions = false) {
	let text = '';
	for (const k of list) {
		assertion(isdef(k), `KEY UNDEFINED ${k}`);
		if (nundef(di[k])) continue;
		let o = di[k];
		text += o.code;
	}
	return text;
}
function _bestRowsColsFill(items, options) {
	let combis = _getSLCombis(items.length, options.isRegular);
	let wa = options.area.w, ha = options.area.h, wp = options.szPic.w, hp = options.szPic.h;
	let rows, cols;
	cols = wa / wp;
	rows = ha / hp;
	let aRatio = cols < rows ? cols / rows : rows / cols;
	options.or = cols < rows ? 'P' : 'L';
	let rmin = 20000, best;
	for (const r of combis) {
		let rnew = Math.abs(aRatio - r.s / r.l);
		if (rnew < rmin) { rmin = rnew; best = r; }
	}
	if (options.or == 'P') { rows = best.l; cols = best.s; } else { rows = best.s; cols = best.l; }
	let [w, h] = [options.szPic.w, options.szPic.h] = [wa / cols, ha / rows];
	return [rows, cols, w, h, options.or];
}
function _bestRowsColsSize(items, options) {
	let combis = _getSLCombis(items.length, options.isRegular, true);
	options.szPicTest = { w: options.szPic.w, h: options.szPic.h };
	let bestCombi = safeLoop(_findBestCombiOrShrink, [items, options, combis]);
	let [rows, cols, w, h] = [bestCombi.rows, bestCombi.cols, options.szPicTest.w, options.szPicTest.h]
	delete options.szPicTest;
	return [rows, cols, w, h, rows < cols ? 'L' : 'P'];
}
function _bestRowsColsSizeWH(items, wTotal, hTotal, options) {
	let combis = _getSLCombis(items.length, options.isRegular, true);
	options.szPicTest = { w: options.szPic.w, h: options.szPic.h };
	let bestCombi = safeLoop(_findBestCombiOrShrinkWH, [items, wTotal, hTotal, options, combis]);
	let [rows, cols, w, h] = [bestCombi.rows, bestCombi.cols, options.szPicTest.w, options.szPicTest.h]
	delete options.szPicTest;
	return [rows, cols, w, h, rows < cols ? 'L' : 'P'];
}
function _bringCardToFront(id) { let elem = document.getElementById(id); maxZIndex += 1; elem.style.zIndex = maxZIndex; }
function _calc_hex_col_array(rows, cols) {
	let colarr = [];
	let even = rows % 2 == 0;
	for (let i = 0; i < rows; i++) {
		colarr[i] = cols;
		if (even && i < (rows / 2) - 1) cols += 1;
		else if (even && i > rows / 2) cols -= 1;
		else if (!even && i < (rows - 1) / 2) cols += 1;
		else if (!even || i >= (rows - 1) / 2) cols -= 1;
	}
	return colarr;
}
function _calc_hex_col_array_old(rows, cols) {
	let colarr = [];
	for (let i = 0; i < rows; i++) {
		colarr[i] = cols;
		if (i < (rows - 1) / 2) cols += 1;
		else cols -= 1;
	}
	return colarr;
}
function _calcFontPicFromText(options, overrideExisting = true) {
	if (nundef(options.fzPic) || overrideExisting) options.fzPic = Math.floor(options.fzText * 4 * (options.luc == 'u' ? .7 : .6));
	return options.fzPic;
}
function _calcPadGap(p, w, h) {
	if (isString(p)) {
		let pad = Math.min(w, h) * firstNumber(p) / 100;
		console.log('pad', padding);
		return pad;
	} else if (p > 0 && p < 1) return Math.min(w, h) * p;
	else return p;
}
function _centerGridVerticallyWithinArea(items, options) {
	let dGrid = mBy(options.idGrid);
	let dArea = mBy(options.idArea);
	let gRect = getRect(dGrid);
	let aRect = getRect(dArea);
	let itemRect = getRect(lDiv(items[0]));
	let [gsz, asz, itemsz] = [rectToSize(gRect), rectToSize(aRect), rectToSize(itemRect)]
	let extra = options.area.h - gRect.h;
	let pv = valf(options.percentVertical, 50);
	let matop = extra * pv / 100;
	mStyleX(dGrid, { matop: matop });
	mReveal(dMain);
}
function _chainExRec(akku, taskChain, onComplete) {
	if (CancelChain) {
		clearTimeout(ChainTimeout);
		BlockChain = false;
		console.log('chain canceled!');
		return akku;
	} else if (isEmpty(taskChain)) {
		BlockChain = false;
		if (onComplete) onComplete(akku);
		else console.log('akku', akku, '\nBlockChain', BlockChain, '\nCancelChain', CancelChain)
	} else {
		let task = taskChain[0], f = task.f, parr = isdef(task.parr) ? task.parr : [], t = task.msecs, waitCond = task.waitCond, tWait = task.tWait;
		if (isdef(waitCond) && !waitCond()) {
			if (nundef(tWait)) tWait = 300;
			ChainTimeout = setTimeout(() => _chainExRec(akku, taskChain, onComplete), tWait);
		} else {
			for (let i = 0; i < parr.length; i++) {
				let para = parr[i];
				if (para == '_last') parr[i] = arrLast(akku);
				else if (para == '_all' || para == '_list') parr[i] = akku;
				else if (para == '_first') parr[i] = akku[0];
			}
			let result = f(...parr);
			if (isdef(result)) akku.push(result);
			if (isdef(t)) {
				ChainTimeout = setTimeout(() => _chainExRec(akku, taskChain.slice(1), onComplete), t);
			} else {
				_chainExRec(akku, taskChain.slice(1), onComplete);
			}
		}
	}
}
function _checkOverflow(items, options, dGrid) {
	console.log('exec...')
	if (isOverflown(dGrid)) { _sizeByFactor(items, options, dGrid, .99); }
}
function _checkOverflowPixel(items, options, dGrid) {
	console.log('exec...')
	if (isOverflown(dGrid)) { _sizeByPixel(items, options, dGrid, -1); }
}
function _clearHand(idHand, subArea) {
	let hand = UIS[idHand];
	if (hand.cards) {
		while (!isEmpty(hand.cards)) {
			removeCardFromHand(hand.cards[0], hand, subArea);
		}
	}
}
function _cloneIfNecessary(value, optionsArgument) {
	var clone = optionsArgument && optionsArgument.clone === true
	return (clone && _isMergeableObject(value)) ? deepmerge(_emptyTarget(value), value, optionsArgument) : value
}
function _closeInfoboxesForBoatOids(boat) {
	let oids = boat.o.oids;
	for (const oid of oids) hideInfobox(oid);
}
function _computeClosure(symlist) {
	let keys = {};
	for (const k in CODE.di) { for (const k1 in CODE.di[k]) keys[k1] = CODE.di[k][k1]; }
	CODE.all = keys;
	CODE.keylist = Object.keys(keys)
	let inter = intersection(Object.keys(keys), Object.keys(window));
	let done = {};
	let tbd = valf(symlist, ['_start']);
	let MAX = 1007, i = 0;
	let alltext = '';
	while (!isEmpty(tbd)) {
		if (++i > MAX) break;
		let sym = tbd[0];
		let o = CODE.all[sym];
		if (nundef(o)) o = getObjectFromWindow(sym);
		if (o.type != 'func' && o.type != 'cla') { tbd.shift(); lookupSet(done, [o.type, sym], o); continue; }
		let olive = window[sym];
		if (nundef(olive)) { tbd.shift(); lookupSet(done, [o.type, sym], o); continue; }
		let text = olive.toString();
		if (!isEmpty(text)) alltext += text + '\r\n';
		let words = toWords(text, true);
		for (const w of words) {
			if (nundef(done[w]) && w != sym && isdef(CODE.all[w])) addIf(tbd, w);
		}
		tbd.shift();
		lookupSet(done, [o.type, sym], o);
	}
	let tres = '';
	for (const k of ['const', 'var', 'cla', 'func']) {
		console.log('done', k, done[k])
		let o = done[k]; if (nundef(o)) continue;
		let klist = get_keys(o);
		if (k == 'func') klist = sortCaseInsensitive(klist);
		else if (k == 'cla') klist = sortClassKeys(done);
		else if (k == 'const') klist = sortConstKeys(done).map(x => x.key);
		for (const k1 of klist) {
			let code = CODE.justcode[k1];
			if (!isEmptyOrWhiteSpace(code)) tres += code + '\r\n';
		}
	}
	return done;
}
function _createDeck({ hasJokers = false } = {}) {
	let deck = null;
	if (hasJokers) { deck = DeckA(true); }
	else { deck = DeckA(); }
	deck.isFaceDown = true;
	return deck;
}
function _createDivs(items, ifs, options) {
	if (nundef(options.textPos)) options.textPos = 'none';
	let w = isdef(options.w) ? options.w : options.sz;
	let h = isdef(options.h) ? options.h : options.sz;
	let padding = (isdef(ifs.padding) ? ifs.padding : 1);
	let bo = ifs.border;
	bo = isdef(bo) ? isString(bo) ? firstNumber(bo) : bo : 0;
	let wNet = w - 2 * padding - 2 * bo;
	let hNet = h - 2 * padding - 2 * bo;
	let pictureSize = wNet;
	options.center = true;
	let picStyles = { w: wNet, h: isdef(options.center) ? hNet : hNet + padding };
	let textStyles, hText;
	if (options.showLabels) {
		let longestLabel = findLongestLabel(items);
		let oneWord = longestLabel.label.replace(' ', '_');
		let maxTextHeight = options.showPics ? hNet / 2 : hNet;
		textStyles = idealFontsize(oneWord, hNet, maxTextHeight, 22, 8);
		hText = textStyles.h;
		pictureSize = hNet - hText;
		picStyles = { w: pictureSize, h: pictureSize };
		delete textStyles.h;
		delete textStyles.w;
	}
	let outerStyles = { rounding: 10, margin: w / 12, display: 'inline-block', w: w, h: h, padding: padding, bg: 'white', align: 'center', 'box-sizing': 'border-box' };
	if (options.showLabels == true && options.textPos == 'none' && nundef(options.h)) delete outerStyles.h;
	outerStyles = deepmergeOverride(outerStyles, ifs);
	let pic, text;
	for (let i = 0; i < items.length; i++) {
		let item = items[i];
		let k = item.key;
		let d = mDiv();
		if (isdef(item.textShadowColor)) {
			let sShade = '0 0 0 ' + item.textShadowColor;
			if (options.showPics) {
				picStyles['text-shadow'] = sShade;
				picStyles.fg = colorFrom('black', item.contrast); //'#00000080' '#00000030' 
			} else {
				textStyles['text-shadow'] = sShade;
				textStyles.fg = colorFrom('black', item.contrast); //'#00000080' '#00000030' 
			}
		}
		if (options.showPics) {
			pic = zPic(k, null, picStyles, true, false);
			delete pic.info;
			mAppend(d, pic.div);
		}
		if (options.showLabels) {
			textStyles.fg = item.fg;
			text = zText1Line(item.label, null, textStyles, hText);
			mAppend(d, text.div);
		}
		outerStyles.bg = item.bg;
		outerStyles.fg = item.fg;
		mStyleX(d, outerStyles);
		d.id = getUID();
		d.onclick = options.onclick;
		item.id = d.id;
		item.row = Math.floor(item.index / options.cols);
		item.col = item.index % options.cols;
		item.div = d;
		if (isdef(pic)) { item.pic = pic; item.fzPic = pic.innerDims.fz; }
		if (isdef(text)) item.text = text;
		item.isSelected = false;
		item.isLabelVisible = options.showLabels;
		item.dims = parseDims(w, w, d.style.padding);
		if (options.showRepeat) addRepeatInfo(d, item.iRepeat, w);
	}
}
function _createDivsS(items, ifs, options) {
	if (nundef(options.textPos)) options.textPos = 'none';
	let w = isdef(options.w) ? options.w : options.sz;
	let h = isdef(options.h) ? options.h : options.sz;
	let padding = (isdef(ifs.padding) ? ifs.padding : 1);
	let bo = ifs.border;
	bo = isdef(bo) ? isString(bo) ? firstNumber(bo) : bo : 0;
	let wNet = w - 2 * padding - 2 * bo;
	let hNet = h - 2 * padding - 2 * bo;
	let pictureSize = wNet;
	options.center = true;
	let picStyles = { w: wNet, h: isdef(options.center) ? hNet : hNet + padding };
	let textStyles, hText;
	if (options.showLabels) {
		let longestLabel = findLongestLabel(items);
		let oneWord = longestLabel.label.replace(' ', '_');
		let maxTextHeight = options.showPics ? hNet / 2 : hNet;
		textStyles = idealFontsize(oneWord, hNet, maxTextHeight, 22, 8);
		hText = textStyles.h;
		pictureSize = hNet - hText;
		picStyles = { w: pictureSize, h: pictureSize };
		delete textStyles.h;
		delete textStyles.w;
	}
	let outerStyles = { rounding: 10, margin: w / 12, display: 'inline-block', w: w, h: h, padding: padding, bg: 'white', align: 'center', 'box-sizing': 'border-box' };
	if (options.showLabels == true && options.textPos == 'none' && nundef(options.h)) delete outerStyles.h;
	outerStyles = deepmergeOverride(outerStyles, ifs);
	let pic, text;
	for (let i = 0; i < items.length; i++) {
		let item = items[i];
		let k = item.key;
		let d = mDiv();
		if (isdef(item.textShadowColor)) {
			let sShade = '0 0 0 ' + item.textShadowColor;
			if (options.showPics) {
				picStyles['text-shadow'] = sShade;
				picStyles.fg = colorFrom('black', item.contrast); //'#00000080' '#00000030' 
			} else {
				textStyles['text-shadow'] = sShade;
				textStyles.fg = colorFrom('black', item.contrast); //'#00000080' '#00000030' 
			}
		}
		if (options.showPics) {
			pic = zPicS(item, null, picStyles, true, false);
			delete pic.info;
			mAppend(d, pic.div);
		}
		if (options.showLabels) {
			textStyles.fg = item.fg;
			text = zText1Line(item.label, null, textStyles, hText);
			mAppend(d, text.div);
		}
		outerStyles.bg = item.bg;
		outerStyles.fg = item.fg;
		mStyleX(d, outerStyles);
		d.id = getUID();
		d.onclick = options.onclick;
		item.id = d.id;
		item.row = Math.floor(item.index / options.cols);
		item.col = item.index % options.cols;
		item.div = d;
		if (isdef(pic)) { item.pic = pic; item.fzPic = pic.innerDims.fz; }
		if (isdef(text)) item.text = text;
		item.isSelected = false;
		item.isLabelVisible = options.showLabels;
		item.dims = parseDims(w, w, d.style.padding);
		if (options.showRepeat) addRepeatInfo(d, item.iRepeat, w);
	}
}
function _createDom(domType) { }
async function _dbInitX(dir = '../DATA/') {
	let users = await route_path_yaml_dict(dir + 'users.yaml');
	let settings = await route_path_yaml_dict(dir + 'settings.yaml');
	let addons = await route_path_yaml_dict(dir + 'addons.yaml');
	let games = await route_path_yaml_dict(dir + 'games.yaml');
	let tables = await route_path_yaml_dict(dir + 'tables.yaml');
	DB = {
		id: 'boardGames',
		users: users,
		settings: settings,
		games: games,
		tables: tables,
		addons: addons,
	};
	dbSaveX();
}
async function _dbLoadX(callback) {
	let path = './DB.yaml';
	DB = await route_path_yaml_dict(path);
	if (isdef(callback)) callback();
}
function _deepMerge(target, source, optionsArgument) {
	var array = Array.isArray(source);
	var options = optionsArgument || { arrayMerge: _defaultArrayMerge }
	var arrayMerge = options.arrayMerge || _defaultArrayMerge
	if (array) {
		return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : _cloneIfNecessary(source, optionsArgument)
	} else {
		return _mergeObject(target, source, optionsArgument)
	}
}
function _defaultArrayMerge(target, source, optionsArgument) {
	var destination = target.slice()
	source.forEach(function (e, i) {
		if (typeof destination[i] === 'undefined') {
			destination[i] = _cloneIfNecessary(e, optionsArgument)
		} else if (_isMergeableObject(e)) {
			destination[i] = deepmerge(target[i], e, optionsArgument)
		} else if (target.indexOf(e) === -1) {
			destination.push(_cloneIfNecessary(e, optionsArgument))
		}
	})
	return destination
}
function _deleteFromOwnerList(id) { let owner = IdOwner[id[2]]; if (isdef(owner)) removeInPlace(owner, id); }
function _deqSound() {
	let key = _qSound.shift();
	let url = _audioSources[key];
	_sndPlayer = new Audio(url);
	_sndPlayer.onended = _whenSoundPaused;
	_sndPlayer.onloadeddata = () => { _loaded = true; _sndPlayer.play(); };
	_sndPlayer.load();
}
function _emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}
function _enqSound(key) { if (nundef(_qSound)) _qSound = []; _qSound.push(key); }
function _evToClass(ev, className) {
	let elem = findParentWithClass(ev.target, className);
	return elem;
}
async function _experimental() {
	t01_fractions();
}
function _extendItemsAndOptions(items, options) {
	options.longestLabel = findLongestWord(items.map(x => x.label));
	options.wLongest = extendWidth(options.longestLabel);
	let ifs = options.ifs;
	for (let i = 0; i < items.length; i++) {
		let item = items[i];
		item.index = i;
		let val;
		for (const propName in ifs) {
			let prop = ifs[propName];
			if (isLiteral(prop)) val = prop;
			else if (isList(prop)) val = prop[i % prop.length];
			else if (typeof (prop) == 'function') val = prop(i, item, options, items);
			else val = null;
			if (isdef(val)) item[propName] = val;
		}
	}
	if (options.numRepeat > 1) { items = zRepeatEachItem(items, options.numRepeat, options.shufflePositions); }
	if (isdef(options.colorKeys)) items = zRepeatInColorEachItem(items, options.colorKeys);
	options.N = items.length;
	return items;
}
function _extendOptions(options, defOptions, createArea = true) {
	defOptions = {
		wper: 96, hper: 96, dParent: dTable,
		showPic: true, szPic: { w: 120, h: 120 }, bg: 'random', fg: 'white', margin: 4, rounding: 6,
		showLabels: true, luc: 'l', labelPos: 'bottom', lang: 'E', keySet: 'all',
		fzText: 20, fzPic: 60,
		padding: .025, gap: .1, isUniform: true, isRegular: false, fillArea: true,
		shufflePositions: false, sameBackground: true, showRepeat: false, repeat: 1,
		contrast: .32,
		ifs: {},
		handler: _standardHandler,
	};
	addKeys(defOptions, options);
	if (createArea && nundef(options.dArea)) {
		if (isdef(options.wArea) && isdef(options.hArea)) {
			options.dArea = getMainArea(options.dParent, { w: options.wArea, h: options.hArea });
		} else if (isdef(options.areaPadding)) {
			options.dArea = getMainAreaPadding(options.dParent, padding = options.areaPadding);
		} else options.dArea = getMainAreaPercent(options.dParent, null, options.wper, options.hper, getUID());
		options.area = getRect(options.dArea);
		options.idArea = options.dArea.id;
		options.aRatio = options.area.w / options.area.h;
		options.containerShape = options.area.w > options.area.h ? 'L' : 'P';
	}
	if (options.repeat > 1 && nundef(options.ifs.bg)) {
		let bg = isdef(options.colorKeys) ? 'white' : (i) => options.sameBackground ? computeColor('random') : 'random';
		let fg = isdef(options.colorKeys) ? 'black' : 'white';
		options.ifs.bg = bg;
		options.ifs.fg = fg;
	}
	_calcFontPicFromText(options, false);
	if (nundef(options.labelStyles)) options.labelStyles = {};
	if (options.showLabels) {
		if (options.labelPos == 'bottom') options.labelBottom = true; else options.labelTop = true;
		options.labelStyles.fz = options.fzText;
	}
	options.picStyles = { fz: options.fzPic };
	let [w, h] = [options.szPic.w, options.szPic.h];
	options.outerStyles = {
		w: w, h: h, bg: options.bg, fg: options.fg,
		display: 'inline-flex', 'flex-direction': 'column',
		'justify-content': 'center', 'align-items': 'center', 'vertical-align': 'top',
		padding: 0, box: true, margin: options.margin, rounding: options.rounding,
	};
	return options;
}
function _extendOptions_0(dArea, options, defOptions) {
	defOptions = {
		szPic: { w: 100, h: 100 },
		showLabels: true, maxlen: 25, luc: 'c', labelPos: 'bottom', lang: 'D',
		fzText: 20, fzPic: 60,
		padding: .025, gap: .1, isUniform: true, isRegular: true, fillArea: false,
		shufflePositions: false, sameBackground: true, showRepeat: false, repeat: 1,
		contrast: .32,
		ifs: {},
		handler: _standardHandler,
	};
	addKeys(defOptions, options);
	if (options.repeat > 1 && nundef(options.ifs.bg)) {
		let bg = isdef(options.colorKeys) ? 'white' : (i) => options.sameBackground ? computeColor('random') : 'random';
		options.ifs.bg = bg;
	}
	_calcFontPicFromText(options, false);
	options.area = getRect(dArea);
	options.idArea = dArea.id;
	options.aRatio = options.area.w / options.area.h;
	options.containerShape = options.area.w > options.area.h ? 'L' : 'P';
	if (nundef(options.labelStyles)) options.labelStyles = {};
	if (options.showLabels) {
		if (options.labelPos == 'bottom') options.labelBottom = true; else options.labelTop = true;
		options.labelStyles.fz = options.fzText;
	}
	options.picStyles = { fz: options.fzPic };
	options.outerStyles = {
		bg: 'blue', fg: 'contrast',
		display: 'inline-flex', 'flex-direction': 'column', 'place-content': 'center',
		padding: 0, box: true, rounding: 6,
	};
	return options;
}
function _extendOptionsFillArea(dArea, options) {
	defOptions = {
		szPic: { w: 100, h: 100 },
		showLabels: true, maxlen: 25, padding: .025, gap: .1,
		isUniform: true, fillArea: true,
		fzText: 8, luc: 'c', labelPos: 'bottom', lang: 'E',
	};
	if (nundef(options.fzPic)) options.fzPic = Math.floor(options.fzText * 4 * (options.luc == 'u' ? .7 : .6));
	_extendOptions_0(dArea, options, defOptions);
}
function _findBestCombiOrShrink(items, options, combis) {
	bestCombi = firstCond(combis, x => options.area.w / x.cols > options.szPicTest.w && options.area.h / x.rows > options.szPicTest.h);
	if (isdef(bestCombi)) return bestCombi;
	options.szPicTest = { w: .9 * options.szPicTest.w, h: .9 * options.szPicTest.h };
	return null;
}
function _findBestCombiOrShrinkWH(items, wTotal, hTotal, options, combis) {
	bestCombi = firstCond(combis, x => wTotal / x.cols > options.szPicTest.w && hTotal / x.rows > options.szPicTest.h);
	if (isdef(bestCombi)) return bestCombi;
	options.szPicTest = { w: .9 * options.szPicTest.w, h: .9 * options.szPicTest.h };
	return null;
}
function _findCollections(key, o) {
	let sets = [];
	_recFindCollections(key, o, sets);
	return sets;
}
function _gCreate(tag) { return document.createElementNS('http:/' + '/www.w3.org/2000/svg', tag); }
function _genOptions(opt = {}) {
	let defOptions = {
		szPic: { w: 100, h: 100 }, wper: 80, hper: 80, n: 20,
		showLabels: true, maxlen: 25, luc: 'c', labelPos: 'bottom', lang: 'D',
		fzText: 20, fzPic: 60,
		padding: .025, gap: .1, isUniform: true, isRegular: true, fillArea: false,
	};
	addKeys(defOptions, opt);
	if (nundef(opt.dArea)) opt.dArea = getMainAreaPercent(dTable, YELLOW, opt.wper, opt.hper, 'dArea');
	if (nundef(opt.items)) opt.items = genItems(opt.n, opt);
	_calcFontPicFromText(opt, false);
	opt.area = getRect(opt.dArea);
	opt.aRatio = opt.area.w / opt.area.h;
	opt.containerShape = opt.area.w > opt.area.h ? 'L' : 'P';
	if (nundef(opt.labelStyles)) opt.labelStyles = {};
	if (opt.showLabels) {
		if (opt.labelPos == 'bottom') opt.labelBottom = true; else opt.labelTop = true;
		opt.labelStyles.fz = opt.fzText;
	}
	opt.picStyles = { fz: opt.fzPic };
	opt.outerStyles = {
		bg: 'random', display: 'inline-flex', 'flex-direction': 'column', 'place-content': 'center',
		padding: 0, box: true, rounding: 6,
	};
	return opt;
}
function _get_layer(key, options) {
	let o = Geo.layerInfo[key];
	if (nundef(o)) o = Geo.layerInfo.empty;
	copyKeys(options, o.options);
	return L.tileLayer(o.url, o.options);
}
function _getChildrenOf(id) { let ui = UIS[id]; return ui.children; }
function _getCollectionType(o) {
	if (nundef(o)) return false;
	if (nundef(o._set) && !isList(o)) return false;
	let arr;
	if (isdef(o._set)) arr = o._set; else arr = o;
	if (!isList(arr) || isEmpty(arr)) return false;
	let type = null;
	let generic_type = null;
	for (const el of arr) {
		if (nundef(el)) return false;
		if (isdef(el._obj)) {
			if (type && type != '_obj') return false;
			type = '_obj';
			let oEl = G.table[el._obj];
			if (nundef(oEl)) return false;
			if (isdef(oEl.generic_type)) {
				if (!generic_type) generic_type = oEl.generic_type;
				if (generic_type != oEl.generic_type) return false;
			}
		} else {
			if (type == '_obj') return false;
			if (!type) type = generic_type = 'string';
		}
	}
	return { type: type, generic_type: generic_type };
}
function _getKeysCond(n, cond, keySet = 'all') {
	if (isString(keySet)) keySet = KeySets[keySet];
	let keys = isdef(cond) ? isString(cond) ?
		isdef(KeySets[cond]) ? KeySets[cond] : keySet.filter(x => x.includes(cond))
		: keySet.filter(x => cond(Syms[x])) : keySet;
	keys = n >= keys.length ? keys : choose(keys, n);
	return keys;
}
function _getLineStart(line) {
	if (isEmpty(line.trim())) { return ['', 'empty'] }
	let type = 'in_process';
	let w = stringBefore(line, ' ');
	let ch = line[0];
	let i = 0; while (line[i] == '\t') { i++; }
	let fw = line.slice(i);
	if (line.startsWith('//#region')) { w = 'REGION'; type = 'REGION' }
	else if (line.startsWith('//#endregion')) { w = 'ENDREGION'; type = 'REGION' }
	else if (line.startsWith('//')) { w = 'COMMENT'; type = 'empty' }
	else if (isdef(fw) && fw.startsWith('//')) { w = 'COMMENT'; type = 'empty' }
	else if (ch == '\t') { w = 'TAB'; }
	else if (ch == '}' || ch == '{') { w = 'BRACKET' }
	else if (nundef(ch)) { w = 'UNDEFINED'; type = 'WTF' }
	else if (ch == ' ') { w = 'SPACE'; } //type = 'WTF' }
	else if (ch == '\r') { type = 'WTF' }
	else if (nundef(fw)) { w = fw; type = 'WTF' }
	if (['async', 'class', 'const', 'function', 'var'].includes(w)) type = 'block';
	else if (isLetter(ch)) type = 'WTF';
	return [w, type];
}
function _getRandomRegularN(from = 2, to = 100) {
	const arr = [2, 3, 4, 6, 8, 9, 12, 15, 16, 20, 24, 30, 36, 40, 42, 44, 48, 56, 64, 72, 84, 96, 100];
	return chooseRandom(arr.filter(x => x >= from && x <= to));
}
function _getRegularN(from = 2, to = 100) {
	const arr = [2, 3, 4, 6, 8, 9, 12, 15, 16, 20, 24, 30, 36, 40, 42, 44, 48, 56, 64, 72, 84, 96, 100];
	return arr.filter(x => x >= from && x <= to);
}
function _getSLCombis(n, onlyRegular = false, addColsRows_cr = false) {
	let sq = Math.ceil(Math.sqrt(n));
	let res = [];
	for (let i = 1; i <= sq; i++) {
		let s = i;
		let l = Math.ceil(n / s);
		if (s <= l && s * l >= n) res.push({ s: s, l: l });
	}
	if (onlyRegular) res = res.filter(x => x.s * x.l == n);
	if (addColsRows_cr) {
		let resX = [];
		for (const res1 of res) {
			resX.push({ rows: res1.s, cols: res1.l, s: res1.s, l: res1.l, sum: res1.s + res1.l });
			if (res1.s != res1.l) resX.push({ rows: res1.l, cols: res1.s, s: res1.s, l: res1.l, sum: res1.s + res1.l });
		}
		sortBy(resX, 'rows');
		sortBy(resX, 'sum');
		return resX;
	}
	return res;
}
function _getSymbolKey(name) { return name.replace(new RegExp(' ', 'g'), '_').toLowerCase(); }
function _getTestPathForPlayerNum() { return GAME + (USE_MAX_PLAYER_NUM ? '_max' : ''); }
function _getTransformInfoDOM(d) {
	let t = d.style.transform;
	console.log(t)
	getTranslateX(d);
}
function _gSizeToContent(svg) {
	var bbox = svg.getBBox();
	svg.setAttribute("width", bbox.x + bbox.width + bbox.x);
	svg.setAttribute("height", bbox.y + bbox.height + bbox.y);
}
function _handChanged(oids, area) {
	let idHand = area;
	let hand = UIS[idHand];
	if (nundef(hand)) return false;
	let cards = hand.cards;
	if (nundef(cards) && isEmpty(oids)) return false;
	if (isdef(hand) && isdef(hand.cards)) return !sameList(oids, hand.cards);
	else return true;
}
function _handleEvent(ev) { ev.cancelBubble = true; return evToItem(ev); }
function _handleTextTooSmall(fz, fzPic, wn, hn, options) {
	console.log('???????fzText too small!!!', fz, 'fzPic', fzPic, 'N=', options.N, !options.isUniform);
	fz = Math.ceil(fz + 2);
	fzPic = Math.floor(Math.min(hn - fz * 1.5, fz * 3));
	options.fzPic = options.picStyles.fz = fzPic;
	options.fzText = options.labelStyles.fz = fz;
}
function _hexGrid(loc, idBoard, sBoard, soDict) {
	let board = createGrid(loc, idBoard, sBoard, soDict, 'hex');
	addVisuals(board);
	return board;
}
function _hideBoat(id) { let mobj = UIS[id]; mobj.hide(); mobj.o.weg = true; }
function _highlightAndMagnify(ev, mobj, partName) {
	magnifyFront(mobj.id);
	highlightMsAndRelatives(ev, mobj, partName);
}
function _highlightBoat(id) {
	if (id === null) return;
	if (boatHighlighted) {
		if (boatHighlighted.id == id) return;
		else _unhighlightBoat();
	}
	boatHighlighted = UIS[id];
	boatHighlighted.elem.scrollIntoView(false);
	highlightMsAndRelatives(null, boatHighlighted);
	_openInfoboxesForBoatOids(boatHighlighted);
}
function _highlightNextBoat() {
	if (!boatHighlighted) _highlightBoat(getFirstBoatId());
	else {
		let idx = boatHighlighted.o.iTuple + 1;
		_highlightBoat(getBoatIdByIdx(boatHighlighted.o.iTuple + 1));
	}
}
function _highlightPrevBoat() {
	if (!boatHighlighted) _highlightBoat(getLastBoatId()); else _highlightBoat(getBoatIdByIdx(boatHighlighted.o.iTuple - 1));
}
function _initAutoplayToActionButtons() {
	let d = document.getElementById('a_d_autoplay_buttons');
	let buttons = [...d.children];
	let defaultIds = ['c_b_NextPlayer', 'c_b_NextTurn', 'c_b_NextPhase'];
	let kws = lookup(S.settings, ['dev', 'run_to_buttons']);
	if (!kws) kws = {};
	let kwKeys = getKeys(kws);
	let requiredButtonIds = kwKeys.map(x => 'c_b_RTA_' + x).concat(defaultIds);
	let actualButtons = buttons.filter(x => x.id).map(x => x.id);
	for (const id of arrMinus(actualButtons, requiredButtonIds)) $('#' + id).remove();
	for (const id of arrMinus(requiredButtonIds, actualButtons)) {
		let b = document.createElement('button');
		let key = id.substring(8);
		b.innerHTML = kws[key];
		b.id = id;
		b.onclick = () => onClickRunToAction(key);
		d.appendChild(b);
	}
}
function _initCheatButtons() {
	let areaName = 'a_d_cheat_buttons';
	let kws = lookup(S.settings, ['dev', 'cheat_buttons']);
	if (!kws) { hide(areaName); return; }
	show(areaName);
	let d = document.getElementById(areaName);
	let buttons = [...d.children];
	let kwKeys = getKeys(kws);
	let requiredButtonIds = kwKeys.map(x => 'c_b_CHT_' + x);
	let actualButtons = buttons.filter(x => x.id).map(x => x.id);
	for (const id of arrMinus(actualButtons, requiredButtonIds)) $('#' + id).remove();
	for (const id of arrMinus(requiredButtonIds, actualButtons)) {
		let b = document.createElement('button');
		let key = id.substring(8);
		b.innerHTML = kws[key];
		b.id = id;
		b.onclick = () => onClickCheat(key);
		d.appendChild(b);
	}
}
function _initGameGlobals() {
	S.user = {};
	G = { table: {}, players: {} };
	UIS = {};
	IdOwner = {};
	id2oids = {};
	oid2ids = {};
	id2uids = {};
}
function _initPlayers() {
	S.players = {};
	G.players = {};
	let ckeys = Object.keys(playerColors);
	let i = 0;
	for (const id in G.serverData.players) {
		let pl = G.serverData.players[id];
		let colorName = isdef(pl.color) ? pl.color : ckeys[i];
		colorName = colorName.toLowerCase();
		let altName = capitalize(colorName);
		let color = isdef(playerColors[colorName]) ? playerColors[colorName] : colorName;
		let plInfo = firstCond(S.gameConfig.players, x => x.id == id);
		S.players[id] = { username: plInfo.username, playerType: plInfo.playerType, agentType: plInfo.agentType, id: id, color: color, altName: altName, index: plInfo.index };
		i += 1;
	}
}
function _initScenarioButtons() {
	let areaName = 'a_d_scenario_buttons';
	let kws = lookup(S.settings, ['dev', 'scenario_buttons']);
	if (!kws) { hide(areaName); return; }
	show(areaName);
	let d = document.getElementById(areaName);
	let buttons = [...d.children];
	let kwKeys = getKeys(kws);
	let requiredButtonIds = kwKeys.map(x => 'c_b_SCE_' + x);
	let actualButtons = buttons.filter(x => x.id).map(x => x.id);
	for (const id of arrMinus(actualButtons, requiredButtonIds)) $('#' + id).remove();
	for (const id of arrMinus(requiredButtonIds, actualButtons)) {
		let b = document.createElement('button');
		let key = id.substring(8);
		let caption = kws[key];
		b.innerHTML = caption;
		b.id = id;
		b.onclick = () => onClickPushScenario(stringBefore(caption, ' '), stringAfter(caption, ' '));
		d.appendChild(b);
	}
}
function _initServer(callbacks = []) {
	S = { path: {}, user: {}, settings: {}, vars: {} };
	counters = { msg: 0, click: 0, mouseenter: 0, mouseleave: 0, events: 0 };
	setDefaultSettings();
	if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));
}
function _isInHand(oidCard, idHand) {
	let hand = UIS[idHand];
	let cards = hand.cards;
	return isdef(cards) && cards.includes(oidCard);
}
function _isMergeableObject(val) {
	var nonNullObject = val && typeof val === 'object'
	return nonNullObject
		&& Object.prototype.toString.call(val) !== '[object RegExp]'
		&& Object.prototype.toString.call(val) !== '[object Date]'
}
async function _loader() {
	Daat = {};
	if (CLEAR_LOCAL_STORAGE) localStorage.clear();
	C52 = await localOrRoute('C52', '../assets/c52.yaml');
	symbolDict = Syms = await localOrRoute('syms', '../assets/allSyms.yaml');
	SymKeys = Object.keys(Syms);
	ByGroupSubgroup = await localOrRoute('gsg', '../assets/symGSG.yaml');
	WordP = await route_path_yaml_dict('../assets/math/allWP.yaml');
	DB = await route_path_yaml_dict('./DB.yaml');
	console.assert(isdef(DB));
	DA = {}; Items = {};
	Speech = new SpeechAPI('E');
	KeySets = getKeySets();
	TOMan = new TimeoutManager();
	_start();
}
async function _loader_dep() {
	Daat = {};
	if (CLEAR_LOCAL_STORAGE) localStorage.clear();
	C52 = await localOrRoute('C52', '../assets/c52.yaml');
	symbolDict = Syms = await localOrRoute('syms', '../assets/allSyms.yaml');
	SymKeys = Object.keys(Syms);
	ByGroupSubgroup = await localOrRoute('gsg', '../assets/symGSG.yaml');
	WordP = await route_path_yaml_dict('../assets/math/allWP.yaml');
	if (BROADCAST_SETTINGS) {
		await _dbInitX();
		_start0();
	} else { dbLoadX(_start0); }
}
function _makeCardDivAristocracy(oid, o) {
	let elem = document.createElement('div');
	let faceElem = document.createElement('div');
	let backElem = document.createElement('div');
	faceElem.classList.add('face');
	backElem.classList.add('back');
	let cardName = isdef(o.name) ? o.name : 'King';
	let rank = cards52GetRankFromName(cardName);
	let suit = 0;
	elem.faceElem = faceElem;
	elem.backElem = backElem;
	elem.isCard = true;
	elem.suit = suit;
	elem.rank = rank;
	setSide(elem, 'front');
	return elem;
}
function _makeCardDivCatan(oid, o) {
	let symbolKeyPropName = 'name';
	let key = _getSymbolKey(o[symbolKeyPropName]);
	let symbol = symbols[key];
	let color = symbolColors[key];
	let d = document.createElement('div');
	$(d).on("mouseenter", function () { magnifyFront(this.id); });
	$(d).on("mouseleave", function () { minifyBack(this.id); });
	d.innerHTML = 'hallo';
	d.style.position = 'absolute';
	let dx = 0;
	d.style.left = '' + dx + 'px';
	d.style.top = '0px';
	let ch = iconChars[symbol];
	let text = String.fromCharCode('0x' + ch);
	let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';
	d.innerHTML = `
    <div class="cardCatan">
      <p style='font-size:22px;'>${o.name}</p>
      <div class="cardCenter">
        <div class="circular" style='background:${color}'><span style='color:white;font-size:70px;font-weight:900;font-family:${family}'>${text}</span></div>
      </div>
      <hr>
      <p style='font-size:20px;'>${o.desc}</p>
      <div style='color:${color};position:absolute;left:8px;top:8px;width:35px;height:35px'>
        <span style='font-family:${family}'>${text}</span>
      </div>
    </div>
  `;
	return d;
}
function _makeCardDivDefault(oid, o) {
	let symbolKeyPropName = 'name';
	let key = _getSymbolKey(o[symbolKeyPropName]);
	let symbol = symbols[key];
	let color = symbolColors[key];
	let d = document.createElement('div');
	$(d).on("mouseenter", function () { magnifyFront(this.id); });
	$(d).on("mouseleave", function () { minifyBack(this.id); });
	d.innerHTML = 'hallo';
	d.style.position = 'absolute';
	let dx = 0;
	d.style.left = '' + dx + 'px';
	d.style.top = '0px';
	let ch = iconChars[symbol];
	let text = String.fromCharCode('0x' + ch);
	let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';
	d.innerHTML = `
    <div class="cardCatan">
      <p style='font-size:22px;'>${o.name}</p>
      <div class="cardCenter">
        <div class="circular" style='background:${color}'><span style='color:white;font-size:70px;font-weight:900;font-family:${family}'>${text}</span></div>
      </div>
      <hr>
      <p style='font-size:20px;'>${o.desc}</p>
      <div style='color:${color};position:absolute;left:8px;top:8px;width:35px;height:35px'>
        <span style='font-family:${family}'>${text}</span>
      </div>
    </div>
  `;
	return d;
}
function _makeDefault(id, oid, o, areaName, title) {
	if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
	let mobj = new MOBJ();
	mobj.id = id;
	let domel = document.createElement('div');
	domel.style.cursor = 'default';
	mobj.elem = domel;
	mobj.parts.elem = mobj.elem;
	mobj.domType = getTypeOf(domel);
	mobj.cat = DOMCATS[mobj.domType];
	let idParent = areaName;
	mobj.idParent = idParent;
	let parent = UIS[idParent];
	parent.children.push(id);
	let sTitle = title;
	mobj.title(sTitle);
	mobj.o = o;
	mobj.isa[o.obj_type] = true;
	linkObjects(id, oid);
	listKey(IdOwner, id[2], id);
	UIS[id] = mobj;
	mobj.attach();
	return mobj;
}
function _makeGameplayerArea(plAreaName, areaName) {
	let deckArea = getMainArea(defaultDeckAreaName);
	let parentArea = UIS[areaName];
	if (isdef(deckArea)) {
		let x = deckArea.w;
		let h = parentArea.h / 2;
		let y = h;
		let w = parentArea.w - deckArea.w;
		let mobj = makeArea(plAreaName, areaName);
		mobj.setBg('seagreen');
		mobj.setBounds(x, y, w, h, 'px');
		mobj.nextCoords = { x: 0, y: 0 };
		mobj.elem.classList.add('flexWrap');
		return mobj;
	}
}
function _makeGridGrid(items, options, dGrid, showBorder = false) {
	let wcol = options.isUniform ? '1fr' : 'auto';
	let display = options.fillArea ? 'grid' : 'inline-grid';
	mStyleX(dGrid, {
		display: display,
		'grid-template-columns': `repeat(${options.cols}, ${wcol})`,
		gap: options.gap,
		box: true
	});
	if (showBorder) mStyleX(dGrid, { border: '5px solid yellow' });
}
function _makeGroundShape(mobj, x, y, w, h, color, shape, { dx = 0, dy = 0, x1, y1, x2, y2, overlay, scale, scaleX, scaleY, rot, color2, setFg, border, thickness, alpha, idx, rounding } = {}) {
	let r = _addShape(mobj, w, h, color, shape, { dx: dx, dy: dy, x1: x1, y1: y1, x2: x2, y2: y2, border: border, thickness: thickness, alpha: alpha, idx: idx, rounding: rounding })
	mobj.orig.shape = shape;
	let ov = overlay ? mobj['_' + shape]() : null;
	if (ov) ov.setAttribute('class', 'overlay');
	let t = getTypeOf(r);
	if (ov) {
		if (t == 'rect' || t == 'image') { _setRectDims(ov, w, h, dx, dy); }
		else if (t == 'ellipse') { _setEllipseDims(ov, w, h, dx, dy); }
		else if (t == 'polygon') { let pts = r.getAttribute('points'); ov.setAttribute('points', pts); }
		else if (t == 'line') { _setLineDims(r, x1, y1, x2, y2) }
		if (rounding) {
			ov.setAttribute('rx', rounding);
			ov.setAttribute('ry', rounding);
		}
		mobj.elem.appendChild(ov);
		mobj.overlay = ov;
	}
	mobj.bg = mobj.orig.bg = color;
	if (setFg || color2) mobj.fg = mobj.orig.fg = color2 ? color2 : colorIdealText(color);
	mobj.orig.w = mobj.w = w;
	mobj.orig.h = mobj.h = h;
	mobj.orig.x = mobj.x = x;
	mobj.orig.y = mobj.y = y;
	if (isdef(scale)) { scaleX = scaleY = scale; }
	mobj.orig.scaleX = mobj.scaleX = scaleX ? scaleX : 1;
	mobj.orig.scaleY = mobj.scaleY = scaleY ? scaleY : 1;
	mobj.orig.scale = mobj.scale = scale ? scale : 1;
	mobj.orig.rot = mobj.rot = rot ? rot : 0;
	if (isdef(scaleX) || isdef(scaleX) || isdef(rot)) mobj._setTransform(mobj.elem, { x: x, y: y, scaleX: scaleX, scaleY: scaleY, rotDeg: rot });
	else mobj.setPos(x, y);
	mobj.ground = r;
	return mobj;
}
function _makeHandArea(key, handAreaName, parentAreaId) {
	let parentArea = UIS[parentAreaId];
	if (isdef(parentArea)) {
		let mobj = makeArea(handAreaName, parentAreaId);
		mobj.setBg(randomColor());
		mobj.title(stringAfter(key, '.'));
		let bTitle = getBounds(mobj.parts.title);
		mobj.parts['title'].fontSize = '12px';
		mobj.elem.style.minWidth = bTitle.width + 'px'; //'90px';
		mobj.elem.style.minHeight = '160px';
		mobj.body('hand');
		let div = mobj.parts['hand'];
		div.style.position = 'relative';
		div.style.left = '10px';
		div.style.top = '10px';
		div.style.width = 'auto';
		div.style.height = 'auto';
		return mobj;
	}
}
function _makeNoneGrid(items, options, dGrid) {
	options.szPic = { w: options.area.w / options.cols, h: options.area.h / options.rows };
	_setRowsColsSize(options);
	for (const item of items) {
		let live = item.live;
		if (options.isUniform) {
			mStyleX(live.div, { w: options.szPic.w, h: options.szPic.h, margin: options.gap / 2, padding: options.padding / 2 });
		} else {
			mStyleX(live.div, { margin: options.gap / 2, padding: options.padding });
		}
		mStyleX(live.dLabel, { fz: options.fzText });
		mStyleX(live.dPic, { fz: options.fzPic });
	}
	mStyleX(dGrid, { padding: 0, border: '5px solid blue', box: true })
	let ov = getVerticalOverflow(dGrid);
	if (Math.floor(ov) == 0 && !options.isUniform) {
		_tryGrow(items, options);
	}
	if (ov > 0) {
		options.fzPic = options.picStyles.fz = options.fzPic * .9;
		for (const it of items) { mStyleX(lGet(it).dPic, { fz: options.fzPic }); }
		ov = getVerticalOverflow(dGrid);
		let newGap = Math.ceil(options.gap / 2);
		while (ov > 0) {
			for (const it of items) { mStyleX(lDiv(it), { fz: 4, margin: newGap, padding: newGap / 2, rounding: 0 }); }
			ov = getVerticalOverflow(dGrid);
			if (ov && newGap == 1) {
				for (const it of items) { mStyleX(lDiv(it), { margin: 0, padding: 0 }); }
				break;
			}
			newGap = Math.ceil(newGap / 2);
		}
	}
}
function _makeTabletopCardsArea(areaName) {
	let deckArea = getMainArea(defaultDeckAreaName);
	let parentArea = UIS[areaName];
	if (isdef(deckArea)) {
		let x = deckArea.w;
		let h = parentArea.h / 2;
		let y = 0;
		let w = parentArea.w - deckArea.w;
		let id = 'tabletopCardsArea';
		let mobj = makeArea(id, areaName);
		mobj.setBg('seagreen');
		mobj.setBounds(x, y, w, h, 'px');
		mobj.nextCoords = { x: 0, y: 0 };
		mobj.elem.classList.add('flexWrap');
		return mobj;
	}
}
function _mergeObject(target, source, optionsArgument) {
	var destination = {}
	if (_isMergeableObject(target)) {
		Object.keys(target).forEach(function (key) {
			destination[key] = _cloneIfNecessary(target[key], optionsArgument)
		})
	}
	Object.keys(source).forEach(function (key) {
		if (!_isMergeableObject(source[key]) || !target[key]) {
			destination[key] = _cloneIfNecessary(source[key], optionsArgument)
		} else {
			destination[key] = _deepMerge(target[key], source[key], optionsArgument)
		}
	})
	return destination;
}
function _mergeOptions() {
	if (isdef(S.user.spec) && isdef(S.user.spec.SETTINGS)) {
		for (const k in S.user.spec.SETTINGS) {
			if (isdef(S.settings[k])) {
				S.settings[k] = deepmerge(S.settings[k], S.user.spec.SETTINGS[k], { arrayMerge: overwriteMerge });
			} else {
				S.settings[k] = S.user.spec.SETTINGS[k];
			}
		}
	}
}
function _minimizeCode(di, symlist = ['start'], nogo = []) {
	let done = {};
	let tbd = symlist;
	let MAX = 1000000, i = 0;
	let visited = {
		autocomplete: true, Card: true, change: true, config: true, grid: true, hallo: true,
		jQuery: true, init: true,
		Number: true, sat: true, step: true, PI: true
	};
	while (!isEmpty(tbd)) {
		if (++i > MAX) break;
		let sym = tbd[0];
		if (isdef(visited[sym])) { tbd.shift(); continue; }
		visited[sym] = true;
		let o = di[sym];
		if (nundef(o)) { tbd.shift(); continue; }
		let text = o.code;
		let words = toWords(text, true);
		for (const w of words) {
			if (nogo.some(x => w.startsWith(x))) continue;
			let idx = text.indexOf(w);
			let ch = text[idx - 1];
			if (w.startsWith('lsys')) console.log('.....ch', w, ch, sym)
			if (ch == "'" || '"`'.includes(ch)) continue;
			if (nundef(done[w]) && nundef(visited[w]) && w != sym && isdef(di[w])) addIf(tbd, w);
		}
		assertion(sym == tbd[0], 'W T F')
		tbd.shift();
		done[sym] = o;
	}
	return done;
}
function _mPlayPause(dParent, styles = {}, handler = null) {
	if (!handler) handler = audio_onclick_pp;
	let html = `
    <section id="dButtons">
      <a id="bPlay" href="#" }">
        <i class="fa fa-play fa-2x"></i>
      </a>
      <a id="bPause" href="#" style="display: none">
        <i class="fa fa-pause fa-2x"></i>
      </a>
    </section>
  `;
	let pp = mCreateFrom(html);
	mAppend(dParent, pp);
	mStyle(pp, styles);
	mBy('bPlay').onclick = () => { hide0('bPlay'); show0('bPause'); handler(); }
	mBy('bPause').onclick = () => { hide0('bPause'); show0('bPlay'); handler(); }
	return { button: pp, show_play: () => { hide0('bPause'); show0('bPlay'); }, show_pause: () => { hide0('bPlay'); show0('bPause'); } };
}
function _mStamp(d1, text, color, sz) {
	mStyle(d1, { position: 'relative' });
	let r = getRect(d1);
	let [w, h] = [r.w, r.h];
	color = ['green', 'red', 'blue'].includes(color) ? color : 'black';
	sz = valf(sz, r.h / 7);
	console.log('r', r, 'sz', sz);
	let [padding, border, rounding, angle] = [sz / 10, sz / 6, sz / 8, rNumber(-25, 25)];
	let d2 = mDiv(d1, {
		fg: color,
		position: 'absolute', top: 25, left: 5,
		transform: `rotate(${angle}deg)`,
		fz: sz,
		hpadding: 2,
		vpadding: 0,
		rounding: rounding,
		weight: 400,
		display: 'inline-block',
		'text-transform': 'uppercase',
		family: 'fredericka',
		'mix-blend-mode': 'multiply',
	}, null, text);
	mClass(d2, `${color}stamp`);
}
function _mtest() {
	MSInit();
}
function _onPlayerChange(pid) {
	if (isPlain()) return;
	if (!G.playerChanged || pid != G.player) return;
	let o = G.playersAugmented[pid];
	_updatePageHeader(pid);
	if (G.previousPlayer) _updateLogArea(G.previousPlayer, pid);
	let mobj = getVisual(pid);
	if (mobj) {
	}
	let msDef = getDefVisual(pid);
	if (msDef) {
		let msParentId = msDef.parentId;
		let msParent = UIS[msParentId];
		var target = msDef.elem;
		target.parentNode.scrollTop = target.offsetTop;
	}
}
function _openInfoboxesForBoatOids(boat) {
	let oids = boat.o.oids;
	let mainIds = oids.map(x => getMainId(x));
	for (const id of mainIds) {
		let mobj = UIS[id];
		openInfobox(null, mobj);
	}
}
function _overwriteMerge(destinationArray, sourceArray, options) { return sourceArray }
function _paramsQ(parr) {
	parr = isdef(parr) ? parr : [];
	for (let i = 0; i < parr.length; i++) {
		let para = parr[i];
		if (para == '_last') parr[i] = arrLast(AkQ);
		else if (para == '_all' || para == '_list') parr[i] = AkQ;
		else if (para == '_first') parr[i] = AkQ[0];
	}
	return parr;
}
function _pickStringForAction(x) {
	if (x.type == 'fixed') return x.val;
	if (x.type == 'obj') return x.ID;
	if (x.type == 'player') return x.val;
}
function _playersCreateNew() {
	for (const pid of G.playersCreated) {
		if (!defaultVisualExists(pid) && S.settings.player.createDefault)
			makeDefaultPlayer(pid, G.playersAugmented[pid], S.settings.player.defaultArea);
		if (mainVisualExists(pid)) continue;
		let updatedVisuals;
		if (S.settings.userBehaviors) {
			updatedVisuals = runBehaviors(pid, G.playersAugmented, PLAYER_CREATE);
		}
		if (nundef(updatedVisuals) || !updatedVisuals.includes(pid)) {
			if (isPlain()) {
				let mobj = makeMainPlayer(pid, G.playersAugmented[pid], S.settings.player.defaultMainArea);
				if (mobj === null && !defaultVisualExists(pid) && S.settings.table.createDefault != false) {
					makeDefaultObject(pid, G.playersAugmented[pid], S.settings.table.defaultArea);
				}
			}
		}
	}
}
function _playersUpdate() {
	for (const pid in G.playersUpdated) {
		let pl = G.playersAugmented[pid];
		let updatedVisuals = {};
		if (S.settings.userBehaviors) {
			updatedVisuals = runBehaviors(pid, G.playersAugmented, PLAYER_UPDATE);
			runBindings(pid, G.playersAugmented)
		}
		let mobj = getVisual(pid);
		if (!updatedVisuals[pid] && isdef(mobj)) {
			presentMainPlayer(pid, mobj, G.playersAugmented, false);
		}
		if (!isPlain() && !updatedVisuals[pid] && S.settings.hasCards) {
			if (G.player == pid) {
				if (G.playerChanged) {
					switchPlayerArea();
				}
				updateGameplayerCardCollections(pid, pl);
			}
		}
		if (!S.settings.player.createDefault || mobj && S.settings.player.createDefault != true) continue;
		let plms = presentDefault(pid, pl, false);
		_onPlayerChange(pid);
	}
}
function _poll() {
	if (nundef(U) || nundef(Z) || nundef(Z.friendly)) { console.log('poll without U or Z!!!', U, Z); return; }
	show_polling_signal();
	if (nundef(DA.pollCounter)) DA.pollCounter = 0; DA.pollCounter++; console.log('polling');
	if (Z.game == 'feedback' && i_am_host()) {
		send_or_sim({ friendly: Z.friendly, uname: Z.uplayer, fen: Z.fen, write_fen: true, auto: true }, 'table');
	} else send_or_sim({ friendly: Z.friendly, uname: Z.uplayer, auto: true }, 'table');
}
async function _preloader() {
	timit = new TimeIt('timit', EXPERIMENTAL);
	if (FASTSTART) {
		let syms = localStorage.getItem('syms');
		if (isdef(syms)) {
			console.log('from local');
			Syms = JSON.parse(syms);
		} else {
			Syms = await route_path_yaml_dict('../assets/syms.yaml');
			localStorage.setItem('syms', JSON.stringify(Syms));
		}
		SymKeys = Object.keys(Syms);
		dTable = mBy('table');
		mText('hallo', dTable, { fz: 100 });
		timit.show('DONE')
	} else _loader();
}
function _prepText1_dep(items, ifs, options) {
	options.showLabels = true;
	let sz = options.sz;
	let padding = (isdef(ifs.padding) ? ifs.padding : 1);
	let bo = ifs.border;
	bo = isdef(bo) ? isString(bo) ? firstNumber(bo) : bo : 0;
	let szNet = sz - 2 * padding - 2 * bo;
	let textStyles, hText;
	if (options.showLabels) {
		let longestLabel = findLongestLabel(items);
		let oneWord = longestLabel.label.replace(' ', '_');
		textStyles = idealFontsize(oneWord, szNet, szNet, 22, 8);
		hText = textStyles.h;
		delete textStyles.h;
		delete textStyles.w;
	}
	let outerStyles = { rounding: 10, margin: sz / 12, display: 'inline-block', w: sz, padding: padding, bg: 'white', align: 'center', 'box-sizing': 'border-box' };
	outerStyles = deepmergeOverride(outerStyles, ifs);
	let pic, text;
	for (let i = 0; i < items.length; i++) {
		let item = items[i];
		let k = item.key;
		let d = mDiv();
		if (isdef(item.textShadowColor)) {
			let sShade = '0 0 0 ' + item.textShadowColor;
			textStyles['text-shadow'] = sShade;
			textStyles.fg = colorFrom('black', item.contrast); //'#00000080' '#00000030' 
		}
		if (options.showLabels) {
			textStyles.fg = item.fg;
			text = zText1Line(item.label, null, textStyles, hText);
			mAppend(d, text.div);
		}
		outerStyles.bg = item.bg;
		outerStyles.fg = item.fg;
		mStyleX(d, outerStyles);
		d.id = getUID();
		d.onclick = options.onclick;
		item.id = d.id;
		item.row = Math.floor(item.index / options.cols);
		item.col = item.index % options.cols;
		item.div = d;
		item.pic = null;
		item.isSelected = false;
		item.isLabelVisible = options.showLabels;
		item.dims = parseDims(sz, sz, d.style.padding);
		if (options.showRepeat) addRepeatInfo(d, item.iRepeat, sz);
		item.fzPic = 0;
	}
}
function _preselectFirstVisualsForBoats() {
	let oidlist = [];
	for (const id of getBoatIds()) {
		let oids = id2oids[id];
		if (isdef(oids)) oids.map(x => addIf(oidlist, x))
	}
	let vislist = oidlist.map(x => getMainId(x)).filter(x => x !== null);
	vislist = vislist.concat(oidlist.map(x => getDefId(x)));
	vislist.map(id => UIS[id].highFrame());
}
function _presentLocationChange(oid, mobj) {
	if (G.table[oid].obj_type == 'robber') {
		let o = G.table[oid];
		let changedProps = G.tableUpdated[oid];
		if (changedProps.summary.includes('loc')) {
			let oidLoc = o.loc._obj;
			let visLoc = getVisual(oidLoc);
			mobj.setPos(visLoc.x, visLoc.y);
		}
	}
}
function _quadGrid(loc, idBoard, sBoard, soDict) {
	let board = createGrid(loc, idBoard, sBoard, soDict, 'quad');
	addVisuals(board);
	return board;
}
function _rChoose(arr, n = 1, func = null, exceptIndices = null) {
	let arr1 = jsCopy(arr);
	if (isdef(exceptIndices)) {
		for (const i of exceptIndices) removeInPlace(arr1, arr[i]);
	}
	if (isdef(func)) arr1 = arr1.filter(func);
	if (n == 1) {
		let idx = Math.floor(Math.random() * arr1.length);
		return arr1[idx];
	}
	arrShufflip(arr1);
	return arr1.slice(0, n);
}
function _recFindCollections(key, o, sets) {
	let tt = _getCollectionType(o);
	if (tt) {
		sets.push({ name: key, key: key, type: tt.type, generic_type: tt.generic_type, hand: o, arr: getSimpleSetElements(o) });
	} else if (isDict(o)) {
		for (const k in o) {
			let newSets = [];
			_recFindCollections(key + '.' + k, o[k], newSets);
			for (const s of newSets) {
				sets.push(s);
			}
		}
	} else if (isList(o)) {
		let i = 0;
		for (const cand of o) {
			let k = key + '_' + i;
			i += 1;
			let newSets = [];
			_recFindCollections(k, cand, newSets);
			for (const s of newSets) {
				sets.push(s);
			}
		}
	}
}
function _reduceFontsBy(tx, px, items, options) {
	fz = options.fzText - tx;
	fzPic = options.fzPic - px;
	options.fzPic = options.picStyles.fz = fzPic;
	options.fzText = options.labelStyles.fz = fz;
	for (const item of items) {
		let ui = item.live;
		if (tx != 0) mStyleX(ui.dLabel, { fz: fz });
		if (px != 0) mStyleX(ui.dPic, { fz: fzPic });
	}
}
function _reduceSizeBy(tx, px, items, options) {
	w = options.szPic.w - tx;
	h = options.szPic.h - tx;
	fz = options.fzText - tx;
	fzPic = options.fzPic - px;
	options.fzPic = options.picStyles.fz = fzPic;
	options.fzText = options.labelStyles.fz = fz;
	options.szPic = { w: w, h: h };
	for (const item of items) {
		let ui = item.live;
		if (tx != 0) {
			mStyleX(ui.dLabel, { fz: fz }); mStyleX(ui.div, { w: w, h: h });
		}
		if (px != 0) mStyleX(ui.dPic, { fz: fzPic });
	}
	console.log('fonts set to', fz, fzPic);
}
function _register(o, keyword, func) {
	if (nundef(S.registry[keyword])) S.registry[keyword] = {};
	S.registry[keyword][o.id] = func;
}
function _removeAllHighlighting(id) { let mobj = UIS[id]; mobj.unhighAll(); }
function _removeClickHandler(id) { let mobj = UIS[id]; mobj.removeClickHandler(); }
function _removeFilterHighlight(mobj) { mobj.unhighC(); }
function _removeHoverHandlers(id) { let mobj = UIS[id]; mobj.removeHoverHandlers(); }
function _removeInteraction(id) { let mobj = UIS[id]; mobj.removeHandlers(); mobj.unhighAll(); }
function _repositionCards(msHand) {
	if (msHand.numCards == 0) return;
	let dTitle = msHand.parts.title;
	let dBody = msHand.parts.hand;
	let dHand = msHand.elem;
	let bTitle = getBounds(dTitle);
	let bBody = getBounds(dBody, true);
	let bHand = getBounds(dHand);
	let yBody = bTitle.height;
	let hHand = msHand.hHand;
	let hAvailable = hHand - yBody;
	let wHand = bHand.width;
	let W = wHand;
	let H = hHand;
	let w = msHand.wCard;
	let h = msHand.hCard;
	let n = msHand.numCards;
	let x, y, dx, padding;
	let offset = { x: 0, y: 0 };
	if (msHand.adjustSize) {
		W = w + (n) * w / 4;
		H = h;
		padding = 0;
		msHand.setSize(W + 2 * padding + yBody, H);
		x = padding + offset.x;
		y = padding + offset.y;
	} else {
		padding = x = y = 0;
	}
	dx = n > 1 ? (W - w) / (n - 1) : 0;
	if (dx > w) dx = w;
	let i = 0;
	for (const oidCard of msHand.cards) {
		let id = getMainId(oidCard);
		let c = UIS[id];
		c.zIndex = c.elem.style.zIndex = i;
		i += 1;
		c.setPos(x, y);
		x += dx;
	}
}
function _runQ() {
	QCounter += 1; console.log('===>run', QCounter, Q);
	if (isEmpty(Q)) { console.log('Q empty!', AkQ); return; }
	let task = Q.shift();
	let f = task.f;
	let parr = _paramsQ(task.parr);
	console.log('task:', f.name, 'params', parr)
	let result = f(...parr);
	if (isdef(result)) AkQ.push(result);
	if (!isEmpty(Q)) runQ();
}
function _runRegistry(keyword) {
	if (nundef(S.registry[keyword])) return;
	for (const id in S.registry[keyword]) {
		S.registry[keyword][id](getVisual(id));
	}
}
function _saveAll() {
	saveUser();
	dbSave('boardGames');
}
function _selectText(el) {
	var sel, range;
	if (window.getSelection && document.createRange) {
		sel = window.getSelection();
		if (sel.toString() == '') {
			window.setTimeout(function () {
				range = document.createRange();
				range.selectNodeContents(el);
				sel.removeAllRanges();
				sel.addRange(range);
			}, 1);
		}
	} else if (document.selection) {
		sel = document.selection.createRange();
		if (sel.text == '') {
			range = document.body.createTextRange();
			range.moveToElementText(el);
			range.select();
		}
	}
}
function _sendCardToBack(id) { let c = UIS[id]; let elem = document.getElementById(id); elem.style.zIndex = c.zIndex; }
function _setEllipseDims(r, w, h, dx, dy) {
	r.setAttribute('rx', w / 2);
	r.setAttribute('ry', h / 2);
	r.setAttribute('cx', dx);
	r.setAttribute('cy', dy);
}
function _setIsa(ms, o) {
	listKey(ms, 'isa', o.obj_type);
	for (const d in isa) {
		if (d == 'id') { continue; }
		ms[d] = isa[d];
	}
}
function _setLineDims(r, x1, y1, x2, y2) {
	r.setAttribute('x1', x1);
	r.setAttribute('y1', y1);
	r.setAttribute('x2', x2);
	r.setAttribute('y2', y2);
}
function _setRectDims(r, w, h, dx, dy) {
	r.setAttribute('width', w);
	r.setAttribute('height', h);
	r.setAttribute('x', -w / 2 + dx);
	r.setAttribute('y', -h / 2 + dy);
}
function _setRowsColsSize(options) {
	let [rows, cols, wb, hb] = [options.rows, options.cols, options.szPic.w, options.szPic.h];
	options.or = rows < cols ? 'L' : 'P'
	let gap = options.gap = _calcPadGap(options.gap, wb, hb);
	let [wOffset, hOffset] = [gap / cols, gap / rows];
	let offset = Math.max(wOffset, hOffset, gap * .25);
	let w = wb - gap - offset, h = hb - gap - offset;
	options.szPic.w = w;
	options.szPic.h = h;
	options.padding = _calcPadGap(options.padding, w, h);
	options.outerStyles.padding = options.padding;
	let wn = w - options.padding * 2;
	let hn = h - options.padding * 2;
	let fz = options.showLabels == true ? (wn / options.longestLabelLen) * (options.luc != 'u' ? 1.9 : 1.7) : 0;
	let fzPic = Math.min(wn / 1.3, (hn - fz * 1.2) / 1.3);
	if (fzPic < fz * 2) { fz = Math.floor(hn / 4); fzPic = fz * 2; }
	let fzTest = Math.min(hn / 3, idealFontDims(options.longestLabel, wn, hn - fzPic, fz, 4).fz);
	options.fzPic = options.picStyles.fz = Math.floor(fzPic)
	options.fzText = options.labelStyles.fz = options.isUniform ? Math.min(Math.floor(fz), Math.floor(fzTest)) : Math.floor(fz);
	if (!options.isUniform && fz < 6 && fz * 4 < fzPic) { _handleTextTooSmall(fz, fzPic, wn, hn, options); }
}
function _setTextFont(items, options, fz) {
	options.fzText = options.labelStyles.fz = fz;
	console.log('items', items)
	items.map(x => { let dl = x.live.dLabel; if (isdef(dl)) dl.style.fontSize = fz + 'px'; });
}
function _setToList(oval) { if (typeof oval == 'object' && '_set' in oval) return oval._set; else return oval; }
function _show_history_popup() {
	if (isdef(mBy('dHistoryPopup')) || isEmpty(Z.fen.history)) return;
	let dpop = mPopup('', dTable, { fz: 16, bg: colorLight('#EDC690', .5), rounding: 8, fg: 'dimgray', top: 0, right: 0, border: 'white' }, 'dHistoryPopup');
	mAppend(dpop, UI.dHistory);
	mInsert(dpop, mCreateFrom(`<div style="margin-left:10px;text-align:left;width:100%;font-family:Algerian;font-size:22px;">${Config.games[Z.game].friendly}</div>`));
	let bclose = mButtonX(dpop, hide_history_popup, 'tr', 25, 'dimgray');
}
function _showBoat(id) { let mobj = UIS[id]; mobj.show(); mobj.o.weg = false; }
function _showHand(oids, idArea) {
	let idHand = idArea;
	let hand = UIS[idArea];
	let areaName = getAreaName(idArea);
	for (const oid of oids) {
		let mobj = getVisual(oid);
		if (nundef(mobj)) {
			mobj = makeCard(oid, G.table[oid], idHand);
		}
		if (!_isInHand(oid, idHand)) {
			addCardToHand(oid, idArea);
		}
	}
}
function _showPassToNextPlayer(plWaitingFor) {
	unfreezeUI();
	let d = document.getElementById('passToNextPlayerUI');
	let color = getPlayerColor(plWaitingFor);
	d.style.backgroundColor = color;
	let button = document.getElementById('c_b_passToNextPlayer');
	button.textContent = 'PASS TO ' + plWaitingFor;
	show('passToNextPlayerUI');
	WAITINGFORPLAYER = plWaitingFor;
}
function _simpleOptions(options = {}, defsOuter = {}) {
	options.showPic = valf(options.showPic, isdef(options.fzPic));
	options.showLabels = isdef(options.fz);
	options.szPic = { w: options.w, h: options.h };
	options.fzText = options.fz;
	if (nundef(options.rounding)) options.rounding = 4;
	if (nundef(options.margin)) options.margin = 4;
	if (nundef(options.padding)) options.padding = 0;
	if (nundef(options.labelStyles)) options.labelStyles = {};
	if (options.showLabels) { if (nundef(options.labelPos)) options.labelBottom = true; options.labelStyles.fz = options.fzText; }
	options.picStyles = { fz: options.fzPic };
	let [w, h] = [options.szPic.w, options.szPic.h];
	options.outerStyles = {
		w: w, h: h, bg: options.bg, fg: options.fg,
		display: 'inline-flex', 'flex-direction': 'column',
		'justify-content': 'center', 'align-items': 'center', 'vertical-align': 'top',
		padding: 0, box: true, margin: options.margin, rounding: options.rounding,
	};
	if (isdef(defsOuter)) addKeys(defsOuter, options.outerStyles);
	return options;
}
function _singleThreadedChainExRec(akku, onComplete) {
	if (CancelChain) {
		clearTimeout(ChainTimeout);
		BlockChain = false;
		console.log('chain canceled!', akku);
	} else if (isEmpty(TaskChain)) {
		BlockChain = false;
		onComplete(akku);
	} else {
		let task = TaskChain[0], f = task.f, parr = isdef(task.parr) ? task.parr : [], t = task.msecs, waitCond = task.waitCond, tWait = task.tWait;
		console.log('task:', f.name, 't', t)
		if (isdef(waitCond) && !waitCond()) {
			if (nundef(tWait)) tWait = 300;
			ChainTimeout = setTimeout(() => _singleThreadedChainExRec(akku, onComplete), tWait);
		} else {
			for (let i = 0; i < parr.length; i++) {
				let para = parr[i];
				if (para == '_last') parr[i] = arrLast(akku);
				else if (para == '_all' || para == '_list') parr[i] = akku;
				else if (para == '_first') parr[i] = akku[0];
			}
			let result = f(...parr);
			if (isdef(result)) akku.push(result);
			TaskChain = TaskChain.slice(1);
			if (isdef(t)) {
				ChainTimeout = setTimeout(() => _singleThreadedChainExRec(akku, onComplete), t);
			} else {
				_chainExRec(akku, onComplete);
			}
		}
	}
}
function _sizeByFactor(items, options, dGrid, factor = .9) {
	console.log('vorher', options.szPic, options.fzText, options.fzPic, options.padding, options.gap);
	w = options.szPic.w * factor;
	h = options.szPic.h * factor;
	fz = options.fzText;
	fzPic = options.fzPic * factor;
	options.fzPic = options.picStyles.fz = fzPic;
	options.fzText = options.labelStyles.fz = fz;
	options.szPic = { w: w, h: h };
	options.padding *= factor;
	options.gap *= factor;
	mStyleX(dGrid, { gap: options.gap / 2 });
	for (const item of items) { let ui = item.live; mStyleX(ui.dLabel, { fz: fz }); mStyleX(ui.div, { padding: options.padding, w: w, h: h }); mStyleX(ui.dPic, { fz: fzPic }); }
	console.log('fonts set to', fz, fzPic);
	console.log('...nachher', options.szPic, options.fzText, options.fzPic, options.padding, options.gap);
}
function _sizeByPixel(items, options, dGrid, factor = -1) {
	console.log('vorher', options.szPic, options.fzText, options.fzPic, options.padding, options.gap);
	w = options.szPic.w + factor;
	h = options.szPic.h + factor;
	fz = options.fzText + factor;
	fzPic = options.fzPic + factor;
	options.fzPic = options.picStyles.fz = fzPic;
	options.fzText = options.labelStyles.fz = fz;
	options.szPic = { w: w, h: h };
	options.padding += factor;
	options.gap += factor;
	mStyleX(dGrid, { gap: options.gap / 2 });
	for (const item of items) { let ui = item.live; mStyleX(ui.dLabel, { fz: fz }); mStyleX(ui.div, { padding: options.padding, w: w, h: h }); mStyleX(ui.dPic, { fz: fzPic }); }
	console.log('fonts set to', fz, fzPic);
	console.log('...nachher', options.szPic, options.fzText, options.fzPic, options.padding, options.gap);
}
function _spgameStart() {
	console.assert(isdef(DB));
	initLive();
	initTable();
	initSidebar();
	initAux();
	initScore();
	Speech = new SpeechAPI('E');
	console.log('Syms', Syms)
	KeySets = getKeySetsX();
	Settings = { language: 'E' }
	test04_textItems();
}
function _standardHandler(handler) {
	let f = isdef(handler) ?
		ev => { ev.cancelBubble = true; let res = handler(ev, evToItem(ev)); }
		: ev => { ev.cancelBubble = true; console.log('clicked on', evToClosestId(ev), evToLive(ev), evToItem(ev)); };
	return f;
}
async function _start() {
	set_run_state_no_server();
	onpagedeactivated(() => { saveEnv(); dbSave(); });
	await load_syms();
	await load_db();
	let dicode = CODE.di = await route_path_yaml_dict('../y/z_all.yaml');
	let kwindow = get_keys(window);
	test100();
}
function _start_game(gamename, players, options) { }
async function _start_old() {
	let timit = new TimeIt('* using timit *');
	set_run_state_vps();
	onpagedeactivated(save_all);
	await load_syms();
	await load_db();
	await load_codebase();
	timit.show();
	function test_random_update() {
		let n = rNumber();
		let i = rNumber(0, DB.appdata.howto.length - 1);
		let rec = { kw: 'k' + n, c: 'hallo' + (n + i) };
		db_update('howto', i, rec);
	}
}
async function _start0() {
	console.assert(isdef(DB));
	DA = {}; Items = {};
	Speech = new SpeechAPI('E');
	KeySets = getKeySets();
	TOMan = new TimeoutManager();
	_start();
}
async function _start1() {
	set_run_state_no_server();
	onpagedeactivated(() => { fiddleSave(); dbSave(); });
	await load_syms();
	await load_db();
	let dicode = CODE.di = await route_path_yaml_dict('../basejs/z_all.yaml');
	let dijustcode = CODE.justcode = await route_path_yaml_dict('../basejs/z_allcode.yaml');
	computeClosure(['_start1']);
}
function _startHotseat() {
	timit.start_of_cycle(getFunctionCallerName());
	S.vars.switchedGame = true;
	S.settings.game = GAME;
	checkCleanup();
	S.user = {};
	G = { table: {}, players: {} };
	UIS = {};
	IdOwner = {};
	id2oids = {};
	oid2ids = {};
	id2uids = {};
	if (S.settings.useSpec) loadUserSpec([loadUserCode, sendInitNewGame]); else sendInitNewGame();
}
function _startLobby() { lobbyView(); }
function _startLogin() { loginView(); }
function _startMultiplayer() {
	whichGame(onWhichGame);
}
async function _startNewGame(role = 'starter') {
	gameView();
	S.settings.game = GAME;
	flags.specAndDOM = true;
	checkCleanup_III();
	S.user = {};
	G = { table: {}, players: {}, signals: {} };
	UIS = {};
	IdOwner = {};
	id2oids = {};
	oid2ids = {};
	id2uids = {};
	let initFunc = (role == 'starter') ? sendInitNewGame : sendStatusNewGame;
	await loadSpecAndCode();
	if (TESTING) stubSendInitNewGame(role == 'starter');
	else initFunc();
}
function _startRestartSame() {
	checkCleanup_I();
	sendRestartGame(USERNAME, SEED, [gameStep]);
}
async function _startSession() {
	timit = new TimeIt(getFunctionCallerName(), TIMIT_SHOW);
	await loadAssets();
	_initServer([ensureAllGames, () => {
		console.log('allGames', allGames)
		timit.showTime('nach loadAllGames_dep+loadIcons')
		gcsAuto();
		S.gameConfig = gcs[GAME];
		_startNewGame('starter');
	}]);
}
function _startShort() {
	timit.start_of_cycle(getFunctionCallerName());
	if (isdef(UIS)) {
		stopInteraction();
		clearLog();
	}
	_sendRoute('/begin/1', d6 => {
		let user = isdef(S.gameInfo.userList) ? S.gameInfo.userList[0] : USERNAME;
		timit.showTime('sending status');
		_sendRoute('/status/' + user, d7 => {
			let data = JSON.parse(d7);
			timit.showTime('start processing');
			processData(data);
			gameStep();
		});
	});
}
function _startTest() {
	test03_2Hands();
}
function _startTest01() {
	console.log('HALLOOOOO');
	atest01();
}
function _syncUsernameOfSender(username) {
	if (nundef(username)) username = Username; else Username = username;
	plidSentStatus = getPlidForUsername(username);
}
function _SYS_START() {
	if (nundef(S) || nundef(S.vars)) {
		addEventListener('keyup', keyUpHandler);
		addEventListener('keydown', keyDownHandler);
	} else { checkCleanup(); }
	timit = new TimeIt(getFunctionCallerName());
	timit.tacit();
	S = { path: {}, user: {}, settings: {}, vars: { firstTime: true } };
	counters = { msg: 0, click: 0, mouseenter: 0, mouseleave: 0, events: 0 };
	DELETED_IDS = [];
	if (S.vars.firstTime) setDefaultSettings();
	console.log('playMode:', S.settings.playMode, 'PLAYMODE', PLAYMODE, 'S.playModeChanged', S.playModeChanged)
	S.vars.switchedGame = true;
	S.vars.firstTime = false;
	_initGameGlobals();
	presentMainMenu();
}
function _tableCreateNew() {
	for (const oid of G.tableCreated) {
		let o = G.table[oid];
		if (!defaultVisualExists(oid) && S.settings.table.createDefault == true) {
			makeDefaultObject(oid, G.table[oid], S.settings.table.defaultArea);
		}
		if (S.settings.table.ignoreTypes.includes(o.obj_type)
			|| mainVisualExists(oid)
			|| !S.settings.boardDetection && !S.settings.deckDetection && !S.settings.userStructures) {
			continue;
		}
		let updatedVisuals;
		let mobj;
		if (S.settings.userBehaviors) {
			updatedVisuals = runBehaviors(oid, G.table, TABLE_CREATE);
		}
		if (nundef(updatedVisuals) || !updatedVisuals.includes(oid)) {
			if ('loc' in o && isBoardElement(o.loc._obj)) mobj = makeMainBoardElementVisual(oid, G.table[oid]);
			if (mobj === null && !defaultVisualExists(oid) && S.settings.table.createDefault != false) {
				makeDefaultObject(oid, G.table[oid], S.settings.table.defaultArea);
			}
		}
	}
}
function _tableCreateNewSimple() {
	for (const oid of G.tableCreated) {
		let o = G.table[oid];
		if (S.settings.table.ignoreTypes.includes(o.obj_type)) continue;
		console.assert(!defaultVisualExists(oid), 'DEFAULT VISUAL EXISTS FOR ' + oid, o);
		let updatedVisuals = runBehaviors(oid, G.table, TABLE_CREATE);
		if (!updatedVisuals.includes(oid) && !mainVisualExists(oid)) {
			makeDefaultObject(oid, G.table[oid], S.settings.table.defaultArea);
		} else {
			console.log(updatedVisuals.includes(oid) ? 'created ' + oid : 'exists:' + oid);
		}
	}
}
function _tableRemove() {
	for (const oid of G.tableRemoved) {
		deleteOid(oid);
	}
}
function _tableRemoveSimple() {
	for (const oid of G.tableRemoved) {
		deleteOid(oid);
	}
}
function _tableUpdate() {
	for (const oid in G.tableUpdated) {
		let o = G.table[oid];
		if (nundef(o)) {
			continue;
		}
		if (isStructuralElement(oid)) {
			continue;
		}
		let changedProps = G.tableUpdated[oid].summary;
		let mobj = getVisual(oid);
		let updatedVisuals;
		if (!isDeckObject(o) && mobj) {
			if (S.settings.userBehaviors) {
				updatedVisuals = runBehaviors(oid, G.table, TABLE_UPDATE);
			}
			if (nundef(updatedVisuals) || !updatedVisuals.includes(oid)) {
				if (changedProps.includes('loc')) _presentLocationChange(oid, mobj);
				presentMain(oid, mobj, G.table);
			}
		}
		if (!S.settings.table.createDefault || mobj && S.settings.table.createDefault == 'miss') continue;
		presentDefault(oid, G.table[oid]);
	}
	if (S.settings.hasCards && !isPlain()) {
		for (const oid in G.table) {
			updateTableCardCollections(oid);
		}
	}
}
function _tableUpdateSimple() {
	for (const oid in G.tableUpdated) {
		let o = G.table[oid];
		if (nundef(o)) continue;
		let mobj = getVisual(oid);
		let updatedVisuals = runBehaviors(oid, G.table, TABLE_UPDATE);
		presentDefault(oid, G.table[oid]);
	}
}
function _test() {
	let o1 = {
		"_set": [
			{
				"_tuple": [
					{
						"_set": [
							{ "ID": "91", "val": "Corner[91]", "type": "obj" },
							{ "ID": "92", "val": "Corner[92]", "type": "obj" },
							{ "ID": "93", "val": "Corner[93]", "type": "obj" },
						]
					}
				]
			}
		]
	};
	let o3 = {
		"_set": [
			{
				"_tuple": [
					{
						"_set": [
							{ "ID": "1", "val": "Corner[1]", "type": "obj" },
							{ "ID": "2", "val": "Corner[2]", "type": "obj" },
						]
					},
					{
						"_set": [
							{ "ID": "3", "val": "Corner[3]", "type": "obj" },
						]
					},
				]
			}
		]
	};
	let o4 = {
		"_tuple": [
			{
				"_set": [
					{ "ID": "1", "val": "Corner[1]", "type": "obj" },
					{ "ID": "2", "val": "Corner[2]", "type": "obj" },
				]
			},
			{
				"_set": [
					{ "ID": "3", "val": "Corner[3]", "type": "obj" },
				]
			},
			{
				"_set": [
					{ "ID": "4", "val": "Corner[3]", "type": "obj" },
					{ "ID": "5", "val": "Corner[3]", "type": "obj" },
				]
			},
		]
	};
	let o2 = {
		"_set": [
			{ "ID": "1", "val": "Corner[1]", "type": "obj" },
			{ "ID": "2", "val": "Corner[2]", "type": "obj" },
			{ "ID": "3", "val": "Corner[2]", "type": "obj" },
		]
	};
	let o5 = {
		"_set": [
			{
				"_tuple": [
					{
						"_set": [
							{ "ID": "1", "val": "Corner[1]", "type": "obj" },
							{ "ID": "2", "val": "Corner[2]", "type": "obj" },
						]
					},
					{
						"_set": [
							{ "ID": "3", "val": "Corner[3]", "type": "obj" },
						]
					},
				]
			},
			{
				"_tuple": [
					{
						"_set": [
							{ "ID": "4", "val": "Corner[1]", "type": "obj" },
							{ "ID": "5", "val": "Corner[2]", "type": "obj" },
						]
					},
					{
						"_set": [
							{ "ID": "6", "val": "Corner[3]", "type": "obj" },
						]
					},
				]
			}
		]
	};
	let o6 = {
		"_tuple": [
			{
				"_set": [
					{ "ID": "4", "val": "Corner[1]", "type": "obj" },
					{ "ID": "5", "val": "Corner[2]", "type": "obj" },
				]
			},
			{
				"_set": [
					{ "ID": "6", "val": "Corner[3]", "type": "obj" },
				]
			},
		]
	};
	let o7 = {
		"_tuple": [
			{
				"_set": [
					{ "ID": "1", "val": "Corner[1]", "type": "obj" },
					{ "ID": "2", "val": "Corner[2]", "type": "obj" },
				]
			},
			{
				"_set": [
					{ "ID": "3", "val": "Corner[3]", "type": "obj" },
				]
			},
		]
	};
	let o = o5;
	console.log('output', exp(o) ? tsRec(exp(o)) : 'undefined');
}
function _test01_load_game_info() {
	timit = new TimeIt('*');
	timit.showTime('hallo');
	ensureAllGames([() => timit.showTime('done')]);
}
async function _testing() {
	Items = {};
	iTest00();
}
function _testTable() {
	initRSGData(); hideLobby(); hideLogin(); showGame(); initDom();
	let gplayers = {
		White: {
			altName: "White",
			buildings: {
				city: { _set: [] },
				road: { _set: [{ _obj: "149" }] },
				settlement: { _set: [{ _obj: "148" }, { _obj: "158" }] },
			},
			color: "white",
			devcards: { _set: [] },
			id: { _player: "White" },
			opps: [{ _player: "Red" }, { _player: "Blue" }],
			opps2: { _set: ["White", "Red", "Blue"] },
			opps3: { _set: [{ _player: "Red" }, { _player: "Blue" }] },
			index: 0,
			name: "White",
			num_res: 3,
			obj_type: "GamePlayer",
			past_devcards: { _set: [] },
			reserve: { road: 14, settlement: 3, city: 4 },
			resources: { wood: 1, brick: 0, sheep: 1, ore: 0, wheat: 1 },
			username: "felix",
		},
		Red: {
			altName: "Red",
			buildings: {
				city: { _set: [] },
				road: { _set: [{ _obj: "149" }] },
				settlement: { _set: [{ _obj: "148" }, { _obj: "158" }] },
			},
			color: "Red",
			devcards: { _set: [] },
			id: "Red",
			index: 0,
			name: "Red",
			num_res: 3,
			past_devcards: { _set: [] },
			reserve: { road: 14, settlement: 3, city: 4 },
			resources: { wood: 1, brick: 0, sheep: 1, ore: 0, wheat: 1 },
			username: "maus",
		}
	};
	let gtable = {
		2: {
			col: 6,
			corners: [{ _obj: "101" }, { _obj: "102" }, { _obj: "103" }, { _obj: "104" }, { _obj: "99" }, { _obj: "98" }],
			edges: [{ _obj: "27" }, { _obj: "26" }, { _obj: "25" }, { _obj: "24" }, { _obj: "23" }, { _obj: "22" }],
			neighbors: [null, null, { _obj: "78" }, { _obj: "79" }, { _obj: "70" }, null],
			num: 11,
			obj_type: "hex",
			res: "ore",
			row: 0,
			visible: { _set: ["White", "Red", "Blue"] }
		},
		148: {
			loc: { _obj: "131" },
			obj_type: "settlement",
			player: {
				_player: "White"
			},
			opps: { opp1: { _player: "Red" }, opp2: { _player: "Blue" } },
			visible: {
				_set: [{ _player: "Red" }, { _player: "Blue" }]
			},
		},
		149: {
			loc: { _obj: "138" },
			obj_type: "settlement",
			player: {
				_player: "White"
			},
			visible: {
				_set: ["White", "Red", "Blue"]
			},
		},
		158: {
			loc: { _obj: "134" },
			obj_type: "road",
			player: {
				_player: "Red"
			},
			visible: { _set: ["White", "Red", "Blue"] },
		},
		145: {
			cols: 9,
			corners: { _set: [{ _obj: "101" }, { _obj: "102" }, { _obj: "103" },] },
			edges: { _set: [{ _obj: "101" }, { _obj: "102" }, { _obj: "103" },] },
			fields: { _set: [{ _obj: "101" }, { _obj: "102" }, { _obj: "103" },] },
			map: {
				_ndarray: [
					[null, { _obj: "3" }, null, { _obj: "4" }],
					[{ _obj: "5" }, null, { _obj: "6" }, null, { _obj: "7" }],
					[null, { _obj: "8" }, null],
				]
			},
			obj_type: "board",
			rows: 5,
			visible: { _set: ["White", "Red", "Blue"] }
		}
	};
	console.log('gplayers', gplayers);
	console.log('gtable', gtable);
	addTableToArea(gtable[145], 'a_d_game');
	addTableToArea(gtable[148], 'a_d_game');
	addTableToArea(gplayers.White, 'a_d_objects');
}
function _tryGrow(items, options) {
	let again = false;
	let lastItem = items[items.length - 1];
	let rect = getRect(lDiv(lastItem));
	let bottom = rect.y + rect.h;
	let hArea = options.area.h;
	if (hArea > rect.h + 2 * options.gap) {
		fz = options.fzText + 1;
		fzPic = options.fzPic + 2;
		options.fzPic = options.picStyles.fz = fzPic;
		options.fzText = options.labelStyles.fz = fz;
		for (const item of items) {
			let live = item.live;
			mStyleX(live.dLabel, { fz: options.fzText });
			mStyleX(live.dPic, { fz: options.fzPic });
		}
		let ov = getVerticalOverflow(mBy(options.idGrid));
		if (Math.floor(ov) <= 0) again = true; else again = false;
	}
	if (again) _tryGrow(items, options);
	else {
		fz = options.fzText - 1;
		fzPic = options.fzPic - 2;
		options.fzPic = options.picStyles.fz = fzPic;
		options.fzText = options.labelStyles.fz = fz;
		for (const item of items) {
			let live = item.live;
			mStyleX(live.dLabel, { fz: options.fzText });
			mStyleX(live.dPic, { fz: options.fzPic });
		}
	}
}
function _ui_game_menu_item(g, g_tables = []) {
	function runderkreis(color, id) {
		return `<div id=${id} style='width:20px;height:20px;border-radius:50%;background-color:${color};color:white;position:absolute;left:0px;top:0px;'>` + '' + "</div>";
	}
	let [sym, bg, color, id] = [Syms[g.logo], g.color, null, getUID()];
	if (!isEmpty(g_tables)) {
		let t = g_tables[0];
		let have_another_move = t.player_status == 'joined';
		color = have_another_move ? 'green' : 'red';
		id = `rk_${t.id}`;
	}
	return `
  <div onclick="onclick_game_menu_item(event)" gamename=${g.id} style='cursor:pointer;border-radius:10px;margin:10px;padding:5px;padding-top:15px;min-width:120px;height:90px;display:inline-block;background:${bg};position:relative;'>
  ${nundef(color) ? '' : runderkreis(color, id)}
  <span style='font-size:50px;font-family:${sym.family}'>${sym.text}</span><br>${g.friendly.toString()}</div>
  `;
}
function _unfocusOnEnter(ev) { if (ev.key === 'Enter') { ev.preventDefault(); mBy('dummy').focus(); } }
function _unhighlightAndMinify(ev, mobj, partName) {
	minifyBack(mobj.id);
	unhighlightMsAndRelatives(ev, mobj, partName);
}
function _unhighlightBoat() {
	if (boatHighlighted) {
		unhighlightMsAndRelatives(null, boatHighlighted);
		_closeInfoboxesForBoatOids(boatHighlighted);
		boatHighlighted = null;
	}
}
function _updateCollections(propChanges, pool, propNames) {
	for (const oid in propChanges) {
		let o = pool[oid];
		if (!o || isBoardElementObject(o) || isBoardObject(o) || isDeckObject(o)) continue;
		for (const propName of propChanges[oid].summary) {
			if (!propNames.includes(propName)) continue;
			let o = pool[oid][propName];
			if (isSimple(o) || (isDict(o) && isdef(o.generic_type))) continue;
			let cLast = getCollections(oid, propName);
			let cCurrent = _findCollections(oid + '.' + propName, o);
			if (isEmpty(cCurrent) && isEmpty(cLast)) continue;
			let currentKeys = cCurrent.map(x => x.name);
			for (const c of cCurrent) {
				if (cLast && c.name in cLast) {
					if (nundef(collections[oid])) collections[oid] = {};
					if (nundef(collections[oid][propName])) collections[oid][propName] = {};
					collections[oid][propName][c.name] = c;
					c.tbd = 'update';
				} else {
					if (nundef(collections[oid])) collections[oid] = {};
					if (nundef(collections[oid][propName])) collections[oid][propName] = {};
					collections[oid][propName][c.name] = c;
					c.tbd = 'add';
				}
			}
			if (!cLast) continue;
			for (const k in cLast) {
				if (!(currentKeys.includes(k))) {
					collections[oid][propName][k].tbd = 'remove';
				}
			}
		}
	}
}
function _updateLogArea(prevPlid, plid) {
	if (prevPlid) hide('a_d_log_' + prevPlid);
	let id = 'a_d_log_' + plid;
	if (UIS[id]) show(id);
}
function _updatePageHeader(pid) {
	let mobj;
	for (const pl of S.gameConfig.players) {
		mobj = getPageHeaderDivForPlayer(pl.id);
		mobj.classList.remove('gamePlayer');
	}
	mobj = getPageHeaderDivForPlayer(pid);
	mobj.classList.add('gamePlayer');
}
function _valf(val, def) { return isdef(val) ? val : def; }
function _visualizeAritOp(op, a, b, dParent, symResult) {
	op = isString(op) ? OPS[op] : op;
	let dx = mDiv(dParent); mFlex(dx); mStyleX(dx, { 'align-items': 'center', gap: 16 });
	let d1 = visNumber(a, dx, 'blue');
	let d2 = visOperator(op.wr, dx);
	let d3 = visNumber(b, dx, 'green');
	let d4 = visOperator('=', dx);
	let result = isdef(symResult) ? symResult : op.f(a, b);
	let d5 = visNumber(result, dx, 'red');
	return dx;
}
function _visualizeMult(a, b, dParent, symResult) {
	op = OPS.mult;
	let dx = mDiv(dParent); mFlex(dx); mStyleX(dx, { 'align-items': 'center', gap: 16 });
	visNumber(a, dx, 'blue', 'v');
	for (let i = 1; i < b; i++) {
		let d2 = visOperator('+', dx);
		visNumber(a, dx, 'blue', 'v');
	}
	let d4 = visOperator('=', dx);
	let result = isdef(symResult) ? symResult : op.f(a, b);
	let d5 = visNumber(result, dx, 'red');
	return dx;
}
function _visualizeNumber(n, dParent, color, or = 'h') {
	let root = Math.sqrt(n);
	let rows = Math.floor(root);
	let cols = Math.ceil(root);
	if (or == 'v') { let h = rows; rows = cols; cols = h; }
	let dArea = mDiv(dParent, { display: 'inline-grid', 'grid-template-columns': `repeat(${cols}, 1fr)`, bg: 'white', fg: color });
	for (let i = 0; i < n; i++) {
		let item = getItem('plain-circle');
		let d = miPic(item, dArea, { fz: 12, margin: 6 });
		iAdd(item, { div: d });
		mAppend(dArea, d);
	}
	return dArea;
}
function _whenSoundPaused() {
	_sndPlayer = null;
	_sndPlayerIdle = true;
	_loaded = false;
	if (!isEmpty(_qSound)) { _deqSound(); } else { _idleSound = true; }
}
function _zoomIfNeeded(arr) {
	let wTotalNeeded = 0;
	for (const dName of arr) {
		let n = isNumber(dName) ? dName * bodyZoom : getBounds(dName).width;
		wTotalNeeded += n;
	}
	let wWindow = window.innerWidth;
	let newBodyZoom = (wWindow * bodyZoom / wTotalNeeded).toFixed(2);
	if (newBodyZoom == bodyZoom || newBodyZoom > 1 && bodyZoom == 1.0) return;
	if (Math.abs(newBodyZoom - 1.0) <= .03) {
		newBodyZoom = 1.0;
	}
	bodyZoom = Math.min(1.0, newBodyZoom);
	document.body.style.transformOrigin = '0% 0%';
	if (bodyZoom == 1.0) document.body.style.transform = 'none';
	else document.body.style.transform = 'scale(' + bodyZoom + ')';
}
function _zPicS(itemInfoKey, dParent, styles = {}) {
	let [item, info, key] = detectItemInfoKey(itemInfoKey);
	let outerStyles = isdef(styles) ? jsCopy(styles) : {};
	outerStyles.display = 'inline-block';
	let family = info.family;
	let wInfo = info.w;
	let hInfo = info.h; if (info.type == 'icon' && hInfo == 133) hInfo = 110;
	info.fz = 100;
	let innerStyles = { family: family };
	let [padw, padh] = isdef(styles.padding) ? [styles.padding, styles.padding] : [0, 0];
	let dOuter = isdef(dParent) ? mDiv(dParent) : mDiv();
	let d = mDiv(dOuter);
	d.innerHTML = info.text;
	let wdes, hdes, fzdes, wreal, hreal, fzreal, f;
	if (isdef(styles.w) && isdef(styles.h) && isdef(styles.fz)) {
		[wdes, hdes, fzdes] = [styles.w, styles.h, styles.fz];
		let fw = wdes / wInfo;
		let fh = hdes / hInfo;
		let ffz = fzdes / info.fz;
		f = Math.min(fw, fh, ffz);
	} else if (isdef(styles.w) && isdef(styles.h)) {
		[wdes, hdes] = [styles.w, styles.h];
		let fw = wdes / wInfo;
		let fh = hdes / hInfo;
		f = Math.min(fw, fh);
	} else if (isdef(styles.w) && isdef(styles.fz)) {
		[wdes, fzdes] = [styles.w, styles.fz];
		let fw = wdes / wInfo;
		let ffz = fzdes / info.fz;
		f = Math.min(fw, ffz);
	} else if (isdef(styles.h) && isdef(styles.fz)) {
		[hdes, fzdes] = [styles.h, styles.fz];
		let fh = hdes / hInfo;
		let ffz = fzdes / info.fz;
		f = Math.min(fh, ffz);
	} else if (isdef(styles.h)) {
		hdes = styles.h;
		f = hdes / hInfo;
	} else if (isdef(styles.w)) {
		wdes = styles.w;
		f = wdes / wInfo;
	} else {
		mStyleX(d, innerStyles);
		mStyleX(dOuter, outerStyles);
		return dOuter;
	}
	fzreal = Math.floor(f * info.fz);
	wreal = Math.round(f * wInfo);
	hreal = Math.round(f * hInfo);
	wdes = Math.round(wdes);
	hdes = Math.round(hdes);
	padw += isdef(styles.w) ? (wdes - wreal) / 2 : 0;
	padh += isdef(styles.h) ? (hdes - hreal) / 2 : 0;
	if (!(padw >= 0 && padh >= 0)) {
		console.log(info)
		console.log('\nstyles.w', styles.w, '\nstyles.h', styles.h, '\nstyles.fz', styles.fz, '\nstyles.padding', styles.padding, '\nwInfo', wInfo, '\nhInfo', hInfo, '\nfzreal', fzreal, '\nwreal', wreal, '\nhreal', hreal, '\npadw', padw, '\npadh', padh);
	}
	innerStyles.fz = fzreal;
	innerStyles.weight = 900;
	innerStyles.w = wreal;
	innerStyles.h = hreal;
	mStyleX(d, innerStyles);
	outerStyles.padding = '' + padh + 'px ' + padw + 'px';
	outerStyles.w = wreal;
	outerStyles.h = hreal;
	mStyleX(dOuter, outerStyles);
	return {
		info: info, key: info.key, div: dOuter, outerDims: { w: wdes, h: hdes, hpadding: padh, wpadding: padw },
		innerDims: { w: wreal, h: hreal, fz: fzreal }, bg: dOuter.style.backgroundColor, fg: dOuter.style.color
	};
}
//#endregion

//#region A
function a_game() {
	function state_info(dParent) { dParent.innerHTML = `turn: ${Z.turn}, stage:${Z.stage}`; }
	function setup(players, options) {
		let fen = { players: {}, plorder: jsCopy(players), history: [] };
		shuffle(fen.plorder);
		let starter = fen.starter = fen.plorder[0];
		let cards_needed = players.length * options.handsize * 1.4;
		fen.num_decks = Math.ceil(cards_needed / 52);
		fen.deck = create_fen_deck('n', fen.num_decks, 0);
		shuffle(fen.deck);
		let [i, n, diff] = [0, players.length, get_slot_diff(fen)];
		for (const plname of players) {
			let pl = fen.players[plname] = {
				hand: deck_deal(fen.deck, options.handsize),
				score: 0,
				name: plname,
				color: get_user_color(plname),
				slot: diff * i,
			};
			i++;
		}
		[fen.phase, fen.stage, fen.step, fen.turn] = ['', 'click', 0, [starter]];
		return fen;
	}
	function present() { present_a_game(); }
	function check_gameover() { return false; }
	function activate_ui() {
		activate_a_game();
	}
	function post_collect() { agmove_resolve(); }
	return { post_collect, state_info, setup, present, check_gameover, activate_ui };
}
function a0(ev) {
	toggle_select(evToItem(ev), G.selist);
	toolbar_check();
}
function a0_functions() { }
function a1(ev) { a0(ev); }
function a2_add_selection(items, label, min = 0, max = 100, goto_post = true) {
	clear_previous_level();
	A.level++;
	A.items = items;
	A.goto_post = goto_post;
	A.selected = [];
	let show_submit_button = min > 1 || min != max;
	let dParent = window[`dActions${A.level}`];
	for (const item of items) {
		let a = item.a;
		let idButton = getUID('b'); item.idButton = idButton; A.di[idButton] = item; item.uids = [idButton];
		let b = mButton(a, show_submit_button ? a2_toggle_selection : a2_select, dParent, { fz: 13 }, ['donebutton', 'enabled'], idButton);
		if (isdef(item.o)) {
			let go = item.o;
			let d = iDiv(go);
			go.id = d.id = getUID();
			mClass(d, 'hoverScale');
			d.onclick = show_submit_button ? a2_toggle_selection : a2_select;
			let idCard = d.id; item.idCard = idCard; A.di[idCard] = item; item.uids.push(idCard);
			set_hover_ui(b, go);
		}
	}
	if (show_submit_button) {
		if (isdef(mBy('b_submit'))) { let b = mBy('b_submit'); mAppend(dParent, b); }
		else mButton('submit', goto_post ? a2_post_if_uiActivated : a2_pre_if_uiActivated, dParent, { fz: 13, bg: 'red', fg: 'silver' }, ['donebutton', 'enabled'], 'b_submit');
	}
	if (isdef(mBy('b_restart_action'))) { let b = mBy('b_restart_action'); mAppend(dParent, b); }
	else mButton('restart action', () => turn_send_reload(G.otree.plturn), dParent, { fz: 13, bg: 'red', fg: 'silver' }, ['donebutton', 'enabled'], 'b_restart_action');
	if (items.length <= min) {
		uiActivated = false;
		for (let i = 0; i < items.length; i++) {
			A.selected.push(i);
			let a = items[i];
			mStyle(mBy(a.idButton), { bg: 'yellow' });
			if (isdef(a.idCard)) mClass(mBy(a.idCard), 'card_selected');
		}
		setTimeout(() => { if (goto_post) { ari_post_action(); } else { ari_pre_action(); } }, 500);
	} else if (is_admin()) {
		let movekey = G.otree.plturn + '_' + ITER;
		let selection_list = DA.auto_moves[movekey];
		if (nundef(selection_list)) selection_list = DA.auto_moves[ITER];
		if (isEmpty(selection_list)) return;
		uiActivated = false;
		let selection = selection_list.shift();
		let numbers = [];
		for (const el of selection) {
			if (el == 'last') {
				numbers.push(A.items.length - 1);
			} else if (isString(el)) {
				let commands = A.items.map(x => x.key);
				let idx = commands.indexOf(el);
				numbers.push(idx);
			} else numbers.push(el);
		}
		selection = numbers;
		setTimeout(() => {
			A.selected = selection;
			if (selection.length == 1) A.selected_key = A.items[A.selected[0]].key;
			a2_highlight_selected_items();
			if (A.goto_post) { ari_post_action(); } else { ari_pre_action(); }
		}, 1000);
	}
}
function a2_exchange_items(otree, o0, o1) {
	elem_from_to(o0.key, lookup(otree, o0.path.split('.')), lookup(otree, o1.path.split('.')));
	elem_from_to(o1.key, lookup(otree, o1.path.split('.')), lookup(otree, o0.path.split('.')));
}
function a2_get_all_hidden_building_items(uname) {
	let items = [];
	for (const gb of G[uname].buildings) {
		items = items.concat(a2_get_hidden_building_items(gb));
	}
	a2_reindex(items);
	return items;
}
function a2_get_build_items(uname) { return a2_get_hand_and_stall_items(uname); }
function a2_get_building_items(uname) {
	let gblist = G[uname].buildings;
	let items = [], i = 0;
	for (const o of gblist) {
		let name = o.type + ' ' + (o.list[0][0] == 'T' ? '10' : o.list[0][0]);
		o.div = o.container;
		let item = { o: o, a: name, key: o.list[0], friendly: name, path: o.path, index: i, ui: o.container };
		i++;
		items.push(item);
	}
	return items;
}
function a2_get_building_items_of_type(uname, types = ['farms', 'estates', 'chateaus']) {
	let gblist = G[uname].buildings.filter(x => types.includes(x.type));
	let items = [], i = 0;
	for (const o of gblist) {
		let name = o.type + ' ' + (o.list[0][0] == 'T' ? '10' : o.list[0][0]);
		o.div = o.container;
		let item = { o: o, a: name, key: o.list[0], friendly: name, path: o.path, index: i, ui: o.container };
		i++;
		items.push(item);
	}
	return items;
}
function a2_get_buildings(gblist) {
	let items = [], i = 0;
	for (const o of gblist) {
		let name = o.type + ' ' + (o.list[0][0] == 'T' ? '10' : o.list[0][0]);
		o.div = o.container;
		let item = { o: o, a: name, key: o.list[0], friendly: name, path: o.path, index: i, ui: o.container };
		i++;
		items.push(item);
	}
	return items;
}
function a2_get_coin_amounts(plturn) {
	let items = [];
	for (let i = 0; i <= G.otree[plturn].coins; i++) {
		let cmd = '' + i;
		let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null, index: i };
		items.push(item);
	}
	return items;
}
function a2_get_commands(plturn) {
	let avail = ari_get_actions(G.otree, plturn);
	let items = [], i = 0;
	for (const cmd of avail) {
		let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null, index: i };
		i++;
		items.push(item);
	}
	return items;
}
function a2_get_endgame(plturn) {
	let items = [], i = 0;
	for (const cmd of ['end game', 'go on']) {
		let item = { o: null, a: cmd, key: cmd, friendly: cmd, path: null, index: i };
		i++;
		items.push(item);
	}
	return items;
}
function a2_get_estates_chateaus_items(uname) { return a2_get_building_items_of_type(uname, ['estates', 'chateaus']); }
function a2_get_farms_estates_items(uname) { return a2_get_building_items_of_type(uname, ['farms', 'estates']); }
function a2_get_hand_and_stall_items(uname) {
	let items = a2_get_hand_items(uname);
	items = items.concat(a2_get_stall_items(uname));
	a2_reindex(items);
	return items;
}
function a2_get_hand_items(uname) {
	let items = [], i = 0;
	for (const o of G[uname].hand.items) {
		let item = { o: o, a: o.key, key: o.key, friendly: o.short, path: `${uname}.hand`, index: i };
		i++;
		items.push(item);
	}
	return items;
}
function a2_get_harvest_items(uname) {
	let items = []; let i = 0;
	for (const gb of G[uname].buildings) {
		if (isdef(gb.harvest)) {
			let d = gb.harvest;
			mStyle(d, { cursor: 'pointer', opacity: 1 });
			gb.div = d;
			let name = 'H' + i + ':' + (gb.list[0][0] == 'T' ? '10' : gb.list[0][0]);
			let item = { o: gb, a: name, key: name, friendly: name, path: gb.path, index: i };
			i++;
			items.push(item);
		}
	}
	return items;
}
function a2_get_hidden_building_items(b) {
	let items = [];
	for (let i = 1; i < b.items.length; i++) {
		let o = b.items[i];
		let item = { o: o, a: o.key, key: o.key, friendly: o.short, path: b.path + '.list', index: i - 1 };
		items.push(item);
	}
	return items;
}
function a2_get_market_items() {
	let items = [], i = 0;
	for (const o of G.market.items) {
		let item = { o: o, a: o.key, key: o.key, friendly: o.short, path: `market`, index: i };
		i++;
		items.push(item);
	}
	return items;
}
function a2_get_open_discard_items() {
	let items = [], i = 0;
	for (const o of G.open_discard.items) {
		let item = { o: o, a: o.key, key: o.key, friendly: o.short, path: `open_discard`, index: i };
		i++;
		items.push(item);
	}
	return items;
}
function a2_get_other_buildings(plturn) {
	let items = [], i = 0;
	for (const uname of G.otree.plorder) {
		if (uname == plturn) continue;
		items = items.concat(a2_get_buildings(G[uname].buildings));
	}
	a2_reindex(items);
	return items;
}
function a2_get_repair_items(uname) {
	let ihand = a2_get_hand_items(uname);
	let istall = a2_get_stall_items(uname);
	let irepair = a2_get_all_hidden_building_items(uname);
	irepair.map(x => face_up(x.o));
	let items = ihand.concat(istall).concat(irepair);
	a2_reindex(items);
	return items;
}
function a2_get_stall_items(uname) {
	let items = [], i = 0;
	for (const o of G[uname].stall.items) {
		let item = { o: o, a: o.key, key: o.key, friendly: o.short, path: `${uname}.stall`, index: i };
		i++;
		items.push(item);
	}
	return items;
}
function a2_get_trade_items(uname) {
	let items = a2_get_market_items(uname);
	items = items.concat(a2_get_stall_items(uname));
	for (const plname of G.otree.plorder) {
		if (plname != uname) items = items.concat(a2_get_stall_items(plname));
	}
	a2_reindex(items);
	return items;
}
function a2_highlight_selected_items() {
	for (const i of A.selected) {
		let a = A.items[i];
		mStyle(mBy(a.idButton), { bg: 'yellow' });
		if (isdef(a.idCard)) mClass(mBy(a.idCard), 'card_selected');
	}
}
function a2_pay_with_card(item) {
	let fen = Z.fen;
	let source = lookup(fen, item.path.split('.'));
	elem_from_to_top(item.key, source, fen.deck_discard);
	ari_reorg_discard(fen);
}
function a2_pay_with_coin(uplayer) {
	let fen = Z.fen;
	fen.players[uplayer].coins -= 1;
}
function a2_post_if_uiActivated() {
	if (!uiActivated) { console.log('ui is deactivated!!!'); return; }
	ari_post_action();
}
function a2_pre_if_uiActivated() {
	if (!uiActivated) { console.log('ui is deactivated!!!'); return; }
	ari_pre_action();
}
function a2_reindex(items) { let i = 0; items.map(x => { x.index = i; i++; }); }
function a2_select(ev) {
	if (!uiActivated) { console.log('ui is deactivated!!!'); return; }
	let id = evToId(ev);
	let a = A.di[id];
	A.selected = [a.index];
	A.selected_key = A.items[a.index].key;
	mStyle(mBy(a.idButton), { bg: 'yellow' });
	if (isdef(a.idCard)) mClass(mBy(a.idCard), 'card_selected');
	if (A.goto_post) ari_post_action(); else ari_pre_action();
}
function a2_toggle_selection(ev) {
	if (!uiActivated) { console.log('ui is deactivated!!!'); return; }
	let id = evToId(ev);
	let a = A.di[id];
	if (A.selected.includes(a.index)) {
		removeInPlace(A.selected, a.index);
		mStyle(mBy(a.idButton), { bg: 'grey' });
		if (isdef(a.idCard)) mClassRemove(mBy(a.idCard), 'card_selected');
	} else {
		A.selected.push(a.index);
		mStyle(mBy(a.idButton), { bg: 'yellow' });
		if (isdef(a.idCard)) mClass(mBy(a.idCard), 'card_selected');
	}
}
function Accel() {
	var ax;
	var ay;
	var az;
	var rotX;
	var rotY;
	var rotZ;
	if (window.DeviceMotionEvent == undefined) {
		console.log("This program requires an accelerometer");
	} else {
		window.ondevicemotion = function (event) {
			this.ax = event.accelerationIncludingGravity.x;
			this.ay = event.accelerationIncludingGravity.y;
			this.az = event.accelerationIncludingGravity.z;
			rotation = event.rotationRate;
			if (rotation != null) {
				this.rotX = Math.round(rotation.alpha);
				this.rotY = Math.round(rotation.beta);
				this.rotZ = Math.round(rotation.gamma);
			}
		}
	}
	this.getAX = function () {
		if (window.ax == null) {
			window.ax = 0;
		}
		return window.ax;
	}
	this.getAY = function () {
		if (window.ay == null) {
			window.ay = 0;
		}
		return window.ay;
	}
	this.getAZ = function () {
		if (window.az == null) {
			window.az = 0;
		}
		return window.az;
	}
	this.getRotX = function () { return rotX; }
	this.getRotY = function () { return rotY; }
	this.getRotZ = function () { return rotZ; }
}
function accelerate(n) {
	meme.gravity = n;
}
function ack_player(plname) {
	let [fen, uplayer, pl] = [Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];
	assertion(sameList(Z.turn, [plname]), "ack_player: wrong turn");
	if (plname == fen.lastplayer || fen.players[uplayer].buy == true) {
		let func = window[fen.callbackname_after_ack];
		if (isdef(func)) func();
	} else {
		Z.turn = [get_next_in_list(plname, fen.ack_players)];
	}
	turn_send_move_update();
}
function action_close(item) {
	console.log('HALLO CLOSE!!!!!!!!!!!!!!!')
	let o = fromLocalStorage('app');
	let duration = get_now() - o.tStart;
	let factor = valf(item.val, 3);
	let secs = Math.round(duration / 1000);
	let mins = Math.round(secs / 60);
	let res = mins;
	let points = Math.round(res * factor / 5); if (points == 0) points = 1;
	let t = new Date(o.tStart).toTimeString().substring(0, 5);
	let s = `a:${t},${res},${points}`;
	console.log('string:', s);
	setTimeout(() => navigator.clipboard.writeText(s), 100)
}
function action_open(item) {
	console.log('HALLO OPEN!!!!!!!!!!!!!!!')
	let o = { tStart: get_now(), app: 'action' };
	toLocalStorage(o, 'app');
	let d = iDiv(item);
	let d1 = mDiv(d, { fz: 15, position: 'absolute', top: 2, right: 4 }, null, new Date(o.tStart).toTimeString().substring(0, 5));
	let d2 = mGrid(3, 3, d, { gap: 3, matop: 12 });
	for (const n of [.5, 1, 2, 3, 5, 8, 12, 20, 50]) {
		let b = mButton(n, () => item.val = n, d2, { cursor: 'pointer' });
	}
}
function actionOrWaiting(player, dAction, callback) {
	if ('actions' in dAction) {
		unitTestSender('found actions for', player);
		dAction.info.game.player = player;
		callback(dAction);
	} else if ('waiting_for' in dAction) {
		let waiting = getSet(dAction, 'waiting_for');
		unitTestSender('NEED PLAYER CHANGE!!!!!!!!!!!!', waiting);
		if (!empty(waiting)) {
			let newPlayer = waiting[0];
			sender.send('status_test/' + newPlayer, dNewPlayer => {
				dAction = extend(true, dAction, dNewPlayer);
				unitTestSender('action+status data for', newPlayer, dAction);
				dAction.info.game.player = newPlayer;
				callback(dAction);
			});
		} else {
			alert('empty waiting_for and no actions!!!');
		}
	} else {
		unitTestSender('NEED TO SEND EMPTY ACTION!!!!!!!!!!!!!', player);
		alert('sending empty action!!!', player);
		sendAction(player, ['pass'], dEMpty => {
			dAction = extend(true, dAction, dEmpty);
			callback(dAction);
		});
	}
}
function actions_off() {
	hide('dLeftSide');
	delete Session.is_actions;
	Actions = [];
}
function actions_on() {
	if (!isdef(mBy('dLeiste'))) initActionPanel();
	Session.is_actions = true;
	Actions = [];
}
function activate_a_game() {
	if (Z.stage == 'click') {
		show_MMM('back to normal!!!!');
		mButton('single turn move', agmove_single, dTable, { margin: 20 });
		mButton('clear players', agmove_clear_all, dTable, { margin: 20 });
		mButton('clear first', agmove_clear_first, dTable, { margin: 20 });
	} else if (Z.stage == 'clear') {
		agmove_startmulti();
	} else {
		mButton('indiv move', agmove_indiv, dTable, { margin: 20 });
	}
}
function activate_actions(r, uname) {
	console.log('actions', r.actions);
	if (!isEmpty(DA.staged_moves)) {
		dastaged(r, uname, 500);
	} else if (r.actions.length == 1) {
		autoselect_action(r, r.actions[0], uname);
	} else {
		for (const a of r.actions) {
			if (isdef(Items[a])) {
				let item = R.get_item(a);
				let d = iDiv(item);
				mStyle(d, { cursor: 'pointer' });
				d.onclick = ev => onselect_action(ev, r, a, uname);
			} else if (a == 'pass') {
				activate_pass_button(a, uname);
			} else if (startsWith(a, 'draw')) {
				let path = stringAfter(a, '.');
				let item = R.get_item(path);
				let d = iDiv(item);
				mStyle(d, { cursor: 'pointer' });
				d.onclick = ev => onselect_action(ev, r, a, uname);
				activate_draw_button(r, a, uname);
			}
		}
		highlight_player(uname);
		uiActivated = true;
	}
}
function activate_draw_button(r, action, uname) {
	mButton('draw', ev => select_action(r, action, uname), dActions, { fz: 13 }, ['donebutton', 'enabled'], 'd_draw');
}
function activate_pass_button(r, action, uname) {
	mButton('pass', ev => select_action(r, action, uname), dActions, { fz: 13 }, ['donebutton', 'enabled'], 'd_pass');
}
function activate_playerstats(items) {
	let fen = Z.fen;
	for (const plname in fen.players) {
		let ui = items[plname];
		let d = iDiv(ui);
		d.onclick = () => { switch_uname(plname); onclick_reload(); }
	}
}
function activate_ui() {
	if (uiActivated) { DA.ai_is_moving = false; return; }
	uiActivated = true; DA.ai_is_moving = false;
}
function activateChat(username) {
	if (DA.activeChat == username) { console.log('already active:', username); return; }
	if (isdef(DA.activeChat) && DA.activeChat != username) deactivateChat(DA.activeChat);
	DA.activeChat = username;
	let active = ActiveChats[username];
	let othername = username;
	let mename = Username;
	let other = active.userdata;
	let me = Userdata;
	if (nundef(active.div)) {
		let dcontactlist = mBy('dChat');
		other.bg = randomColor();
		other.fg = colorIdealText(other.bg);
		let dContact = presentInChatList(other, dcontactlist);
		active.div = dContact;
		mStyle(dContact, { bg: other.bg, fg: other.fg });
		dContact.onclick = () => activateChat(username);
	} else {
		console.log('es gibt schon ein entry fuer', username, 'in chat menu', iDiv(active), '\nactive', active)
	}
	mClass(active.div, 'activeChat');
	let d = showChatWindow();
	clearElement(d);
	console.log('add title to chatWindow!');
	for (const msg of active.messages) {
		let className = msg.sender == othername ? 'message_left' : 'message_right';
		let path = getProfileImagePath(msg.sender == othername ? other : me);
		let d1 = mDiv(d);
		if (msg.sender == othername) mStyle(d1, { bg: other.bg, fg: other.fg });
		let dImg = mImg(path, d1, { w: 40, h: 40, rounding: '50%' }, 'profile_img');
		let dtext = mText(msg.message, d1, {});
		mStyle(d1, { 'box-shadow': '0px 0px 10px #aaa', rounding: 10, padding: 10, matop: 10, display: 'flex', gap: 10, float: msg.sender == othername ? 'left' : 'right', w: '60%' });
	}
}
function ActivateChessWidgets() {
	StopThinking();
	$("#SetFen").click(function () {
		var fenStr = $("#fenIn").val();
		ParseFen(fenStr);
		PrintBoard();
		SetInitialBoardPieces();
		GameController.PlayerSide = brd_side;
		CheckAndSet();
		EvalPosition();
		NewGameAjax();
	});
	$("#UndoButton").click(function () {
		console.log('Undo request... brd_hisPly:' + brd_hisPly);
		if (brd_hisPly > 0) {
			TakeMove(); if (brd_hisPly > 0) TakeMove();
			brd_ply = 0;
			SetInitialBoardPieces();
			$("#currentFenSpan").text(BoardToFen());
		}
	});
	$("#HintButton").click(function () {
		FLAG_HINT_ONLY = true;
		let move = PreSearch();
	});
	$("#SearchButton").click(function () {
		GameController.PlayerSide = brd_side ^ 1;
		PreSearch();
	});
	$("#FlipButton").click(function () {
		GameController.BoardFlipped ^= 1;
		console.log("Flipped:" + GameController.BoardFlipped);
		SetInitialBoardPieces();
	});
	$("#EndGameButton").click(function () {
		let fen = chooseRandom(FenPositionList).FEN;
		console.log('fen', fen)
		NewGame(fen);
		NewGameAjax();
	});
	$("#NewGameButton").click(function () {
		NewGame();
		NewGameAjax();
	});
}
function activateFocusGroup(iFocus) {
	if (isdef(iFocus)) Goal.iFocus = iFocus;
	if (Goal.iFocus === null) {
		console.log('nothing to activate');
		return;
	}
	let g = Goal.words[Goal.iFocus];
	g.div.style.backgroundColor = 'black';
}
function activateML() {
	onkeypress = ev => {
		clearFleetingMessage();
		if (uiPaused || ev.ctrlKey || ev.altKey) return;
		let charEntered = ev.key.toString();
		if (!isAlphaNum(charEntered)) return;
		Selected = { lastLetterEntered: charEntered.toUpperCase() };
		if (nMissing == 1) {
			let d = Selected.feedbackUI = inputs[0].div;
			Selected.lastIndexEntered = inputs[0].index;
			Selected.inp = inputs[0];
			d.innerHTML = Selected.lastLetterEntered;
			mRemoveClass(d, 'blink');
			let result = buildWordFromLetters(mParent(d));
			evaluate(result);
		} else {
			let ch = charEntered.toUpperCase();
			for (const inp of inputs) {
				if (inp.letter == ch) {
					Selected.lastIndexEntered = inp.index;
					Selected.inp = inp;
					let d = Selected.feedbackUI = inp.div;
					d.innerHTML = ch;
					mRemoveClass(d, 'blink');
					removeInPlace(inputs, inp);
					nMissing -= 1;
					break;
				}
			}
			if (nundef(Selected.lastIndexEntered)) {
				showFleetingMessage('you entered ' + Selected.lastLetterEntered)
				say('this letter does NOT belong to the word!')
			}
			showFleetingMessage(composeFleetingMessage(), 3000);
		}
	}
}
function activateOn(item, event, handler) {
	let d = item.div;
	mStyleX(d, { cursor: 'pointer' });
	d[event] = ev => { handler(ev); evaluate() };
	item.isActive = true;
}
async function activateSP() {
	if (isSpeakerRunning) {
		setTimeout(activateSP, 300);
	} else {
		setTimeout(() => record(currentLanguage, bestWord), 100);
	}
}
async function activateSPA() {
	OnMicrophoneReady = setTimeout(() => {
		say(bestWord, .7, 1, 1, false, 'random');
	}, DELAY_BETWEEN_MIKE_AND_SPEECH);
	setTimeout(() => record(currentLanguage, bestWord), 100);
}
function activateTC() {
	uiActivatedTC = true;
}
function activateTests(commaSepString) {
	addIfComma(commaSepString, activatedTests);
}
function activateTooltips() {
	for (const oid in G.table) {
		if (isdef(getFirstVisual(oid))) createTooltip(oid);
	}
	for (const oid in G.players) {
		if (isdef(getFirstVisual(oid))) createTooltip(oid);
	}
}
function activateTooltips_hallo() {
	for (const oid in G.table) {
		if (isdef(getVisual(oid))) createTooltip(oid);
	}
	for (const oid in G.players) {
		if (isdef(getVisual(oid))) createTooltip(oid);
	}
}
function activateTP() {
	uiActivated = true;
}
function activateUi() {
	Selected = null;
	uiActivated = true;
	G.instance.activate();
}
function activateUis(R) {
	for (const uid in R.uiNodes) {
		let n = R.uiNodes[uid];
		if (isdef(n.oid) && isdef(n.ui)) {
			n.act.activate(highSelfAndRelatives, unhighSelfAndRelatives, selectUid);
		}
	}
	R.isUiActive = true;
}
function activateUserSelection() {
	hide(document.getElementById('dFrozen'));
	show(document.getElementById('dActive'));
	hide(document.getElementById('bNextPlayer'));
	show(document.getElementById('uiActiveButtons'));
	show(document.getElementById('ui2Buttons'));
	show(document.getElementById('uiEditButtons'));
}
function activateWaitingForServer() {
	show(document.getElementById('dFrozen'));
	hide(document.getElementById('dActive'));
	hide(document.getElementById('bNextPlayer'));
	hide(document.getElementById('uiActiveButtons'));
	hide(document.getElementById('ui2Buttons'));
	hide(document.getElementById('uiEditButtons'));
}
function activateWP() {
	inputBox.onkeyup = ev => {
		if (ev.ctrlKey || uiPaused) return;
		if (ev.key === "Enter") {
			ev.cancelBubble = true;
			evaluate(ev);
		}
	};
	inputBox.focus();
}
function activationUI() { uiPaused &= ~beforeActivationMask; }
function actualCenter(elem, relToParent = false, elRelTo) {
	let b = getBounds(elem, relToParent, elRelTo);
	return { x: Math.round(b.left + b.width / 2), y: Math.round(b.top + b.height / 2) };
}
function actualHeight(elem) { return Math.round(getBounds(elem).height); }
function actualLeft(elem, relToParent = false, elRelTo) { return Math.round(getBounds(elem, relToParent, elRelTo).left); }
function actualTop(elem, relToParent = false, elRelTo) { return Math.round(getBounds(elem, relToParent, elRelTo).top); }
function actualWidth(elem) { return Math.round(getBounds(elem).width); }
function add_a_correct_building_to(fen, uname, type) {
	let ranks = lookupSet(DA, ['test', 'extra', 'ranks'], 'A23456789TJQK');
	if (ranks.length <= 0) {
		console.log('===>ranks empty!', ranks)
		ranks = lookupSetOverride(DA, ['test', 'extra', 'ranks'], 'A23456789TJQK');
	}
	let r = ranks[0]; lookupSetOverride(DA, ['test', 'extra', 'ranks'], ranks.substring(1));
	let keys = [`${r}Sn`, `${r}Hn`, `${r}Cn`, `${r}Dn`];
	if (type != 'farm') keys.push(`${r}Cn`); if (type == 'chateau') keys.push(`${r}Hn`);
	fen.players[uname].buildings[type].push({ list: keys, h: null });
}
function add_a_schwein(fen, uname) {
	let type = rChoose(['farm', 'estate', 'chateau']);
	let keys = deck_deal(fen.deck, type[0] == 'f' ? 4 : type[0] == 'e' ? 5 : 6);
	fen.players[uname].buildings[type].push({ list: keys, h: null });
}
function add_agent_at(map, p1) {
	if (M.state != 'a') { console.log('wrong state!', M.state); return; }
	let a = new Agent(map, .0001, false, null, p1);
	lookupAddToList(M, ['agents'], a);
	console.log("adding agent at", p1);
}
function add_auction_history() {
	let [fen, plorder] = [Z.fen, Z.plorder];
	for (const plname of fen.plorder) {
		if (nundef(fen.buy[plname])) continue;
		ari_history_list([`${plname} buys ${fen.buy[plname].a} for ${fen.second_most}`], 'auction');
	}
}
function add_card_to_group(card, oldgroup, oldindex, targetcard, targetgroup) {
	card.groupid = targetgroup.id;
	if (card.source == 'hand') {
		let hand = UI.players[Z.uplayer].hand;
		removeInPlace(hand.items, card);
	}
	card.source = 'group';
	mDroppable(iDiv(card), drop_card_fritz, dragover_fritz);
	if (nundef(targetcard)) {
		targetgroup.ids.push(card.id);
		mAppend(iDiv(targetgroup), iDiv(card));
	} else {
		let index = targetgroup.ids.indexOf(targetcard.id) + 1;
		targetgroup.ids.splice(index, 0, card.id);
		mClear(iDiv(targetgroup));
		for (let i = 0; i < targetgroup.ids.length; i++) {
			let c = Items[targetgroup.ids[i]];
			mAppend(iDiv(targetgroup), iDiv(c));
		}
	}
	resplay_container(targetgroup);
}
function add_click_set_agent() { M.state = 'a'; M.map.on('click', e => { add_agent_at(M.map, [e.latlng.lat, e.latlng.lng]) }); }
function add_edit(x, y, text = '', bg = 'random') {
	let d = mDiv(dTable, { bg: bg, fg: 'contrast', x: x, y: y, position: 'absolute', padding: 10, wmin: 10, }, getUID(), text);
	DA.edits.push(d);
	add_interaction(d);
}
function add_element(f) {
	if (tree.length == 0) { addlayer(); return; }
	let root = firstCond(tree, x => !x.finished);
	if (!root) {
		console.log('tree is finished!');
		return;
	}
	if (root) f(root);
}
function add_havecode_content(dParent) {
	let d1 = mDiv(dParent);
	let [dl, dr] = mColFlex(d1, [4, 1]);
	dr.innerHTML = img_html('verify_right.jpg');
	let d2 = mDiv(dl, { w: '100%', padding: 12, box: true });
	let d3 = mDiv(d2, { fz: 22, weight: 900, rounding: 4, hmin: 50, border: 'none' }, null, 'Enter Authorization Code');
	let d4 = mDiv(dl, { w: '100%', padding: 12, box: true, fz: 14, family: 'Verdana' }, null, 'An authorization code was sent to your phone');
	let d5 = mDiv(dl, { w: '100%', matop: 12, mabottom: 20, hpadding: 12, box: true, fz: 14, family: 'Verdana' }, null, 'XXX-XXX-0297');
	let html = `
    <div>
      <form action="javascript:onclick_boa_submit_code();">
        <div>
          <label for="inpAuthocode">Authorization code</label><br>
          <input style="border:1px dotted silver;padding:4px" id="inpAuthocode" name="authocode" value="XXXXXX" type="text" />
          <div class="clearboth"></div>
        </div>
        <div style="font-size:12px;margin:30px 0px">The code expires 10 minutes after you request it.</div>
        <a style="font-size:12px;">Request another authorization code</a>
        <div style="margin-top:30px"><button id='bSubmit'>SUBMIT</button><button id='bCancel'>CANCEL</button></div>
      </form>
    </div>
  `;
	let d6 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz: 14, family: 'Verdana' }, null, html);
	let bSubmit = document.getElementById('bSubmit');
	let bStyle = { vpadding: 6, hpadding: 20, fz: 20, rounding: 6, maright: 25, weight: 'bold' };
	mStyle(bSubmit, bStyle);
	mStyle(bCancel, bStyle); mStyle(bCancel, { fg: 'grey', border: 'grey' })
	mClass(bSubmit, 'btn-bofa-blue');
	bCancel.onclick = onclick_boa_cancel;
}
function add_interaction(d) {
	d.setAttribute('contentEditable', true);
	d.style.outline = 'none';
	d.onkeydown = function (e) {
		DA.tabKeyPressed = e.keyCode == 9;
		if (DA.tabKeyPressed) {
			e.preventDefault();
			return;
		} else {
		}
	};
	d.onkeyup = function (e) {
		if (DA.tabKeyPressed) {
			let idx = DA.edits.indexOf(e.target);
			let next = (idx + 1) % DA.edits.length;
			if (next != idx) DA.edits[next].focus();
			e.preventDefault();
			return;
		}
	};
	d.onfocus = e => {
		if (DA.focusElement != e.target && isdef(DA.focusElement)) {
			let el = DA.focusElement;
			if (isEmpty(el.innerHTML)) {
				removeInPlace(DA.edits, el);
				el.remove();
			}
		}
		DA.focusElement = e.target;
	};
	d.focus();
}
function add_make_payments_button(ev) {
	let id = evToClosestId(ev);
	let inp = mBy(id);
	if (isdef(DA.prevHidden)) { mClear(DA.prevHidden); }
	let dHidden = inp.parentNode.parentNode.parentNode.parentNode.parentNode.lastChild;
	mClear(dHidden);
	let d1 = mCard(dHidden, { w: '90%', padding: 10, box: true });
	let el = mDiv(d1, { cursor: 'pointer' }, null, `<span class="btn-bofa btn-bofa-blue btn-bofa-blue-lock">Make Payments</span>`);
	el.onclick = () => make_payments_challenge_eval(inp);
	DA.prevHidden = dHidden;
}
function add_new_user(udata, save = true) {
	console.log('WILL NOT ADD NEW USERS AT THIS TIME!!!', udata); return;
	console.assert(isDict(udata) && isdef(udata.name) && isString(udata.name) && udata.name.length < 50, 'CANNOT ADD THIS WEIRED USER ' + udata.name);
	DB.users[udata.name] = udata;
	if (save) db_save();
	return udata;
}
function add_players() {
	let res = prompt('enter player names to be added: ');
	let parts = splitAtAnyOf(res, ' ,');
	let list = Session.game_options.players.slice(1);
	for (const p of parts) {
		let name = p.toLowerCase().trim();
		if (isdef(DB.users[name])) addIf(list, name);
	}
	list.sort(); list.unshift(Session.cur_user);
	populate_players(list);
}
function add_rumors_to_buildings(o) {
	fen = o.fen;
	for (const plname of fen.plorder) {
		let buildings = fen.players[plname].buildings;
		for (const type in buildings) {
			for (const b of buildings[type]) {
				if (type == 'farm') b.h = rCard('n');
				b.rumors = arrFunc(2, () => rCard('r'));
			}
		}
	}
}
function add_schwein(card, fenbuilding, uibuilding) {
	if (isdef(uibuilding)) add_ui_schwein(card, uibuilding.schweine);
	let ckey = isString(card) ? card : card.key;
	let index = isString(card) ? fenbuilding.list.indexOf(ckey) : card.index;
	fenbuilding.schweine.push(index);
	console.log('fen schweine', fenbuilding.schweine);
}
function add_to_chain(list) { DA.chain = DA.chain.concat(list); }
function add_transaction(cmd) {
	if (!DA.simulate) start_transaction();
	DA.transactionlist.push(cmd);
}
function add_ui_schwein(item, uischweine) {
	uischweine.push(item);
	mStyle(iDiv(item), { position: 'relative' });
	miPic('pig', iDiv(item), { position: 'absolute', top: 30, left: 0, fz: 30 });
	face_up(item);
}
async function add_users_to_sql_db(not_in_sql_db) { to_server(not_in_sql_db, 'add_users'); }
function add_verify_content(dParent) {
	let d1 = mDiv(dParent);
	let [dl, dr] = mColFlex(d1, [4, 1]);
	dr.innerHTML = img_html('verify_right.jpg');
	let d2 = mDiv(dl, { w: '100%', padding: 12, box: true });
	let d3 = mDiv(d2, { fz: 22, weight: 900, rounding: 4, hmin: 50, border: '3px solid black' }, null, 'Request Authorization Code');
	let d4 = mDiv(dl, { w: '100%', padding: 12, box: true, fz: 14, family: 'Verdana' }, null, 'To verify your identity, we need to send you an authorization code');
	let d5 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz: 14, family: 'Verdana' }, null, 'Select a Phone Number');
	let st1 = `padding:12px;font-size:18px;`;
	let stradio = `margin:5px 10px;color:black`;
	let html = `
    <div id='dPhoneContact' style="${st1}">
      <fieldset>
        <div style="${stradio}">
          <div>
            <input class="multipleContact" id="tlpvt-text1" name="phoneContact" value="text_1" type="radio" />
            <label for="tlpvt-text1">XXX-XXX-7382</label>
            <div class="clearboth"></div>
          </div>
        </div>
        <div style="${stradio}">
          <div class="phone-num">
            <input class="multipleContact" id="tlpvt-text2" name="phoneContact" value="text_2" type="radio" />
            <label class="TL_NPI_L1" for="tlpvt-text2">XXX-XXX-9671</label>
            <div class="clearboth"></div>
          </div>
        </div>
        <div style="${stradio}">
          <div class="phone-num">
            <input class="multipleContact" id="tlpvt-text3" name="phoneContact" value="text_3" type="radio" />
            <label class="TL_NPI_L1" for="tlpvt-text3">XXX-XXX-0297</label>
            <div class="clearboth"></div>
          </div>
        </div>
      </fieldset>
    </div>
  `;
	mAppend(dl, mCreateFrom(html));
	let d7 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz: 14, family: 'Verdana' }, null, 'How would you like to receive it?');
	html = `
    <div id='dTextOrPhone' style="${st1}">
      <fieldset>
        <div style="${stradio}">
          <div>
            <input class="multipleContact" id="tph-text1" name="textorphone" value="text_1" type="radio" checked />
            <label for="tph-text1">Text message</label>
            <div class="clearboth"></div>
          </div>
        </div>
        <div style="${stradio}">
          <div class="phone-num">
            <input class="multipleContact" id="tph-text2" name="textorphone" value="text_2" type="radio" />
            <label class="TL_NPI_L1" for="tph-text2">Phone call</label>
            <div class="clearboth"></div>
          </div>
        </div>
      </fieldset>
    </div>
  `;
	mAppend(dl, mCreateFrom(html));
	let d9 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz: 14, family: 'Verdana' }, null, 'The code expires 10 minutes after you request it');
	let d10 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz: 14, family: 'Verdana' }, null, '<a>Having trouble receiving you code by phone?</a>');
	let d11 = mDiv(dl, { w: '100%', matop: 12, hpadding: 12, box: true, fz: 14, family: 'Verdana' }, null, 'You are consenting to be contacted at the phone number selected for the purpose of receiving an authorization code. If you selected text message, Wireless and text message fees may apply from you carrier.<br>Supported carriers include AT&T, Sprint, T-Mobile, US Cellular, Verizon, or any other branded wireless operator.');
	let d12 = mDiv(dl, { hpadding: 12, matop: 24, gap: 12 }); mFlex(d12);
	let bstyle = { vpadding: 12, hpadding: 20, fz: 20, fg: 'grey', rounding: 6, maright: 25, weight: 'bold' };
	mButton('SEND CODE', onclick_boa_sendcode, d12, bstyle);
	mButton('CANCEL', onclick_boa_cancel, d12, bstyle);
}
function addAdjacencyFromTo(r1, r2, dir, rect) {
	let house = Items[r1.house];
	if (!r2) rect = rrto(rect, house.rect);
	lookupAddToList(r1, ['walls', dir], { rect: rect, dir: dir, room: r2 ? r2.id : r2, door: null });
	let dir2 = r2 ? getOppDir(dir) : dir;
	lookupAddToList(r2 ? r2 : Items[r1.house], ['walls', dir2], { rect: rect, dir: dir2, room: r1.id, door: null });
}
function addAll(akku, other) {
	for (const el of other) {
		akku.push(el);
	}
	return akku;
}
function addAREA(id, o) {
	if (AREAS[id]) {
		error('AREAS ' + id + ' exists already!!! ');
		error(o);
		return;
	}
	AREAS[id] = o;
}
function addAsSoundToDatabase(info, answer) { }
function addBadge(dParent, level, clickHandler, animateRubberband = false) {
	let fg = '#00000080';
	let textColor = 'white';
	let isText = true; let isOmoji = false;
	let i = level - 1;
	let key = levelKeys[i];
	let k = replaceAll(key, ' ', '-');
	let item = getItem(k);
	let label = item.label = "level " + i;
	let h = window.innerHeight;
	let sz = h / 14;
	let options = _simpleOptions({ w: sz, h: sz, fz: sz / 4, fzPic: sz / 2, bg: levelColors[i], fg: textColor });
	options.handler = clickHandler;
	let d = makeItemDiv(item, options);
	mAppend(dParent, d);
	item.index = i;
	badges.push(item);
	return arrLast(badges);
}
function AddBlackPawnCaptureMove(from, to, cap) {
	if (RanksBrd[from] == RANKS.RANK_2) {
		AddCaptureMove(MOVE(from, to, cap, PIECES.bQ, 0));
		AddCaptureMove(MOVE(from, to, cap, PIECES.bR, 0));
		AddCaptureMove(MOVE(from, to, cap, PIECES.bB, 0));
		AddCaptureMove(MOVE(from, to, cap, PIECES.bN, 0));
	} else {
		AddCaptureMove(MOVE(from, to, cap, PIECES.EMPTY, 0));
	}
}
function AddBlackPawnQuietMove(from, to) {
	if (RanksBrd[from] == RANKS.RANK_2) {
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.bQ, 0));
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.bR, 0));
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.bB, 0));
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.bN, 0));
	} else {
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.EMPTY, 0));
	}
}
function addBoard(R) { R.initRound(); reAddServerObject('board'); }
function addBoatInteraction(id) {
	let mobj = UIS[id];
	mobj.addClickHandler('elem', onClickSelectTuple);
	mobj.addMouseEnterHandler('title', (x, pName) => x.high(pName));
	mobj.addMouseLeaveHandler('title', (x, pName) => x.unhigh(pName));
}
function addBorder(elem, color, thickness) {
	elem.style.border = color + ' ' + thickness + 'px solid';
	elem.style.boxSizing = 'border-box';
}
function addByKey(oNew, oOld, except) {
	for (const k in oNew) {
		let val = oNew[k];
		if (isdef(except) && except.includes(k) || !isNumber(val)) continue;
		oOld[k] = isdef(oOld[k]) ? oOld[k] + val : val;
	}
}
function AddCaptureMove(move) {
	brd_moveList[brd_moveListStart[brd_ply + 1]] = move;
	brd_moveScores[brd_moveListStart[brd_ply + 1]++] = MvvLvaScores[CAPTURED(move) * 14 + brd_pieces[FROMSQ(move)]] + 1000000;
}
function addCard(c, deck, top = true) { top ? deck.push(c) : deck.unshift(c); }
function addCardsToMainPlayer(n = 1) {
	if (GAME != 'catan') return;
	for (const plid in serverData.players) {
		let res = [];
		for (let i = 0; i < n; i++) {
			let card = {
				id: getUID(),
				short_name: 'K',
				obj_type: 'card',
				generic_type: 'card'
			};
			res.push({ _obj: card.id });
			serverData.table[card.id] = card;
		}
		let pl = serverData.players[plid];
		res = GAME == 'catan' ? pl.devcards._set.concat(res) : pl.hand._set.concat(res);
		if (GAME == 'catan') pl.devcards = { _set: res }; else pl.hand = { _set: res };
		break;
	}
}
function addCardsToPlayers(n = 1) {
	for (const plid in serverData.players) {
		let res = [];
		for (let i = 0; i < n; i++) {
			let card = {
				id: getUID(),
				short_name: 'K',
				obj_type: 'card',
				generic_type: 'card'
			};
			res.push({ _obj: card.id });
			serverData.table[card.id] = card;
		}
		let pl = serverData.players[plid];
		res = GAME == 'catan' ? pl.devcards._set.concat(res) : pl.hand._set.concat(res);
		if (GAME == 'catan') pl.devcards = { _set: res }; else pl.hand = { _set: res };
	}
}
function addCardTo(d) { }
function addCardToCollectionArea(oid, collectionAreaName) {
	let idCollection = getIdArea(collectionAreaName);
	let isCard = getMainId(oid);
	let msCard = UIS[isCard];
	let msCollection = UIS[idCollection];
	msCard.hand = idCollection;
	msCard.collectionKey = msCollection.collectionKey;
	if (nundef(msCollection.numCards)) {
		msCollection.numCards = 1;
		msCollection.dx = 0;
		msCollection.cards = [oid];
	} else {
		msCollection.numCards += 1;
		msCollection.cards.push(oid);
	}
	let n = msCollection.numCards;
	msCard.zIndex = n;
	msCard.attach('hand');
	let hCard = msCard.elem.offsetHeight;
	let bounds = getBounds(msCard.elem);
	let hCard1 = bounds.height;
	let hHand = getBounds(msCollection.elem).height;
	let partHand = msCollection.parts['hand'];
	if (isdef(partHand)) hHand -= getBounds(partHand, true).y;
	msCollection.hHand = hHand;
	let wCard = msCard.elem.offsetWidth;
	let scale = 1;
	if (hCard >= hHand) {
		scale = hHand / hCard;
		msCard.elem.style.transform = `scale(${scale})`;
		msCard.elem.style.transformOrigin = '0% 0%';
	}
	msCollection.scale = scale;
	wCard = msCard.elem.offsetWidth;
	let wReal = wCard * scale;
	let hReal = hCard * scale;
	msCollection.wCard = wReal;
	msCollection.hCard = hReal;
	repositionCards(msCollection);
}
function addCardToHand(oid, areaName) {
	let idHandMS = getIdArea(areaName);
	let idCardMS = getMainId(oid);
	let mobj = UIS[idCardMS];
	let msHand = UIS[idHandMS];
	mobj.hand = idHandMS;
	if (nundef(msHand.numCards)) {
		msHand.numCards = 1;
		msHand.dx = 0;
		msHand.cards = [oid];
	} else {
		msHand.numCards += 1;
		msHand.cards.push(oid);
	}
	let n = msHand.numCards;
	mobj.zIndex = n;
	mobj.attach('hand');
	let hCard = mobj.elem.offsetHeight;
	let bounds = getBounds(mobj.elem);
	let hCard1 = bounds.height;
	let hHand = getBounds(msHand.elem).height;
	let partHand = msHand.parts['hand'];
	if (isdef(partHand)) hHand -= getBounds(partHand, true).y;
	msHand.hHand = hHand;
	let wCard = mobj.elem.offsetWidth;
	let scale = 1;
	if (hCard >= hHand) {
		scale = hHand / hCard;
		mobj.elem.style.transform = `scale(${scale})`;
		mobj.elem.style.transformOrigin = '0% 0%';
	}
	msHand.scale = scale;
	wCard = mobj.elem.offsetWidth;
	let wReal = wCard * scale;
	let hReal = hCard * scale;
	msHand.wCard = wReal;
	msHand.hCard = hReal;
	_repositionCards(msHand);
}
function addCatsToKeys() {
	console.log('Syms', Syms);
	for (const ksk in KeySets) {
		for (const k of KeySets[ksk]) {
			let info = Syms[k]
			lookupAddIfToList(info, ['cats'], ksk);
		}
	}
	downloadAsYaml(Syms, 'symsWithCats');
}
function addChat(msg) { addListItem('chatEvent', msg); }
function addClass(el, clName) { if (!el) return; el.classList.add(clName); }
function addClassInfo(ui, n) {
	if (isdef(ui.firstChild)) {
		let cl1 = Array.from(ui.firstChild.classList); cl1 = isEmpty(cl1) ? cl1 : cl1.join(',');
		let cl = Array.from(ui.classList); cl = isEmpty(cl) ? cl : cl.join(',');
		n.class = { pre: cl1, top: cl };
	} else {
		let cl = Array.from(ui.classList); cl = isEmpty(cl) ? cl : cl.join(',');
		n.class = cl;
	}
}
function addCodeBlock(path, byKey, ckeys, kw, chunk, fname, region, blocktype, idx) {
	let prev = lookup(byKey, [kw]);
	let o = { key: kw, code: chunk, path: path, fname: fname, region: region ?? fname, type: blocktype, idx: idx++ };
	let codechange = !prev || prev.code != o.code;
	if (prev) {
		console.log('DUPLICATE', kw, '\n', path, prev.path, 'codechange', prev.code == o.code);
		if (prev.type != o.type) { console.log('... type change from', prev.type, 'to', o.type); }
	} else { ckeys.push(kw); }
	if (codechange) lookupSetOverride(byKey, [kw], o);
}
function addColorPicker(c) {
	let form = mBy('myform');
	let img = mBy('imgPreview');
	let picker = mColorPickerBehavior(colorFrom(c), img, form,
		(a) => { DA.newColor = a; DA.colorChanged = true; },
		{ w: 322, h: 45, bg: 'green', rounding: 6, margin: 'auto', align: 'center' });
	if (is_online()) {
		img.ondragover = img.ondrop = img.ondragleave = handle_drag_and_drop;
	}
	mBy('img_dd_instruction').style.opacity = is_online() ? 1 : 0;
	img.onload = null;
}
function addColumn(dParent, o, keys) {
	console.log('addColumn', dParent)
	let d = getFloatLeftDiv();
	console.log('d', d)
	let t = tableElem(o, keys);
	d.appendChild(t);
	dParent.appendChild(d);
	dParent.style.backgroundColor = 'dimgray';
	return [d, t];
}
function addComment(s, dParent) { return mMultiline(s, 2, dParent); }
function addCSSClass(className, text) {
	sheet.insertRule('.' + className + ' { ' + text + ' }', 0);
}
function addDDSource(source, isCopy = true, clearTarget = false) {
	DDInfo.sources.push(source);
	let d = iDiv(source);
	d.onmousedown = (ev) => ddStart(ev, source, isCopy, clearTarget);
}
function addDDTarget(target, isCopy = true, clearTarget = false) {
	DDInfo.targets.push(target);
	target.isCopy = isCopy;
	target.clearTarget = clearTarget;
}
function addDeckTo(deck, domel, id, flip = false, drag = false) {
	if (nundef(id)) id = getUID();
	clearElement(domel);
	let mobj = new DeckMS(id, deck);
	mobj.attachTo(domel);
	if (flip) enableFlipForDeck(mobj.o);
	if (drag) enableDragForDeck(mobj.o);
	return mobj;
}
function addDiv(dParent, { html, w = '100%', h = '100%', bg, fg, border, rounding, margin, padding, float, position, x, y, textAlign, fontSize }) {
	return addDivU({ dParent: dParent, html: html, w: w, h: h, bg: bg, fg: fg, border: border, rounding: rounding, margin: margin, padding: padding, float: float, position: position, x: x, y: y, textAlign: textAlign, fz: fontSize });
}
function addDivClass(dParent, id, className) { return addDivU({ dParent: dParent, id: id, className: className }); }
function addDivFill(id, dParent) { return addDivU({ dParent: dParent, id: id, w: '100%', h: '100%' }); }
function addDivFullClass(dParent, id, className) { return addDivU({ dParent: dParent, id: id, w: '100%', h: '100%', className: className }); }
function addDivPos(dParent, x, y, w, h, { gap, bg, fg, border, rounding, textAlign, fontSize } = {}) {
	if (gap > 0) {
		let wCont = dParent.offsetWidth;
		let isRight = x + w >= wCont;
		let hCont = dParent.offsetHeight;
		let isBottom = y + h >= hCont;
		x += gap;
		y += gap;
		w -= (isRight ? 2 : 1) * gap;
		h -= (isBottom ? 2 : 1) * gap;
	}
	return addDiv(dParent, { position: 'absolute', x: x, y: y, w: w, h: h, bg, fg, border, rounding, textAlign, fontSize });
}
function addDivPosGap(dParent, x, y, w, h, { gap, bg, fg, border, rounding, textAlign, fontSize, position = 'absolute' } = {}) {
	return addDivU({ dParent: dParent, x: x, y: y, w: w, h: h, gap: gap, bg: bg, fg: fg, border: border, textAlign: textAlign, fz: fontSize, position: position });
}
function addDivPosTo(dParent, x = 0, y = 0, w = 100, h = 100, unit = '%', bg = 'blue', position = 'absolute') {
	return addDivU({ dParent: dParent, x: x, y: y, w: w, h: h, unit: unit, position: position, bg: bg });
}
function addDivTo(dParent, w = 100, h = 100, unit = '%', bg = 'blue') { return addDivU({ dParent: dParent, w: w, h: h, unit: unit, bg: bg }); }
function addDivToBody(w = 100, h = 100, unit = '%', bg = 'blue') { return addDivU({ dParent: document.body, w: w, h: h, unit: unit, bg: bg }); }
function addDivU({ id, dParent, w, h, unit, fg, bg, position, x, y, html, className, styleStr, border, rounding, gap, margin, padding, float, textAlign, fz }) {
	let d1 = document.createElement('div');
	if (isdef(dParent)) dParent.appendChild(d1); else dParent = null;
	if (isdef(id)) d1.id = id;
	if (isdef(fg)) d1.style.setProperty('color', fg);
	if (isdef(bg)) d1.style.setProperty('background-color', bg);
	if (isdef(html)) d1.innerHTML = html;
	if (gap > 0 && (unit == '%' || dParent && isdef(dParent.offsetWidth) && isdef(dParent.offsetHeight))) {
		let wCont = unit == '%' ? 100 : dParent.offsetWidth;
		let isRight = x + w >= wCont;
		let hCont = unit == '%' ? 100 : dParent.offsetHeight;
		let isBottom = y + h >= hCont;
		x += gap;
		y += gap;
		w -= (isRight ? 2 : 1) * gap;
		h -= (isBottom ? 2 : 1) * gap;
	}
	if (nundef(unit)) unit = '%';
	if (isdef(w)) d1.style.setProperty('width', makeUnitString(w, unit));
	if (isdef(h)) d1.style.setProperty('height', makeUnitString(h, unit));
	if (isdef(x) || isdef(y)) { posXY(d1, dParent, x, y, unit, position); }
	if (isdef(className)) d1.classList.add(className);
	if (isdef(styleStr)) d1.style.cssText += styleStr;
	if (isdef(border)) {
		d1.style.border = border;
		if (isdef(rounding)) d1.style.borderRadius = rounding;
	}
	if (isdef(margin)) d1.style.setProperty('margin', makeUnitString(margin, 'px'));
	if (isdef(padding)) d1.style.setProperty('padding', makeUnitString(padding, 'px'));
	if (float) d1.style.setProperty('float', float);
	if (textAlign) d1.style.textAlign = textAlign;
	if (isdef(fz)) d1.style.setProperty('fontSize', makeUnitString(fz, 'px'));
	return d1;
}
function addDummy() {
	let b = mButton('', null, dTitleRight, { opacity: 0, h: 0, w: 0, padding: 0, margin: 0, outline: 'none', border: 'none', bg: 'transparent' });
	b.id = 'dummy';
}
function addEdges(board, bid, gName, streets) {
	board.edges = [];
	board.edgesByStartRowCol = [];
	for (const fid of board.fields) {
		let f = EID[fid];
		let nodelist = Object.values(f.nodes);
		for (let k = 0; k < nodelist.length; k++) {
			let n1 = EID[nodelist[k]];
			let n2 = k == nodelist.length - 1 ? EID[nodelist[0]] : EID[nodelist[k + 1]];
			let smaller = n1;
			let bigger = n2;
			if (n1.x > n2.x) {
				smaller = n2;
				bigger = n1;
			} else if (n1.x == n2.x) {
				if (n1.y > n2.y) {
					smaller = n2;
					bigger = n1;
				}
			}
			let xEdge = (smaller.x + bigger.x) / 2;
			let yEdge = (smaller.y + bigger.y) / 2;
			let edge = byPos1(xEdge, yEdge);
			streets.border = 'green';
			if (!edge) {
				edge = makeElemY('edge', bid, gName, streets.level, {
					row: smaller.row,
					col: smaller.col,
					x: xEdge,
					y: yEdge,
					x1: smaller.x,
					y1: smaller.y,
					x2: bigger.x,
					y2: bigger.y,
					ipal: streets.ipal,
					bg: streets.bg,
					fg: streets.fg,
					shape: streets.shape,
					border: streets.border,
					thickness: streets.thickness
				});
				board.edges.push(edge.id);
				if (!(edge.row in board.edgesByStartRowCol)) board.edgesByStartRowCol[edge.row] = [];
				board.edgesByStartRowCol[edge.row][edge.col] = edge.id;
				edge.source = smaller.id;
				edge.dest = bigger.id;
				smaller.edges.push(edge.id);
				bigger.edges.push(edge.id);
				edge.nodes = [smaller.id, bigger.id];
				edge.fields = [];
			}
			f.edges.push(edge.id);
			edge.fields.push(f.id);
		}
	}
}
function addEndHandler() {
	recognition.onend = function () {
		if (!isGameWithSpeechRecognition()) return;
		isRunning = false;
		if (recordCallback) {
			if (RecogOutput) console.log('* recog.onend: recordCallback NON_EMPTY!', recordCallback);
			recordCallback();
			return;
		}
		MicrophoneHide();
		if (hasGotResult && !hasGotFinalResult) {
			if (RecogOutput) console.log('* recog.onend: EVAL interim', interim_transcript);
			setSpeechResult(interim_transcript, interim_confidence, interim_confidence2);
			evaluate(interim_transcript);
		} else if (!hasGotResult) {
			if (RecogOutput) console.log('* recog.onend: never got result!!!');
			if (OnMicrophoneProblem) OnMicrophoneProblem();
			else evaluate('');
		} else {
			if (RecogOutput) console.log('* recog.onend final DONE!', final_transcript);
		}
	};
}
function AddEnPassantMove(move) {
	brd_moveList[brd_moveListStart[brd_ply + 1]] = move;
	brd_moveScores[brd_moveListStart[brd_ply + 1]++] = 105 + 1000000;
}
function addErrorHandler() {
	recognition.onerror = function (event) {
		if (!isGameWithSpeechRecognition()) return;
		isRunning = false;
		if (RecogOutput) console.error(event);
		if (OnMicrophoneProblem) OnMicrophoneProblem();
		if (recordCallback) recordCallback();
	};
}
function addFilterHighlight(ms) { ms.highC('green'); }
function addFlexGridDiv(dParent) { return addDivU({ dParent: dParent, className: 'flex-grid' }); }
function addfork(root) {
	for (const a of [PI / 4, -PI / 6]) {
		let b = root.branch(a);
		root.children.push(b);
		tree.push(b);
	}
	root.finished = true;
}
function addGameViewHandlers() { addEventListener('keyup', keyUpHandler); addEventListener('keydown', keyDownHandler); }
function addGArea(gName, areaName = 'a_d_game', x = 0, y = 0, clearFirst = true) {
	let d = document.getElementById(areaName);
	if (clearFirst) {
		clearElement(d);
	}
	console.log(d, d.childNodes, d.firstChild);
	let container = d.firstChild ? d.firstChild : addDiv(d, { position: 'relative' });
	let w = container.offsetWidth;
	let h = container.offsetHeight;
	console.log('w', w, 'h', h);
	console.log(container);
	let dNew = addDiv(container, { position: 'absolute', x: x, y: y, w: w, h: h, bg: 'slategray', gap: 0 });
	let g = addSvgg(dNew, gName);
	g.classList.add('gCentered');
	return dNew;
}
function addGFill(id, dParent) {
	let res = addSvgg(dParent, id, { originInCenter: true });
	return res;
}
function addGrid9To(d, centerW, centerH, gap = '2px') {
	return makeGrid9(d, centerW, centerH, gap);
}
function addGridTo(d, rows, cols, gap = '2px') {
	console.log(d, rows, cols, gap);
	d.classList.add('gridContainer');
	d.style.setProperty('--grid-rows', rows);
	d.style.setProperty('--grid-cols', cols);
	d.style.setProperty('--grid-gap', gap);
	let cells = [];
	for (let r = 0; r < rows; r++) {
		cells[r] = [];
		for (let c = 0; c < cols; c++) {
			let cell = document.createElement("div");
			console.log(cell)
			cell.innerText = (r + ',' + c);
			d.appendChild(cell).className = "grid-item";
			cells[r].push(cell);
		}
	}
	return cells;
}
function addGridToBody(rows, cols) {
	let d = addDivToBody();
	d.classList.add('gridContainer');
	makeRows(d, rows, cols);
	return d;
}
async function addGroupInfo() {
	let symbolDict = SymbolDict = await localOrRoute('symbolDict', '../assets/symbolDict.yaml');
	let sInfo = SInfo = await localOrRoute('sInfo', '../assets/s_info.yaml');
	for (const k in Syms) {
		let old = symbolDict[k];
		let info = sInfo[k];
		if (isdef(old) && isdef(old.group)) {
			Syms[k].group = old.group;
			Syms[k].subgroup = old.subgroups;
		} else {
			Syms[k].subgroup = info.subgroup;
			Syms[k].group = info.group;
		}
	}
	for (const k in Syms) {
		if (nundef(Syms[k].group) || nundef(Syms[k].subgroup)) {
			console.log('IMMER NOCH KEIN GROUP INFO!!!!', k, Syms[k], sInfo[k], symbolDict[k]);
		}
	}
}
function AddGUIPiece(sq, pce) {
	var rank = RanksBrd[sq];
	var file = FilesBrd[sq];
	var rankName = "rank" + (rank + 1);
	var fileName = "file" + (file + 1);
	pieceFileName = "../base/assets/images/chess/" + SideChar[PieceCol[pce]] + PceChar[pce].toUpperCase() + ".png";
	imageString = "<image src=\"" + pieceFileName + "\" class=\"Piece clickElement " + rankName + " " + fileName + "\"/>";
	$("#ChessBoard").append(imageString);
}
function addHandTo(d) { }
function addIdentityInformation() {
	if (nundef(S.gameConfig)) S.gameConfig = {};
	let gc = S.gameConfig;
	gc.username = USERNAME;
	let myPlayers = [];
	if (gc.gameConfig.players) {
		gc.gameStarter = gc.players[0];
		for (const pl of gc.players) {
			if (startsWith(pl.username, USERNAME)) myPlayers.push(pl);
		}
	}
}
function addIf(arr, el) { if (!arr.includes(el)) arr.push(el); }
function addIf_dep(el, arr) {
	if (!arr.includes(el)) arr.push(el);
}
function addIf_depComma(csv, arr) {
	let strings = csv.split(',');
	for (const s of strings) {
		addIf_dep(s.trim(), arr);
	}
}
function addIf_depDict(key, val, dict) {
	if (!(key in dict)) {
		dict[key] = [val];
	} else {
		addIf_dep(val, dict[key]);
	}
}
function addIf_depKeys(dict, keys, val) {
	let d = dict;
	keysCopy = jsCopy(keys);
	let lastKey = keysCopy.pop();
	for (const k of keysCopy) {
		if (!(k in d)) {
			d[k] = {};
		}
		d = d[k];
	}
	if (!(lastKey in d)) d[lastKey] = val;
	return d[lastKey];
}
function addIfComma(csv, arr) {
	let strings = csv.split(',');
	for (const s of strings) {
		addIf_dep(s.trim(), arr);
	}
}
function addIfDict(key, val, dict) {
	if (!(key in dict)) {
		dict[key] = [val];
	} else {
		addIf_dep(val, dict[key]);
	}
}
function addIfKeys(dict, keys, val) {
	let d = dict;
	keysCopy = jsCopy(keys);
	let lastKey = keysCopy.pop();
	for (const k of keysCopy) {
		if (!(k in d)) {
			d[k] = {};
		}
		d = d[k];
	}
	if (!(lastKey in d)) d[lastKey] = val;
	return d[lastKey];
}
function addItem(owner, key, val) {
	let o = owner[key] = val;
	Items.push(o);
}
function addKeydown(k, f) { if (nundef(DA.keydown)) DA.keydown = {}; DA.keydown[k] = f; }
function addKeys(ofrom, oto) { for (const k in ofrom) if (nundef(oto[k])) oto[k] = ofrom[k]; return oto; }
function addKeyup(k, f) {
	if (nundef(DA.keyup)) DA.keyup = {};
	DA.keyup[k] = f;
}
function addLabel(item, label, styles) {
	item.label = label;
	let div = iDiv(item);
	if (isdef(item.live.dLabel)) mRemove(item.live.dLabel);
	let dLabel = item.live.dLabel = mDiv(div, styles, null, label);
	mCenterFlex(div, true, true);
	mStyleX(div, { 'vertical-align': 'top' });
	return dLabel;
}
function addLabel1(item, label, replaceOld = true) {
	let div = iDiv(item);
	mStyleX(div, { 'vertical-align': 'top' });
	if (isdef(item.live.dLabel)) mRemove(item.live.dLabel);
	let dLabel = item.live.dLabel = mDiv(div, { fz: 20 }, null, label);
	return div;
}
function addLabels(items, lang = 'E', luc = 'c') {
	for (const item of items) {
		let label = item.info[lang];
		item.label = luc == 'c' ? toNoun(label) : luc == 'l' ? label : label.toUpperCase();
	}
}
function addlayer() {
	if (tree.length == 0) {
		let a = createVector(width / 2, height);
		let b = createVector(width / 2, height - 100);
		let root = tree[0] = new Branch(a, b);
	} else if (numlayers === 6) {
		for (let i = tree.length - 1; i >= 0; i--) {
			if (!tree[i].finished) addleaf(tree[i]);
		}
		clearInterval(interval_id);
	} else {
		for (let i = tree.length - 1; i >= 0; i--) {
			if (!tree[i].finished) addfork(tree[i]);
		}
		numlayers++;
	}
}
function addleaf(root) {
	let leaf = { current: root.get_healthy_end().copy(), orig: root.get_healthy_end().copy() };
	leaves.push(leaf);
	root.finished = true;
}
function addListItem(idParent, text) {
	const parent = document.getElementById(idParent);
	const el = document.createElement('li');
	el.innerHTML = text;
	parent.appendChild(el);
	parent.scrollTop = el.offsetTop;
}
function addLobbyViewHandlers() {
	document.getElementById('bLogout').addEventListener('click', onClickLogout);
	if (USE_SOCKETIO) document.getElementById('chat_form').addEventListener('submit', onChatSubmitted);
	document.getElementById('bJoinGame').addEventListener('click', onClickJoinGameLobby);
	document.getElementById('bCreateGame').addEventListener('click', onClickCreateGameLobby);
	document.getElementById('bResumeGame').addEventListener('click', onClickResumeGameLobby);
}
function addLoginViewHandlers() { document.getElementById('login_form').addEventListener('submit', onLoginSubmitted); }
function addManual00Node(nParent, R, funcContent) {
	let uidParent = nParent ? nParent.uid : null;
	let nChild = { uidParent: uidParent, idUiParent: uidParent, uid: getUID(), type: 'manual00', content: randomLetter() };
	nChild.content = isdef(funcContent) ? funcContent(nChild) : nChild.uid;
	if (nParent) {
		if (nundef(nParent.children)) nParent.children = [];
		nParent.children.push(nChild.uid);
	} else {
	}
	R.rNodes[nChild.uid] = nChild;
	return nChild;
}
function addManualCircle(g) {
	let circle = new MMS({ parent: g, type: 'ellipse' }).attach();
	let r = document.createElementNS('http://www.w3.org/2000/svg', 'ellipse');
	r.setAttribute('rx', 35);
	r.setAttribute('ry', 45);
	r.setAttribute('cx', 0);
	r.setAttribute('cy', 0);
	r.setAttribute('fill', 'yellow');
	g.elem.appendChild(r);
	return r;
}
function addMessage(msg) {
	setMessage(msg);
	addListItem('events', msg);
}
function addModuleExports(list) {
	let txt =
		`if (this && typeof module == "object" && module.exports && this === module.exports) {\r\n`
		+ `  module.exports = {\r\n`;
	for (const s of list) {
		txt += `    ${s},\r\n`
	};
	txt += '  }\r\n}';
	return txt;
}
function addMonthToDate(date, months) {
	let d = new Date(date);
	d.setMonth(d.getMonth() + months);
	return d;
}
function addMSContainer(dParent, gid, { w = '100%', h = '100%', margin = 'auto' }) {
	let d1 = addDiv(dParent, { w: w, h: h, margin: margin });
	d1.style.position = 'relative';
	let g1 = addSvgg(d1, gid);
	return { div: d1, g: g1 };
}
function addNewlyCreatedServerObjects(sdata, R) {
	for (const oid in sdata) { R.addObject(oid, sdata[oid]); R.addRForObject(oid); }
	for (const oid in sdata) {
		let o = sdata[oid];
		if (isdef(o.loc)) { continue; }
		let success = einhaengen(oid, o, R);
	}
	sieveLocOids(R);
}
function addNewObjectToSourcesAndPools(o, R) {
	let sp = R.getSpec();
	let missing = [];
	for (const k in sp) {
		let n = sp[k];
		if (nundef(n._source)) {
			n.source = R.defSource;
			pools[k] = n.pool = makePool(n.cond, n.source, R);
			n.pool.map(x => R.addR(x, k));
		} else missing.push(k);
	}
	while (missing.length > 0) {
		let done = null;
		for (const k of missing) {
			let n = sp[k];
			let sourceNode = sp[n._source];
			if (nundef(sourceNode.pool)) continue;
			n.source = sourceNode.pool;
			pools[k] = n.pool = makePool(n.cond, n.source, R);
			n.pool.map(x => R.addR(x, k));
			done = k;
			break;
		}
		removeInPlace(missing, done);
	}
	return [sp, pools];
}
function addNewServerObjectToRsg(oid, o, R, skipEinhaengen = false) {
	R.addObject(oid, o);
	addRForObject(oid, R);
	if (skipEinhaengen) { return; } else { einhaengen(oid, o, R); }
}
function addNodes(board, bid, gName, cities) {
	let wNode = board.hField / 8;
	let hNode = board.hField / 8;
	board.vertices = correctPolys(board.fields.map(fid => EID[fid].poly), wNode, board.hField / 12);
	board.nodes = [];
	board.nodesByRowCol = [];
	for (const fid of board.fields) {
		let f = EID[fid];
		let poly = f.poly;
		for (const pt of poly) {
			let node = byPos1(pt.x, pt.y, x => x.type == 'node');
			if (!node) {
				node = makeElemY('node', bid, gName, cities.level, {
					row: pt.y < f.y ? f.row - 1 : f.row,
					col: pt.x < f.x ? f.col - 1 : f.col,
					w: wNode,
					h: hNode,
					x: pt.x,
					y: pt.y,
					ipal: cities.ipal,
					bg: cities.bg,
					fg: cities.fg,
					shape: cities.shape,
					border: cities.border,
					thickness: cities.thickness
				});
				board.nodes.push(node.id);
				if (!(node.row in board.nodesByRowCol)) board.nodesByRowCol[node.row] = [];
				board.nodesByRowCol[node.row][node.col] = node.id;
				node.edges = [];
				node.fields = [];
				node.nodes = [];
			}
			node.fields.push(fid);
			f.nodes.push(node.id);
		}
	}
}
function addNthInputElement(dParent, n) {
	mLinebreak(dParent, 10);
	let d = mDiv(dParent);
	let dInp = mCreate('input');
	dInp.type = "text"; dInp.autocomplete = "off";
	dInp.style.margin = '10px;'
	dInp.id = 'inputBox' + n;
	dInp.style.fontSize = '20pt';
	mAppend(d, dInp);
	return dInp;
}
function addOidByLocProperty(oid, key, R) {
	let o = R.getO(oid);
	let oidParent = o.loc;
	let parents = R.oid2uids[oidParent];
	if (isEmpty(parents)) { return []; }
	let topUids = [];
	for (const uidParent of parents) {
		if (parentHasThisChildAlready(uidParent, oid) || !parentHasChannelForThisOid(R.rNodes[uidParent], oid)) continue;
		let n1 = instantOidKey(oid, key, uidParent, R);
		topUids.push({ uid: n1.uid, uidParent: uidParent });
	}
	return topUids;
}
function addOidByParentKeyLocation(oid, key, R) {
	let parents = R.Locations[key];
	if (nundef(parents)) {
		if (oid == '146') console.log('not added!!!', oid, key)
		return;
	}
	let topUids = [];
	for (const uidParent of parents) {
		if (parentHasThisChildAlready(uidParent, oid)) continue;
		let n1 = instantOidKey(oid, key, uidParent, R);
		topUids.push({ uid: n1.uid, uidParent: uidParent });
	}
	return topUids;
}
function addOnelineVars(superdi, o) {
	let [code, type] = [o.code, o.type];
	let crn = (code.match(/\r\n/g) || []).length;
	let oneliner = crn == 1;
	let signal = false;
	if (oneliner && type == 'var' && code.includes(',') && !code.includes('[') && !code.includes('{ ')) {
		let othervars = stringAfter(code, 'var').trim().split(',');
		let varkeys = othervars.map(x => firstWord(x, true));
		assertion(varkeys[0] == o.name, `WTF?!?! ${varkeys[0]} ### ${o.name}?!?!?!?!????????????? addOnelinerVars`);
		o.code = stringBefore(code, ',') + ';'
		othervars.shift();
		if (signal) console.log('othervars', othervars, varkeys)
		for (const vcode of othervars) {
			let o1 = jsCopy(o);
			let code1 = vcode.trim();
			if (!code1.endsWith(';')) code1 += ';';
			if (signal) console.log('code1', code1);
			let k1 = o1.name = firstWord(code1, true);
			if (signal) console.log('k1', k1);
			o1.code = 'var ' + code1; // + code1.endsWith(';')?'':';'; //'\r\n':';\r\n';
			o1.sig = `var ${k1};`;
			if (isNumber(k1)) { continue; }
			if (signal) console.log('trage ein', k1, o1)
			lookupSetOverride(superdi, [type, k1], o1);
		}
	}
}
function addonFeatureInit() {
	ADS = null;
	if (USE_ADDONS == true) {
		ADS = jsCopy(lookup(DB, ['addons']));
		let di = {
			aPasscode: APasscode, aAddress: AAddress, aPassword: APassword,
			aExercise: APasscode, aMeditation: APasscode,
		};
		for (const k in ADS) { ADS[k].cl = di[k]; }
	}
}
function addPanel(areaName, oid) {
	let id = getDynId(areaName, oid);
	let color = randomColor();
	let parent = mBy(areaName);
	let ui = mDiv100(parent); ui.id = id; mColor(ui, color);
	let n = { type: 'panel', id: id, color: color, ui: ui };
	AREAS[areaName].panels.push(n);
	addAREA(id, n);
}
function addPara(div, s, margin = '0px', fontSize = '10px', color = 'green') {
	let p = getPara(s);
	div.appendChild(p);
	return p;
}
function addPara_tnt(div, s, margin = '0px', fontSize = '10px', color = 'green') {
	let p = document.createElement('p');
	p.id = uidHelpers();
	div.appendChild(p);
	$(p.id).css('background-color', 'violet');
	p.textContent = s;
	return p;
}
function addPeepToCrowd() {
	const peep = removeRandomFromArray(availablePeeps)
	const walk = getRandomFromArray(walks)({
		peep,
		props: resetPeep({
			peep,
			stage,
		})
	}).eventCallback('onComplete', () => {
		removePeepFromCrowd(peep)
		addPeepToCrowd()
	})
	peep.walk = walk
	crowd.push(peep)
	crowd.sort((a, b) => a.anchorY - b.anchorY)
	return peep
}
function addPic(item, key) {
	let div = item.div;
	let newItem = getPic(key, item.sz, item.bg, item.label);
	clearElement(div);
	mAppend(div, newItem.div.children[0]);
	mAppend(div, newItem.div.children[0]);
	item.pic = newItem.pic;
	item.text = newItem.text;
}
function addPicto(IdBoard, key, sz, x, y) {
	let mobj = makeDrawingElement(getUID(), 'board');
	let ch;
	try {
		ch = iconChars.get(key);
		if (!ch) {
			key = iconChars.getRandomKey();
			console.log(key)
			ch = iconChars.get(key);
		}
	} catch {
		ch = iconChars[key];
	}
	console.log('in addPicto got key', key, ch);
	mobj._pictoFromChar(ch, x, y, sz, sz, randomColor());
	mobj.attach();
}
function addPicto_dep(IdBoard, key, sz, x, y) {
	if (!(key in iconChars)) key = 'crow';
	console.log('found key:', key);
	let mobj = makeDrawingElement(getUID(), 'board');
	mobj._picto(key, x, y, sz, sz, randomColor());
	mobj.attach();
}
function addPictoDiv(key, area, color = 'blue', w = 50, h = 0) {
	let d = pictoDiv(key, color, w, h ? h : w);
	mAppend(area, d);
	return d;
}
function addPictoFromChar(IdBoard, ch, sz, x, y) {
	let mobj = makeDrawingElement(getUID(), 'board');
	mobj._pictoFromChar(ch, x, y, sz, sz, randomColor());
	mobj.attach();
}
function AddPiece(sq, pce) {
	var col = PieceCol[pce];
	HASH_PCE(pce, sq);
	brd_pieces[sq] = pce;
	brd_material[col] += PieceVal[pce];
	brd_pList[PCEINDEX(pce, brd_pceNum[pce])] = sq;
	brd_pceNum[pce]++;
}
function addPlayer(playerId, callback) {
	let username = USERNAME;
	if (nundef(S.plAddedByMe)) S.plAddedByMe = {};
	else {
		let up = S.plAddedByMe;
		let unames = Object.values(up);
		let plids = Object.keys(up);
		let i = plids.length;
		username = i == 0 ? USERNAME : USERNAME + i;
	}
	S.plAddedByMe[playerId] = username;
	pageHeaderAddPlayer(username, playerId, inferPlayerColorFromNameOrInit(playerId, S.gameInfo.player_names.indexOf(playerId)));
	let route = '/add/player/' + username + '/' + playerId; _sendRouteJS(route, callback);
}
function AddQuietMove(move) {
	brd_moveList[brd_moveListStart[brd_ply + 1]] = move;
	if (brd_searchKillers[brd_ply] == move) {
		brd_moveScores[brd_moveListStart[brd_ply + 1]] = 900000;
	} else if (brd_searchKillers[MAXDEPTH + brd_ply] == move) {
		brd_moveScores[brd_moveListStart[brd_ply + 1]] = 800000;
	} else {
		brd_moveScores[brd_moveListStart[brd_ply + 1]] = brd_searchHistory[brd_pieces[FROMSQ(move)] * BRD_SQ_NUM + TOSQ(move)];
	}
	brd_moveListStart[brd_ply + 1]++;
}
function addRandomChildren(n, R) {
	let num = randomNumber(1, 4);
	for (let i = 0; i < num; i++) {
		addManual00Node(n, R);
	}
	return n;
}
function addRandomContentToSidebarOrTable() {
	console.log('clicked!');
	let content = randomContent();
	console.log('content is type', type, '=>', content);
	let d = chooseRandom([mBy('dLeft'), mBy('dRight'), dTable]);
	mAddContentAndMeasureW(dTable, content);
}
function addRelatives(id, oid) {
	if (isdef(oid2ids[oid])) {
		for (const idOther of oid2ids[oid]) {
			if (idOther == id) {
				continue;
			}
			listKey(id2uids, id, idOther);
			listKey(id2uids, idOther, id);
		}
	}
}
function addRepeatInfo(dPic, iRepeat, wpic) {
	let szi = Math.max(Math.floor(wpic / 8), 8);
	dPic.style.position = 'relative';
	let d2 = mText('' + iRepeat, dPic, { fz: szi, weight: 'bold', fg: 'contrast', position: 'absolute', left: szi / 2, top: szi / 2 - 2 });
	return d2;
}
function addResizeInfo(nBoard, nMember, sizeNeeded) {
	let szNeeded = Math.max(sizeNeeded.w, sizeNeeded.h);
	if (nMember.info.size < szNeeded) {
		let memType = nMember.info.memType;
		let newSize = Math.max(sizeNeeded.w, sizeNeeded.h);
		newSize = Math.ceil(newSize / 4);
		newSize *= 4;
		if (newSize % 4 != 0) newSize += 4;
		let key = memType + 's';
		if (memType == 'edge') {
			newSize *= 2;
			memType = 'field';
			key = 'fields';
		}
		if (nundef(nBoard.resizeInfo)) nBoard.resizeInfo = {};
		if (nundef(nBoard.resizeInfo[key]) || nBoard.resizeInfo[key] < newSize) {
			nBoard.resizeInfo[key] = newSize;
			nMember.sizeNeeded = { w: newSize, h: newSize }
			if (key == 'corners') {
				let fSize = isdef(nBoard.resizeInfo.fields);
				if (nundef(fSize)) {
					let f0 = R.uiNodes[nBoard.children[0]];
					fSize = f0.info.size;
				}
				if (fSize < newSize * 3) {
					nBoard.resizeInfo.fields = newSize * 3;
				}
			}
		}
		nBoard.adirty = nMember.adirty = true;
	}
}
function addResultHandler() {
	recognition.onresult = function (event) {
		if (!isGameWithSpeechRecognition()) {
			if (RecogOutput) console.log('*event recog.onresult triggered but not a game with speech recog!!!')
			return;
		}
		hasGotResult = true;
		for (var i = event.resultIndex; i < event.results.length; ++i) {
			if (event.results[i].isFinal) {
				final_transcript += event.results[i][0].transcript;
				final_confidence_sum += event.results[i][0].confidence;
				final_num += 1;
			} else {
				interim_transcript += event.results[i][0].transcript;
				interim_confidence_sum += event.results[i][0].confidence;
				interim_num += 1;
			}
		}
		if (isdef(final_transcript) && !isEmpty(final_transcript)) {
			final_confidence = Goal.confidence = event.results[0][0].confidence;
			final_confidence2 = final_confidence_sum / final_num;
			hasGotFinalResult = true;
			final_confidence = event.results[0][0].confidence;
			recognition.stop();
			setSpeechResult(final_transcript, final_confidence, final_confidence2, true);
			evaluate(final_transcript);
		} else if (isdef(interim_transcript) && !isEmpty(interim_transcript)) {
			interim_confidence = event.results[0][0].confidence;
			interim_confidence2 = interim_confidence_sum / interim_num;
		} else {
			if (RecogOutput) console.log('* got result but final and interim are empty!')
		}
	};
}
function addRForObject(oid, R) {
	let o = R.getO(oid);
	let sp = R.getSpec();
	for (const k in sp) {
		let n = sp[k];
		if (nundef(n.cond)) continue;
		if (n.cond == 'all' || evalConds(o, n.cond)) { R.addR(oid, k); }
	}
	if (isEmpty(R.getR(oid))) {
		for (const k in sp) {
			let n = sp[k];
			if (nundef(n.cond)) continue;
			let keys = Object.keys(n.cond);
			if (!keys.includes('no_spec')) continue;
			let condCopy = jsCopy(n.cond);
			delete condCopy['no_spec'];
			if (evalConds(o, condCopy)) { R.addR(oid, k); }
		}
	}
	createPrototypesForOid(oid, o, R);
}
function addRobber(R) { R.initRound(); reAddServerObject('robber'); }
function addRowColInfo(dPic, row, col, szPic) {
	let szi = Math.max(Math.floor(szPic / 12), 8);
	console.log(szi);
	dPic.style.position = 'relative';
	let d2 = mText('row:' + row, dPic, { fz: szi, color: 'black', position: 'absolute', left: szi, top: szi / 2 })
	let d3 = mText('col:' + col, dPic, { fz: szi, color: 'black', position: 'absolute', left: szi, top: (szi / 2 + szi + 2) })
}
function addRowsCols(items) {
	let byrc = {};
	let byx = sortBy(items, 'x');
	let c = 0, x = byx[0].x;
	for (let i = 0; i < byx.length; i++) {
		let item = byx[i];
		if (!isCloseTo(item.x, x, 2)) { c += 1; x = item.x; }
		item.col = c;
	}
	let byy = sortBy(items, 'y');
	let r = 0, y = byy[0].y;
	for (let i = 0; i < byy.length; i++) {
		let item = byy[i];
		if (!isCloseTo(item.y, y, 2)) { r += 1; y = item.y; }
		item.row = r;
		lookupSet(byrc, [item.row, item.col], item);
	}
	return byrc;
}
function addScoreToUserSession() {
	let sc = { nTotal: Score.nTotal, nCorrect: Score.nCorrect, nCorrect1: Score.nCorrect1 };
	let game = G.id;
	let level = G.level;
	let session = U.session;
	if (nundef(session)) {
		console.log('THERE WAS NO USER SESSION IN _addScoreToUserSession!!!!!!!!!!!!!!!!!!!!!')
		U.session = {};
	}
	let sGame = session[game];
	if (nundef(sGame)) {
		sGame = session[game] = jsCopy(sc);
		sGame.byLevel = {};
		sGame.byLevel[level] = jsCopy(sc);
	} else {
		addByKey(sc, sGame);
		let byLevel = lookupSet(sGame, ['byLevel', level], {});
		addByKey(sc, byLevel);
	}
	sGame.percentage = Math.round(100 * sGame.nCorrect / sGame.nTotal);
	saveUser();
}
function addServerObject(oid, o, R) {
	if (!serverData.table) serverData.table = {};
	serverData.table[oid] = o;
	sData[oid] = jsCopy(o);
	addSO(oid, o, R);
	recAdjustDirtyContainers(R.tree.uid, R, true);
	updateOutput(R);
}
function addSessionToUserGames() {
	if (!isEmpty(U.session)) {
		for (const g in U.session) {
			let recOld = lookup(U, ['games', g]);
			let recNew = U.session[g];
			addByKey(recNew, recOld);
			recOld.percentage = Math.round(100 * recOld.nCorrect / recOld.nTotal);
			if (nundef(recOld.byLevel)) recOld.byLevel = {};
			for (const l in recNew.byLevel) {
				if (nundef(recOld.byLevel[l])) recOld.byLevel[l] = jsCopy(recNew.byLevel[l]);
				else addByKey(recNew.byLevel[l], recOld.byLevel[l]);
			}
		}
	}
	U.session = {};
}
function addSimpleProps(ofrom, oto = {}) { for (const k in ofrom) { if (nundef(oto[k]) && isLiteral(k)) oto[k] = ofrom[k]; } return oto; }
function addSO(oid, o, R) { let sd = {}; sd[oid] = o; addNewlyCreatedServerObjects(sd, R); }
function addSourcesAndPools(R) {
	let sp = jsCopy(R.getSpec());
	let pools = {};
	let missing = [];
	for (const k in sp) {
		let n = sp[k];
		if (nundef(n._source)) {
			n.source = R.defSource;
			pools[k] = n.pool = makePool(n.cond, n.source, R);
			n.pool.map(x => R.addR(x, k));
		} else missing.push(k);
	}
	while (missing.length > 0) {
		let done = null;
		for (const k of missing) {
			let n = sp[k];
			let sourceNode = sp[n._source];
			if (nundef(sourceNode.pool)) continue;
			n.source = sourceNode.pool;
			pools[k] = n.pool = makePool(n.cond, n.source, R);
			n.pool.map(x => R.addR(x, k));
			done = k;
			break;
		}
		removeInPlace(missing, done);
	}
	return [sp, pools];
}
function addSpanColor(dParent, id, bg, fg) {
	let d = document.createElement('span');
	dParent.appendChild(d);
	d.id = id;
	d.style.color = fg;
	d.style.backgroundColor = bg;
	return d;
}
function addStandardInteraction(id) {
	let ms = UIS[id];
	switch (id[2]) {
		case 'a': ms.addClickHandler('elem', onClickSelectTuple); break;
		case 'l': break;
		case 'r': break;
		case 't':
			if (id[0] == 'm') {
				ms.addClickHandler('elem', onClickFilterAndInfobox)
			} else {
				ms.addClickHandler('elem', onClickFilterTuples);
			}
			break;
		default: ms.addClickHandler('elem', onClickFilterTuples); break;
	}
	ms.addMouseEnterHandler('title', highlightMsAndRelatives);
	ms.addMouseLeaveHandler('title', unhighlightMsAndRelatives);
}
function addStartHandler() {
	recognition.onstart = function () {
		if (RecogOutput) console.log('* recog.onstart')
		interim_transcript = '';
		final_transcript = '';
		final_confidence = final_confidence2 = final_confidence_sum = final_num = 0;
		interim_confidence = interim_confidence2 = interim_confidence_sum = interim_num = 0;
		hasGotResult = hasGotFinalResult = false;
		recordCallback = null;
		if (!isGameWithSpeechRecognition()) return;
		isRunning = true;
		MicrophoneStart();
	};
}
function addStateToHistory(prefix = 'auto') {
	if (!isEmpty(prefix)) {
		let pack = packageState();
		HistoryOfStates[prefix] = pack;
		localStorage.setItem('history', JSON.stringify(HistoryOfStates));
		console.log('saved state', prefix, 'freeForm', pack.settings.freeForm, 'board', pack.settings.boardFilename)
	}
}
function addStyledDiv(dParent, id, html, styleString) { return addDivU({ dParent: dParent, id: id, html: html, styleStr: styleString }); }
function addSvgg(dParent, gid, { w = '100%', h = '100%', bg, fg, originInCenter = false } = {}) {
	let svg1 = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	if (!dParent.style.width || !dParent.style.height) {
		let pBounds = getBounds(dParent);
		w = pBounds.width + 'px';
		h = pBounds.height + 'px';
		if (pBounds.width == 0) {
			w = '100%';
			h = '100%';
		}
	}
	if (!dParent.style.position) dParent.style.position = 'relative';
	svg1.setAttribute('width', w);
	svg1.setAttribute('height', h);
	let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;';
	if (bg) style += 'background-color:' + bg;
	svg1.setAttribute('style', style);
	dParent.appendChild(svg1);
	let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');
	if (gid) g1.id = gid;
	svg1.appendChild(g1);
	if (originInCenter) { g1.style.transform = "translate(50%, 50%)"; }
	return g1;
}
function addSvggViewbox(dParent, gid, { w = '100%', h = '100%', bg, fg, originInCenter = false } = {}) {
	let svg1 = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	if (!dParent.style.width || !dParent.style.height) {
		let pBounds = getBounds(dParent);
		w = pBounds.width + 'px';
		h = pBounds.height + 'px';
	}
	if (!dParent.style.position) dParent.style.position = 'relative';
	svg1.setAttribute('width', w);
	svg1.setAttribute('height', h);
	svg1.setAttribute('viewBox', "0 0 433 375");
	let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;';
	if (bg) style += 'background-color:' + bg;
	svg1.setAttribute('style', style);
	dParent.appendChild(svg1);
	let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');
	if (gid) g1.id = gid;
	svg1.appendChild(g1);
	if (originInCenter) { g1.style.transform = "translate(50%, 50%)"; }
	return g1;
}
function addTableTo(table) {
	let div = document.getElementById('slideInAvailableCadres');
	div.appendChild(table);
}
function addTableToArea(o, areaName) {
	let d = UIS[areaName].elem;
	let t = tableElemX(o);
	console.log('d', d)
	console.log('t', t.table)
	d.appendChild(t.table)
	d.appendChild(document.createElement('hr'));
}
function addTask(task) {
	if (!CancelChain) TaskChain.push(task);
}
function addTestInteraction(id) {
	let mobj = UIS[id];
	mobj.addClickHandler('title', onClickGetUIS);
	mobj.addMouseEnterHandler('title', (x, pName) => x.high(pName));
	mobj.addMouseLeaveHandler('title', (x, pName) => x.unhigh(pName));
}
function addTestInteraction1(id) {
	let mobj = UIS[id];
	mobj.addClickHandler('', onClick1);
}
function addTitleLine(dParent, left, center, right) {
	let dt = document.createElement('div');
	dt.style.textAlign = 'center';
	dt.classList.add('ttdiv')
	let pl = getPara(left, 'left');
	let pr = getPara(right, 'right');
	let pCenter = getPara(center);
	dt.appendChild(pl);
	dt.appendChild(pr);
	dt.appendChild(pCenter);
	dParent.appendChild(dt);
	return [dt, dt.offsetWidth, dt.offsetHeight, dParent.offsetWidth, dParent.offsetHeight];
}
function addTitleToGrid(n, d) {
	if (n.content && n.params.padding) {
		let d1 = mText(n.content, d);
		d1.style.display = 'block';
		d1.style.backgroundColor = 'black';
		d1.style.position = 'absolute';
		d1.style.width = '100%';
	}
}
function addToPool(pool, poolArr, perle, index) {
	let p = pool[index] = { key: perle.key, index: index };
	poolArr.push(index);
	return p;
}
function addUserAsFirstAvailablePlayer() {
	let nextPlayer = S.availablePlayers[0];
	addPlayer(nextPlayer, onPlayerAdded);
}
function addVisuals(board, { f2nRatio = 4, opt = 'fitRatio', gap = 4, margin = 20, edgeColor, fieldColor, nodeColor, iPalette = 1, nodeShape = 'circle', factors, w, h } = {}) {
	let area = UIS[board.idParent];
	w = area.w;
	h = area.h;
	let isPalField, isPalCorner, isPalEdge = [false, false, false];
	let pal = S.settings.palette;
	[fieldColor, nodeColor, edgeColor] = [pal[2], pal[3], pal[4]];
	let [fw, fh, nw, nh, ew] = getBoardScaleFactors(board, { factors: factors, opt: opt, f2nRatio: f2nRatio, w: w, h: h, margin: margin });
	for (const id of board.structInfo.fields) {
		let o = getVisual(id);
		makeVisual(o, o.memInfo.x * fw, o.memInfo.y * fh, board.structInfo.wdef * fw - gap, board.structInfo.hdef * fh - gap, fieldColor, o.memInfo.shape);
		o.memInfo.isPal = isPalField;
		o.attach();
	}
	if (isdef(board.structInfo.corners)) {
		for (const id of board.structInfo.corners) {
			let mobj = getVisual(id);
			mobj.memInfo.isPal = isPalCorner;
			makeVisual(mobj, mobj.memInfo.x * fw, mobj.memInfo.y * fh, Math.max(board.structInfo.wdef * nw, ew), Math.max(board.structInfo.hdef * nh, ew), nodeColor, nodeShape);
		}
	}
	if (isdef(board.structInfo.edges)) {
		let nodeSize = getVisual(board.structInfo.corners[0]).w;
		for (const id of board.structInfo.edges) {
			let mobj = getVisual(id);
			mobj.memInfo.isPal = isPalEdge;
			makeVisual(mobj, mobj.memInfo.x * fw, mobj.memInfo.y * fh, mobj.memInfo.thickness * ew, 0, edgeColor, 'line', { x1: mobj.memInfo.x1 * fw, y1: mobj.memInfo.y1 * fh, x2: mobj.memInfo.x2 * fw, y2: mobj.memInfo.y2 * fh });
			mobj.length = mobj.h = mobj.distance - nodeSize;
			mobj.attach();
		}
	}
	if (isdef(board.structInfo.corners)) {
		for (const id of board.structInfo.corners) getVisual(id).attach();
	}
}
async function addVocabTo2020Syms() {
	let syms20 = await route_path_yaml_dict('../assets/syms2020.yaml');
	let etext = await route_path_text('../assets/speech/w2020/w20_E.txt');
	let ew = etext.split('\n');
	let dtext = await route_path_text('../assets/speech/w2020/w20_D.txt');
	let ftext = await route_path_text('../assets/speech/w2020/w20_F.txt');
	let stext = await route_path_text('../assets/speech/w2020/w20_S.txt');
	let ctext = await route_path_text('../assets/speech/w2020/w20_C.txt');
	let dw = dtext.split('\n');
	let fw = ftext.split('\n');
	let sw = stext.split('\n');
	let cw = ctext.split('\n');
	let edict = {};
	for (let i = 0; i < ew.length; i++) {
		let ek = ew[i].toLowerCase().trim();
		if (isEmpty(ek)) continue;
		edict[ek] = { E: ek, D: dw[i].toLowerCase().trim(), F: fw[i].toLowerCase().trim(), S: sw[i].toLowerCase().trim(), C: cw[i].trim() };
	}
	console.log(edict);
	let edlist = dict2list(edict, 'key');
	for (const k in syms20) {
		console.log('k=' + k, edict[k]);
		let e = firstCond(edlist, x => k.includes(x.key.toLowerCase()) || k.includes('pinch') && x.key.toLowerCase().includes('pinch'));
		console.log('entry for', k, 'is', e);
		if (isdef(e)) {
			let info = syms20[k];
			info.E = e.E;
			info.D = e.D;
			info.F = e.F;
			info.S = e.S;
			info.C = e.C;
		}
	}
	downloadAsYaml(syms20, 'syms20');
}
function addWeekToDate(date, weeks) {
	let d = new Date(date);
	d.setDate(d.getDate() + (weeks * 7));
	return d;
}
function AddWhitePawnCaptureMove(from, to, cap) {
	if (RanksBrd[from] == RANKS.RANK_7) {
		AddCaptureMove(MOVE(from, to, cap, PIECES.wQ, 0));
		AddCaptureMove(MOVE(from, to, cap, PIECES.wR, 0));
		AddCaptureMove(MOVE(from, to, cap, PIECES.wB, 0));
		AddCaptureMove(MOVE(from, to, cap, PIECES.wN, 0));
	} else {
		AddCaptureMove(MOVE(from, to, cap, PIECES.EMPTY, 0));
	}
}
function AddWhitePawnQuietMove(from, to) {
	if (RanksBrd[from] == RANKS.RANK_7) {
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.wQ, 0));
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.wR, 0));
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.wB, 0));
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.wN, 0));
	} else {
		AddQuietMove(MOVE(from, to, PIECES.EMPTY, PIECES.EMPTY, 0));
	}
}
function adjacency_init(items) {
	let last = arrLast(items);
	let [rows, cols] = [last.iy + 1, last.ix + 1];
	console.log('there are', rows, 'rows', cols, 'cols')
}
function adjustContainerLayout(n, R) {
	console.log('...........adjustContainer____________', n.uid);
	n.adirty = false;
	if (n.type == 'grid') {
		resizeBoard(n, R);
		return;
	}
	if (n.type == 'hand') { layoutHand(n); return; }
	if (n.uid && isBoardMember(n.uid, R)) {
		adjustLayoutForBoardMember(n, R);
	}
	let params = n.params;
	let num = n.children.length;
	let or = params.orientation ? params.orientation : DEF_ORIENTATION;
	mFlex(n.ui, or);
	let split = params.split ? params.split : DEF_SPLIT;
	if (split == 'min') return;
	let reverseSplit = false;
	if (split == 'equal') split = (1 / num);
	else if (isNumber(split)) reverseSplit = true;
	for (let i = 0; i < num; i++) {
		let d = R.uiNodes[n.children[i]].ui;
		mFlexChildSplit(d, split);
		if (reverseSplit) { split = 1 - split; }
	}
}
function adjustLayoutForBoardMember(n, R) {
	console.log('adjust layout for', n.uid);
	let ch = n.children[0];
	let n1 = R.uiNodes[ch];
	console.log('id_divParent', n1.idUiParent, 'id_directParent', n1.uidParent)
	let divParent = mBy(n1.idUiParent);
	let directParent = mBy(n1.uidParent);
	let ui = n1.ui;
	let nuiBoard = R.uiNodes[n.uidParent];
	console.log(nuiBoard)
	let bmk = getBounds(directParent, false, divParent);
	let arr;
	let [wTotal, hTotal, wBoard, hBoard, fw, fh, fSpacing, fSize, gap] =
		[nuiBoard.wTotal, nuiBoard.hTotal, nuiBoard.wBoard, nuiBoard.hBoard, nuiBoard.fw, nuiBoard.fh, nuiBoard.fSpacing, nuiBoard.fSize, nuiBoard.gap];
	console.log('wTotal', wTotal, 'hTotal', hTotal, 'wBoard', wBoard,
		'hBoard', hBoard, 'fw', fw, 'fh', fh, 'fSpacing', fSpacing, 'fSize', fSize, 'gap', gap)
	let bdiv = getBounds(divParent);
	divParent.style.backgroundColor = 'yellow';
	ui.style.position = 'absolute';
	ui.style.display = 'inline-block';
	let bel = getBounds(ui);
	let x = 0;
	let y = 0;
	ui.style.left = x + 'px';
	ui.style.top = y + 'px';
	ui.style.margin = '0px';
	console.log('x', x, '\nbdiv left', bdiv.left, 'w', bdiv.width, '\nbmk left', bmk.left, 'w', bmk.width, '\nbel left', bel.left, 'w', bel.width);
	n.sizeNeeded = { w: Math.max(bmk.width, bel.width), h: Math.max(bmk.height, bel.height) };
	if (bmk.width < bel.width || bmk.height < bel.height) {
		let nBoard = R.uiNodes[n.uidParent];
		nBoard.adirty = true;
		let memType = n.info.memType;
		let curSize = n.typParams.size;
		let newSize = Math.max(bel.width, bel.height);
		newSize = Math.ceil(newSize / 4);
		newSize *= 4;
		if (newSize % 4 != 0) newSize += 4;
		if (nundef(nBoard.resizeInfo)) nBoard.resizeInfo = {};
		nBoard.resizeInfo[memType + 's'] = newSize;
	}
	n.uiType = 'childOfBoardElement';
	n.potentialOverlap = true;
}
function adjustPlayerAreaWise() {
	let areaName = S.settings.present.player.defaultArea;
	let msArea = UIS[areaName];
	let wArea = msArea.w;
	let minWidth = S.vars.wDefaultPlayer + 10;
	if (wArea < minWidth) {
		let diff = S.vars.wDefaultPlayer + 10 - wArea;
		setCSSVariable('--wPlayers', minWidth)
	}
}
function adjustTableSize(R) {
	let d = mBy('table');
	let root = R.root;
	let b = getBounds(root.ui, true)
	if (!isdef(root.size)) {
		setSP(root);
	} else {
	}
	d.style.minWidth = root.size.w + 'px';
	d.style.minHeight = (root.size.h + 4) + 'px';
}
function ADMinusKeys(ad1, ad2) {
	let arr1 = ad1;
	let arr2 = ad2;
	if (!Array.isArray(ad1)) {
		console.log('ad1 not an array:', typeof ad1, ad1);
		arr1 = getKeys(ad1);
	}
	if (!Array.isArray(ad2)) {
		console.log('ad2 not an array:', typeof ad2, ad2);
		arr1 = getKeys(ad2);
	}
	return arrMinus(arr1, arr2);
}
function aFlip(d, ms = 300) {
	return anime({ targets: d, scaleX: -1, duration: ms, easing: 'easeInOutSine' });
}
function agCircle(g, sz) { let r = gEllipse(sz, sz); g.appendChild(r); return r; }
function agColoredShape(g, shape, w, h, color) {
	SHAPEFUNCS[shape](g, w, h);
	gBg(g, color);
}
function agEllipse(g, w, h) { let r = gEllipse(w, h); g.appendChild(r); return r; }
function agG(g) { let g1 = gG(); g.appendChild(g1); return g1; }
function aggregate_elements(list_of_object, propname) {
	let result = [];
	for (let i = 0; i < list_of_object.length; i++) {
		let obj = list_of_object[i];
		let arr = obj[propname];
		for (let j = 0; j < arr.length; j++) {
			result.push(arr[j]);
		}
	}
	return result;
}
function aggregate_player(fen, prop) {
	let res = [];
	for (const uplayer in fen.players) {
		let list = fen.players[uplayer][prop];
		res = res.concat(list);
	}
	return res;
}
function aggregate_player_hands_by_rank(fen) {
	let di_ranks = {};
	let akku = [];
	for (const uname in fen.players) {
		let pl = fen.players[uname];
		let hand = pl.hand;
		for (const c of hand) {
			akku.push(c);
			let r = c[0];
			if (isdef(di_ranks[r])) di_ranks[r] += 1; else di_ranks[r] = 1;
		}
	}
	fen.akku = akku;
	return di_ranks;
}
function agHex(g, w, h) { let pts = size2hex(w, h); return agPoly(g, pts); }
function agLine(g, x1, y1, x2, y2) { let r = gLine(x1, y1, x2, y2); g.appendChild(r); return r; }
function agmove_clear_all() { Z.stage = 'clear'; Z.fen.endcond = 'all'; Z.fen.acting_host = Z.uplayer; Z.turn = [Z.uplayer]; take_turn_clear(); }
function agmove_clear_first() { Z.stage = 'clear'; Z.fen.endcond = 'first'; Z.fen.acting_host = Z.uplayer; Z.turn = [Z.uplayer]; take_turn_clear(); }
function agmove_clear_turn() { Z.stage = 'clear'; Z.fen.endcond = 'turn'; Z.fen.acting_host = Z.uplayer; Z.turn = [Z.uplayer]; take_turn_clear(); }
function agmove_indiv(plname, slot) {
	if (isDict(plname) && Z.uplayer != 'mimi') return;
	if (isString(plname)) Z.uplayer = plname;
	console.log('sender:', Z.uplayer);
	let pl = Z.fen.players[Z.uplayer];
	Z.state = { val: pl.hand[0] };
	if (nundef(slot)) slot = busy_wait_until_slot(pl.slot);
	console.log('time sending:', slot, Date.now());
	take_turn_collect_open();
	if (plname != 'felix') agmove_indiv('felix', pl.slot);
}
function agmove_resolve() {
	console.log('---------------------- RESOLVE ----------------------');
	assertion(isdef(Z.playerdata), 'no playerdata');
	assertion(Z.uplayer == Z.fen.acting_host, 'wrong player resolves!!!!', Z.uplayer);
	let [fen, uplayer, pl, pldata] = [Z.fen, Z.uplayer, Z.pl, Z.playerdata];
	fen.collection = [];
	for (const data of pldata) {
		fen.collection.push({ name: data.name, state: data.state });
	}
	console.log('players selected the following cards:', fen.collection);
	[Z.stage, Z.turn] = [Z.fen.stage_after_multi, Z.fen.turn_after_multi];
	take_turn_resolve('single');
}
function agmove_single() {
	if (Z.pl.hand.length > 2) removeInPlace(Z.pl.hand, Z.pl.hand[0]);
	Z.turn = [get_next_player(Z, Z.uplayer)];
	take_turn_fen();
}
function agmove_startmulti() { Z.stage = 'multi'; Z.turn = Z.plorder;[Z.fen.stage_after_multi, Z.fen.turn_after_multi] = ['click', [rChoose(Z.plorder)]]; take_turn_fen(); }
function agPoly(g, pts) { let r = gPoly(pts); g.appendChild(r); return r; }
function agRect(g, w, h) { let r = gRect(w, h); g.appendChild(r); return r; }
function agShape(g, shape, w, h, color, rounding) {
	let sh = gShape(shape, w, h, color, rounding);
	g.appendChild(sh);
	return sh;
}
function agText(g, txt, fg, bg, font) {
	let res = new gText(g);
	res.text({ txt: txt, fill: fg, bgText: bg, font: font });
	return res;
}
function AI(playerToControl) {
	var ctl = playerToControl;
	var State = {
		WAITING: 0,
		FOLLOWING: 1,
		AIMING: 2
	}
	var currentState = State.FOLLOWING;
	function repeat(cb, cbFinal, interval, count) {
		var timeout = function () {
			repeat(cb, cbFinal, interval, count - 1);
		}
		if (count <= 0) {
			cbFinal();
		} else {
			cb();
			setTimeout(function () {
				repeat(cb, cbFinal, interval, count - 1);
			}, interval);
		}
	}
	function aimAndFire() {
		var numRepeats = Math.floor(5 + Math.random() * 5);
		function randomMove() {
			if (Math.random() > .5) {
				ctl.move(-distance);
			} else {
				ctl.move(distance);
			}
		}
		function randomAimAndFire() {
			var d = Math.floor(Math.random() * 3 - 1);
			opponent.setAim(d);
			opponent.fire();
			currentState = State.FOLLOWING;
		}
		repeat(randomMove, randomAimAndFire, 250, numRepeats);
	}
	function moveTowardsBall() {
		if (ball.getPosition()[1] >= ctl.getPosition()[1] + ctl.getSize() / 2) {
			ctl.move(distance);
		} else {
			ctl.move(-distance);
		}
		setTimeout(function () {
			currentState = State.FOLLOWING;
		}, 400);
	}
	function update() {
		switch (currentState) {
			case State.FOLLOWING:
				if (ball.getOwner() === ctl) {
					currentState = State.AIMING;
					aimAndFire();
				} else {
					moveTowardsBall();
					currentState = State.WAITING;
				}
			case State.WAITING:
				break;
			case State.AIMING:
				break;
		}
	}
	return {
		update: update
	}
}
function ai_move(ms = 100) {
	DA.ai_is_moving = true;
	let [A, fen] = [valf(Z.A, {}), Z.fen];
	let selitems;
	if (Z.game == 'ferro') {
		if (Z.stage == 'card_selection') {
			let uplayer = Z.uplayer;
			let i1 = firstCond(A.items, x => x.path.includes(`${uplayer}.hand`));
			let i2 = firstCond(A.items, x => x.key == 'discard');
			selitems = [i1, i2];
		} else if (Z.stage == 'buy_or_pass') {
			selitems = [A.items[1]];
		} else selitems = [A.items[0]];
	} else if (Z.game == 'bluff') {
		let [newbid, handler] = bluff_ai();
		if (newbid) { fen.newbid = newbid; UI.dAnzeige.innerHTML = bid_to_string(newbid); }
		else if (handler != handle_gehtHoch) { bluff_generate_random_bid(); }
		A.callback = handler;
		selitems = [];
	} else if (A.command == 'trade') {
		selitems = ai_pick_legal_trade();
	} else if (A.command == 'exchange') {
		selitems = ai_pick_legal_exchange();
	} else if (A.command == 'upgrade') {
		selitems = [rChoose(A.items)];
	} else if (A.command == 'rumor') {
		selitems = [];
		let buildings = A.items.filter(x => x.path.includes('building'));
		let rumors = A.items.filter(x => !x.path.includes('building'));
		selitems = [rChoose(buildings), rChoose(rumors)];
	} else if (ARI.stage[Z.stage] == 'rumors_weitergeben') {
		let players = A.items.filter(x => Z.plorder.includes(x.key))
		let rumors = A.items.filter(x => !Z.plorder.includes(x.key))
		selitems = [rChoose(players), rChoose(rumors)];
	} else if (ARI.stage[Z.stage] == 'journey') {
		selitems = [];
	} else {
		let items = A.items;
		let nmin = A.minselected;
		let nmax = Math.min(A.maxselected, items.length);
		let nselect = rNumber(nmin, nmax);
		selitems = rChoose(items, nselect); if (!isList(selitems)) selitems = [selitems];
	}
	for (const item of selitems) {
		select_last(item, select_toggle);
		if (isdef(item.submit_on_click)) A.selected.pop();
	}
	clearTimeout(TO.ai);
	loader_on();
	TO.ai = setTimeout(() => { if (isdef(A.callback)) A.callback(); loader_off(); }, ms);
}
function ai_pick_legal_exchange() {
	let [A, fen, uplayer, items] = [Z.A, Z.fen, Z.uplayer, Z.A.items];
	let firstPick = rChoose(items, 1, x => x.path.includes('building'));
	let secondPick = rChoose(items, 1, x => !x.path.includes('building'));
	return [firstPick, secondPick];
}
function ai_pick_legal_trade() {
	let [A, fen, uplayer, items] = [Z.A, Z.fen, Z.uplayer, Z.A.items];
	let stall = fen.players[uplayer].stall;
	let firstPick = rChoose(items, 1, x => x.path.includes(uplayer));
	let secondPick = rChoose(items, 1, x => !x.path.includes(uplayer));
	return [firstPick, secondPick];
}
function ai_schummler() { }
function AIMinimax(g, callback) {
	let state = g.getState();
	state = boardToNode(state);
	F_END = g.evalState;
	F_HEURISTIC = g.heuristic;
	F_MOVES = g.getAvailableMoves;
	F_APPLYMOVE = g.applyMove;
	F_UNDOMOVE = g.undoMove;
	MAXIMIZER = g.plTurn;
	MINIMIZER = g.plOpp;
	SelectedMove = null;
	let algorithm = g.copyState == true ? minimaxCopy : myMinimax;
	let val = algorithm(state, 0, -Infinity, Infinity, g.searchDepth, true);
	CCC = 0;
	callback(SelectedMove);
}
async function ajaxPostCors(url, data, type, handle_result) {
	data.data_type = type;
	var formData = new FormData();
	for (const k in data) {
		formData.append(k, data[k]);
	}
	let h = new Headers();
	h.append('Accept', 'application/text');
	var resp = await fetch(url, {
		method: 'POST',
		mode: 'cors',
		headers: h,
		body: formData,
	});
	let result = await resp.text();
	try {
		let jsonResult = JSON.parse(result);
		if (isdef(handle_result)) handle_result(jsonResult);
	} catch {
		if (isdef(handle_result)) handle_result({ message: result });
	}
}
function ajaxSimple(method, url, callback) {
	var ajax = new XMLHttpRequest();
	ajax.onload = () => {
		if (ajax.status == 200 || ajax.readyState == 4) {
			if (isdef(callback)) callback(ajax);
		}
	}
	ajax.open(method, url, true);
	ajax.send();
}
function aJumpby(elem, h = 40, ms = 1000) {
	anime({
		targets: elem,
		keyframes: [
			{ translateY: 2, scaleX: 1.05, scaleY: .95 },
			{ translateY: 2, scaleX: 1.05, scaleY: .95 },
			{ translateY: -h, scaleX: .9, scaleY: 1.1 },
			{ translateY: -h, scaleX: .9, scaleY: 1.1 },
			{ translateY: 0, scaleX: 1, scaleY: 1 },
			{ translateY: -7, scaleX: 1, scaleY: 1 },
			{ translateY: 0, scaleX: 1, scaleY: 1 },
			{ translateY: 0, scaleX: 1, scaleY: 1 },
			{ translateY: 0, scaleX: 1, scaleY: 1 },
			{ translateY: 0, scaleX: 1, scaleY: 1 },
		],
		duration: 1000,
		easing: 'easeInOutSine', //'easeOutElastic(1, .8)',
	});
}
function all2DigitFractions() {
	let fr = {
		1: [2, 3, 4, 5, 6, 7, 8, 9],
		2: [3, 5, 7, 9],
		3: [2, 4, 5, 7, 8],
		4: [3, 5, 7, 9],
		5: [2, 3, 4, 6, 7, 8, 9],
		6: [5, 7],
		7: [2, 3, 4, 5, 6, 8, 9],
		8: [3, 5, 7, 9],
		9: [2, 4, 5, 7, 8],
	};
	return fr;
}
function all2DigitFractionsExpanded() {
	let f = all2DigitFractions();
	let res = [];
	for (const i in f) {
		for (const j of f[i]) {
			res.push({ numer: i, denom: j });
		}
	}
	return res;
}
function all2DigitFractionsUnder1() {
	let fr = {
		1: [2, 3, 4, 5, 6, 7, 8, 9],
		2: [3, 5, 7, 9],
		3: [4, 5, 7, 8],
		4: [5, 7, 9],
		5: [6, 7, 8, 9],
		6: [7],
		7: [8, 9],
		8: [9],
	};
	return fr;
}
function all2DigitFractionsUnder1Expanded() {
	let f = all2DigitFractionsUnder1();
	let res = [];
	for (const i in f) {
		for (const j of f[i]) {
			res.push({ numer: i, denom: j });
		}
	}
	return res;
}
function allCond(arr, cond) { return forAll(arr, cond); }
function allCondDict(d, func) {
	let res = [];
	for (const k in d) { if (func(d[k])) res.push(k); }
	return res;
}
function allCondDictKV(d, func) {
	let res = [];
	for (const k in d) { if (func(k, d[k])) res.push(k); }
	return res;
}
function allCondX(ad, func) {
	let res = [];
	if (nundef(ad)) return res;
	else if (isDict(ad)) {
		for (const k in ad) {
			let v = ad[k];
			if (func(v)) { if (nundef(v.key)) v.key = k; res.push(v); }
		}
	} else {
		for (const a of ad) { if (func(a)) res.push(a) }
	}
	return res;
}
function allElementsFromPoint(x, y) {
	var element, elements = [];
	var old_visibility = [];
	while (true) {
		element = document.elementFromPoint(x, y);
		if (!element || element === document.documentElement) {
			break;
		}
		elements.push(element);
		old_visibility.push(element.style.visibility);
		element.style.visibility = 'hidden';
	}
	for (var k = 0; k < elements.length; k++) {
		elements[k].style.visibility = old_visibility[k];
	}
	elements.reverse();
	return elements;
}
function allIntegers(s) {
	return s.match(/\d+\.\d+|\d+\b|\d+(?=\w)/g).map(v => {
		return +v;
	});
}
function allLettersContained(sFull, sPart) {
	for (const ch of sPart) {
		if (!(sFull.includes(ch))) return false;
	}
	return true;
}
function allNumbers(s) {
	let m = s.match(/\-.\d+|\-\d+|\.\d+|\d+\.\d+|\d+\b|\d+(?=\w)/g);
	if (m) return m.map(v => +v); else return null;
}
function allNumbers_dep(s) {
	return s.match(/\d+\.\d+|\d+\b|\d+(?=\w)/g).map(v => {
		return +v;
	});
}
function allow_polling() { IS_POLLING_ALLOWED = true; if (isdef(DA.poll)) poll(); }
function allowDrop(ev) { ev.preventDefault(); }
function allowDropKey(ev) {
	ev.stopPropagation();
	let dragged = ev.toElement;
	let target = ev.target;
	if (nundef(key) || key == ev.target.dd) {
		ev.preventDefault();
		console.log(ev, '\nkey:', key, dragged.id, dragged.dd, target.dd)
	}
}
function ALLTESTS() {
	return {
		0: {
			0: {
				fStruct: makeRoot, options: {
					presentationStrategy: 'rec', autoType: 'cssEmpty',
					params: { _1: { width: 40, height: 40, color: 'red', 'background-color': 'blue' } }
				}
			},
		},
		1: {
			0: { fStruct: makeSimplestTree, options: { params: { '_1': { height: 120 } } } },
			1: { fStruct: makeSimplestTree, options: { params: { '_1': { width: 100, height: 120 } } } },
			2: { fStruct: makeSimpleTree, options: { params: { '_1': { width: 100, height: 120 } } } },
			3: { fStruct: makeSimpleTree, options: { params: { '_1': { orientation: 'v', width: 100, height: 120 } } } },
			4: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v' }, '_4': { orientation: 'v' } } } },
			5: { fStruct: makeTree332x2, options: { params: { '_1': { orientation: 'v' } } } },
			6: { fStruct: makeTree332x2, options: { params: { '_4': { orientation: 'v' } } } },
		},
		2: {
			0: { fStruct: makeTree33, options: { params: { '_4': { fg: 'red', orientation: 'v' } } } },
			1: { fStruct: makeTree33, options: { params: { '_4': { orientation: 'v' } } } },
			2: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v' } } } },
			3: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v' } } } },
			4: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v' }, '_4': { orientation: 'v' } } } },
			5: { fStruct: makeTree332x2, options: { params: { '_1': { orientation: 'v' } } } },
			6: { fStruct: makeTree332x2, options: { params: { '_4': { orientation: 'v' } } } },
			7: { fStruct: makeTree332x2, options: { params: { '_7': { orientation: 'v' } } } },
		},
		3: {
			0: { fStruct: makeTree33, options: { params: { '_4': { fg: 'red', orientation: 'v' } } } },
			1: { fStruct: makeTree33, options: { params: { '_4': { orientation: 'v' } } } },
			2: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v' } } } },
			3: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v' } } } },
			4: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v' }, '_4': { orientation: 'v' } } } },
			5: { fStruct: makeTree332x2, options: { params: { '_1': { orientation: 'v' } } } },
			6: { fStruct: makeTree332x2, options: { params: { '_4': { orientation: 'v' } } } },
			7: { fStruct: makeTree332x2, options: { params: { '_7': { orientation: 'v' } } } },
			8: { fStruct: makeTree332x2, options: { params: { '_4': { orientation: 'v' }, '_7': { orientation: 'v' } } } },
			9: { fStruct: makeSimplestTree, options: undefined },
			10: { fStruct: makeSimplestTree, options: { fContent: contentNoRootContent } },
			11: { fStruct: makeSimpleTree, options: undefined },
			12: { fStruct: makeSimpleTree, options: { params: { '_1': { orientation: 'v' } } } },
			13: { fStruct: makeSimpleTree, options: { fContent: contentNoRootContent } },
			14: { fStruct: makeTree33, options: { fContent: contentNoRootContent } },
			15: { fStruct: makeTree332x2, options: undefined },
			16: { fStruct: makeTree332x2, options: { fContent: contentNoRootContent } },
			17: { fStruct: () => makeSimpleTree(20), options: { fContent: contentNoRootContent } },
			18: { fStruct: makeSimplestTree, options: { fContent: contentRootExtralong } },
			19: { fStruct: makeTree33, options: { fContent: contentRootExtralong } },
			20: { fStruct: () => makeSimpleTree(3), options: { fContent: contentRootExtralong } },
			21: {
				fStruct: makeTree33, options: {
					params: {
						'_1': { bg: 'black', orientation: 'v' },
						'_4': { bg: 'inherit', orientation: 'v' }
					}
				}
			},
			22: { fStruct: makeTree33, options: { fContent: contentRootExtralong, params: { '_1': { orientation: 'v' } } } },
			23: { fStruct: makeTree33, options: { fContent: contentRootExtralong, params: { '_4': { orientation: 'v' } } } },
		},
		4: {
			0: { fStruct: makeSimplestTree, options: { fContent: n => n.uid == '_1' ? 'random' : n.uid, positioning: 'random' } },
			1: { fStruct: makeSimpleTree, options: { fContent: n => n.uid == '_1' ? 'random' : n.uid, positioning: 'random' } },
			2: { fStruct: () => makeSimpleTree(10), options: { fContent: n => n.uid == '_1' ? 'random' : n.uid, positioning: 'random' } },
			3: { fStruct: makeTree33, options: { fContent: n => n.uid == '_1' ? 'random' : n.uid, positioning: 'random' } },
		},
		5: {
			0: { fStruct: makeSimplestTree, options: { fContent: n => n.uid == '_1' ? 'hallo' : n.uid, params: { '_1': { height: 120 } } } },
			1: {
				fStruct: makeSimplestTree, options: {
					fContent: n => n.uid == '_1' ? { first: '1', uid: n.uid } : n.uid,
					params: { '_1': { bg: 'blue', 'text-align': 'center', width: 100, height: 120 } }
				}
			},
		},
		6: {
			41: {
				fStruct: () => makeTreeNNEach(2, 4), options: {
					params: {
						'_1': { orientation: 'h' },
						'_2': { orientation: 'w', rows: 2, cols: 2 },
						'_7': { orientation: 'w', rows: 2, cols: 2 }
					}
				}
			},
			40: {
				fStruct: () => makeTreeNNEach(1, 4),
				options: {
					params:
					{
						'_2': { orientation: 'w', rows: 2, cols: 2 }
					}
				}
			},
			39: {
				fStruct: () => makeTreeNNEach(2, 2), options: {
					params: {
						'_2': { orientation: 'w', rows: 1, cols: 2 },
						'_5': { orientation: 'w', rows: 1, cols: 2 }
					}
				}
			},
			38: {
				fStruct: () => makeTreeNNEach(2, 4), options: {
					params: {
						'_2': { orientation: 'w', rows: 2, cols: 2 },
						'_7': { orientation: 'w', rows: 2, cols: 2 }
					}
				}
			},
			37: { fStruct: makeSimpleTree, options: { fType: typePanelInfo, fContent: contentHallo } },
			36: { fStruct: makeSimpleTree, options: { fType: typePanelInfo, fContent: contentHallo, presentationStrategy: 'new' } },
			35: { fStruct: () => makeTreeNN(2, 2), options: { fType: typeEmpty, presentationStrategy: 'new' } },
			34: { fStruct: makeTree33, options: { fType: typeEmpty, presentationStrategy: 'new' } },
			33: { fStruct: makeTree33, options: { fType: typeEmpty, presentationStrategy: 'new', params: { '_1': { orientation: 'v' } } } },
			32: { fStruct: makeTree33, options: { presentationStrategy: 'orig', params: { '_1': { orientation: 'v' } } } },
			31: {
				fStruct: makeTree33, options: {
					fType: typePanelInfo,
					presentationStrategy: 'new',
					params: { '_1': { orientation: 'v' } }
				}
			},
			30: {
				fStruct: makeTree33, options: {
					fType: typeEmpty,
					presentationStrategy: 'rec',
					params: { '_1': { orientation: 'h' } }
				}
			},
			29: { fStruct: makeTree33, options: { params: { '_1': { orientation: 'v' } } } },
			28: { fStruct: () => makeSimpleTree(8), options: { presentationStrategy: 'new', fType: type00flex } },
			27: { fStruct: makeSimplestTree, options: { presentationStrategy: 'new', fType: type00flex } },
			26: { fStruct: makeSimplestTree, options: { presentationStrategy: 'new', fType: typeEmpty } },
			25: { fStruct: makeSimplestTree, options: { presentationStrategy: 'new' } },
			24: { fStruct: makeSimplestTree, options: undefined },
			23: { fStruct: makeSimplestTree, options: { presentationStrategy: 'orig' } },
			22: { fStruct: makeSimplestTree, options: { fType: typeEmpty } },
			21: { fStruct: () => makeHugeBoardInBoardOld(25, 5), options: { fContent: contentNoParentContent } },
			20: { fStruct: () => makeHugeBoardInBoard(25, 5), options: { fContent: contentNoParentContent } },
			19: { fStruct: () => makeHugeBoardInBoard(40, 5), options: { fContent: contentNoParentContent } },
			18: { fStruct: () => makeHugeBoardInBoard(4, 2), options: { fContent: contentNoParentContent } },
			17: { fStruct: () => makeTreeNNEach(2, 4), options: { fContent: contentNoParentContent, params: { '_1': { orientation: 'w', rows: 1, cols: 2 }, '_2': { contentwalign: 'center', contenthalign: 'center' }, '_7': { contentwalign: 'center', orientation: 'w', rows: 2, cols: 2 } } } },
			16: {
				fStruct: () => makeTreeNNEach(2, 4), options: {
					fContent: contentRootExtralong,
					params: {
						'_1': { orientation: 'w', rows: 1, cols: 2 },
						'_2': { contenthalign: 'center' },
						'_7': { contentwalign: 'center', orientation: 'w', rows: 2, cols: 2 }
					}
				}
			},
			15: {
				fStruct: () => makeTreeNNEach(2, 4), options: {
					params: {
						'_1': { orientation: 'w', rows: 1, cols: 2 },
						'_7': { orientation: 'w', rows: 2, cols: 2 }
					}
				}
			},
			14: { fStruct: () => makeTreeNN(2, 4), options: { fContent: contentNoParentContentRootExtralong, params: { '_1': { orientation: 'w', rows: 1, cols: 2 }, '_2': { orientation: 'w', rows: 2, cols: 2 } } } },
			13: { fStruct: () => makeTreeNN(2, 4), options: { params: { '_1': { orientation: 'w', rows: 1, cols: 2 }, '_2': { orientation: 'w', rows: 2, cols: 2 } } } },
			12: { fStruct: () => makeTreeNN(2, 4), options: { fContent: contentNoParentContent, params: { '_1': { orientation: 'w', rows: 1, cols: 2 }, '_2': { orientation: 'w', rows: 2, cols: 2 } } } },
			11: { fStruct: () => makeSimpleTree(3), options: { fContent: contentRootExtralong, params: { '_1': { orientation: 'w', rows: 3, cols: 1 } } } },
			10: { fStruct: () => makeSimpleTree(3), options: { params: { '_1': { orientation: 'w', rows: 3, cols: 1 } } } },
			9: { fStruct: () => makeSimpleTree(3), options: { fContent: contentNoParentContent, params: { '_1': { orientation: 'w', rows: 3, cols: 1 } } } },
			8: { fStruct: () => makeSimpleTree(2), options: { fContent: contentRootExtralong, params: { '_1': { orientation: 'w', rows: 2, cols: 1 } } } },
			7: { fStruct: () => makeSimpleTree(2), options: { params: { '_1': { orientation: 'w', rows: 2, cols: 1 } } } },
			6: { fStruct: () => makeSimpleTree(2), options: { fContent: contentNoParentContent, params: { '_1': { orientation: 'w', rows: 2, cols: 1 } } } },
			5: { fStruct: () => makeSimpleTree(4), options: { fContent: contentRootExtralong, params: { '_1': { orientation: 'w', rows: 2, cols: 2 } } } },
			4: { fStruct: () => makeSimpleTree(4), options: { params: { '_1': { orientation: 'w', rows: 2, cols: 2 } } } },
			3: { fStruct: () => makeSimpleTree(2), options: { fContent: contentRootExtralong } },
			2: { fStruct: () => makeSimpleTree(2), options: { positioning: 'regular', fContent: contentRootExtralong } },
			1: { fStruct: () => makeSimpleTree(20), options: { positioning: 'regular' } },
			0: { fStruct: () => makeSimpleTree(4), options: { fContent: n => n.uid == '_1' ? 'board' : n.uid, positioning: 'regular' } },
		},
		7: {
			0: { fStruct: makeSimpleTree, options: { autoType: 'cssEmpty', fContent: contentNoParentContent } },
		},
	};
}
function allWordsAndKeysLowerCase() {
	let newSyms = {};
	for (const k in Syms) {
		let info = Syms[k];
		let inew = jsCopy(info);
		for (const x of ['E', 'D', 'F', 'S']) {
			if (isdef(info[x])) {
				console.log(info[x])
				inew[x] = info[x].toLowerCase();
			}
		}
		newSyms[k.toLowerCase()] = inew;
	}
	downloadAsYaml(newSyms, 'syms1');
}
function allWordsContainedInKeys(dict, keywords) {
	let res = [];
	for (const k in dict) {
		let isMatch = true;
		for (const w of keywords) {
			if (!k.includes(w)) { isMatch = false; break; }
		}
		if (isMatch) res.push(dict[k]);
	}
	return res;
}
function allWordsContainedInKeysAsWord(dict, keywords) {
	let res = [];
	for (const k in dict) {
		let isMatch = true;
		let wordsInKey = splitAtWhiteSpace(k);
		for (const w of keywords) {
			if (!wordsInKey.includes(w)) { isMatch = false; break; }
		}
		if (isMatch) res.push(dict[k]);
	}
	return res;
}
function allWordsContainedInProps(dict, keywords, props) {
	let res = [];
	for (const k in dict) {
		let isMatch = true;
		let propString = '';
		for (const p of props) {
			propString += dict[k][p] + ' ';
		}
		for (const w of keywords) {
			if (!propString.includes(w)) { isMatch = false; break; }
		}
		if (isMatch) {
			res.push(dict[k]);
		}
	}
	return res;
}
function allWordsContainedInPropsAsWord(dict, keywords, props) {
	let res = [];
	for (const k in dict) {
		let isMatch = true;
		let keywordList = [];
		for (const p of props) {
			if (nundef(dict[k][p])) continue;
			let wordsInKey = splitAtWhiteSpace(dict[k][p]);
			keywordList = keywordList.concat(wordsInKey);
		}
		for (const w of keywords) {
			if (!keywordList.includes(w)) { isMatch = false; break; }
		}
		if (isMatch) res.push(dict[k]);
	}
	return res;
}
function AlphaBeta(alpha, beta, depth, DoNull) {
	if (depth <= 0) {
		return Quiescence(alpha, beta);
	}
	if ((srch_nodes & 2047) == 0) CheckUp();
	srch_nodes++;
	if ((IsRepetition() || brd_fiftyMove >= 100) && brd_ply != 0) {
		return 0;
	}
	if (brd_ply > MAXDEPTH - 1) {
		return EvalPosition(pos);
	}
	var InCheck = SqAttacked(brd_pList[PCEINDEX(Kings[brd_side], 0)], brd_side ^ 1);
	if (InCheck == BOOL.TRUE) {
		depth++;
	}
	var Score = -INFINITE;
	if (DoNull == BOOL.TRUE && BOOL.FALSE == InCheck &&
		brd_ply != 0 && (brd_material[brd_side] > 50200) && depth >= 4) {
		var ePStore = brd_enPas;
		if (brd_enPas != SQUARES.NO_SQ) HASH_EP();
		brd_side ^= 1;
		HASH_SIDE();
		brd_enPas = SQUARES.NO_SQ;
		Score = -AlphaBeta(-beta, -beta + 1, depth - 4, BOOL.FALSE);
		brd_side ^= 1;
		HASH_SIDE();
		brd_enPas = ePStore;
		if (brd_enPas != SQUARES.NO_SQ) HASH_EP();
		if (srch_stop == BOOL.TRUE) return 0;
		if (Score >= beta) {
			return beta;
		}
	}
	GenerateMoves();
	var MoveNum = 0;
	var Legal = 0;
	var OldAlpha = alpha;
	var BestMove = NOMOVE;
	Score = -INFINITE;
	var PvMove = ProbePvTable();
	if (PvMove != NOMOVE) {
		for (MoveNum = brd_moveListStart[brd_ply]; MoveNum < brd_moveListStart[brd_ply + 1]; ++MoveNum) {
			if (brd_moveList[MoveNum] == PvMove) {
				brd_moveScores[MoveNum].score = 2000000;
				break;
			}
		}
	}
	for (MoveNum = brd_moveListStart[brd_ply]; MoveNum < brd_moveListStart[brd_ply + 1]; ++MoveNum) {
		PickNextMove(MoveNum);
		if (MakeMove(brd_moveList[MoveNum]) == BOOL.FALSE) {
			continue;
		}
		Legal++;
		Score = -AlphaBeta(-beta, -alpha, depth - 1, BOOL.TRUE);
		TakeMove();
		if (srch_stop == BOOL.TRUE) return 0;
		if (Score > alpha) {
			if (Score >= beta) {
				if (Legal == 1) {
					srch_fhf++;
				}
				srch_fh++;
				if ((brd_moveList[MoveNum] & MFLAGCAP) == 0) {
					brd_searchKillers[MAXDEPTH + brd_ply] = brd_searchKillers[brd_ply];
					brd_searchKillers[brd_ply] = brd_moveList[MoveNum];
				}
				return beta;
			}
			alpha = Score;
			BestMove = brd_moveList[MoveNum];
			if ((BestMove & MFLAGCAP) == 0) {
				brd_searchHistory[brd_pieces[FROMSQ(BestMove)] * BRD_SQ_NUM + TOSQ(BestMove)] += depth;
			}
		}
	}
	if (Legal == 0) {
		if (InCheck) {
			return -MATE + brd_ply;
		} else {
			return 0;
		}
	}
	if (alpha != OldAlpha) {
		StorePvMove(BestMove);
	}
	return alpha;
}
function alphaToHex(zero1) {
	zero1 = Math.round(zero1 * 100) / 100;
	var alpha = Math.round(zero1 * 255);
	var hex = (alpha + 0x10000)
		.toString(16)
		.slice(-2)
		.toUpperCase();
	var perc = Math.round(zero1 * 100);
	return hex;
}
function aMove(d, dSource, dTarget, callback, offset, ms, easing, fade) {
	let b1 = getRect(dSource);
	let b2 = getRect(dTarget);
	if (nundef(offset)) offset = { x: 0, y: 0 };
	let dist = { x: b2.x - b1.x + offset.x, y: b2.y - b1.y + offset.y };
	d.style.zIndex = 100;
	let a = d.animate({ opacity: valf(fade, 1), transform: `translate(${dist.x}px,${dist.y}px)` }, { easing: valf(easing, 'EASE'), duration: ms });
	a.onfinish = () => { d.style.zIndex = iZMax(); if (isdef(callback)) callback(); };
}
function aMoveTo(d, dTarget, x, y, ms) {
	let bi = iTableBounds(d);
	let b1 = iTableBounds(d.parentNode);
	let b2 = iTableBounds(dTarget);
	d.animate([
		{ position: 'absolute', left: `${bi.x}px`, top: `${bi.y}px` },
		{ position: 'absolute', left: `${x + b2.x}px`, top: `${y + b2.y}px` },
	], {
		duration: ms,
		fill: 'forwards'
	});
}
function analyse_tables(user_tables) {
	user_tables.map(x => console.log('table:', x));
	let bygame = {}, bytid = {};
	for (const t of user_tables) {
		lookupAddToList(bygame, [t.game], t);
		lookupSet(bytid, [t.id], t);
	}
	if (!isEmpty(user_tables)) {
		Session.cur_table = user_tables[0];
		Session.cur_tid = Session.cur_table.id;
	} else {
		Session.cur_table = null;
		Session.cur_tid = undefined;
	}
	lookupSetOverride(DA, [Session.cur_user, 'tables_by_game'], bygame);
	lookupSetOverride(DA, [Session.cur_user, 'tables_by_tid'], bytid);
	return bygame;
}
function ani_say(d, fSpeak) {
	if (isdef(fSpeak)) fSpeak();
	mClass(d, 'onPulse');
	setTimeout(() => mRemoveClass(d, 'onPulse'), 500);
}
function aniFadeIn(elem, secs) {
	elem.style.opacity = 0;
	setTimeout(() => { mRemoveClass(elem, 'transopaOff'); mClass(elem, 'transopaOn'); }, secs * 1000);
}
function aniFadeInOut(elem, secs) {
	mClass(elem, 'transopaOn');
	setTimeout(() => { mRemoveClass(elem, 'transopaOn'); mClass(elem, 'transopaOff'); }, secs * 1000);
}
function aniFadeInOut_new(elem, msDuration) {
	elem.animate()
	mClass(elem, 'transopaOn');
	return setTimeout(() => { mRemoveClass(elem, 'transopaOn'); mClass(elem, 'transopaOff'); }, secs * 1000);
}
function aniGameOver(msg, silent = false) {
	if (!silent && !G.silentMode) { writeSound(); playSound('goodBye'); }
	interrupt();
	show('freezer2');
	let dComment = mBy('dCommentFreezer2');
	let dMessage = mBy('dMessageFreezer2');
	let d = mBy('dContentFreezer2');
	clearElement(d);
	mStyleX(d, { fz: 20, matop: 40, bg: 'silver', fg: 'indigo', rounding: 20, padding: 25 })
	let style = { matop: 4 };
	dComment.innerHTML = 'Great Job!';
	dMessage.innerHTML = isdef(msg) ? msg : 'Time for a Break...';
	d.style.textAlign = 'center';
	mText('Unit Score:', d, { fz: 22 });
	for (const gname in U.session) {
		let sc = U.session[gname];
		if (sc.nTotal == 0) continue;
		if (DB.games[gname].controllerType == 'solitaire') mText(`${DB.games[gname].friendly}: ${sc.nCorrect}/${sc.nTotal} correct answers (${sc.percentage}%) `, d, style);
		else if (DB.games[gname].controllerType == 'solo') {
			mText(`${DB.games[gname].friendly}: Won:${sc.nWins}, Lost:${sc.nLoses}, Tied:${sc.nTied} `, d, style);
		}
	}
	mClass(mBy('freezer2'), 'aniSlowlyAppear');
}
function aniInstruction(spoken) {
	if (isdef(spoken)) sayRandomVoice(spoken);
	mClass(dInstruction, 'onPulse');
	setTimeout(() => mRemoveClass(dInstruction, 'onPulse'), 500);
}
function anim_face_down(item, ms = 300, callback = null) { face_up(item); anim_toggle_face(item, callback); }
function anim_face_up(item, ms = 300, callback = null) { face_down(item); anim_toggle_face(item, callback); }
function anim_from_deck_to_hand(el, deck, hand) {
	let topmost = deck.items.shift();
	console.assert(el == topmost, 'top deck elem is NOT correct!!!!')
	face_up(topmost);
	let dfrom = iDiv(topmost);
	deck.list = deck.items.map(x => x.key);
	deck.topmost = deck.items[0];
	let dto = iDiv(arrLast(hand.items));
	let rfrom = getRect(dfrom, mBy('inner_left_panel'));
	let rto = getRect(dto, mBy('inner_left_panel'));
	dfrom.style.xIndex = 100;
	let [offx, offy] = [OVW, 0]
	let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t - rfrom.t, 500, 'ease');
	a.onfinish = () => {
		dfrom.remove();
		dfrom.style.position = 'static';
		hand.items.push(topmost);
		hand.list = hand.items.map(x => x.key);
		mAppend(hand.container, dfrom);
		mContainerSplay(hand.container, 2, CWIDTH, CHEIGHT, hand.list.length, OVW);
		mItemSplay(topmost, hand.list, 2, OVW);
	};
}
function anim_from_deck_to_handX(el, deck, hand) {
	anim_turn_top_card(el, () => anim_move_top_card(el, deck, hand));
}
function anim_from_deck_to_marketX(deck, market) {
	anim_turn_top_cardX(deck, () => anim_move_top_card_marketX(deck, market));
}
function anim_from_deck_to_marketX_orig(el, deck, market) {
	anim_turn_top_card(el, () => anim_move_top_card_market(el, deck, market));
}
function anim_move_top_card(el, deck, hand) {
	let topmost = deck.items.shift();
	console.assert(el == topmost, 'top deck elem is NOT correct!!!!')
	let dfrom = iDiv(topmost);
	deck.list = deck.items.map(x => x.key);
	deck.topmost = deck.items[0];
	let dto = iDiv(arrLast(hand.items));
	let rfrom = getRect(dfrom, mBy('inner_left_panel'));
	let rto = getRect(dto, mBy('inner_left_panel'));
	dfrom.style.xIndex = 100;
	let [offx, offy] = [OVW, 0]
	let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t - rfrom.t, 500, 'ease');
	a.onfinish = () => {
		dfrom.remove();
		dfrom.style.position = 'static';
		hand.items.push(topmost);
		hand.list = hand.items.map(x => x.key);
		mAppend(hand.container, dfrom);
		mContainerSplay(hand.container, 2, CWIDTH, CHEIGHT, hand.list.length, OVW);
		mItemSplay(topmost, hand.list, 2, OVW);
		qanim();
	};
}
function anim_move_top_card_market(deck, market) {
	let topmost = deck.items.shift();
	let dfrom = iDiv(topmost);
	deck.list = deck.items.map(x => x.key);
	deck.topmost = deck.items[0];
	let dto = isEmpty(market.items) ? market.container : iDiv(arrLast(market.items));
	let rfrom = getRect(dfrom, mBy('inner_left_panel'));
	let rto = getRect(dto, mBy('inner_left_panel'));
	dfrom.style.xIndex = 100;
	let [offx, offy] = isEmpty(market.items) ? [4, 4] : [topmost.w, 0];
	let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t - rfrom.t, 500, 'ease');
	a.onfinish = () => {
		dfrom.remove();
		dfrom.style.position = 'static';
		dfrom.style.zIndex = 0;
		market.items.push(topmost);
		market.list = market.items.map(x => x.key);
		mAppend(market.container, dfrom);
		qanim();
	};
}
function anim_move_top_card_marketX(deck, market) {
	let topmost = deck.items.shift();
	let dfrom = iDiv(topmost);
	deck.list = deck.items.map(x => x.key);
	deck.topmost = deck.items[0];
	let dto = isEmpty(market.items) ? market.container : iDiv(arrLast(market.items));
	let rfrom = getRect(dfrom, mBy('inner_left_panel'));
	let rto = getRect(dto, mBy('inner_left_panel'));
	dfrom.style.xIndex = 100;
	let [offx, offy] = isEmpty(market.items) ? [4, 4] : [topmost.w, 0];
	let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t - rfrom.t, 500, 'ease');
	a.onfinish = () => {
		dfrom.remove();
		dfrom.style.position = 'static';
		dfrom.style.zIndex = 0;
		market.items.push(topmost);
		market.list = market.items.map(x => x.key);
		mAppend(market.container, dfrom);
		qanim();
	};
}
function anim_move_top_cardX(deck, hand) {
	let topmost = deck.items.shift();
	let dfrom = iDiv(topmost);
	deck.list = deck.items.map(x => x.key);
	deck.topmost = deck.items[0];
	let dto = iDiv(arrLast(hand.items));
	let rfrom = getRect(dfrom, mBy('inner_left_panel'));
	let rto = getRect(dto, mBy('inner_left_panel'));
	dfrom.style.xIndex = 100;
	let [offx, offy] = [OVW, 0]
	let a = aTranslateByEase(dfrom, offx + rto.l - rfrom.l, offy + rto.t - rfrom.t, 500, 'ease');
	a.onfinish = () => {
		dfrom.remove();
		dfrom.style.position = 'static';
		hand.items.push(topmost);
		hand.list = hand.items.map(x => x.key);
		mAppend(hand.container, dfrom);
		mContainerSplay(hand.container, 2, CWIDTH, CHEIGHT, hand.list.length, OVW);
		mItemSplay(topmost, hand.list, 2, OVW);
		qanim();
	};
}
function anim_toggle_face(item, ms = 300, callback = null) {
	let d = iDiv(item);
	mClass(d, 'aniflip');
	TO.anim = setTimeout(() => {
		if (item.faceUp) face_down(item); else face_up(item); mClassRemove(d, 'aniflip');
		if (isdef(callback)) callback();
	}, ms);
}
function anim_toggle_face_orig(item, callback) {
	let d = iDiv(item);
	mClass(d, 'aniflip');
	TO.anim = setTimeout(() => {
		if (item.faceUp) face_down(item); else face_up(item); mClassRemove(d, 'aniflip');
		if (isdef(callback)) callback();
	}, 300);
}
function anim_turn_top_card(el, callback) {
	anim_toggle_face(el, callback);
}
function anim_turn_top_cardX(deck, callback) { anim_toggle_face(deck.topmost, callback); }
function anim1(elem, prop, from, to, ms) {
	if (prop == 'left') elem.style.position = 'absolute';
	if (isNumber(from)) from = '' + from + 'px';
	if (isNumber(to)) to = '' + to + 'px';
}
function animate(elem, aniclass, timeoutms) {
	mClass(elem, aniclass);
	TOMan.TO.anim = setTimeout(() => mRemoveClass(elem, aniclass), timeoutms);
}
function animate_card_approx(card, goal, ms, callback) {
	let d = iDiv(card);
	let dgoal = iDiv(goal);
	let r = getRect(d);
	let rgoal = getRect(dgoal);
	let c = { x: r.x + r.w / 2, y: r.y + r.h / 2 };
	let cgoal = { x: rgoal.x + rgoal.w / 2, y: rgoal.y + rgoal.h / 2 };
	let v = { x: cgoal.x - c.x, y: cgoal.y - c.y };
	mAnimateList(d, { transform: `translateX(${v.x}px) translateY(${v.y}px)`, opacity: 0 }, callback, ms, 'linear');
}
function animate_card_exchange(i0, i1, callback) {
	ari_make_unselectable(i0);
	ari_make_unselectable(i1);
	let d0 = iDiv(i0.o);
	let d1 = iDiv(i1.o);
	let r0 = getRect(d0);
	let r1 = getRect(d1);
	let c0 = { x: r0.x + r0.w / 2, y: r0.y + r0.h / 2 };
	let c1 = { x: r1.x + r1.w / 2, y: r1.y + r1.h / 2 };
	let v = { x: c1.x - c0.x, y: c1.y - c0.y };
	mTranslateBy(d0, v.x, v.y);
	mTranslateBy(d1, -v.x, -v.y, 700, callback);
}
function animate_card_transfer(card, goal, callback) {
	let d = iDiv(card);
	let dgoal = iDiv(goal);
	let r = getRect(d);
	let rgoal = getRect(dgoal);
	let c = { x: r.x + r.w / 2, y: r.y + r.h / 2 };
	let cgoal = { x: rgoal.x + rgoal.w / 2, y: rgoal.y + rgoal.h / 2 };
	let v = { x: cgoal.x - c.x, y: cgoal.y - c.y };
	mTranslateBy(d, v.x, v.y, 700, callback);
}
function animate_title() {
	var rev = "fwd";
	function titlebar(val) {
		var msg = "Hallodi!";
		var res = " ";
		var speed = 100;
		var pos = val;
		msg = "   |-" + msg + "-|";
		var le = msg.length;
		if (rev == "fwd") {
			if (pos < le) {
				pos = pos + 1;
				scroll = msg.substr(0, pos);
				document.title = scroll;
				timer = window.setTimeout("titlebar(" + pos + ")", speed);
			}
			else {
				rev = "bwd";
				timer = window.setTimeout("titlebar(" + pos + ")", speed);
			}
		}
		else {
			if (pos > 0) {
				pos = pos - 1;
				var ale = le - pos;
				scrol = msg.substr(ale, le);
				document.title = scrol;
				timer = window.setTimeout("titlebar(" + pos + ")", speed);
			}
			else {
				rev = "fwd";
				timer = window.setTimeout("titlebar(" + pos + ")", speed);
			}
		}
	}
	titlebar(0);
}
function animateColor(elem, from, to, classes, ms) {
	elem.style.backgroundColor = from;
	setTimeout(() => animate(elem, classes, ms), 10);
}
function animateColorScale(elem, color = 'green', scale = 1.5, timeoutms = 2000, aniClass = 'scaleInColor') {
	setCSSVariable('--aniColor', color);
	setCSSVariable('--aniScale', scale);
	mClass(elem, aniClass);
	setTimeout(() => mRemoveClass(elem, aniClass), timeoutms);
}
function animatedTitle(msg = 'DU BIST DRAN!!!!!') {
	TO.titleInterval = setInterval(() => {
		let corner = CORNERS[WhichCorner++ % CORNERS.length];
		document.title = `${corner} ${msg}`; //'⌞&amp;21543;    U+231E \0xE2Fo\u0027o Bar';
	}, 1000);
}
function animateProperty(elem, prop, start, middle, end, msDuration, forwards) {
	let kflist = [];
	for (const v of [start, middle, end]) {
		let o = {};
		o[prop] = isString(v) || prop == 'opacity' ? v : '' + v + 'px';
		kflist.push(o);
	}
	let opts = { duration: msDuration };
	if (isdef(forwards)) opts.fill = forwards;
	elem.animate(kflist, opts);
}
function animatePropertyX(elem, prop, start_middle_end, msDuration, forwards, easing, delay) {
	let kflist = [];
	for (const perc in start_middle_end) {
		let o = {};
		let val = start_middle_end[perc];
		o[prop] = isString(val) || prop == 'opacity' ? val : '' + val + 'px';
		kflist.push(o);
	}
	let opts = { duration: msDuration, fill: valf(forwards, 'none'), easing: valf(easing, 'ease-it-out'), delay: valf(delay, 0) };
	elem.animate(kflist, opts);
}
function animateStyles(d, styles1, styles2, ms) {
	d.style.transition = `${ms}ms`;
	mStyle(d, styles2);
}
function Animation(spriteSheet, imgWidth, imgHeight, cellWidth, cellHeight) {
	this.sheet = spriteSheet;
	this.imgWidth = imgWidth;
	this.imgHeight = imgHeight;
	this.cellWidth = cellWidth;
	this.cellHeight = cellHeight;
	this.animationLength = 1000;
	this.changeLength = false;
	this.cycles = new Array();
	this.currentCycleName = "";
	this.currentCycle = null;
	this.cyclePlaySettings = new Array(PLAY_LOOP, PLAY_LOOP, PLAY_LOOP, PLAY_LOOP);
	this.changeAnimation = false;
	this.timer = new Timer();
	this.framesPerRow = 0;
	this.framesPerColumn = 0;
	this.totalCycleTime = 0;
	this.fps = 0;
	this.isPaused = false;
	this.setup = function () {
		this.timer.start();
		this.framesPerRow = this.imgWidth / this.cellWidth;
		this.framesPerColumn = this.imgHeight / this.cellHeight;
	}
	this.addCycle = function (cycleName, startingCell, frames) {
		cycle = new Array(cycleName, startingCell, frames);
		this.cycles.push(cycle);
	}
	this.drawFrame = function (ctx) {
		this.fps += 1;
		if (!this.isPaused) { this.totalCycleTime += this.timer.getTimeElapsed(); }
		if (this.changeAnimation == true) {
			for (i = 0; i < this.cycles.length; i++) {
				if (this.cycles[i][0] == this.currentCycleName) {
					this.currentCycle = this.cycles[i];
				}
			}
		}
		if (this.changeAnimation || this.changeLength) {
			this.frameDelta = this.animationLength / this.currentCycle[2];
			this.changeAnimation = false;
			this.changeLength = false;
			this.fps = 0;
		}
		currentFrame = Math.floor((this.totalCycleTime % this.animationLength) / this.frameDelta);
		document.getElementById("FPS").innerHTML = this.animationLength;
		row = Math.floor((this.currentCycle[1] + currentFrame) / this.framesPerRow);
		col = (this.currentCycle[1] + currentFrame) - (row * Math.floor(this.imgWidth / this.cellWidth));
		frameY = row * this.cellHeight;
		frameX = col * this.cellWidth;
		ctx.drawImage(this.sheet, frameX, frameY, this.cellWidth, this.cellHeight, 0 - (this.cellWidth / 2), 0 - (this.cellHeight / 2), this.cellWidth, this.cellHeight);
	}
	this.setCycle = function (cycleName) {
		this.currentCycleName = cycleName;
		this.changeAnimation = true;
		this.totalCycleTime = 0;
	}
	this.renameCycles = function (cycleNames) {
		for (i = 0; i < cycleNames.length; i++) {
			number = parseInt(this.cycles[i][0].slice(5));
			if (this.currentCycleName == this.cycles[i][0]) { this.currentCycleName = cycleNames[number - 1]; }
			this.cycles[i][0] = cycleNames[number - 1];
		}
	}
	this.play = function () {
		this.isPaused = false;
		this.timer.reset();
	}
	this.pause = function () {
		this.isPaused = true;
	}
	this.reset = function () {
		this.totalCycleTime = 0;
		this.timer.reset();
	}
	this.setAnimationSpeed = function (animLength) {
		if (animLength <= 50) { animLength = 50; }
		this.animationLength = animLength;
		this.changeLength = true;
	}
}
function animationCallback(secs, callback, removeBg = false) {
	for (const p of Pictures) { slowlyTurnFaceDown(p, secs - 1, removeBg); }
	TOMain = setTimeout(() => {
		callback();
	}, secs * 1000);
}
function animbuilding(ui_building, ms = 800, callback = null) {
	let d = ui_building.cardcontainer;
	let ani = [{ transform: 'scale(1)' }, { transform: 'scale(1.5)' }, { transform: 'scale(1)' }];
	let options = {
		duration: ms,
		iterations: 1,
		easing: 'ease-out',
	};
	let a = d.animate(ani, options);
	a.onfinish = callback;
}
function animcoin(plname, ms = 800, callback = null) {
	let d = UI.player_stat_items[plname].dCoin;
	let ani = [{ transform: 'scale(1)' }, { transform: 'scale(3)' }, { transform: 'scale(1)' }];
	let options = {
		duration: ms,
		iterations: 1,
		easing: 'ease-out',
	};
	let a = d.animate(ani, options);
	a.onfinish = () => {
		let uplayer = Z.uplayer;
		let dAmount = UI.player_stat_items[uplayer].dAmount;
		dAmount.innerHTML = Z.fen.players[uplayer].coins;
		mStyle(dAmount, { fg: 'red' });
		if (callback) callback();
	};
}
function animtest(d, ms = 1000, callback) {
	let spinAway = [
		{ transform: 'rotate(0) scale(1)' },
		{ transform: 'rotate(360deg) scale(0)' }
	];
	spinAway = [
		{ transform: 'rotate(0) scale(1)' },
		{ transform: 'rotate(180deg) scale(0)' },
		{ transform: 'rotate(360deg) scale(2)' }
	];
	spinAway = [
		{ transform: 'scale(1)' },
		{ transform: 'scale(3)' },
		{ transform: 'scale(1)' }
	];
	let options = {
		duration: ms,
		iterations: 1,
		easing: 'ease-out', //'cubic-bezier(.24,.65,.78,.03)',
	}
	d.addEventListener('click', (ev) => {
		evNoBubble(ev);
		let a = d.animate(spinAway, options);
		a.onfinish = callback;
	});
}
function aniPulse(elem, ms) { animate(elem, 'onPulse', ms); }
function anipulse(d, ms = 3000, callback) {
	let a = d.animate(
		[{
			'background-color': '#2ba805',
			'box-shadow': '0 0 3px #2ba805'
		},
		{
			'background-color': `#49e819`,
			'box-shadow': `0 0 10px #49e819`,
		},
		{
			'background-color': `#2ba805`,
			'box-shadow': `0 0 3px #2ba805`
		}], { fill: 'both', duration: ms, easing: 'ease', delay: 1000 });
	a.onfinish = callback;
	return a;
}
function aniSequence() { }
function aniSuper(elem, name, duration, easing, delay, iterations, direction, before_after, playstate) { }
function annotate(sp) {
	for (const k in sp) {
		let node = sp[k];
		node.pool = [];
		let pool = makePool(node);
		for (const oid in pool) {
			let o = pool[oid];
			if (!evalCond(o, node)) continue;
			if (nundef(o.RSG)) o.RSG = {};
			let rsg = o.RSG;
			rsg[k] = true;
			node.pool.push(oid);
		}
	}
}
function any(arr, cond) {
	return !isEmpty(arr.filter(cond));
}
function anyStartsWith(arr, prefix) {
	return any(arr, el => startsWith(el, prefix));
}
function anyString(x, indent = 0, ifDict = 'entries') {
	if (isLiteral(x)) return x;
	else if (isListOfLiterals(x)) return x.join(' ');
	else if (isEmpty(x)) return x;
	else if (isList(x)) { return x.map(el => anyString(el, indent + 1, ifDict)).join(' '); }
	else if (isDict(x)) {
		let s = '';
		for (const k in x) { s += '\n' + ' '.repeat(indent) + k + ': ' + anyString(x[k], indent + 1, ifDict); }
		return s;
	}
}
function anyString2(x, indent = 0, proplist, include = true, toplevelOnly = false) {
	if (isLiteral(x)) return x;
	else if (isListOfLiterals(x)) return x.join(' ');
	else if (isEmpty(x)) return x;
	else if (isList(x)) {
		if (toplevelOnly) proplist = null;
		return x.map(el => anyString2(el, indent + 1, proplist, include)).join(' ');
	}
	else if (isDict(x)) {
		let plist = proplist;
		if (toplevelOnly) proplist = null;
		let s = '';
		if (isdef(plist)) {
			if (include) {
				for (const k of plist) {
					if (nundef(x[k])) { console.log('continue', x, k); continue; }
					s += '\n' + ' '.repeat(indent) + k + ': ' + anyString2(x[k], indent + 1, proplist, include);
				}
			} else {
				for (const k of plist) {
					if (isdef(x[k])) continue;
					s += '\n' + ' '.repeat(indent) + k + ': ' + anyString2(x[k], indent + 1, proplist, include);
				}
			}
		} else {
			for (const k in x) { s += '\n' + ' '.repeat(indent) + k + ': ' + anyString2(x[k], indent + 1, proplist, include); }
		}
		return s;
	}
}
function anyString3(x, indent = 0, proplist = null, include = true, guard = ['specKey', 'label', 'pool', 'el', 'sub', 'elm', 'cond', 'info', 'o', 'ui', 'source', 'bi']) {
	if (isLiteral(x)) return x;
	else if (isListOfLiterals(x)) return x.join(' ');
	else if (isEmpty(x)) return x;
	else if (isList(x)) {
		return x.map(el => anyString3(el, indent + 1, proplist, include)).join(' ');
	}
	else if (isDict(x)) {
		let s = '';
		for (const k in x) {
			if (guard.includes(k)) continue;
			if (isdef(proplist) && !include && proplist.includes(k)) continue;
			else if (isdef(proplist) && include && !proplist.includes(k)) continue;
			s += '\n' + ' '.repeat(indent) + k + ': ' + anyString3(x[k], indent + 1, proplist, include);
		}
		return s;
	}
}
function anyToString1(x, indent = 0, ifDict = 'entries') {
	if (isList(x) && !isEmpty(x)) { return x.join(' '); }
	else if (isDict(x)) {
		return ifDict == 'keys' ? Object.keys(x).join(' ')
			: ifDict == 'entries' ? Object.entries(x).map(([k, v]) => k + ': ' + dictOrListToString(v, 'ifDict', indent + 2)).join('\n')
				: Object.entries(x).join(' ');
	}
	else return x;
}
function anyWordContainedInKeys(dict, keywords) {
	let res = [];
	for (const k in dict) {
		let isMatch = false;
		for (const w of keywords) {
			if (k.includes(w)) { isMatch = true; break; }
		}
		if (isMatch) res.push(dict[k]);
	}
	return res;
}
function anyWordContainedInKeysAsWord(dict, keywords) {
	let res = [];
	for (const k in dict) {
		let isMatch = false;
		let wordsInKey = splitAtWhiteSpace(k);
		for (const w of keywords) {
			if (wordsInKey.includes(w)) { isMatch = true; break; }
		}
		if (isMatch) res.push(dict[k]);
	}
	return res;
}
function anyWordContainedInProps(dict, keywords, props) {
	let res = [];
	for (const k in dict) {
		let isMatch = false;
		let propString = '';
		for (const p of props) { propString += dict[k][p]; }
		for (const w of keywords) {
			if (propString.includes(w)) { isMatch = true; break; }
		}
		if (isMatch) res.push(dict[k]);
	}
	return res;
}
function anyWordContainedInPropsAsWord(dict, keywords, props) {
	let res = [];
	for (const k in dict) {
		let isMatch = false;
		let keywordList = [];
		for (const p of props) {
			if (nundef(dict[k][p])) continue;
			let wordsInKey = splitAtWhiteSpace(dict[k][p]);
			keywordList = keywordList.concat(wordsInKey);
		}
		for (const w of keywords) {
			if (keywordList.includes(w)) { isMatch = true; break; }
		}
		if (isMatch) res.push(dict[k]);
	}
	return res;
}
function apiphp(o, saveFromZ = false) {
	let [data, cmd] = [o.data, o.cmd];
	let result = {}, friendly, uname, state, player_status, fen;
	if (saveFromZ && isdef(data.friendly) && !db_table_exists(data.friendly)) {
		let res = db_new_table(data.friendly, Z.game, Z.host, jsCopy(Z.playerlist), jsCopy(Z.fen), jsCopy(Z.options));
		if (isdef(Z.playerdata)) res.playerdata = jsCopy(Z.playerdata);
	}
	if (cmd == 'table') {
		if (isdef(data.auto)) result.auto = data.auto;
		friendly = data.friendly;
		uname = data.uname;
		result.status = "table";
		if (isdef(data.clear_players)) {
			result.playerdata = db_clear_players(friendly);
			result.status = "clear_players";
		} else if (isdef(data.write_player) && isdef(data.state)) {
			player_status = isdef(data.player_status) ? data.player_status : '';
			result.playerdata = db_write_player(friendly, uname, data.state, player_status);
			result.status = "write_player";
		} else {
			result.playerdata = db_read_playerdata(friendly);
		}
		if (isdef(data.write_fen)) {
			result.table = db_write_fen(friendly, data.fen);
			result.status += " write_fen";
		} else {
			result.table = db_read_table(friendly);
		}
	} else if (cmd == 'startgame') {
		let res = db_new_table(data.friendly, data.game, data.host, data.players, data.fen, data.options);
		result.table = res.table;
		result.playerdata = res.playerdata;
		result.status = `startgame ${data.friendly}`;
	} else if (cmd == 'tables') {
		result.tables = dict2list(GT, 'friendly').map(x => x.table);
		result.status = "tables";
	} else if (cmd == 'gameover') {
		result.table = db_write_fen(data.friendly, data.fen, data.scoring);
		result.status = `scored table ${data.friendly}`;
	}
	return result;
}
function appears_once_only(board, possibilities, segment, r, c) {
	let updated = false
	for (i = 0; i < possibilities.length; i++) {
		let possibility = possibilities[i]
		let counter = 0
		segment.forEach(cell => {
			if (Array.isArray(cell)) {
				if (cell.includes(possibility)) {
					counter++
				}
			} else {
				if (cell == possibility) {
					counter++
				}
			}
		})
		if (counter == 1) {
			board[r][c] = possibility
			updated = true
			break
		}
	}
	return updated
}
function apply_skin1(item) {
	let d = item.container; mCenterFlex(d); mStyle(d, { position: 'relative', w: 400 });
	mText(`${item.label}: <span style="font-size:20px;margin:10px;color:red">${item.content}</span>`, d);
	let b = mButton(item.caption, item.handler, d, { position: 'absolute', right: 0, top: 'calc( 50% - 12px )', h: 24 }, ['selectbutton', 'enabled']);
	console.log('button', b)
}
function apply_skin2(item) {
	let d = item.container; mCenterFlex(d); mStyle(d, { position: 'relative', w: 400 });
	let h = 24;
	let top = `calc( 50% - ${h / 2}px )`
	mText(item.label + ':', d, { position: 'absolute', left: 0, top: top, h: h });
	mText(`<span style="font-size:20px;margin:10px;color:red">${item.content}</span>`, d);
	item.button = mButton(item.caption, item.handler, d, { position: 'absolute', right: 0, top: top, h: h, w: 80 }, ['selectbutton', 'enabled']);
}
function apply_skin3(item) {
	let d = item.container; mCenterCenterFlex(d); mStyle(d, { position: 'relative', w: 400 });
	let h = 24;
	let top = `calc( 50% - ${h / 2}px )`
	mText(item.label + ':', d, { position: 'absolute', left: 0, top: top, h: h });
	let panel = UI.dAnzeige = item.panel = mDiv(d, { bg: '#ffffff80', padding: '4px 12px', w: 200, align: 'center', rounding: 8 });
	let words = toWords(item.content)
	let panelitems = UI.panelItems = item.panelitems = [];
	for (let i = 0; i < 4; i++) {
		let text = valf(words[i], '');
		let dw = mDiv(panel, { hpadding: 4, display: 'inline', fz: 22, weight: 'bold', fg: 'red' }, `dbid_${i}`, text);
		panelitems.push({ div: dw, index: i, initial: text, state: 'unselected' })
	}
	let b = item.buttonX = mDiv(panel, { fz: 10, hpadding: 4, bg: 'white' }, null, 'CLR', 'enabled'); mPlace(b, 'tr', 2)
	b.onclick = bluff_clear_panel;
	item.button = mButton(item.caption, item.handler, d, { position: 'absolute', right: 0, top: top, h: h, w: 80 }, ['selectbutton', 'enabled']);
}
function applyColorkey(item) {
	let l = item.live;
	let sShade = '0 0 0 ' + item.textShadowColor;
	item.shadeStyles = { 'text-shadow': sShade, fg: colorFrom('black', l.options.contrast) };
	let ui = l.options.showPic ? l.dPic : l.dLabel;
	mStyleX(ui, item.shadeStyles);
}
function applyCssStyles(ui, params) {
	let domType = getTypeOf(ui);
	if (domType == 'g') {
		mStyle(ui, params);
	} else {
		mStyle(ui, params);
	}
}
function applySettings(b, s, h = 768, topFrame = 0) {
	let isRealBoard = topFrame == 0;
	let hBoard = h, wBoard = 2 * h;
	let scale = hBoard / valf(s.hBoard, 768);
	calcLayoutParameters(s, b, scale);
	clearElement(b.dOuter);
	b.fields = null;
	createFields(s, b, scale);
	console.log('applySettings: baseColor', s.baseColor);
	if (isRealBoard) setNewBackgroundColor(s.baseColor);
	return b;
}
function applyStandard(dParent, s, h = 768, topFrame = 0) {
	let isRealBoard = topFrame == 0;
	let b = { boardFilename: s.boardFilename };
	let hBoard = h, wBoard = 2 * h;
	let scale = hBoard / valf(s.hBoard, 768);
	calcLayoutParameters(s, b, scale);
	let d0;
	if (isRealBoard) {
		d0 = b.d0 = mDiv(dParent, { h: hBoard });
	} else {
		d0 = b.d0 = mDiv(dParent, { w: wBoard + 100, h: hBoard + topFrame }, 'd0_' + b.boardFilename);
	}
	mCenterCenterFlex(d0);
	let dOuter = b.dOuter = mDiv(d0, {}, 'dOuter_' + b.boardFilename);
	mCenterCenterFlex(dOuter);
	loadBoardImage(dParent, s, b, scale, topFrame != 0);
	console.log('applyStandard: baseColor', s.baseColor);
	if (isRealBoard) setNewBackgroundColor(s.baseColor);
	createFields(s, b, scale);
	return b;
}
function applyStyles(g, id, styles) { g.mStyle(id, styles, isdef(g.getNode(id)) ? 'node' : 'edge'); }
function appSpecificSettings() {
	updateLabelSettings();
	updateTimeSettings();
	updateKeySettings();
	updateSpeakmodeSettings();
}
function areaBlink(id) {
	let area = UIS[id];
	if (area) area.elem.classList.add('blink');
}
function areaRows(soDict, loc) {
	let area = getVisual(loc);
	let [w, areaH] = area.getSize();
	let keys = getKeys(soDict);
	let n = keys.length;
	let h = Math.floor(areaH / n);
	let extra = areaH - n * h;
	let x = 0;
	let y = 0;
	let [iPalette, ipal] = area.getColorInfo();
	let pal = S.pals[iPalette];
	ipal = n <= pal.length - ipal ? ipal : n <= pal.length ? pal.length - n : ipal;
	let i = 0;
	for (const k in soDict) {
		let id = k;
		i += 1;
		let o = createMainDiv(id, loc);
		let h1 = i == n - 1 ? h + extra : h;
		o.setBounds(x, y, w, h1);
		o.setPalette(iPalette, ipal);
		y += h1;
		ipal = (ipal + 1) % pal.length;
	}
}
function areNeighbors(r1, r2) {
	let res = firstCond(r1.doors, x => x.includes(r1.id) && x.includes(r2.id));
	return res != null;
}
function aRestore(elem) { elem.style.transform = ''; }
function ari_action_round_over(otree, plturn) {
	ari_move_market_to_discard(otree);
	ari_move_stalls_to_hands(otree);
	ari_add_hand_card(otree);
	otree.round = [];
	otree.iturn = 0;
	if (otree.stage == 10) {
		otree.phase = 'queen';
		otree.stage = 3;
	} else if (otree.phase == 'king') {
		otree.pl_gameover = [];
		for (const uname of otree.plorder) {
			let [bcorrect, realvps] = ari_get_correct_buildings(otree[uname].buildings);
			let can_end = ari_check_end_condition(bcorrect);
			if (can_end) otree.pl_gameover.push(uname);
		}
		if (!isEmpty(otree.pl_gameover)) {
			otree.stage = 10;
			otree.iturn = otree.plorder.indexOf(otree.pl_gameover[0]);
		} else {
			otree.phase = 'queen';
			otree.stage = 3;
		}
	} else if (otree.phase == 'queen') {
		for (const uname of otree.plorder) {
			for (const k in otree[uname].buildings) {
				if (k == 'farms') continue;
				let n = otree[uname].buildings[k].length;
				otree[uname].coins += n;
			}
		}
		otree.phase = 'jack';
		otree.stage = 3;
	} else {
		ari_move_herald(otree, plturn);
		ari_add_harvest_cards(otree);
		otree.phase = 'king';
		ari_tax_phase_needed(otree, plturn);
	}
}
function ari_activate_ui() { ari_pre_action(); }
function ari_add_hand_card() {
	let fen = Z.fen;
	for (const uplayer of fen.plorder) {
		ari_ensure_deck(fen, 1);
		top_elem_from_to(fen.deck, fen.players[uplayer].hand);
	}
}
function ari_add_harvest_cards(fen) {
	for (const plname of fen.plorder) {
		for (const f of fen.players[plname].buildings.farm) {
			if (nundef(f.h)) {
				let list = [];
				ari_ensure_deck(fen, 1);
				top_elem_from_to(fen.deck, list);
				f.h = list[0];
			}
		}
	}
}
function ari_add_rumor(fenbuilding, key) {
	if (nundef(fenbuilding.rumors)) fenbuilding.rumors = [];
	fenbuilding.rumors.push(key);
}
function ari_branch(obj, otree, rtree) {
	verify_unit_test(otree);
	ari_player_stats(otree);
	G.plprev = G.plturn;
	let plturn = G.plturn = otree.plturn;
	let turn_changed = G.plprev != G.plturn;
	let my_turn = G.plturn == G.cur_user;
	console.assert(otree.plturn == otree.plorder[otree.iturn], 'TURN MIXUP!');
	if (TESTING) console.log('___ ITER:' + ITER, plturn, turn_changed ? '(changed)' : '', my_turn ? 'ME!' : '', isdef(otree.num_actions) ? 'actions:' + otree.num_actions : '');
	ari_present(otree, plturn);
	A = { level: 0, di: {}, ll: [], items: [], selected: [], tree: null, breadcrumbs: [], sib: [], command: null };
	console.assert(G.otree == otree, 'OTREE FAIL!!!!!!!!!!!');
	table_shield_off();
	if (isdef(otree.winner)) {
		stop_game();
		ari_reveal_all_buildings(otree);
		if (!TestRunning) turn_show_gameover(otree);
	} else if (G.cur_user == plturn || is_admin(G.cur_user)) {
		ari_pre_action(otree, plturn);
	} else {
		let txt = otree.num_actions > 0 ? ('(' + otree.action_number + '/' + otree.total_pl_actions + ')') : '';
		dTop.innerHTML =
			`<div style='padding:4px 10px;font-size:20px;display:flex;justify-content:space-between'>
      <div>${G.table.friendly.toLowerCase()}</div>
      <div>${plturn} ${txt} ${ARI.stage[otree.stage]}</div>
      <div>phase: ${otree.phase.toUpperCase()}</div>
    </div>`;
		table_shield_on();
	}
}
function ari_calc_fictive_vps(fen, plname) {
	let pl = fen.players[plname];
	let bs = pl.buildings;
	let vps = calc_building_vps(bs);
	return vps;
}
function ari_calc_real_vps(fen, plname) {
	let pl = fen.players[plname];
	let bs = ari_get_correct_buildings(pl.buildings);
	let vps = calc_building_vps(bs);
	for (const btype in bs) {
		let blist = bs[btype];
		for (const b of blist) {
			let lead = b.list[0];
			if (firstCond(pl.commissions, x => x[0] == lead[0])) {
				vps += 1;
			}
		}
	}
	return vps;
}
function ari_check_action_available(a, fen, uplayer) {
	let cards;
	let pl = fen.players[uplayer];
	if (a == 'trade') {
		cards = ari_get_all_trading_cards(fen);
		let not_pl_stall = cards.filter(x => !pl.stall.includes(x.key));
		return cards.length >= 2 && pl.stall.length > 0 && not_pl_stall.length > 0;
	} else if (a == 'exchange') {
		cards = ari_get_all_wrong_building_cards(fen, uplayer);
		return cards.length > 0 && (pl.hand.length + pl.stall.length > 0);
	} else if (a == 'build') {
		let res = ari_get_player_hand_and_stall(fen, uplayer);
		if (res.length < 4) return false;
		let has_a_king = firstCond(res, x => x[0] == 'K');
		if (pl.coins < 1 && !has_a_king) return false;
		if (fen.phase != 'king' && (!has_a_king || res.length < 5)) return false;
		if (pl.coin == 0 && res.length < 5) return false;
		return true;
	} else if (a == 'upgrade') {
		if (isEmpty(pl.buildings.farm) && isEmpty(pl.buildings.estate)) return false;
		let res = ari_get_player_hand_and_stall(fen, uplayer);
		if (isEmpty(res)) return false;
		let has_a_king = firstCond(res, x => x[0] == 'K');
		if (pl.coins < 1 && !has_a_king) return false;
		if (fen.phase != 'king' && !has_a_king) return false;
		if (pl.coin == 0 && res.length < 2) return false;
		return true;
	} else if (a == 'downgrade') {
		if (isEmpty(pl.buildings.chateau) && isEmpty(pl.buildings.estate)) return false;
		return true;
	} else if (a == 'buy') {
		if (fen.open_discard.length == 0) return false;
		let res = ari_get_player_hand_and_stall(fen, uplayer);
		let has_a_jack = firstCond(res, x => x[0] == 'J');
		if (pl.coins < 1 && !has_a_jack) return false;
		if (fen.phase != 'jack' && !has_a_jack) return false;
		return true;
	} else if (a == 'visit') {
		let others = fen.plorder.filter(x => x != uplayer);
		let n = 0;
		for (const plname of others) {
			for (const k in fen.players[plname].buildings) {
				n += fen.players[plname].buildings[k].length;
			}
		}
		if (n == 0) return false;
		let res = ari_get_player_hand_and_stall(fen, uplayer);
		let has_a_queen = firstCond(res, x => x[0] == 'Q');
		if (pl.coins < 1 && !has_a_queen) return false;
		if (fen.phase != 'queen' && !has_a_queen) return false;
		return true;
	} else if (a == 'harvest') {
		let harvests = ari_get_all_building_harvest_cards(fen, uplayer);
		return !isEmpty(harvests);
	} else if (a == 'pickup') {
		return !isEmpty(pl.stall);
	} else if (a == 'sell') {
		return pl.stall.length >= 2;
	} else if (a == 'pass') {
		return true;
	} else if (a == 'commission') {
		for (const c of pl.commissions) {
			let rank = c[0];
			if (firstCond(pl.stall, x => x[0] == rank)) return true;
		}
		return false;
	} else if (a == 'rumor') {
		if (isEmpty(pl.rumors)) return false;
		let others = fen.plorder.filter(x => x != uplayer);
		let n = 0;
		for (const plname of others) {
			for (const k in fen.players[plname].buildings) {
				n += fen.players[plname].buildings[k].length;
			}
		}
		if (n == 0) return false;
		return true;
	} else if (a == 'inspect') {
		if (isEmpty(pl.rumors)) return false;
		let others = fen.plorder.filter(x => x != uplayer);
		let n = 0;
		for (const plname of others) {
			for (const k in fen.players[plname].buildings) {
				n += fen.players[plname].buildings[k].length;
			}
		}
		return n > 0;
	} else if (a == 'blackmail') {
		let others = fen.plorder.filter(x => x != uplayer);
		let n = 0;
		for (const plname of others) {
			for (const k in fen.players[plname].buildings) {
				let list = fen.players[plname].buildings[k];
				let building_with_rumor = firstCond(list, x => !isEmpty(x.rumors));
				if (building_with_rumor) n++;
			}
		}
		if (n == 0) return false;
		let res = ari_get_player_hand_and_stall(fen, uplayer);
		let has_a_queen = firstCond(res, x => x[0] == 'Q');
		if (pl.coins < 1 && !has_a_queen) return false;
		if (fen.phase != 'queen' && !has_a_queen) return false;
		return true;
	} else if (a == 'buy rumor') {
		if (fen.deck_rumors.length == 0) return false;
		if (pl.coins < 1) return false;
		return true;
	}
}
function ari_check_end_condition(blist) {
	let nchateau = blist.chateau.length;
	let nfarm = blist.farm.length;
	let nestate = blist.estate.length;
	if (nchateau >= 2 || nchateau >= 1 && nfarm >= 3 || nchateau >= 1 && nestate >= 2) {
		return true;
	}
	return false;
}
function ari_clear_church() {
	let [fen, A, uplayer] = [Z.fen, Z.A, Z.uplayer];
	for (const prop of ['church', 'church_order', 'selorder', 'tithemin', 'tithe_minimum', 'toBeSelected', 'candidates']) delete fen[prop];
	for (const plname in fen.players) {
		delete fen.players[plname].tithes;
	}
	fen.church = ari_deck_deal_safe(fen, Z.plorder.length);
}
function ari_complete_building() {
	let [otree, plturn] = [G.otree, G.otree.plturn];
	let building_items = A.selected.map(x => A.items[x]);
	let building_type = building_items.length == 4 ? 'farms' : building_items.length == '5' ? 'estates' : 'chateaus';
	console.log('...building a', building_type);
	otree[plturn].buildings[building_type].push({ list: building_items.map(x => x.key), h: null });
	for (const item of building_items) {
		let source = lookup(otree, item.path.split('.'));
		removeInPlace(source, item.key);
	}
	ari_redo_player_ui(otree, plturn);
	ari_next_action(otree, plturn);
}
function ari_complete_upgrade() {
	let [otree, plturn] = [G.otree, G.otree.plturn];
	let gb = A.building;
	let b = lookup(otree, gb.path.split('.'));
	let n = A.upgrade_cards.length;
	let type0 = gb.o.type;
	let len = gb.o.list.length + n;
	let type1 = len == 5 ? 'estates' : 'chateaus';
	let target = lookup(otree, gb.path.split('.'));
	for (const o of A.upgrade_cards) {
		let source = lookup(otree, o.path.split('.'));
		elem_from_to(o.key, source, target.list);
	}
	let bres = target;
	bres.harvest = null;
	removeInPlace(otree[plturn].buildings[type0], bres);
	otree[plturn].buildings[type1].push(bres);
	ari_redo_player_ui(otree, plturn);
	ari_next_action(otree, plturn);
}
function ari_create_card_assets(scolors) {
	let sz = 100;
	set_card_constants(sz * .7, sz, 'A23456789TJQK', 'SHDC', scolors);
	let colors = { r: RED, b: BLUE, g: GREEN, p: PURPLE, y: YELLOW, o: ORANGE };
	let ranknames = { A: 'Ace', K: 'King', T: '10', J: 'Jack', Q: 'Queen' };
	let suitnames = { S: 'Spades', H: 'Hearts', C: 'Clubs', D: 'Diamonds' };
	let di = {};
	for (const r of Card.ranks) {
		for (const s of Card.suits) {
			for (const c of Card.decks) {
				let k = r + s + c;
				di[k] = { key: k, val: r == 'A' ? 1 : 'TJQK'.includes(r) ? 10 : Number(r), rank: r, suit: s, color: colors[c], c52key: 'card_' + r + s, w: sz * .7, h: sz, sz: sz, ov: Card.ovw, friendly: `${isNumber(r) ? r : ranknames[r]} of ${suitnames[s]}`, short: `${r}${s}` };
			}
		}
	}
	Aristocards = di;
	return di;
}
function ari_create_ui_tree(n, dParent, r) {
	let d = null;
	if (n.oid == 'o_1') {
		d = mDiv(dParent, { w: '100%' }, getUID('u'));
	} else if (startsWith(n.path, 'deck')) {
		let deck = G[n.path] = ui_type_deck(n.content);
		d = deck.container;
	} else if (r.otree.player_names.includes(n.content)) {
		d = ui_make_player(Session.otree, n.content, dParent);
	} else if (n.type == 'cardlist') {
		d = ari_make_cardlist(n.content, 2, dParent);
	} else if (n.type == 'card') {
		return;
	} else if (n.type == 'string') {
		let id = getUID('u');
		d = mDiv(dParent, { bg: 'inherit' }, id, n.content);
	}
	if (nundef(d)) return; else r.add_ui_node(d, d.id, n.oid);
	for (const ch of n.children) {
		ari_create_ui_tree(r.nodes[ch], d, r);
	}
}
function ari_deck_add_safe(otree, n, arr) {
	ari_ensure_deck(otree, n);
	deck_add(otree.deck, n, arr);
}
function ari_deck_deal_safe(fen, n) { ari_ensure_deck(fen, n); return deck_deal(fen.deck, n); }
function ari_ensure_deck(fen, n) {
	if (fen.deck.length < n) { ari_refill_deck(fen); }
}
function ari_get_actions(uplayer) {
	let fen = Z.fen;
	let actions = exp_rumors(Z.options) ? ['trade', 'exchange', 'build', 'upgrade', 'downgrade', 'buy', 'buy rumor', 'rumor', 'inspect', 'blackmail', 'harvest', 'pickup', 'sell', 'tithe', 'commission']
		: ['trade', 'exchange', 'build', 'upgrade', 'downgrade', 'buy', 'visit', 'harvest', 'pickup', 'sell', 'tithe', 'commission'];
	if (Config.autosubmit) actions.push('pass');
	let avail_actions = [];
	for (const a of actions) {
		let avail = ari_check_action_available(a, fen, uplayer);
		if (avail) avail_actions.push(a);
	}
	return avail_actions;
}
function ari_get_all_building_harvest_cards(fen, uplayer) {
	let res = [];
	let pl = fen.players[uplayer];
	for (const b of pl.buildings.farm) {
		if (b.h) res.push({ b: b, h: b.h });
	}
	return res;
}
function ari_get_all_trading_cards(fen) {
	let res = [];
	fen.market.map(c => res.push({ key: c, path: 'market' }));
	for (const uplayer of fen.plorder) {
		let pl = fen.players[uplayer];
		let stall = pl.stall;
		stall.map(x => res.push({ key: x, path: `players.${uplayer}.stall` }));
	}
	return res;
}
function ari_get_all_trading_cards_orig(otree) {
	let res = [];
	let plcardlists = otree.plorder.map(x => otree[x].stall);
	plcardlists.map(x => x.map(c => res.push[{ c: c, owner: x }]));
	otree.market.map(c => res.push({ c: c, owner: 'market' }));
	return res;
}
function ari_get_all_wrong_building_cards(fen, uplayer) {
	let res = [];
	let pl = fen.players[uplayer];
	for (const k in pl.buildings) {
		for (const b of pl.buildings[k]) {
			let bcards = b.list;
			let lead = bcards[0];
			let [rank, suit] = [lead[0], lead[1]];
			for (let i = 1; i < bcards.length; i++) {
				if (bcards[i][0] != rank) res.push({ c: bcards[i], building: b });
			}
		}
	}
	return res;
}
function ari_get_building_type(obuilding) { let n = obuilding.list.length; return n == 4 ? 'farm' : n == 5 ? 'estate' : 'chateau'; }
function ari_get_card(ckey, h, w, ov = .3) {
	let type = ckey[2];
	let sz = { largecard: 100, smallcard: 50 };
	let info = type == 'n' ? to_aristocard(ckey, sz.largecard) : type == 'l' ? to_luxurycard(ckey, sz.largecard) : type == 'r' ? to_rumorcard(ckey, sz.smallcard) : to_commissioncard(ckey, sz.smallcard);
	let card = cardFromInfo(info, h, w, ov);
	if (type == 'l') luxury_card_deco(card);
	return card;
}
function ari_get_card_large(ckey, h, w, ov = .2) {
	let type = ckey[2];
	let sz = { largecard: 120, smallcard: 80 };
	let info = type == 'n' ? to_aristocard(ckey, sz.largecard) : type == 'l' ? to_luxurycard(ckey, sz.largecard) : type == 'r' ? to_rumorcard(ckey, sz.smallcard) : to_commissioncard(ckey, sz.smallcard);
	let card = cardFromInfo(info, h, w, ov);
	if (type == 'l') luxury_card_deco(card);
	return card;
}
function ari_get_cardinfo(ckey) { return Aristocards[ckey]; }
function ari_get_correct_buildings(buildings) {
	let bcorrect = { farm: [], estate: [], chateau: [] };
	for (const type in buildings) {
		for (const b of buildings[type]) {
			let list = b.list;
			let lead = list[0];
			let iscorrect = true;
			for (const key of arrFromIndex(list, 1)) {
				if (key[0] != lead[0]) { iscorrect = false; continue; }
			}
			if (iscorrect) {
				lookupAddIfToList(bcorrect, [type], b);
			}
		}
	}
	return bcorrect;
}
function ari_get_fictive_vps(fen, uname) {
	let pl = fen.players[uname];
	let bs = pl.buildings;
	let vps = calc_building_vps(bs);
	return vps;
}
function ari_get_first_tax_payer(fen, pl_tax) { return ari_get_tax_payer(fen, pl_tax, 0); }
function ari_get_max_journey_length(fen, uplayer) {
	let pl = fen.players[uplayer];
	let sorted_journeys = sortByDescending(pl.journeys.map(x => ({ arr: x, len: x.length })), 'len');
	return isEmpty(pl.journeys) ? 0 : sorted_journeys[0].len;
}
function ari_get_player_hand_and_stall(fen, uplayer) {
	let res = [];
	res = res.concat(fen.players[uplayer].hand);
	res = res.concat(fen.players[uplayer].stall);
	return res;
}
function ari_get_real_vps(fen, uname) {
	let pl = fen.players[uname];
	let bs = ari_get_correct_buildings(pl.buildings);
	let vps = calc_building_vps(bs);
	for (const btype in bs) {
		let blist = bs[btype];
		for (const b of blist) {
			let lead = b.list[0];
			if (firstCond(pl.commissions, x => x[0] == lead[0])) vps += 1;
		}
	}
	return vps;
}
function ari_get_tax_payer(fen, pl_tax, ifrom = 0) {
	let iturn = ifrom;
	let uplayer = fen.plorder[iturn];
	if (nundef(uplayer)) return null;
	while (pl_tax[uplayer] <= 0) {
		iturn++;
		if (iturn >= fen.plorder.length) return null;
		uplayer = fen.plorder[iturn];
	}
	return uplayer;
}
function ari_get_vps(otree, uname) {
	if (uname == otree.plturn) {
		return calc_building_vps(otree, uname);
	} else {
		return calc_building_vps(otree, uname);
	}
}
function ari_globalize(g, uname) {
	DA.uname = uname; DA.g = g;
	z = {};
	z.A = { level: 0, di: {}, ll: [], items: [], selected: [], tree: null, breadcrumbs: [], sib: [], command: null };
	copyKeys(DA.g, z);
	copyKeys(jsCopy(DA.g.fen), z);
	copyKeys(UI, z);
	z.uname = uname;
}
function ari_history_list(lines, title = '', fen) {
	if (nundef(fen)) fen = Z.fen;
	if (nundef(fen.history)) fen.history = [];
	fen.history.push({ title: title, lines: lines });
}
function ari_make_cardlist(list, splay, dParent) {
	let id = getUID('u');
	let d = mDiv(dParent, { bg: 'random', padding: 10 }, id);
	let items = list.map(x => ari_get_card(x));
	let [w, h] = [items[0].w, items[0].h];
	items.map(x => mAppend(d, iDiv(x)));
	mContainerSplay(d, splay, w, h, items.length, 20);
	items.map(x => mItemSplay(x, list, splay));
	return d;
}
function ari_make_selectable(item, dParent, dInstruction) {
	let A = Z.A;
	switch (item.itemtype) {
		case 'card': make_card_selectable(item); break;
		case 'container': make_container_selectable(item); break;
		case 'string': make_string_selectable(item); break;
	}
}
function ari_make_selected(item) {
	let A = Z.A;
	switch (item.itemtype) {
		case 'card': make_card_selected(item); break;
		case 'container': make_container_selected(item); break;
		case 'string': make_string_selected(item); break;
	}
}
function ari_make_unselectable(item) {
	let A = Z.A;
	switch (item.itemtype) {
		case 'card': make_card_unselectable(item); break;
		case 'container': make_container_unselectable(item); break;
		case 'string': make_string_unselectable(item); break;
	}
}
function ari_make_unselected(item) {
	let A = Z.A;
	switch (item.itemtype) {
		case 'card': make_card_unselected(item); break;
		case 'container': make_container_unselected(item); break;
		case 'string': make_string_unselected(item); break;
	}
}
function ari_move_herald(fen) {
	fen.heraldorder = arrCycle(fen.heraldorder, 1);
	ari_history_list([`*** new herald: ${fen.heraldorder[0]} ***`], 'herald');
	return fen.heraldorder[0];
}
function ari_move_market_to_discard() {
	let fen = Z.fen;
	while (fen.market.length > 0) {
		elem_from_to_top(fen.market[0], fen.market, fen.deck_discard);
	}
	ari_reorg_discard();
}
function ari_move_stalls_to_hands() {
	let fen = Z.fen;
	for (const uplayer of fen.plorder) {
		fen.players[uplayer].hand = fen.players[uplayer].hand.concat(fen.players[uplayer].stall);
		fen.players[uplayer].stall = [];
	}
}
function ari_next_action() {
	let [fen, uplayer] = [Z.fen, Z.uplayer];
	deactivate_ui();
	console.assert(isdef(Z.num_actions));
	fen.num_actions -= 1;
	fen.action_number += 1;
	if (fen.num_actions <= 0) {
		fen.total_pl_actions = 0;
		lookupAddIfToList(fen, ['actionsCompleted'], uplayer);
		let next = ari_select_next_player_according_to_stall_value(fen);
		if (!next) {
			ari_next_phase();
		} else {
			Z.turn = [next];
		}
	} else {
		Z.stage = 5;
	}
	take_turn_fen();
}
function ari_next_phase() {
	let [fen, uplayer] = [Z.fen, Z.uplayer];
	ari_move_market_to_discard();
	ari_move_stalls_to_hands();
	ari_add_hand_card();
	delete fen.actionsCompleted;
	delete fen.stallSelected;
	Z.turn = [fen.plorder[0]];
	if (Z.stage == 10) {
		Z.phase = 'queen';
		[Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options, Z.phase);
	} else if (fen.phase == 'king') {
		fen.pl_gameover = [];
		for (const plname of fen.plorder) {
			let bcorrect = ari_get_correct_buildings(fen.players[plname].buildings);
			let can_end = ari_check_end_condition(bcorrect);
			if (can_end) fen.pl_gameover.push(plname);
		}
		if (!isEmpty(fen.pl_gameover)) {
			Z.stage = 10;
			Z.turn = [fen.pl_gameover[0]];
		} else {
			Z.phase = 'queen';
			[Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options, Z.phase);
		}
	} else if (fen.phase == 'queen') {
		for (const uplayer of fen.plorder) {
			for (const k in fen.players[uplayer].buildings) {
				if (k == 'farm') continue;
				let n = fen.players[uplayer].buildings[k].length;
				fen.players[uplayer].coins += n;
				if (n > 0) ari_history_list([`${uplayer} gets ${n} coins for ${k} buildings`], 'payout');
			}
		}
		Z.phase = 'jack';
		[Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options, Z.phase);
	} else {
		fen.herald = ari_move_herald(fen, uplayer);
		fen.plorder = jsCopy(fen.heraldorder);
		ari_add_harvest_cards(fen);
		Z.phase = 'king';
		let taxneeded = ari_tax_phase_needed(fen);
		Z.turn = taxneeded ? fen.turn : [fen.herald];
		if (taxneeded) Z.stage = 2; else[Z.stage, Z.turn] = set_journey_or_stall_stage(fen, Z.options, Z.phase);
	}
	return Z.stage;
}
function ari_open_market(fen, phase, deck, market) {
	DA.qanim = [];
	let n_market = phase == 'jack' ? 3 : 2;
	fen.stage = Z.stage = phase == 'jack' ? 12 : phase == 'queen' ? 11 : 4;
	fen.stallSelected = [];
	delete fen.passed;
	for (let i = 0; i < n_market; i++) {
		DA.qanim.push([qanim_flip_topmost, [deck]]);
		DA.qanim.push([qanim_move_topmost, [deck, market]]);
		DA.qanim.push([q_move_topmost, [deck, market]]);
	}
	DA.qanim.push([q_mirror_fen, ['deck', 'market']]);
	DA.qanim.push([ari_pre_action, []]);
	qanim();
}
function ari_open_rumors(stage = 28) {
	let [fen, deck] = [Z.fen, UI.deck_rumors];
	DA.qanim = [];
	fen.stage = Z.stage = stage;
	let n = Math.min(2, fen.deck_rumors.length);
	let cards = arrTake(fen.deck_rumors, n);
	let uicards = cards.map(x => ari_get_card(x));
	let dest = UI.rumor_top = ui_type_market([], deck.container.parentNode, { maleft: 12 }, `rumor_top`, 'rumor_top', ari_get_card);
	mMagnifyOnHoverControlPopup(dest.cardcontainer);
	for (let i = 0; i < n; i++) {
		DA.qanim.push([qanim_flip_topmost, [deck]]);
		DA.qanim.push([qanim_move_topmost, [deck, dest]]);
		DA.qanim.push([q_move_topmost, [deck, dest]]);
	}
	DA.qanim.push([q_mirror_fen, ['deck_rumors', 'rumor_top']]);
	DA.qanim.push([ari_pre_action, []]);
	qanim();
}
function ari_payment(rank = 'king') {
	if (A.payment_complete == true) return true;
	let [otree, plturn] = [G.otree, G.otree.plturn];
	let items = a2_get_build_items(plturn);
	let pay_letter = rank.toUpperCase()[0];
	let pay_cards = items.filter(x => x.key[0] == pay_letter);
	let has_pay_card = !isEmpty(pay_cards);
	if (has_pay_card && otree[plturn].coins > 0 && otree.phase == rank) {
		otree.stage = 20;
		let items = pay_cards;
		items.push({ o: null, a: 'coin', key: 'coin', friendly: 'coin', path: null });
		let i = 0; items.map(x => { x.index = i; i++; });
		a2_add_selection(items, 'payment', 1, 1, false);
		return false;
	} else if (has_pay_card && pay_cards.length > 1) {
		otree.stage = 20;
		let items = pay_cards;
		let i = 0; items.map(x => { x.index = i; i++; });
		a2_add_selection(items, 'payment', 1, 1, false);
		return false;
	} else if (has_pay_card) {
		console.assert(otree[plturn].coins == 0 || otree.phase != rank, 'HAS A COIN in matching phase!!!!');
		let k = pay_cards[0];
		a2_pay_with_card(k);
		return true;
	} else {
		a2_pay_with_coin(plturn);
		return true;
	}
}
function ari_player_stats(otree) {
	let player_stat_items = G.player_stat_items = ui_player_info(otree.plorder.map(x => otree[x]));
	let herald = otree.plorder[0];
	for (const uname of otree.plorder) {
		let pl = otree[uname];
		let item = player_stat_items[uname];
		let d = iDiv(item); mCenterFlex(d); mLinebreak(d);
		if (uname == herald) {
			mSym('tied-scroll', d, { fg: 'gold', fz: 24 }, 'TL');
		}
		player_stat_count('coin', pl.coins, d);
		if (!isEmpty(otree[uname].stall) && otree.stage >= 5 && otree.stage <= 6) {
			player_stat_count('shinto shrine', !otree.round.includes(uname) || otree.stage < 6 ? calc_stall_value(otree, uname) : '_', d);
		}
		player_stat_count('star', ari_get_vps(otree, uname), d);
	}
}
function ari_post_action() {
	clearElement(dError);
	let otree = G.otree;
	let [step, stage, iturn, round, phase, plturn] = set_state_numbers(otree);
	let [deck, market, discard, open_discard] = [G.deck, G.market, G.deck_discard, G.open_discard];
	if (stage == 2) {
		let items = A.selected.map(x => A.items[x]);
		let n = otree.pl_tax[plturn];
		if (items.length != n) {
			output_error(`please select exactly ${n} cards`);
			return;
		}
		for (const item of items) {
			elem_from_to_top(item.key, otree[plturn].hand, otree.deck_discard);
		}
		ari_reorg_discard(otree);
		let [iturn, plnext] = ari_get_tax_payer(otree, otree.pl_tax, otree.iturn + 1);
		if (iturn == null) {
			otree.stage = 3;
			otree.iturn = 0;
			delete otree.pl_tax;
		} else {
			otree.iturn = iturn;
		}
		otree.plturn = otree.plorder[otree.iturn];
		turn_send_move_update(otree, plturn);
	} else if (stage == 3) {
		console.assert(false, 'NO SHOULD NOT COME TO POST STATE 3');
	} else if (stage == 4) {
		let selectedKeys = A.selected.map(i => A.items[i].key);
		for (const ckey of selectedKeys) {
			elem_from_to(ckey, otree[plturn].hand, otree[plturn].stall);
		}
		otree.round.push(plturn);
		if (is_round_over(otree)) {
			otree.round = [];
			let next = ari_select_next_player_according_to_stall_value(otree);
			if (!next) { ari_next_action(otree, plturn); return; }
		} else {
			otree.iturn++;
		}
		otree.plturn = otree.plorder[otree.iturn];
		turn_send_move_update(otree, plturn);
	} else if (stage == 6 && A.selected_key == 'trade') {
		if (A.selected.length != 2) {
			output_error('please, select exactly 2 cards!');
			return;
		}
		let i0 = A.items[A.selected[0]];
		let i1 = A.items[A.selected[1]];
		if (i0.path == i1.path) {
			output_error('you cannot trade cards from the same group');
			return;
		} else {
			a2_exchange_items(otree, i0, i1);
			ari_next_action(otree, plturn);
		}
	} else if (stage == 6 && A.selected_key == 'repair') {
		if (A.selected.length != 2) {
			output_error('please, select exactly 2 cards!');
			return;
		}
		let i0 = A.items[A.selected[0]];
		let i1 = A.items[A.selected[1]];
		let [p0, p1] = [i0.path, i1.path];
		if (p0.includes('build') == p1.includes('build')) {
			output_error('select exactly one building card and one of your hand or stall cards!');
			return;
		}
		a2_exchange_items(otree, i0, i1);
		console.log('repair items', i0, i1);
		let ibuilding = p0.includes('build') ? i0 : i1;
		let obuilding = lookup(otree, stringBeforeLast(ibuilding.path, '.').split('.'));
		console.log('obuilding', obuilding);
		obuilding.schwein = null;
		ari_next_action(otree, plturn);
	} else if (stage == 6 && A.command == 'build') {
		console.log('should have paid for building!', otree[plturn].coins);
		if (A.selected.length < 4 || A.selected.length > 6) {
			output_error('select 4, 5, or 6 cards to build!');
			return;
		}
		ari_complete_building();
	} else if (stage == 6 && A.command == 'upgrade') {
		let n = A.selected.length;
		if (n > 2 || n == 2 && !has_farm(plturn)) {
			output_error('too many cards selected!');
			return;
		} else if (n == 0) {
			output_error('please select hand or stall card(s) to upgrade!');
			return;
		}
		A.upgrade_cards = A.selected.map(x => A.items[x]);
		otree.stage = 102;
		let b_items = a2_get_farms_estates_items(plturn);
		a2_add_selection(b_items, 'buildings', 1, 1);
	} else if (stage == 102) {
		A.building = A.items[A.selected[0]];
		ari_complete_upgrade();
	} else if (stage == 6 && A.command == 'downgrade') {
		A.building = A.items[A.selected[0]];
		otree.stage = 103;
		let items = a2_get_hidden_building_items(A.building.o);
		items.map(x => face_up(x.o));
		A.possible_downgrade_cards = items;
		a2_add_selection(items, 'downgrade cards');
	} else if (stage == 103) {
		A.downgrade_cards = A.selected.map(x => A.items[x]);
		let obuilding = lookup(otree, A.building.path.split('.'));
		let n = obuilding.list.length;
		let nremove = A.downgrade_cards.length;
		let nfinal = n - nremove;
		let type = A.building.o.type;
		let list = otree[plturn].buildings[type];
		removeInPlace(list, obuilding);
		let cards = A.downgrade_cards.map(x => x.key);
		if (nfinal < 4) {
			otree[plturn].hand = otree[plturn].hand.concat(obuilding.list);
		} else if (nfinal == 4) {
			otree[plturn].buildings.farms.push(obuilding);
			otree[plturn].hand = otree[plturn].hand.concat(cards);
		} else if (nfinal == 5) {
			otree[plturn].buildings.estates.push(obuilding);
			otree[plturn].hand = otree[plturn].hand.concat(cards);
		} else if (nfinal == 6) {
			otree[plturn].buildings.chateaus.push(obuilding);
			otree[plturn].hand = otree[plturn].hand.concat(cards);
		}
		A.downgrade_cards.map(x => removeInPlace(obuilding.list, x.key));
		ari_next_action(otree, plturn);
	} else if (stage == 6 && A.command == 'buy') {
		let item = A.items[A.selected[0]];
		elem_from_to(item.key, otree.open_discard, otree[plturn].hand);
		ari_reorg_discard(otree);
		ari_next_action(otree, plturn);
	} else if (stage == 6 && A.command == 'visit') {
		let item = A.items[A.selected[0]];
		console.log('building to inspect', item);
		let obuilding = lookup(otree, item.path.split('.'));
		let owner = stringBefore(item.path, '.');
		if (isdef(obuilding.schwein)) {
			let res = confirm('destroy the building?');
			if (!res) {
				if (otree[owner].coins > 0) {
					otree[owner].coins -= 1;
					otree[plturn].coins += 1;
				}
			} else {
				let list = obuilding.list;
				console.log('!!!!!!!!!!!!!building', obuilding, 'DESTROY!!!!!!!!!!!!!!!!', '\nlist', list);
				let correct_key = list[0];
				let rank = correct_key[0];
				while (list.length > 0) {
					let ckey = list[0];
					if (ckey[0] != rank) {
						elem_from_to_top(ckey, list, otree.deck_discard);
					} else {
						elem_from_to(ckey, list, otree[owner].hand);
					}
				}
				if (isdef(obuilding.harvest)) {
					otree.deck_discard.unshift(obuilding.harvest);
				}
				ari_reorg_discard(otree);
				let blist = lookup(otree, stringBeforeLast(item.path, '.').split('.'));
				removeInPlace(blist, obuilding);
			}
		} else {
			let cards = item.o.items;
			let key = cards[0].rank;
			let schweine = false;
			let schwein = null;
			for (const c of cards) {
				if (c.rank != key) { schweine = true; schwein = c.key; face_up(c); break; }
			}
			if (schweine) {
				if (otree[owner].coins > 0) {
					otree[owner].coins--;
					otree[plturn].coins++;
				}
				let b = lookup(otree, item.path.split('.'));
				b.schwein = schwein;
			}
		}
		ari_next_action(otree, plturn);
	} else if (stage == 6 && A.selected_key == 'sell') {
		if (A.selected.length != 2) {
			output_error('select exactly 2 cards to sell!');
			return;
		}
		for (const i of A.selected) {
			let c = A.items[i].key;
			elem_from_to(c, otree[plturn].stall, otree.deck_discard);
		}
		ari_reorg_discard(otree);
		otree[plturn].coins += 1;
		ari_next_action(otree, plturn);
	} else if (stage == 6 && A.command == 'harvest') {
		let item = A.items[A.selected[0]];
		let obuilding = lookup(otree, item.path.split('.'));
		otree[plturn].hand.push(obuilding.h);
		obuilding.h = null;
		ari_next_action(otree, plturn);
	} else if (stage == 100) {
		console.log('pickup', A.selected_key, A.items, A.selected);
		let item = A.items[A.selected[0]];
		elem_from_to(item.key, otree[plturn].stall, otree[plturn].hand);
		ari_next_action(otree, plturn);
	} else if (A.selected_key == 'pass') {
		console.log('HAAAAAAAAAAAAAAAAAAAAAAAAAAAALLLLLLLLLLLLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOO')
		otree.num_actions = 0;
		ari_next_action(otree, plturn);
	} else if (stage == 10) {
		if (A.selected_key == 'end game') {
			for (const uname of otree.plorder) {
				let [bcorrect, realvps] = ari_get_correct_buildings(otree[uname].buildings);
				otree[uname].score = realvps;
			}
			let scores = otree.plorder.map(x => ({ name: x, vps: otree[x].realvps }));
			let sorted = sortByDescending(scores, 'vps');
			ari_reveal_all_buildings(otree);
			otree.winner = sorted[0].name;
			turn_send_gameover(otree, plturn);
		} else {
			let iturn = otree.iturn += 1;
			if (iturn >= otree.pl_gameover.length) {
				delete otree.pl_gameover;
				otree.round = [];
				otree.iturn = 0;
				otree.stage = 3;
				otree.phase = 'queen';
				otree.plturn = otree.plorder[otree.iturn];
				turn_send_move_update(otree, plturn);
			} else {
				otree.plturn = otree.plorder[otree.iturn];
				turn_send_move_update(otree, plturn);
			}
		}
	} else if (stage == 11) {
		let keys = A.selected.map(x => A.items[x]).map(x => x.key);
		keys.map(x => lookupAddIfToList(otree, ['ball', plturn], x));
		keys.map(x => removeInPlace(otree[plturn].hand, x));
		let iturn = otree.iturn += 1;
		if (iturn >= otree.plorder.length) {
			if (isdef(otree.ball)) {
				let all = [];
				for (const c of otree.market) all.push(c);
				for (const uname in otree.ball) for (const c of otree.ball[uname]) all.push(c);
				shuffle(all);
				otree.market = [];
				for (let i = 0; i < 2; i++) top_elem_from_to(all, otree.market);
				for (const uname in otree.ball) for (let i = 0; i < otree.ball[uname].length; i++) top_elem_from_to(all, otree[uname].hand);
				delete otree.ball;
			}
			otree.round = [];
			otree.iturn = 0;
			otree.stage = 4;
			otree.phase = 'queen';
		}
		otree.plturn = otree.plorder[otree.iturn];
		turn_send_move_update(otree, plturn);
	} else if (stage == 12) {
		let keys = A.selected.map(x => A.items[x]);
		keys.map(x => lookupAddIfToList(otree, ['auction', plturn], x));
		let iturn = otree.iturn += 1;
		if (iturn >= otree.plorder.length) {
			let list = dict2list(otree.auction);
			list.map(x => { x.uname = x.id; x.item = x.value[0]; x.amount = Number(x.item.a); });
			list = sortByDescending(list, 'amount');
			let max = list[0].amount;
			let second = otree.second_most = list[1].amount;
			otree.stage = 13;
			let maxplayers = otree.maxplayers = list.filter(x => x.amount == max).map(x => x.uname);
			otree.round = arrMinus(otree.plorder, maxplayers);
			otree.iturn = otree.plorder.indexOf(maxplayers[0]);
		}
		otree.plturn = otree.plorder[otree.iturn];
		turn_send_move_update(otree, plturn);
	} else if (stage == 13) {
		let item = A.selected.map(x => A.items[x])[0];
		lookupSet(otree, ['buy', plturn], item);
		for (const uname of otree.maxplayers) {
			if (!lookup(otree, ['buy', uname])) {
				otree.iturn = otree.plorder.indexOf(uname);
				otree.plturn = otree.plorder[otree.iturn];
				turn_send_move_update(otree, plturn);
				return;
			}
		}
		let buylist = dict2list(otree.buy);
		let discardlist = [];
		for (const uname of otree.maxplayers) {
			let choice = otree.buy[uname];
			let is_unique = !firstCond(buylist, x => x.id != uname && x.value == choice);
			if (is_unique) {
				otree[uname].coins -= otree.second_most;
				elem_from_to(choice.key, otree.market, otree[uname].hand);
			} else addIf(discardlist, choice);
		}
		for (const choice of discardlist) {
			elem_from_to(choice.key, otree.market, otree.deck_discard);
			ari_reorg_discard(otree);
		}
		otree.iturn = 0;
		otree.stage = 4;
		otree.round = [];
		otree.plturn = otree.plorder[otree.iturn];
		turn_send_move_update(otree, plturn);
	}
}
function ari_pre_action() {
	let [stage, A, fen, phase, uplayer, deck, market] = [Z.stage, Z.A, Z.fen, Z.phase, Z.uplayer, Z.deck, Z.market];
	if (Z.num_actions > 0) fen.progress = `(action ${Z.action_number} of ${Z.total_pl_actions})`; else delete fen.progress;
	show_stage();
	switch (ARI.stage[stage]) {
		case 'action: command': Z.stage = 6; select_add_items(ui_get_commands(uplayer), process_command, 'must select an action', 1, 1); break;
		case 'action step 2':
			switch (A.command) {
				case 'trade': select_add_items(ui_get_trade_items(uplayer), post_trade, 'must select 2 cards to trade', 2, 2); break;
				case 'build': select_add_items(ui_get_payment_items('K'), payment_complete, 'must select payment for building', 1, 1); break;
				case 'upgrade': select_add_items(ui_get_payment_items('K'), payment_complete, 'must select payment for upgrade', 1, 1); break;
				case 'downgrade': select_add_items(ui_get_building_items(uplayer, A.payment), process_downgrade, 'must select a building to downgrade', 1, 1); break;
				case 'pickup': select_add_items(ui_get_stall_items(uplayer), post_pickup, 'must select a stall card to take into your hand', 1, 1); break;
				case 'harvest': select_add_items(ui_get_harvest_items(uplayer), post_harvest, 'must select a farm to harvest from', 1, 1); break;
				case 'sell': select_add_items(ui_get_stall_items(uplayer), post_sell, 'must select 2 stall cards to sell', 2, 2); break;
				case 'buy': select_add_items(ui_get_payment_items('J'), payment_complete, 'must select payment option', 1, 1); break;
				case 'buy rumor': ari_open_rumors(); break;
				case 'exchange': select_add_items(ui_get_exchange_items(uplayer), post_exchange, 'must select cards to exchange', 2, 2); break;
				case 'visit': select_add_items(ui_get_payment_items('Q'), payment_complete, 'must select payment for visiting', 1, 1); break;
				case 'rumor': select_add_items(ui_get_other_buildings_and_rumors(uplayer), process_rumor, 'must select a building and a rumor card to place', 2, 2); break;
				case 'inspect': select_add_items(ui_get_other_buildings(uplayer), process_inspect, 'must select building to visit', 1, 1); break;
				case 'blackmail': select_add_items(ui_get_payment_items('Q'), payment_complete, 'must select payment for blackmailing', 1, 1); break;
				case 'commission': select_add_items(ui_get_commission_items(uplayer), process_commission, 'must select a card to commission', 1, 1); break;
				case 'pass': post_pass(); break;
			}
			break;
		case 'pick_schwein': select_add_items(ui_get_schweine_candidates(A.uibuilding), post_inspect, 'must select the new schwein', 1, 1); break;
		case 'comm_weitergeben': if (!is_playerdata_set(uplayer)) select_add_items(ui_get_all_commission_items(uplayer), process_comm_setup, `must select ${fen.comm_setup_num} card${fen.comm_setup_num > 1 ? 's' : ''} to discard`, fen.comm_setup_num, fen.comm_setup_num); break;
		case 'rumors_weitergeben':
			let rumitems = ui_get_rumors_and_players_items(uplayer);
			if (isEmpty(rumitems)) {
				show_waiting_message('waiting for other players...');
				Z.state = null;
				let done = rumor_playerdata_complete();
				if (done) {
					Z.turn = [Z.host];
					Z.stage = 105;
					clear_transaction();
					take_turn_fen();
				} else autopoll();
			} else select_add_items(rumitems, process_rumors_setup, `must select a player and a rumor to pass on`, 2, 2);
			break;
		case 'next_rumor_setup_stage': post_rumor_setup(); break;
		case 'buy rumor': select_add_items(ui_get_top_rumors(), post_buy_rumor, 'must select one of the new rumor cards', 1, 1); break;
		case 'rumor discard': select_add_items(ui_get_rumors_items(uplayer), process_rumor_discard, 'must select a rumor card to discard', 1, 1); break;
		case 'rumor_both': select_add_items(ui_get_top_rumors(), post_rumor_both, 'must select one of the new rumor cards', 1, 1); break;
		case 'blackmail': select_add_items(ui_get_other_buildings_with_rumors(uplayer), process_blackmail, 'must select a building to blackmail', 1, 1); break;
		case 'blackmail_owner': select_add_items(ui_get_blackmailed_items(), being_blackmailed, 'must react to BLACKMAIL!!!', 1, 1); break;
		case 'accept_blackmail': select_add_items(ui_get_stall_items(uplayer), post_accept_blackmail, 'must select a card to pay off blackmailer', 1, 1); break;
		case 'blackmail_complete': post_blackmail(); break;
		case 'journey': select_add_items(ui_get_hand_and_journey_items(uplayer), process_journey, 'may form new journey or add cards to existing one'); break;
		case 'add new journey': post_new_journey(); break;
		case 'auto market': ari_open_market(fen, phase, deck, market); break;
		case 'TEST_starts_in_stall_selection_complete':
			if (is_stall_selection_complete()) {
				delete fen.stallSelected;
				fen.actionsCompleted = [];
				if (check_if_church()) ari_start_church_stage(); else ari_start_action_stage();
			} else select_add_items(ui_get_hand_items(uplayer), post_stall_selected, 'must select your stall'); break;
		case 'stall selection': select_add_items(ui_get_hand_items(uplayer), post_stall_selected, 'must select cards for stall'); break;
		case 'church': select_add_items(ui_get_hand_and_stall_items(uplayer), post_tithe, `must select cards to tithe ${isdef(fen.tithemin) ? `(current minimum is ${fen.tithemin})` : ''}`, 1, 100); break;
		case 'church_minplayer_tithe_add': select_add_items(ui_get_hand_and_stall_items(uplayer), post_tithe_minimum, `must select cards to reach at least ${fen.tithe_minimum}`, 1, 100); break;
		case 'church_minplayer_tithe_downgrade': select_add_items(ui_get_building_items(uplayer, A.payment), process_downgrade, 'must select a building to downgrade', 1, 1); break;
		case 'church_minplayer_tithe': console.log('NOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO');
			let pl = fen.players[uplayer];
			let hst = pl.hand.concat(pl.stall);
			let vals = hst.map(x => ari_get_card(x).val);
			let sum = arrSum(vals);
			let min = fen.tithe_minimum;
			if (sum < min) {
				ari_history_list([`${uplayer} must downgrade a building to tithe ${min}!`], 'downgrade');
				select_add_items(ui_get_building_items(uplayer, A.payment), process_downgrade, 'must select a building to downgrade', 1, 1);
			} else {
				ari_history_list([`${uplayer} must tithe more cards to reach ${min}!`], 'tithe');
				select_add_items(ui_get_hand_and_stall_items(uplayer), post_tithe_minimum, `must select cards to reach at least ${fen.tithe_minimum}`, 1, 100);
			}
			break;
		case 'church_newcards':
			reveal_church_cards();
			let items = ui_get_church_items(uplayer);
			let num_select = items.length == fen.church.length ? 1 : 2;
			let instr = num_select == 1 ? `must select a card for ${fen.candidates[0]}` : 'must select card and player';
			select_add_items(items, post_church, instr, num_select, num_select);
			break;
		case 'complementing_market_after_church':
			select_add_items(ui_get_hand_items(uplayer), post_complementing_market_after_church, 'may complement stall'); break;
		case 'tax': let n = fen.pl_tax[uplayer]; select_add_items(ui_get_hand_items(uplayer), post_tax, `must pay ${n} card${if_plural(n)} tax`, n, n); break;
		case 'build': select_add_items(ui_get_build_items(uplayer, A.payment), post_build, 'must select cards to build (first card determines rank)', 4, 6, true); break;
		case 'commission_stall': select_add_items(ui_get_commission_stall_items(), process_commission_stall, 'must select matching stall card to discard', 1, 1); break;
		case 'commission new': select_add_items(ui_get_commission_new_items(uplayer), post_commission, 'must select a new commission', 1, 1); break;
		case 'upgrade': select_add_items(ui_get_build_items(uplayer, A.payment), process_upgrade, 'must select card(s) to upgrade a building', 1); break;
		case 'select building to upgrade': select_add_items(ui_get_farms_estates_items(uplayer), post_upgrade, 'must select a building', 1, 1); break;
		case 'select downgrade cards': select_add_items(A.possible_downgrade_cards, post_downgrade, 'must select card(s) to downgrade a building', 1, is_in_middle_of_church() ? 1 : 100); break;
		case 'buy': select_add_items(ui_get_open_discard_items(uplayer, A.payment), post_buy, 'must select a card to buy', 1, 1); break;
		case 'visit': select_add_items(ui_get_other_buildings(uplayer, A.payment), process_visit, 'must select a building to visit', 1, 1); break;
		case 'visit destroy': select_add_items(ui_get_string_items(['destroy', 'get cash']), post_visit, 'must destroy the building or select the cash', 1, 1); break;
		case 'ball': select_add_items(ui_get_hand_items(uplayer), post_ball, 'may add cards to the ball'); break;
		case 'auction: bid': select_add_items(ui_get_coin_amounts(uplayer), process_auction, 'must bid for the auction', 1, 1); break;
		case 'auction: buy': select_add_items(ui_get_market_items(), post_auction, 'must buy a card', 1, 1); break;
		case 'end game?': select_add_items(ui_get_endgame(uplayer), post_endgame, 'may end the game here and now or go on!', 1, 1); break;
		case 'pick luxury or journey cards': select_add_items(ui_get_string_items(['luxury cards', 'journey cards']), post_luxury_or_journey_cards, 'must select luxury cards or getting cards from the other end of the journey', 1, 1); break;
		case 'next_comm_setup_stage': select_confirm_weiter(post_comm_setup_stage); break;
		default: console.log('stage is', stage); break;
	}
}
function ari_present(dParent) {
	let [fen, ui, uplayer, stage, pl] = [Z.fen, UI, Z.uplayer, Z.stage, Z.pl];
	let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent);
	if (fen.num_actions > 0 && (Z.role == 'active' || Z.mode == 'hotseat')) {
		mStyle(dOben, { hmin: 110 })
	}
	ari_stats(dRechts);
	show_history(fen, dRechts);
	let deck = ui.deck = ui_type_deck(fen.deck, dOpenTable, { maleft: 12 }, 'deck', 'deck', ari_get_card);
	let market = ui.market = ui_type_market(fen.market, dOpenTable, { maleft: 12 }, 'market', 'market', ari_get_card, true);
	let open_discard = ui.open_discard = ui_type_market(fen.open_discard, dOpenTable, { maleft: 12 }, 'open_discard', 'discard', ari_get_card);
	let deck_discard = ui.deck_discard = ui_type_deck(fen.deck_discard, dOpenTable, { maleft: 12 }, 'deck_discard', '', ari_get_card);
	if (exp_commissions(Z.options)) {
		let open_commissions = ui.open_commissions = ui_type_market(fen.open_commissions, dOpenTable, { maleft: 12 }, 'open_commissions', 'bank', ari_get_card);
		mMagnifyOnHoverControlPopup(ui.open_commissions.cardcontainer);
		let deck_commission = ui.deck_commission = ui_type_deck(fen.deck_commission, dOpenTable, { maleft: 4 }, 'deck_commission', '', ari_get_card);
		let comm = ui.commissioned = ui_type_rank_count(fen.commissioned, dOpenTable, {}, 'commissioned', 'sentiment', ari_get_card);
		if (comm.items.length > 0) { let isent = arrLast(comm.items); let dsent = iDiv(isent); set_card_border(dsent, 15, 'green'); }
	}
	if (exp_church(Z.options)) {
		let church = ui.church = ui_type_church(fen.church, dOpenTable, { maleft: 28 }, 'church', 'church', ari_get_card);
	}
	if (exp_rumors(Z.options)) {
		let deck_rumors = ui.deck_rumors = ui_type_deck(fen.deck_rumors, dOpenTable, { maleft: 25 }, 'deck_rumors', 'rumors', ari_get_card);
	}
	let uname_plays = fen.plorder.includes(Z.uname);
	let show_first = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;
	let order = get_present_order();
	for (const plname of order) {
		let pl = fen.players[plname];
		let playerstyles = { w: '100%', bg: '#ffffff80', fg: 'black', padding: 4, margin: 4, rounding: 9, border: `2px ${get_user_color(plname)} solid` };
		let d = mDiv(dMiddle, playerstyles, null, get_user_pic_html(plname, 25));
		mFlexWrap(d);
		mLinebreak(d, 9);
		let hidden = compute_hidden(plname);
		ari_present_player(plname, d, hidden);
	}
	ari_show_handsorting_buttons_for(Z.mode == 'hotseat' ? Z.uplayer : Z.uname); delete Clientdata.handsorting;
	show_view_buildings_button(uplayer);
	let desc = ARI.stage[Z.stage];
	Z.isWaiting = false;
	if (isdef(fen.winners)) ari_reveal_all_buildings(fen);
	else if (desc == 'comm_weitergeben' && is_playerdata_set(uplayer)) {
		if ((Z.mode == 'hotseat' || Z.host == uplayer) && check_resolve()) {
			Z.turn = [Z.host];
			Z.stage = 104;
		}
		show_waiting_message(`waiting for other players...`);
		Z.isWaiting = true;
	}
}
function ari_present_player(plname, d, ishidden = false) {
	let fen = Z.fen;
	let pl = fen.players[plname];
	let ui = UI.players[plname] = { div: d };
	let hand = ui.hand = ui_type_hand(pl.hand, d, {}, `players.${plname}.hand`, 'hand', ari_get_card);
	if (ishidden) { hand.items.map(x => face_down(x)); }
	let stall = ui.stall = ui_type_market(pl.stall, d, { maleft: 12 }, `players.${plname}.stall`, 'stall', ari_get_card);
	if (fen.stage < 5 && ishidden) { stall.items.map(x => face_down(x)); }
	if (exp_commissions(Z.options)) {
		if (!ishidden) pl.commissions = correct_handsorting(pl.commissions, plname);
		ui.commissions = ui_type_market(pl.commissions, d, { maleft: 12 }, `players.${plname}.commissions`, 'commissions', Z.stage == 23 ? ari_get_card_large : ari_get_card);
		if (ishidden) { ui.commissions.items.map(x => face_down(x)); }
		else mMagnifyOnHoverControlPopup(ui.commissions.cardcontainer);
	}
	if (exp_rumors(Z.options)) {
		if (!ishidden) pl.rumors = correct_handsorting(pl.rumors, plname);
		ui.rumors = ui_type_market(pl.rumors, d, { maleft: 12 }, `players.${plname}.rumors`, 'rumors', Z.stage == 24 ? ari_get_card_large : ari_get_card);
		if (ishidden) { ui.rumors.items.map(x => face_down(x)); }
		else mMagnifyOnHoverControlPopup(ui.rumors.cardcontainer);
	}
	ui.journeys = [];
	let i = 0;
	for (const j of pl.journeys) {
		let jui = ui_type_hand(j, d, { maleft: 12 }, `players.${plname}.journeys.${i}`, '', ari_get_card);
		i += 1;
		ui.journeys.push(jui);
	}
	mLinebreak(d, 8);
	ui.buildinglist = [];
	ui.indexOfFirstBuilding = arrChildren(d).length;
	for (const k in pl.buildings) {
		let i = 0;
		for (const b of pl.buildings[k]) {
			let type = k;
			let b_ui = ui_type_building(b, d, { maleft: 8 }, `players.${plname}.buildings.${k}.${i}`, type, ari_get_card, true, ishidden);
			b_ui.type = k;
			ui.buildinglist.push(b_ui);
			if (b.isblackmailed) { mStamp(b_ui.cardcontainer, 'blackmail'); }
			lookupAddToList(ui, ['buildings', k], b_ui);
			i += 1;
		}
	}
}
function ari_redo_player_stats(otree, uname) {
	let item = G.player_stat_items[uname];
	let d = iDiv(item);
	let stall_value = otree[uname].stall_value;
	mRemoveChildrenFromIndex(d, otree.herald == uname ? 3 : 2);
	let pl = otree[uname];
	player_stat_count('coin', pl.coins, d);
	if (isdef(stall_value)) { player_stat_count('shinto shrine', stall_value, d); }
	player_stat_count('star', ari_get_vps(otree, uname), d);
}
function ari_redo_player_ui(otree, plturn) {
	let d = G[plturn].hand.container.parentNode;
	d.innerHTML = plturn;
	ari_present_player(otree, plturn, d);
}
function ari_refill_deck(fen) {
	fen.deck = fen.deck.concat(fen.open_discard).concat(fen.deck_discard);
	shuffle(fen.deck);
	fen.open_discard = [];
	fen.deck_discard = [];
	console.log('deck refilled: contains', fen.deck.length, 'cards');
}
function ari_reorg_discard() {
	let fen = Z.fen;
	while (fen.deck_discard.length > 0 && fen.open_discard.length < 4) {
		bottom_elem_from_to(fen.deck_discard, fen.open_discard);
	}
}
function ari_reveal_all_buildings(fen) {
	for (const plname of fen.plorder) {
		let gbs = UI.players[plname].buildinglist;
		for (const gb of gbs) {
			gb.items.map(x => face_up(x));
		}
	}
}
function ari_select_next_player_according_to_stall_value() {
	let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];
	Z.stage = 5;
	let minval = 100000;
	let minplayer = null;
	for (const uname of fen.plorder) {
		if (fen.actionsCompleted.includes(uname)) continue;
		let stall = fen.players[uname].stall;
		if (isEmpty(stall)) { fen.actionsCompleted.push(uname); continue; }
		let val = fen.players[uname].stall_value = arrSum(stall.map(x => ari_get_card(x).val));
		if (val < minval) { minval = val; minplayer = uname; }
	}
	if (!minplayer) {
		return null;
	} else {
		Z.turn = fen.turn = [minplayer];
		fen.num_actions = fen.total_pl_actions = fen.players[minplayer].stall.length;
		fen.action_number = 1;
		return minplayer;
	}
}
function ari_setup(player_names) {
	let pre_fen = {};
	let deck = pre_fen.deck = get_keys(Aristocards).filter(x => 'br'.includes(x[2]));
	shuffle(deck);
	pre_fen.market = [];
	pre_fen.deck_discard = [];
	pre_fen.open_discard = [];
	let pls = pre_fen.players = {};
	for (const plname of player_names) {
		let pl = pls[plname] = {
			hand: deck_deal(deck, 7),
			buildings: { farms: [], estates: [], chateaus: [] },
			stall: [],
			stall_value: 0,
			coins: 3,
			vps: 0,
			score: 0,
		};
	}
	pre_fen.plorder = jsCopy(player_names);
	pre_fen.herald = player_names[0];
	pre_fen.phase = 'king';
	pre_fen.stage = 3;
	pre_fen.iturn = 0;
	pre_fen.plturn = pre_fen.plorder[pre_fen.iturn];
	pre_fen.round = [];
	pre_fen.step = 0;
	let fen = pre_fen;
	return fen;
}
function ari_show_building(otree, uname, building_cards) {
	DA.qanim = [
		[anim_from_deck_to_marketX, [deck, market]],
		[anim_from_deck_to_marketX, [deck, market]],
		[update_otree_from_ui, [otree, { deck: deck, market: market }]],
		[ari_pre_action, []],
	];
	qanim();
}
function ari_show_deck(list, dParent) {
	let id = getUID('u');
	let d = mDiv(dParent, { bg: 'random', padding: 10 }, id);
	console.log('list', list);
	let items = list.map(x => ari_get_card(x));
	let [w, h] = [items[0].w, items[0].h];
	console.log('cards', w, h, items);
	items.map(x => mAppend(d, iDiv(x)));
	mContainerSplay(d, splay, w, h, items.length, 20);
	items.map(x => mItemSplay(x, list, splay));
	return d;
}
function ari_show_handsorting_buttons_for(plname) {
	if (Z.role == 'spectator' || isdef(mBy('dHandButtons'))) return;
	let fen = Z.fen;
	let pl = fen.players[plname];
	if (pl.hand.length <= 1) return;
	let d = UI.players[plname].hand.container; mStyle(d, { position: 'relative' });
	let dHandButtons = mDiv(d, { position: 'absolute', bottom: -2, left: 52, height: 25 }, 'dHandButtons');
	show_player_button('sort', dHandButtons, onclick_by_rank);
}
function ari_start_action_stage() {
	let next = ari_select_next_player_according_to_stall_value();
	if (!next) { ari_next_phase(); }
	take_turn_fen();
}
function ari_start_church_stage() {
	let [fen] = [Z.fen];
	let order = fen.plorder = fen.church_order = determine_church_turn_order();
	[Z.turn, Z.stage] = [[order[0]], 17];
	ari_history_list([`inquisition starts!`], 'church');
	take_turn_fen();
}
function ari_state(dParent) {
	function get_phase_html() {
		if (isEmpty(Z.phase) || Z.phase == 'over') return null;
		let rank = Z.phase[0].toUpperCase();
		let card = ari_get_card(rank + 'Hn', 40);
		let d = iDiv(card);
		mClassRemove(d.firstChild, 'card');
		return iDiv(card).outerHTML;
	}
	if (DA.TEST0 == true) {
		let html = `${Z.stage}`;
		if (isdef(Z.playerdata)) {
			let trigger = get_multi_trigger();
			if (trigger) html += ` trigger:${trigger}`;
			for (const data of Z.playerdata) {
				if (data.name == trigger) continue;
				let name = data.name;
				let state = data.state;
				let s_state = object2string(state);
				html += ` ${name}:'${s_state}'`;
			}
			dParent.innerHTML += ` ${Z.playerdata.map(x => x.name)}`;
		}
		dParent.innerHTML = html;
		return;
	}
	let user_html = get_user_pic_html(Z.uplayer, 30);
	let phase_html = get_phase_html();
	let html = '';
	if (phase_html) html += `${Z.phase}:&nbsp;${phase_html}`;
	if (Z.stage == 17) { html += `&nbsp;&nbsp;CHURCH EVENT!!!`; }
	else if (TESTING) { html += `&nbsp;&nbsp;&nbsp;stage: ${ARI.stage[Z.stage]}`; }
	else html += `&nbsp;player: ${user_html} `;
	dParent.innerHTML = html;
}
function ari_stats(dParent) {
	let player_stat_items = UI.player_stat_items = ui_player_info(dParent);
	let fen = Z.fen;
	let herald = fen.heraldorder[0];
	for (const plname in fen.players) {
		let pl = fen.players[plname];
		let item = player_stat_items[plname];
		let d = iDiv(item); mCenterFlex(d); mLinebreak(d);
		if (plname == herald) {
			mSym('tied-scroll', d, { fg: 'gold', fz: 24, padding: 4 }, 'TR');
		}
		if (exp_church(Z.options)) {
			if (isdef(pl.tithes)) {
				player_stat_count('cross', pl.tithes.val, d);
			}
		}
		let dCoin = player_stat_count('coin', pl.coins, d);
		item.dCoin = dCoin.firstChild;
		item.dAmount = dCoin.children[1];
		let list = pl.hand.concat(pl.stall);
		let list_luxury = list.filter(x => x[2] == 'l');
		player_stat_count('pinching hand', list.length, d);
		let d1 = player_stat_count('hand-holding-usd', list_luxury.length, d);
		mStyle(d1.firstChild, { fg: 'gold', fz: 20 })
		if (!isEmpty(fen.players[plname].stall) && fen.stage >= 5 && fen.stage <= 6) {
			player_stat_count('shinto shrine', !fen.actionsCompleted.includes(plname) || fen.stage < 6 ? calc_stall_value(fen, plname) : '_', d);
		}
		player_stat_count('star', plname == U.name || isdef(fen.winners) ? ari_calc_real_vps(fen, plname) : ari_calc_fictive_vps(fen, plname), d);
		if (fen.turn.includes(plname)) {
			show_hourglass(plname, d, 30, { left: -3, top: 0 }); //'calc( 50% - 36px )' });
		}
	}
}
function ari_tax_phase_needed(fen) {
	let pl_tax = {};
	let need_tax_phase = false;
	for (const uplayer of fen.plorder) {
		let hsz = fen.players[uplayer].hand.length;
		let nchateaus = fen.players[uplayer].buildings.chateau.length;
		let allowed = ARI.sz_hand + nchateaus;
		let diff = hsz - allowed;
		if (diff > 0) need_tax_phase = true;
		pl_tax[uplayer] = diff;
	}
	if (need_tax_phase) {
		fen.turn = [ari_get_first_tax_payer(fen, pl_tax)];
		fen.pl_tax = pl_tax;
		fen.stage = 2;
		return true;
	} else {
		fen.stage = 3;
		return false;
	}
}
function ari_test_hand_to_discard(fen, uname, keep = 0) {
	let list = fen.players[uname].hand;
	while (fen.open_discard.length < 4 && list.length > keep) top_elem_from_to(list, fen.open_discard);
	while (list.length > keep) top_elem_from_to(list, fen.deck_discard);
}
function ari_ui_player(otree, uname, dParent) {
	let dPlayer = ui_make_player(otree, uname, dParent);
	let dHand = ari_make_cardlist(otree[uname].hand, 2, dPlayer);
}
function ari_ut0_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	for (const uname in fen.players) {
		let pl = fen.players[uname];
		while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);
	}
	fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');
	fen.players.leo.hand = 'ACb ASb 2Db 4Db 6Db KDb QSb'.split(' ');
	fen.players.mimi.buildings.farms = [{ list: '4Cr 4Sr 4Sb 4Dr'.split(' '), h: null }, { list: '5Cr 5Sr 5Sb 5Dr'.split(' '), h: null }];
	fen.players.mimi.buildings.estates = [{ list: 'TCr TSr TSb TDr TDb'.split(' '), h: null }];
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut1_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	top_elem_from_to(fen.deck, fen.market);
	top_elem_from_to(fen.deck, fen.market);
	fen.stage = 4;
	top_elem_from_to(fen.players.mimi.hand, fen.players.mimi.stall);
	top_elem_from_to(fen.players.mimi.hand, fen.players.mimi.stall);
	fen.iturn = 1;
	fen.plturn = 'leo';
	fen.round = ['mimi'];
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut10_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut100_create_staged() {
	console.log('*** test 100: tax ***');
	TestNumber = 100;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];
	let fen = ari_setup(player_names);
	ari_test_hand_to_discard(fen, 'mimi');
	deck_add(fen.deck, 3, fen.players.amanda.hand);
	ari_test_hand_to_discard(fen, 'felix', 3);
	deck_add(fen.deck, 1, fen.players.blade.hand);
	let sz = ARI.sz_hand;
	fen.pl_tax = { mimi: -sz, amanda: 3, felix: -sz + 3, lauren: 0, blade: 1 };
	[fen.iturn, fen.plturn] = [1, 'amanda'];
	fen.stage = 2;
	DA.fen0 = fen;
	DA.staged_moves = [];
	DA.iter = 100;
	DA.iter_verify = 3;
	DA.verify = (ot) => {
		let res = forAll(ot.plorder, x => ot[x].hand.length <= sz);
		if (!res) for (const uname of ot.plorder) console.log('pl', uname, 'hand', ot[uname].hand.length, 'should be', Math.min(sz, DA.fen0.players[uname].hand.length));
		return res;
	};
	DA.auto_moves = {
		amanda_1: [[0, 1, 2]],
		blade_2: [[0]],
	}
	return [fen, player_names];
}
function ari_ut101_create_staged() {
	console.log('*** test 101: stall selection 5 players ***');
	TestNumber = 101;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];
	let fen = ari_setup(player_names);
	ari_test_hand_to_discard(fen, 'mimi');
	ari_test_hand_to_discard(fen, 'felix');
	fen.stage = 3;
	DA.fen0 = fen;
	DA.staged_moves = [];
	DA.iter = 100;
	DA.iter_verify = 6;
	DA.verify = (ot) => {
		let stall_sz = { mimi: 0, amanda: 3, felix: 0, lauren: 1, blade: 2 };
		let res = forAll(ot.plorder, x => ot[x].stall.length == stall_sz[x]);
		if (!res) for (const uname of ot.plorder) console.log('pl', uname, 'stall', ot[uname].stall.length, 'should be', stall_sz[uname]);
		return res;
	};
	DA.auto_moves = {
		amanda_2: [[0, 1, 2]],
		lauren_4: [[0]],
		blade_5: [[0, 1]],
	}
	return [fen, player_names];
}
function ari_ut102_create_staged() {
	console.log('*** test 102: stall selection mimi-leo ***');
	TestNumber = 102;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	ari_test_hand_to_discard(fen, 'mimi');
	fen.stage = 3;
	DA.fen0 = fen;
	DA.iter_verify = 3;
	DA.verify = (ot) => {
		let stall_sz = { mimi: 0, leo: 3 };
		let res = forAll(ot.plorder, x => ot[x].stall.length == stall_sz[x]);
		if (!res) for (const uname of ot.plorder) console.log('pl', uname, 'stall', ot[uname].stall.length, 'should be', stall_sz[uname]);
		return res;
	};
	DA.auto_moves = {
		leo_2: [[0, 1, 2]],
	};
	return [fen, player_names];
}
function ari_ut103_create_staged() {
	console.log('*** test 103: trade ***');
	TestNumber = 103;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen, 2);
	DA.fen0 = fen;
	DA.auto_moves = {
		mimi_1: [['trade'], [1, 3]],
		mimi_2: [['pass']],
		leo_3: [['trade'], [1, 3]],
		leo_4: [['pass']],
	};
	DA.iter_verify = 5;
	DA.verify = (ot) => {
		let res = firstCond(ot.mimi.hand, x => x == DA.fen0.market[1]);
		if (!res) console.log('mimi stall does not contain market card from start!!!');
		return res;
	};
	return [fen, player_names];
}
function ari_ut104_create_staged() {
	console.log('*** test 104: downgrade from estate to farm ***');
	TestNumber = 104;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	stage_building(fen, fen.iturn, 'estate');
	DA.fen0 = fen;
	DA.iter_verify = 2;
	DA.verify = (ot) => {
		let stall_sz = { mimi: 0, leo: 3 };
		let res = ot.mimi.buildings.farms.length == 1 && ot.mimi.buildings.estates.length == 0;
		if (!res) console.log('mimi buildings', ot.mimi.buildings);
		return res;
	};
	DA.auto_moves = {
		mimi_1: [['downgrade'], [0]],
	};
	return [fen, player_names];
}
function ari_ut105_create_staged() {
	console.log('*** test 105: visit ***');
	TestNumber = 105;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo', 'meckele'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	stage_replace_hand_cards_by(fen, 'mimi', ['QSy']);
	stage_building(fen, fen.iturn, 'estate');
	stage_building(fen, 1, 'estate');
	stage_building(fen, 2, 'estate');
	fen.phase = 'queen';
	DA.fen0 = fen;
	DA.iter_verify = 2;
	DA.verify = (ot) => {
		let uname_visited = ot.plturn;
		let building = ot[uname_visited].buildings.estates[0];
		let res = ot.mimi.coins == 2 || ot.mimi.coins == 4 || ot.mimi.hand.length + ot.mimi.stall.length == 6;
		if (!res) console.log('mimi visit payment did not work!', building.list);
		return res;
	};
	DA.auto_moves = {
		mimi_1: [['visit'], [0], [0], ['pass']],
	};
	return [fen, player_names];
}
function ari_ut106_create_staged() {
	console.log('*** test 106: double visit ***');
	TestNumber = 106;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo', 'meckele'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	stage_replace_hand_cards_by(fen, 'mimi', ['QSy', 'QSg']);
	stage_building(fen, fen.iturn, 'estate');
	stage_building(fen, 1, 'chateau');
	stage_building(fen, 2, 'chateau');
	fen.phase = 'queen';
	DA.fen0 = fen;
	DA.auto_moves = {
		mimi_1: [['visit'], [0], [0]],
		mimi_2: [['visit'], [0], [0]],
	};
	DA.iter_verify = 3;
	DA.verify = (ot) => {
		let uname_visited = ot.plorder[1];
		let chateaus = ot[uname_visited].buildings.chateaus;
		console.log('chateaus:', uname_visited, chateaus);
		let res = ot.mimi.coins == 5 || ot[uname_visited].buildings.chateaus.length == 0;
		if (!res) console.log('double visit failed or building is correct!!!');
		return res;
	};
	return [fen, player_names];
}
function ari_ut107_create_staged() {
	console.log('*** test 107: end game ***');
	TestNumber = 107;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2, chateaus: 1 }, leo: { farms: 3 } });
	DA.fen0 = fen;
	DA.auto_moves = {
		mimi_1: [['pass']],
		leo_2: [['pass']],
		3: [[0]],
	};
	DA.iter_verify = 4;
	DA.verify = (ot) => {
		let res = ot.winner = 'mimi';
		if (!res) console.log('end game mimi should win didnt work!', ot);
		return res;
	};
	return [fen, player_names];
}
function ari_ut108_create_staged() {
	console.log('*** test 108: buy from open discard ***');
	TestNumber = 108;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	fen.open_discard = deck_deal(fen.deck, 4);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2, chateaus: 1 }, leo: { farms: 3 } });
	fen.phase = 'jack';
	DA.fen0 = fen;
	DA.auto_moves = {
		mimi_1: [['buy'], [0], [0]],
	};
	DA.iter_verify = 2;
	DA.verify = (ot) => {
		let res = ot.open_discard.length == 3 && ot.mimi.hand.length == 5 && ot.mimi.coins == 2
			|| arrLast(ot.open_discard)[0] == 'J' && ot.mimi.hand.length == 4 && ot.mimi.coins == 3;
		if (!res) console.log('buy form discard does not work!', ot.mimi, ot.open_discard);
		return res;
	};
	return [fen, player_names];
}
function ari_ut109_create_staged() {
	console.log('*** test 109: harvest ***');
	TestNumber = 109;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo', 'meckele'];
	let fen = ari_setup(player_names);
	fen.open_discard = deck_deal(fen.deck, 4);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2 }, leo: { farms: 3 }, meckele: { farms: 2 } });
	fen.phase = 'jack';
	DA.fen0 = fen;
	DA.auto_moves = [
		[[]],
		[['pass']], [['pass']], [['pass']],
		[[0]], [[0]], [[0]],
		[[0, 1]], [[0, 1]], [[0, 1]],
		[['harvest'], [0]],
	];
	DA.iter_verify = 11;
	DA.verify = (ot) => {
		let uname = ot.plturn;
		let res = ot[uname].buildings.farms[0].h == null && ot[uname].hand.length == 6;
		if (!res) console.log('harvest FAIL!', ot[uname]);
		return res;
	};
	return [fen, player_names];
}
function ari_ut11_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	let [mimi, leo] = [fen.players.mimi, fen.players.leo];
	mimi.buildings.farms = [{ list: deck_deal(fen.deck, 4), h: null }];
	leo.buildings.farms = [{ list: deck_deal(fen.deck, 4), h: null }];
	fen.open_discard = deck_deal(fen.deck, 4);
	fen.market = deck_deal(fen.deck, 2);
	fen.phase = 'king';
	arisim_stage_4(fen, 3, 3);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut110_create_staged() {
	console.log('*** test 110: end game 2 ***');
	TestNumber = 110;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	fen.open_discard = deck_deal(fen.players.mimi.hand, 2);
	deck_add(fen.players.leo.hand, 2, fen.open_discard);
	stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2, chateaus: 1 }, leo: { farms: 3 } });
	fen.phase = 'jack';
	DA.fen0 = fen;
	DA.auto_moves = [
		[[]],
		[['pass']], [['pass']],
		[[0]], [[0]],
		[['pass']], [['pass']],
		[[1]],
	];
	DA.iter_verify = 8;
	DA.verify = (ot) => {
		let res = ot.stage == 3;
		if (!res) console.log('Not ending game FAIL!', ot.stage);
		return res;
	};
	return [fen, player_names];
}
function ari_ut111_create_staged() {
	console.log('*** test 111: auction payment test ***');
	TestNumber = 111;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo', 'meckele'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	fen.open_discard = deck_deal(fen.players.mimi.hand, 2);
	deck_add(fen.players.leo.hand, 2, fen.open_discard);
	fen.phase = 'queen';
	DA.fen0 = fen;
	DA.auto_moves = {
		1: [['pass']],
		2: [['pass']],
		3: [['pass']],
		4: [[0]],
		5: [[1]],
		6: [[2]],
		7: [[0]],
	};
	DA.iter_verify = 8;
	DA.verify = (ot) => {
		let coins = ot.plorder.map(x => ot[x].coins);
		let sum = arrSum(coins);
		let res = sum == 8;
		if (!res) console.log('payment for auction card wrong', coins, sum);
		return res;
	};
	return [fen, player_names];
}
function ari_ut112_create_staged() {
	console.log('*** test 112: auction payment test 2 ***');
	TestNumber = 112;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo', 'meckele', 'felix', 'amanda'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	fen.phase = 'queen';
	DA.fen0 = fen;
	DA.auto_moves = {
		1: [['pass']],
		2: [['pass']],
		3: [['pass']],
		4: [['pass']],
		5: [['pass']],
		6: [[1]],
		7: [[0]],
		8: [[2]],
		9: [[2]],
		10: [[1]],
		11: [[0]],
		12: [[1]],
	};
	DA.iter_verify = 13;
	DA.verify = (ot) => {
		let coins = ot.plorder.map(x => ot[x].coins);
		let sum = arrSum(coins);
		let res = sum == 11;
		if (!res) console.log('payment for auction card wrong', coins, sum);
		return res;
	};
	return [fen, player_names];
}
function ari_ut113_create_staged() {
	console.log('*** test 113: buy from open discard w/ jack ***');
	TestNumber = 113;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	fen.open_discard = deck_deal(fen.deck, 4);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	stage_replace_hand_cards_by(fen, 'mimi', ['JSy']);
	stage_correct_buildings(fen, { mimi: { farms: 2, estates: 2, chateaus: 1 }, leo: { farms: 3 } });
	fen.phase = 'jack';
	DA.fen0 = fen;
	DA.auto_moves = {
		mimi_1: [['buy'], [0], [0]],
	};
	DA.iter_verify = 2;
	DA.verify = (ot) => {
		let res = ot.open_discard.length == 3 && ot.mimi.hand.length == 5 && ot.mimi.coins == 2
			|| arrLast(ot.open_discard)[0] == 'J' && ot.mimi.hand.length == 4 && ot.mimi.coins == 3;
		if (!res) console.log('buy form discard does not work!', ot.mimi, ot.open_discard);
		return res;
	};
	return [fen, player_names];
}
function ari_ut12_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];
	let fen = ari_setup(player_names);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut13_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];
	let fen = ari_setup(player_names);
	ari_test_hand_to_discard(fen, 'mimi');
	ari_test_hand_to_discard(fen, 'lauren');
	console.log('mimi', fen.players.mimi)
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut14_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];
	let fen = ari_setup(player_names);
	DA.fen0 = jsCopy(fen);
	arisim_stage_3(fen);
	arisim_stage_4_all(fen, 1);
	DA.staged_moves = [];
	DA.iter = 100;
	DA.iter_verify = 2;
	DA.verify = (ot) => {
		let plast = arrLast(ot.round);
		let ok = sameList(ot[plast].hand, DA.fen0.players[plast].hand);
		console.log('pl', plast, 'hand', ot[plast].hand, 'should be', DA.fen0.players[plast].hand);
		return ok;
	}
	return [fen, player_names];
}
function ari_ut15_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'amanda', 'felix', 'lauren', 'blade'];
	let fen = DA.fen0 = ari_setup(player_names);
	ari_test_hand_to_discard(fen, 'mimi');
	ari_test_hand_to_discard(fen, 'amanda');
	ari_test_hand_to_discard(fen, 'lauren');
	ari_test_hand_to_discard(fen, 'blade');
	DA.staged_moves = [];
	DA.iter = 100;
	DA.iter_verify = 3;
	DA.verify = (ot) => ot.plturn == 'felix';
	return [fen, player_names];
}
function ari_ut16_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut2_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4(fen);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut206_create_staged() {
	console.log('*** test 206: prep double visit ***');
	TestNumber = 206;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo', 'meckele'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	stage_replace_hand_cards_by(fen, 'mimi', ['QSy', 'QSg']);
	stage_building(fen, fen.iturn, 'estate');
	fen.players.leo.buildings.farms = [{ list: '4Cy 4Sy 4Hy 6Dy'.split(' '), h: null }, { list: '5Cy JSy 5Sy 5Dy'.split(' '), h: null }];
	fen.phase = 'queen';
	DA.fen0 = fen;
	return [fen, player_names];
}
function ari_ut3_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	for (const uname in fen.players) {
		let pl = fen.players[uname];
		while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);
	}
	fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');
	fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');
	fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '), h: null }];
	fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr TDb'.split(' '), h: null }];
	fen.market = 'KSb 3Sb'.split(' ');
	arisim_stage_4(fen, 3, 2);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut306_create_staged() {
	console.log('*** test 306: prep double visit ***');
	TestNumber = 306;
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo', 'meckele'];
	let fen = ari_setup(player_names);
	arisim_stage_3(fen);
	arisim_stage_4_all_mimi_starts(fen);
	stage_replace_hand_cards_by(fen, 'mimi', ['QSy', 'QSg']);
	stage_building(fen, fen.iturn, 'estate');
	fen.players.leo.buildings.farms = [{ list: '4Cy 4Sy 4Hy 6Dy'.split(' '), h: null }, { list: '5Cy JSy 5Sy 5Dy'.split(' '), h: null }];
	fen.phase = 'queen';
	DA.fen0 = fen;
	DA.auto_moves = [[],
	[['visit'], ['last'], [0]],
	[['visit'], ['last'], [1]],
	[['pass']],
	];
	return [fen, player_names];
}
function ari_ut4_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	for (const uname in fen.players) {
		let pl = fen.players[uname];
		while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);
	}
	fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');
	fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');
	fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '), h: null }];
	fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr TDb'.split(' '), h: null }];
	fen.market = 'KSb 3Sb'.split(' ');
	fen.phase = 'queen';
	fen.stage = 11;
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut5_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	for (const uname in fen.players) {
		let pl = fen.players[uname];
		while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);
	}
	fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');
	fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');
	fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '), h: null }];
	fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr TDb'.split(' '), h: null }];
	fen.phase = 'jack';
	fen.stage = 3;
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut6_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	for (const uname in fen.players) {
		let pl = fen.players[uname];
		while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);
	}
	fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb KCb QDb'.split(' ');
	fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');
	fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '), h: null }];
	fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr TDb'.split(' '), h: null }];
	for (let i = 0; i < 3; i++) {
		top_elem_from_to(fen.deck, fen.market);
	}
	fen.phase = 'jack';
	arisim_stage_4(fen);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut7_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	for (const uname in fen.players) {
		let pl = fen.players[uname];
		while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);
	}
	fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb QCb QDb'.split(' ');
	fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');
	fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '), h: null }];
	fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr TDb'.split(' '), h: null }];
	for (let i = 0; i < 3; i++) {
		top_elem_from_to(fen.deck, fen.market);
	}
	fen.phase = 'jack';
	arisim_stage_4(fen);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut8_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	deck_add(fen.deck, 1, fen.players.mimi.hand);
	fen.players.mimi.buildings.farms = [{ list: deck_deal(fen.deck, 4), h: '3Hb' }];
	fen.players.leo.buildings.farms = [{ list: deck_deal(fen.deck, 4), h: null }];
	fen.players.leo.buildings.estates = [{ list: deck_deal(fen.deck, 5), h: null }];
	fen.market = deck_deal(fen.deck, 3);
	fen.phase = 'jack';
	arisim_stage_4(fen);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function ari_ut9_create_staged() {
	Session.cur_game = 'gAristo';
	let player_names = ['mimi', 'leo'];
	let fen = ari_setup(player_names);
	for (const uname in fen.players) {
		let pl = fen.players[uname];
		while (!isEmpty(pl.hand)) last_elem_from_to(pl.hand, fen.deck);
	}
	fen.players.mimi.hand = 'AHb ADb 2Cb 4Cb 6Cb QCb QDb'.split(' ');
	fen.players.leo.hand = 'ACb KDb QSb ASb 2Db 4Db 6Db'.split(' ');
	fen.players.mimi.buildings.farms = [{ list: '4Cr 7Sr 4Sb 4Dr'.split(' '), h: '3Hb' }];
	fen.players.leo.buildings.farms = [{ list: 'JCr JSr JSb JDr'.split(' '), h: '3Sr' }];
	fen.players.leo.buildings.estates = [{ list: 'TCr 7Sr TSb TDr TDb'.split(' '), h: null }];
	for (let i = 0; i < 3; i++) {
		top_elem_from_to(fen.deck, fen.market);
	}
	fen.phase = 'king';
	arisim_stage_4(fen);
	DA.staged_moves = [];
	DA.iter = 100;
	return [fen, player_names];
}
function arisim_stage_3(fen) {
	top_elem_from_to(fen.deck, fen.market);
	top_elem_from_to(fen.deck, fen.market);
	if (fen.phase == 'jack') top_elem_from_to(fen.deck, fen.market);
	fen.stage = 4;
}
function arisim_stage_4(fen, n_mimi = 2, n_leo = 3) {
	for (let i = 0; i < n_mimi; i++) top_elem_from_to(fen.players.mimi.hand, fen.players.mimi.stall);
	for (let i = 0; i < n_leo; i++)  top_elem_from_to(fen.players.leo.hand, fen.players.leo.stall);
	fen.stage = 5;
	let valmimi = fen.players.mimi.stall_value = arrSum(fen.players.mimi.stall.map(x => Aristocards[x].val));
	let valleo = fen.players.leo.stall_value = arrSum(fen.players.leo.stall.map(x => Aristocards[x].val));
	let minplayer = valmimi <= valleo ? 'mimi' : 'leo';
	fen.iturn = fen.plorder.indexOf(minplayer); fen.plturn = minplayer;
	fen.num_actions = fen.total_pl_actions = fen.players[minplayer].stall.length;
	fen.action_number = 1;
}
function arisim_stage_4_all(fen, n = 3) {
	for (let i = 0; i < n; i++) top_elem_from_to(fen.players.mimi.hand, fen.players.mimi.stall);
	let others = get_keys(fen.players).filter(x => x != 'mimi');
	for (const uname of others) {
		for (let i = 0; i < n; i++)  top_elem_from_to(fen.players[uname].hand, fen.players[uname].stall);
	}
	let list = [];
	for (const uname of get_keys(fen.players)) {
		fen.players[uname].stall_value = arrSum(fen.players[uname].stall.map(x => Aristocards[x].val));
		list.push({ uname: uname, val: fen.players[uname].stall_value });
	}
	fen.stage = 5;
	list = sortBy(list, 'val');
	let minplayer = list[0].uname;
	fen.iturn = fen.plorder.indexOf(minplayer);
	fen.plturn = minplayer;
	fen.num_actions = fen.total_pl_actions = fen.players[minplayer].stall.length;
	fen.action_number = 1;
}
function arisim_stage_4_all_mimi_starts(fen, n = 3) {
	for (let i = 0; i < n; i++) top_elem_from_to(fen.players.mimi.hand, fen.players.mimi.stall);
	let others = get_keys(fen.players).filter(x => x != 'mimi');
	for (const uname of others) {
		for (let i = 0; i < n; i++)  top_elem_from_to(fen.players[uname].hand, fen.players[uname].stall);
	}
	let list = [];
	for (const uname of get_keys(fen.players)) {
		fen.players[uname].stall_value = arrSum(fen.players[uname].stall.map(x => Aristocards[x].val));
		list.push({ uname: uname, val: fen.players[uname].stall_value });
	}
	fen.stage = 5;
	list = sortBy(list, 'val');
	let minplayer = list[0].uname;
	if (minplayer != 'mimi') {
		console.log('NOT mimi!!! minplayer', minplayer)
		let best_stall = fen.players[minplayer].stall;
		let best_stall_value = fen.players[minplayer].stall_value;
		fen.players[minplayer].stall = fen.players.mimi.stall;
		fen.players[minplayer].stall_value = fen.players.mimi.stall_value;
		fen.players.mimi.stall = best_stall;
		fen.players.mimi.stall_value = best_stall_value;
		minplayer = 'mimi';
	}
	fen.iturn = fen.plorder.indexOf(minplayer);
	fen.plturn = minplayer;
	console.assert(fen.plturn == 'mimi', 'WTF?????????????????');
	fen.num_actions = fen.total_pl_actions = fen.players[minplayer].stall.length;
	fen.action_number = 1;
}
function aristo() {
	const rankstr = 'A23456789TJQK*';
	function setup(players, options) {
		let fen = { players: {}, plorder: jsCopy(players), history: [] };
		let n = players.length;
		let num_decks = fen.num_decks = 2 + (n >= 8 ? 2 : n >= 6 ? 1 : 0);
		let deck = fen.deck = create_fen_deck('n', num_decks);
		shuffle(deck);
		let deck_commission = fen.deck_commission = create_fen_deck('c'); shuffle(deck_commission);
		let deck_luxury = fen.deck_luxury = create_fen_deck('l'); shuffle(deck_luxury);
		let deck_rumors = fen.deck_rumors = exp_rumors(options) ? create_fen_deck('r') : []; shuffle(deck_rumors);
		shuffle(fen.plorder);
		fen.market = [];
		fen.deck_discard = [];
		fen.open_discard = [];
		fen.commissioned = [];
		fen.open_commissions = exp_commissions(options) ? deck_deal(deck_commission, 3) : [];
		fen.church = exp_church(options) ? deck_deal(deck, players.length) : [];
		for (const plname of players) {
			let pl = fen.players[plname] = {
				hand: deck_deal(deck, 7),
				commissions: exp_commissions(options) ? deck_deal(deck_commission, 4) : [],
				rumors: exp_rumors(options) ? deck_deal(deck_rumors, players.length - 1) : [],
				journeys: [],
				buildings: { farm: [], estate: [], chateau: [] },
				stall: [],
				stall_value: 0,
				coins: 3,
				vps: 0,
				score: 0,
				name: plname,
				color: get_user_color(plname),
			};
		}
		fen.phase = 'king';
		fen.num_actions = 0;
		fen.herald = fen.plorder[0];
		fen.heraldorder = jsCopy(fen.plorder);
		if (exp_commissions(options)) {
			ari_history_list([`commission trading starts`], 'commissions', fen);
			[fen.stage, fen.turn] = [23, options.mode == 'hotseat' ? [fen.plorder[0]] : fen.plorder]; fen.comm_setup_num = 3; fen.keeppolling = true;
		} else if (exp_rumors(options) && fen.plorder.length > 2) {
			ari_history_list([`gossiping starts`], 'rumors', fen);
			[fen.stage, fen.turn] = [24, options.mode == 'hotseat' ? [fen.plorder[0]] : fen.plorder];
		} else[fen.stage, fen.turn] = set_journey_or_stall_stage(fen, options, fen.phase);
		return fen;
	}
	function activate_ui() { ari_activate_ui(); }
	function check_gameover(z) { return isdef(z.fen.winners) ? z.fen.winners : false; }
	function present(dParent) { ari_present(dParent); }
	function stats(dParent) { ari_stats(dParent); }
	function state_info(dParent) { ari_state(dParent); }
	function get_selection_color(item) {
		if (Z.stage == 41 && Z.A.selected.length == 1) return 'blue'; return 'red';
	}
	return { get_selection_color, rankstr, setup, activate_ui, check_gameover, present, state_info, stats };
}
function aristoAggregateVisible(g) {
	let result = [];
	let stalls = g.allPlayers.map(x => x.stall);
	result = arrFlatten(stalls).concat(g.market.cards);
	return result;
}
function aristoAIAction(pl, g, key) {
	if (key == 'stall') {
		let deck1 = new Deck(pl.hand);
		pl.stall = deck1.deal(randomNumber(Math.min(2, deck1.count()), Math.min(5, deck1.count())));
		pl.hand = deck1.cards();
	}
}
function aristocracy_activate(fen, plname) {
	console.log('activating for', plname)
}
function aristocracy_present(fen, dParent, plname) {
	console.log('fen', fen);
}
function aristocracy_setup(player_names) {
	let fen = {};
	let deck = fen.deck = get_keys(Aristocards).filter(x => 'br'.includes(x[2]));
	shuffle(deck);
	fen.market = [];
	fen.deck_discard = [];
	fen.open_discard = [];
	let pls = fen.players = {};
	for (const plname of player_names) {
		let pl = pls[plname] = {
			hand: deck_deal(deck, 7),
			buildings: { farms: [], estates: [], chateaus: [] },
			stall: [],
			stall_value: 0,
			coins: 3,
			vps: 0,
			score: 0,
		};
	}
	fen.plorder = rPlayerOrder(player_names);
	fen.iturn = 0;
	fen.plturn = fen.plorder[0];
	fen.turn = [fen.plturn];
	fen.round = [];
	fen.herald = fen.plturn;
	fen.phase = 'king';
	fen.stage = 3;
	fen.step = 0;
	return fen;
}
function aristoExchangeCard() { }
function aristoGame1(g) {
	let phase = g.phase = 'king';
	let players = g.allPlayers;
	let i = 0; players.map(x => x.index = i++);
	let indices = players.map(x => x.index);
	let me = g.me;
	let others = g.others;
	let market = g.market;
	let buy_cards = g.buy_cards;
	let draw_pile = g.draw_pile; draw_pile.type = 'deck';
	let deck = draw_pile.deck = new Deck();
	deck.init52_double();
	let discard_pile = g.discard_pile; discard_pile.type = 'deck';
	let discard = discard_pile.deck = new Deck();
	for (const pl of players) { pl.hand = deck.deal(7); pl.coins = 3; }
	market.cards = deck.deal(3); market.type = 'cards';
	buy_cards.cards = []; buy_cards.type = 'cards';
	let herald = g.herald = players[1];
	let heraldOrder = g.heraldOrder = arrCycle(indices, herald.index);
	g.stallsHidden = true;
	for (const plIndex of heraldOrder) {
		if (plIndex == 0) break;
		let pl = players[plIndex];
		aristoAIAction(pl, g, 'stall');
	}
	aristoUi(dTable, g);
	dLineTopMiddle.innerHTML = 'choose your stall!';
	mButton('submit move', () => aristoUserAction(g, 'stall', aristoGame2), mBy('sidebar').firstChild, { w: 80, bg: g.color }, 'mybutton');
	for (const card of g.me.handItems) {
		let d = iDiv(card);
		d.onclick = () => {
			if (card.isSelected) {
				card.isSelected = false;
				iDiv(card).style.transform = 'unset';
			} else {
				card.isSelected = true;
				iDiv(card).style.transform = 'translateY(-25px)';
			}
		}
	}
}
function aristoGame2(g) {
	let heraldOrder = g.heraldOrder;
	let players = g.allPlayers;
	let me = g.me;
	let iNext = heraldOrder.indexOf(0) + 1;
	for (let i = iNext; i < heraldOrder.length; i++) {
		let plIndex = heraldOrder[i];
		let pl = players[plIndex];
		if (plIndex == 0) break;
		let deck1 = new Deck(pl.hand);
		pl.stall = deck1.deal(randomNumber(Math.min(2, deck1.count()), Math.min(5, deck1.count())));
		pl.hand = deck1.cards();
	}
	g.stallsHidden = false;
	aristoUi(dTable, g);
	setTimeout(() => aristoGame3(g), 2000);
}
function aristoGame3(g) {
	let heraldOrder = g.heraldOrder;
	let players = g.allPlayers;
	let me = g.me;
	let stallOrder = g.stallOrder = calcStallOrder(players);
	players.map(x => x.nActions = x.stall.length);
	for (const plIndex of stallOrder) {
		let pl = players[1];
		console.log('player', pl.name, 'starts with', pl.nActions, 'actions, stall value is', pl.stallValue);
		if (plIndex == 0) break;
		while (pl.nActions > 0) {
			aristoBuild(pl, g);
			break;
		}
		console.log('player', pl.name, 'still has', pl.nActions, 'actions');
	}
	aristoUi(dTable, g);
	return;
	console.log('Game', g);
}
function aristoUi(dParent, g) {
	clearTable();
	let d1 = mDiv(dParent, { w: '100%' }); mFlex(d1, 'v');
	let dWorld = mDiv(d1, { bg: 'random', hmin: 170, flex: 1 });
	mFlex(dWorld);
	iAdd(g.me, { div: cardZone(d1, g.me, 2) });
	let others = g.others;
	for (let i = 0; i < others.length; i++) {
		let pl = others[i];
		iAdd(pl, { div: cardZone(d1, pl) });
	}
	for (const o of [g.draw_pile, g.market, g.buy_cards, g.discard_pile]) { iAdd(o, { div: cardZone(dWorld, o) }); }
	for (const name of ['draw_pile', 'market', 'buy_cards', 'discard_pile']) { g[name + 'Items'] = showCards(g[name]); }
	for (const pl of g.allPlayers) {
		pl.handItems = showCards({ div: iDiv(pl), type: pl == g.me ? 'hand' : 'handHidden', cards: pl.hand });
		if (isdef(pl.stall)) pl.stallItems = showCards({ div: iDiv(pl), type: g.stallsHidden ? 'cardsHidden' : 'cards', cards: pl.stall });
		if (isdef(pl.buildings)) {
			for (const building of pl.buildings) {
				let bItem = showCards({ div: iDiv(pl), type: 'hand', cards: building });
				lookupAddToList(pl, ['buildingItems'], bItem);
			}
		}
	}
}
function aristoUserAction(g, key, followFunc) {
	if (key == 'stall') {
		let me = g.me;
		let indices = arrIndices(me.handItems, x => x.isSelected);
		[me.stall, me.hand] = arrSplitByIndices(me.hand, indices);
		followFunc(g);
	}
}
function aRollby(elem, dx = 100, ms = 3000) {
	anime({ targets: elem, translateX: dx, rotate: '1turn', duration: ms });
}
function aRotate(d, ms = 2000) { return d.animate({ transform: `rotate(360deg)` }, ms); }
function aRotateAccel(d, ms) { return d.animate({ transform: `rotate(1200deg)` }, { easing: 'cubic-bezier(.72, 0, 1, 1)', duration: ms }); }
function arr_count(arr, funcprop) {
	console.log('arr', arr);
	let di = {};
	if (isdef(funcprop) && isString(funcprop)) {
		for (const a of arr) { if (isdef(di[a[funcprop]])) di[a[funcprop]] += 1; else di[a[funcprop]] = 1; }
	} else if (isdef(funcprop)) {
		for (const a of arr) {
			let val = funcprop(a);
			if (isdef(di[val])) di[val] += 1; else di[val] = 1;
		}
	} else {
		for (const a of arr) { if (isdef(di[a])) di[a] += 1; else di[a] = 1; }
	}
	for (const a of arr) {
		a.rank = a.key[0];
		a.count = di[a.rank];
	}
	let sorted = sortByDescending(arr, 'count');
	return sorted;
}
function arr_get_max(arr, func) {
	if (isEmpty(arr)) return null;
	if (nundef(func)) func = x => x;
	let i = 0; let aug = arr.map(x => ({ el: jsCopy(x), val: func(x), i: i++ }));
	sortByDescending(aug, 'val');
	let max = aug[0].val;
	let res = arrTakeWhile(aug, x => x.val == max); return res.map(x => arr[x.i]);
}
function arr_get_min(arr, func) {
	if (isEmpty(arr)) return null;
	if (nundef(func)) func = x => x;
	let i = 0; let aug = arr.map(x => ({ el: jsCopy(x), val: func(x), i: i++ }));
	sortBy(aug, 'val');
	let min = aug[0].val;
	let res = arrTakeWhile(aug, x => x.val == min); return res.map(x => arr[x.i]);
}
function arr_to_dict_by(arr, prop) { let di = {}; for (const a of arr) { lookupAddToList(di, [a[prop]], a); } return di; }
function arr2Set(arr2d, func) {
	for (let i = 0; i < arr2d.length; i++) {
		for (let j = 0; j < arr2d[i].length; j++) {
			let o = arr2d[i][j];
			if (typeof o == 'object') {
				func(o, i, j);
			}
		}
	}
}
function arrAdd(arr1, arr2) {
	let i = 0; return arr1.map(x => x + arr2[i++]);
}
function arrangeChildrenAsCircle(n, R) { }
function arrangeChildrenAsMatrix(n, R, rows, cols) {
	let children = n.children.map(x => R.uiNodes[x]);
	let num = children.length;
	let size = 20;
	let padding = 4;
	let i = 0;
	for (const n1 of children) {
		let b = getBounds(n1.ui);
		let newMax = Math.max(Math.max(b.width, b.height), size);
		if (newMax > size) {
			size = newMax;
		}
	}
	let [y0, wTitle] = calcParentContentYOffsetAndWidth(n, padding);
	for (let r = 0; r < rows; r++) {
		for (let c = 0; c < cols; c++) {
			let n1 = children[i]; i += 1;
			n1.params.size = { w: size - 1, h: size - 1 };
			n1.params.pos = { x: padding + r * size, y: y0 + c * size };
			n1.params.sizing = 'fixed';
		}
	}
}
function arrangeChildrenAsQuad(n, R) {
	let children = n.children.map(x => R.uiNodes[x]);
	let num = children.length;
	let rows = Math.ceil(Math.sqrt(num));
	let cols = Math.floor(Math.sqrt(num));
	let size = 20;
	let padding = 4;
	let i = 0;
	for (const n1 of children) {
		let b = getBounds(n1.ui);
		let newMax = Math.max(Math.max(b.width, b.height), size);
		if (newMax > size) {
			size = newMax;
		}
	}
	let [y0, wTitle] = calcParentContentYOffsetAndWidth(n, padding);
	for (let r = 0; r < rows; r++) {
		for (let c = 0; c < cols; c++) {
			let n1 = children[i]; i += 1;
			n1.params.size = { w: size - 1, h: size - 1 };
			n1.params.pos = { x: padding + r * size, y: y0 + c * size };
			n1.params.sizing = 'fixed';
		}
	}
}
function arrangeOverride(n, R) {
	if (nundef(n.children)) return { w: 0, h: 0 }
	if (isdef(RLAYOUT[n.type])) {
		return RLAYOUT[n.type](n, R);
	}
	if (n.type == 'grid') {
		console.log('should have been done')
	} else if (n.type == 'hand') {
		console.log('should have been done')
		let szNeeded = handLayout(n, R);
		return szNeeded;
	} else if (n.info) {
		n.sizeNeeded = wrapLayoutSizeNeeded(n.children, R);
		let nBoard = R.uiNodes[n.uidParent];
		addResizeInfo(nBoard, n, n.sizeNeeded);
		return { w: n.sizeNeeded.w, h: n.sizeNeeded.h };
	} else if (n.uiType == 'd') {
		let szNeeded = panelLayout(n, R);
		return szNeeded;
	} else {
		console.log('!!!!!!!!!!case NOT catched in arrangeOverride_!!!!!!!!!!', n);
	}
	return res;
}
function arrAverage(arr, prop) {
	let n = arr.length; if (!n) return 0;
	let sum = arrSum(arr, prop);
	return sum / n;
}
function arrBuckets(arr, func, sortbystr) {
	let di = {};
	for (const a of arr) {
		let val = func(a);
		if (nundef(di[val])) di[val] = { val: val, list: [] };
		di[val].list.push(a);
	}
	let res = []
	let keys = get_keys(di);
	if (isdef(sortbystr)) {
		keys.sort((a, b) => sortbystr.indexOf(a) - sortbystr.indexOf(b));
	}
	return keys.map(x => di[x]);
}
function arrByClassName(classname, d) {
	if (nundef(d)) d = document;
	return Array.from(d.getElementsByClassName(classname));
}
function arrChildren(elem) { return [...toElem(elem).children]; }
function arrClear(arr) { arr.length = 0; }
function arrCount(arr, func) { return arr.filter(func).length; }
function arrCreate(n, func) {
	let res = [];
	for (let i = 0; i < n; i++) {
		res.push(func(i));
	}
	return res;
}
function arrCycle(arr, count) { return arrRotate(arr, count); }
function arrCycleSwap(arr, prop, clockwise = true) {
	let n = arr.length;
	let h = arr[0].prop;
	for (let i = 1; i < n; i++) { arr[i - 1][prop] = arr[i][prop]; }
	arr[n - 1][prop] = h;
}
function arrExcept(arr, el) {
	let res = [];
	for (const a of arr) { if (a != el) res.push(a); }
	return res;
}
function arrExtend(arr, list) { list.map(x => arr.push(x)); return arr; }
function arrFirst(arr) { return arr.length > 0 ? arr[0] : null; }
function arrFirstOfLast(arr) { if (arr.length > 0) { let l = arrLast(arr); return isList(l) ? arrFirst(l) : null; } else return null; }
function arrFlatten(arr) {
	let res = [];
	for (let i = 0; i < arr.length; i++) {
		for (let j = 0; j < arr[i].length; j++) {
			res.push(arr[i][j]);
		}
	}
	return res;
}
function arrFromIndex(arr, i) { return arr.slice(i); }
function arrFromTo(arr, iFrom, iTo) { return takeFromTo(arr, iFrom, iTo); }
function arrFunc(n, func) { let res = []; for (let i = 0; i < n; i++) res.push(func()); return res; }
function arrIndices(arr, func) {
	let indices = [];
	for (let i = 0; i < arr.length; i++) { if (func(arr[i])) indices.push(i); }
	return indices;
}
function arrlast(arr) {
	return arr.length > 0 ? arr[arr.length - 1] : null;
}
function arrLast(arr) { return arr.length > 0 ? arr[arr.length - 1] : null; }
function arrLastOfLast(arr) { if (arr.length > 0) { let l = arrLast(arr); return isList(l) ? arrLast(l) : null; } else return null; }
function arrMax(arr, f) { return arr_get_max(arr, f); }
function arrMin(arr, f) { return arr_get_min(arr, f); }
function arrMinMax(arr, func) {
	if (nundef(func)) func = x => x;
	let min = func(arr[0]), max = func(arr[0]), imin = 0, imax = 0;
	for (let i = 1, len = arr.length; i < len; i++) {
		let v = func(arr[i]);
		if (v < min) {
			min = v; imin = i;
		} else if (v > max) {
			max = v; imax = i;
		}
	}
	return { min: min, imin: imin, max: max, imax: imax, elmin: arr[imin], elmax: arr[imax] };
}
function arrMinus(a, b) { if (isList(b)) return a.filter(x => !b.includes(x)); else return a.filter(x => x != b); }
function arrNext(list, el) {
	let iturn = list.indexOf(el);
	let nextplayer = list[(iturn + 1) % list.length];
	return nextplayer;
}
function arrNoDuplicates(arr) {
	let di = {};
	let arrNew = [];
	for (const el of arr) {
		if (!isLiteral(el)) continue;
		if (isdef(di[el])) continue;
		di[el] = true;
		arrNew.push(el);
	}
	return arrNew;
}
function arrPairs(a) {
	let res = [];
	for (let i = 0; i < a.length; i++) {
		for (let j = i + 1; j < a.length; j++) {
			res.push([a[i], a[j]]);
		}
	}
	return res;
}
function arrPlus(a, b) { b.map(x => a.push(x)); return a; }
function arrPrev(list, el) {
	let iturn = list.indexOf(el);
	if (iturn == 0) iturn = list.length;
	let nextplayer = list[(iturn - 1) % list.length];
	return nextplayer;
}
function arrRange(from = 1, to = 10, step = 1) { let res = []; for (let i = from; i <= to; i += step)res.push(i); return res; }
function arrRemove(arr, listweg) {
	arrReplace(arr, listweg, []);
}
function arrRemoveDuplicates(items, prop) {
	let di = {};
	let res = [];
	for (const item of items) {
		if (isdef(di[item[prop].toLowerCase()])) { continue; }
		res.push(item);
		di[item[prop].toLowerCase()] = true;
	}
	return res;
}
function arrRemoveLast(arr) { arr.length -= 1; }
function arrRemovip(arr, el) {
	let i = arr.indexOf(el);
	if (i > -1) arr.splice(i, 1);
	return i;
}
function arrRepeat(n, el) { let res = []; for (let i = 0; i < n; i++) res.push(el); return res; }
function arrReplace(arr, listweg, listdazu) {
	arrExtend(arr, listdazu);
	listweg.map(x => arrRemovip(arr, x));
	return arr;
}
function arrReplace1(arr, elweg, eldazu) {
	let i = arr.indexOf(elweg);
	arr[i] = eldazu;
	return arr;
}
function arrReplaceAt(arr, index, val, inPlace = true) { return inPlace ? arrReplaceAtInPlace(arr, index, val) : arrReplaceAtCopy(arr, index, val); }
function arrReplaceAtCopy(arr, index, val) {
	let res = new Array();
	for (let i = 0; i < arr.length; i++) {
		if (i == index) res[i] = val; else res[i] = arr[i];
	}
	return res;
}
function arrReplaceAtInPlace(arr, index, val) { arr[index] = val; }
function arrReverse(arr) { return jsCopy(arr).reverse(); }
function arrRotate(arr, count) {
	var unshift = Array.prototype.unshift,
		splice = Array.prototype.splice;
	var len = arr.length >>> 0, count = count >> 0;
	let arr1 = jsCopy(arr);
	unshift.apply(arr1, splice.call(arr1, count % len, len));
	return arr1;
}
function arrShufflip(arr) { if (isEmpty(arr)) return []; else return fisherYates(arr); }
function arrSplitAtIndex(arr, i) {
	return [arr.slice(0, i), arr.slice(i)];
}
function arrSplitByIndices(arr, indices) {
	let [a1, a2] = [[], jsCopy(arr)];
	for (let i = 0; i < indices.length; i++) {
		let el = arr[indices[i]];
		a1.push(el);
		removeInPlace(a2, el);
	}
	return [a1, a2];
}
function arrString(arr, func) {
	if (isEmpty(arr)) return '[]';
	let s = '[';
	for (const el of arr) {
		if (isList(el)) s += arrString(el, func) + ','; else s += (isdef(func) ? func(el) : el) + ',';
	}
	s = s.substring(0, s.length - 1);
	s += ']';
	return s;
}
function arrSum(arr, props) {
	if (nundef(props)) return arr.reduce((a, b) => a + b);
	if (!isList(props)) props = [props];
	return arr.reduce((a, b) => a + (lookup(b, props) || 0), 0);
}
function arrSwap(arr, i, j) { let h = arr[i]; arr[i] = arr[j]; arr[j] = h; }
function arrSwap2d(arr, r1, c1, r2, c2) { let h = arr[r1][c1]; arr[r1][c1] = arr[r2][c2]; arr[r2][c2] = h; }
function arrTail(arr) { return arr.slice(1); }
function arrTake(arr, n = 0, from = 0) {
	if (isDict(arr)) {
		let keys = Object.keys(arr);
		return n > 0 ? keys.slice(from, from + n).map(x => (arr[x])) : keys.slice(from).map(x => (arr[x]));
	} else return n > 0 ? arr.slice(from, from + n) : arr.slice(from);
}
function arrTakeFromEnd(arr, n) {
	if (arr.length <= n) return arr.map(x => x); else return arr.slice(arr.length - n);
}
function arrTakeFromTo(arr, a, b) { return takeFromTo(arr, a, b); }
function arrTakeLast(arr, n, from = 0) {
	let res = [];
	if (isDict(arr)) {
		let keys = Object.keys(arr);
		let ilast = keys.length - 1; for (let i = ilast - from; i >= 0 && i > ilast - from - n; i--) { res.unshift(arr[keys[i]]); }
	} else {
		let ilast = arr.length - 1; for (let i = ilast - from; i >= 0 && i > ilast - from - n; i--) { res.unshift(arr[i]); }
	}
	return res;
}
function arrTakeWhile(arr, func) {
	let res = [];
	for (const a of arr) {
		if (func(a)) res.push(a); else break;
	}
	return res;
}
function arrToFen(board, plStart = 'w') {
	let result = "";
	for (let y = 0; y < board.length; y++) {
		let empty = 0;
		for (let x = 0; x < board[y].length; x++) {
			if (isNumber(board[y][x])) {
				empty += 1; continue;
			}
			let c = board[y][x][0];
			if (c == 'w' || c == 'b') {
				if (empty > 0) {
					result += empty.toString();
					empty = 0;
				}
				if (c == 'w') {
					result += board[y][x][1].toUpperCase();
				} else {
					result += board[y][x][1].toLowerCase();
				}
			} else {
				empty += 1;
			}
		}
		if (empty > 0) {
			result += empty.toString();
		}
		if (y < board.length - 1) {
			result += '/';
		}
	}
	result += ` ${plStart} KQkq - 0 1`;
	return result;
}
function arrToggleMember(arr, el) { if (arr.includes(el)) removeInPlace(arr, el); else arr.push(el); }
function arrToMatrix(arr, rows, cols) {
	let i = 0, res = [];
	for (let r = 0; r < rows; r++) {
		let rarr = [];
		for (let c = 0; c < cols; c++) {
			let a = arr[i]; i++;
			rarr.push(a);
		}
		res.push(rarr);
	}
	return res;
}
function arrWithout(arr, b) { return arrMinus(arr, b); }
function arrZip(arr1, arr2) {
	let res = [];
	for (let i = 0; i < Math.min(arr1, arr2); i++) {
		let o = {};
		addKeys(arr1[i], o);
		addKeys(arr2[i], o);
		res.push(o);
	}
	return res;
}
function asElem(x) { return isString(x) ? mBy(x) : x; }
function asList(x) { return isList(x) ? x : [x]; }
function assemble_consts(superdi) {
	let text = '//#region consts\r\n';
	let text2 = '//#region consts\r\n';
	let constlist = sortConstKeys(superdi);
	for (const c of constlist) {
		let constkey = c.key;
		if (['cx', 'PORT', 'SERVER', 'SERVERRURL'].some(x => x == constkey)) { delete superdi.const[constkey]; continue; }
		if (isdef(superdi.func[constkey]) || isdef(superdi.cla[constkey])) { delete superdi.const[constkey]; continue; }
		let code = c.code;
		let skip = false;
		for (const k in superdi.func) { if (code.includes(k + '(') || code.includes(k + ',')) { skip = true; break; } }
		for (const k in superdi.cla) { if (code.includes(k + '(') || code.includes(k + ',') || skip) { skip = true; break; } }
		if (['OPS', 'Perlin', 'EMO'].includes(constkey)) { skip = false; }
		else if (constkey == 'ALLTESTS') {
			superdi = replaceALLTESTS(superdi, c);
			skip = true;
		}
		else if (code.includes('=>')) { superdi = replaceConstByFunc(superdi, c); skip = true; }
		if (skip) text2 += code.trim() + '\r\n'; else text += code.trim() + '\r\n';
	}
	text += '//#endregion\r\n\r\n';
	return [text, text2, superdi];
}
function assemble_dicts(superdi) {
	let justcode = {};
	let history = {};
	let res = {};
	for (const type in superdi) {
		res[type] = {};
		for (const k in superdi[type]) {
			let o = jsCopy(superdi[type][k]);
			let code = remove_all_region_endregion(o.code);
			justcode[k] = codeNormalize(code);
			history[k] = o.history;
			delete o.code;
			delete o.history;
			res[type][k] = o;
		}
	}
	return [res, justcode, history];
}
function assertion(cond) {
	if (!cond) {
		let args = [...arguments];
		for (const a of args) {
			console.log('\n', a);
		}
		throw new Error('TERMINATING!!!')
	}
}
function assets_get() {
	where([...arguments]);
	to_server([...arguments], 'assets');
}
function assets_parse(o) {
	where(o);
	for (const k in o) {
		let text = o[k];
		if (k == 'allSyms') {
			symbolDict = Syms = jsyaml.load(text);
			SymKeys = Object.keys(Syms);
		} else if (k == 'symGSG') {
			ByGroupSubgroup = jsyaml.load(text);
		} else if (k == 'allWP') {
			WordP = jsyaml.load(text);
		} else if (k == 'fens') {
			FenPositionList = csv2list(text);
		} else if (startsWith(k, 'db_')) {
			let okey = stringAfter(k, '_');
			DB[okey] = jsyaml.load(text);
		} else {
			window[capitalize(k)] = jsyaml.load(text);
		}
	}
	if (nundef(KeySets) && isdef(o.symGSG)) { KeySets = getKeySets(); }
}
function aSvg(dParent) {
	if (!dParent.style.position) dParent.style.position = 'relative';
	let svg1 = gSvg();
	svg1.setAttribute('width', '100%');
	svg1.setAttribute('height', '100%');
	let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;';
	svg1.setAttribute('style', style);
	dParent.appendChild(svg1);
	return svg1;
}
function aSvgg(dParent, originInCenter = true) {
	if (!dParent.style.position) dParent.style.position = 'relative';
	let svg1 = gSvg();
	svg1.setAttribute('width', '100%');
	svg1.setAttribute('height', '100%');
	let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;';
	svg1.setAttribute('style', style);
	dParent.appendChild(svg1);
	let g1 = document.createElementNS('http:/' + '/www.w3.org/2000/svg', 'g');
	svg1.appendChild(g1);
	if (originInCenter) { g1.style.transform = "translate(50%, 50%)"; }
	return g1;
}
async function atest01() {
	let url = '/frontend/static/rsg/assets/gameIconCodes.yml';
	let response = await fetch(url);
	if (response.ok) {
		let t = await response.text();
		let iconDict = jsyaml.load(t);
		timit.showTime('nach atest01')
		console.log(iconDict);
	} else {
		alert("HTTP-Error: " + response.status);
	}
}
async function atest02() { }
async function atestLoadIcons() {
	timit.showTime('_______start gameIconCode');
	let gaIcons = await route_rsg_asset('gameIconCodes');
	timit.showTime('_______start faIconCodes');
	let faIcons = await route_rsg_asset('faIconCodes');
	timit.showTime('_______start iconTest');
	let smallIcons = await route_rsg_asset('iconTest');
	timit.showTime('nach atestLoadIconst');
	faKeys = [];
	for (const k in gaIcons) {
		if (isdef(faIcons[k])) faKeys.push(k);
	}
	console.log('common keys:', faKeys);
}
function atleastOneElementOfXIsDictWithKey(lst, k) {
	for (const x of lst) { if (!x) continue; if (isDict(x) && k in x) return true; }
	return false;
}
function atleastOneElementOfXIsDictWithKey_obj(lst) {
	for (const x of lst) { if (!x) continue; if (isDict(x) && '_obj' in x) return true; }
	return false;
}
function aTranslateBy(d, x, y, ms) { return d.animate({ transform: `translate(${x}px,${y}px)` }, ms); }
function aTranslateBy_v0(d, x, y, ms) {
	let a = d.animate([
		{ transform: `translate(${x}px,${y}px)` }
	], {
		duration: ms,
	});
	return a;
}
function aTranslateBy_v1(d, x, y, ms) {
	let a = d.animate({ transform: `translate(${x}px,${y}px)` }, ms);
	return a;
}
function aTranslateByEase(d, x, y, ms, easing = 'cubic-bezier(1,-0.03,.27,1)') {
	return d.animate({ transform: `translate(${x}px,${y}px)` }, { easing: easing, duration: ms });
}
function aTranslateFadeBy(d, x, y, ms) { return d.animate({ opacity: .5, transform: `translate(${x}px,${y}px)` }, { easing: MyEasing, duration: ms }); }
function attachTo(div, deck) { deck.mount(div); }
function audio_beep(vol, freq, duration) {
	console.log('sollte beepen!!!');
	if (nundef(_AUDIOCONTEXT)) _AUDIOCONTEXT = new AudioContext();
	let a = _AUDIOCONTEXT;
	v = a.createOscillator()
	u = a.createGain()
	v.connect(u)
	v.frequency.value = freq
	v.type = "square";
	u.connect(a.destination)
	u.gain.value = vol * 0.01
	v.start(a.currentTime)
	v.stop(a.currentTime + duration * 0.001);
}
function audio_onclick_pp() {
	audio_toggle('mozart');
	if (audio_playing()) { hide0('bPlay'); show0('bPause'); } else { hide0('bPause'); show0('bPlay'); }
}
function audio_pause() {
	_qSound = [];
	if (_loaded && isdef(_sndPlayer)) {
		clearTimeout(_TOSound);
		_sndPlayer.onended = null;
		_sndPlayer.onpause = _whenSoundPaused;
		_sndPlayer.pause();
	}
}
function audio_play(key, wait = true) {
	if (!wait) _qSound = [];
	_enqSound(key);
	if (_idleSound) { _idleSound = false; _deqSound(); }
}
function audio_playing() { return DA.isSound; }
function audio_toggle(key) {
	if (DA.isSound == true) { audio_pause(); DA.isSound = false; return; }
	audio_play(key);
	DA.isSound = true;
}
function augment(obj, newobj) {
	return extend(true, obj, newobj);
}
function aushaengen(oid, R) {
	while (true) {
		let uid = firstCondDict(R.rNodes, x => x.oid == oid);
		if (!uid) return;
		let n = R.rNodes[uid];
		let len = Object.keys(R.rNodes).length;
		recRemove(n, R);
		let len2 = Object.keys(R.rNodes).length;
		if (len2 < len) {
		} else {
			console.log('DID NOT REMOVE ANYTHING!!!!', len, len2);
			return;
		}
	}
}
function autocomplete(inp, arr) {
	var currentFocus;
	inp = toElem(inp);
	inp.addEventListener('input', e => {
		var a, b, i, val = this.value;
		autocomplete_closeAllLists();
		if (!val) { return false; }
		currentFocus = -1;
		a = document.createElement('DIV');
		a.setAttribute('id', this.id + 'autocomplete-list');
		a.setAttribute('class', 'autocomplete-items');
		this.parentNode.appendChild(a);
		for (i = 0; i < arr.length; i++) {
			if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
				b = document.createElement('DIV');
				b.innerHTML = '<strong>' + arr[i].substr(0, val.length) + '</strong>';
				b.innerHTML += arr[i].substr(val.length);
				b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
				b.addEventListener('click', e => {
					inp.value = this.getElementsByTagName('input')[0].value;
					autocomplete_closeAllLists();
				});
				a.appendChild(b);
			}
		}
	});
	inp.addEventListener('keydown', e => {
		var x = document.getElementById(this.id + 'autocomplete-list');
		if (x) x = x.getElementsByTagName('div');
		if (e.keyCode == 40) {
			currentFocus++;
			autocomplete_addActive(x);
		} else if (e.keyCode == 38) {
			currentFocus--;
			autocomplete_addActive(x);
		} else if (e.keyCode == 13) {
			e.preventDefault();
			if (currentFocus > -1) {
				if (x) x[currentFocus].click();
			}
		}
	});
	inp.addEventListener('dblclick', e => { evNoBubble(e); });
	document.addEventListener('click', e => {
		autocomplete_closeAllLists(e.target);
	});
}
function autocomplete_addActive(x) {
	if (!x) return false;
	autocomplete_removeActive(x);
	if (currentFocus >= x.length) currentFocus = 0;
	if (currentFocus < 0) currentFocus = x.length - 1;
	x[currentFocus].classList.add('autocomplete-active');
}
function autocomplete_closeAllLists(elmnt) {
	var x = document.getElementsByClassName('autocomplete-items');
	for (var i = 0; i < x.length; i++) {
		if (elmnt != x[i] && elmnt != inp) {
			x[i].parentNode.removeChild(x[i]);
		}
	}
}
function autocomplete_removeActive(x) {
	for (var i = 0; i < x.length; i++) {
		x[i].classList.remove('autocomplete-active');
	}
}
function autoGameScreen() { }
function autopoll(ms) { TO.poll = setTimeout(_poll, valf(ms, valf(Z.options.poll, 2000))); }
function autoselect_action(r, action, uname, item) { select_action(r, action, uname, item); }
function autosend(plname, slot) {
	Z.uplayer = plname;
	take_turn_collect_open();
}
function autoTestSpeech() {
	ensureSymBySet();
	nextIndex += 1;
	let k = SymKeysBySet['nosymbols'][nextIndex];
	let info = SymbolDict[k];
	let best = stringAfterLast(info.E, '|');
	console.log('best', best, '(key', k, ')');
	record('E', best)
	say(best, .7, 1, .7, false, 'random', () => { console.log('done:', k) });
}
function availableGames(callback) { let route = '/game/available'; _sendRouteJS(route, callback); }
function availablePlayers(callback) { let route = '/game/players'; _sendRouteJS(route, callback); }
//#endregion

//#region B
function backtrack_based(orig_board) {
	let board = JSON.parse(JSON.stringify(orig_board));
	for (let r = 0; r < 9; r++) {
		for (let c = 0; c < 9; c++) {
			if (board[r][c] == 0) {
				complete_cell(board, r, c)
				if (is_solved(board)) return board;
				let cell = board[r][c]
				if (Array.isArray(cell)) {
					for (let i = 0; i < cell.length; i++) {
						let board_2 = JSON.parse(JSON.stringify(board));
						board_2[r][c] = cell[i]
						if (completed_board = backtrack_based(board_2)) {
							return completed_board;
						}
					}
					return false
				}
			}
		}
	}
	return false;
}
function badges_off() {
	hide('dLeftSide');
	delete Session.is_badges;
	Badges = [];
}
function badges_on() {
	if (!isdef(mBy('dLeiste'))) initSidebar();
	Session.is_badges = true;
	Badges = [];
}
function bCapturedPieces(plSym, arr, idx, rows, cols, includeDiagonals = true) {
	let res = [];
	let nei = bNei(arr, idx, rows, cols, includeDiagonals);
	for (let dir = 0; dir < 8; dir++) {
		let i = nei[dir];
		if (nundef(i)) continue;
		let el = arr[i];
		if (empty_func(el) || el == plSym) continue;
		let inew = [];
		let MAX = 100, cmax = 0;
		while (isOppPiece(el, plSym)) {
			if (cmax > MAX) break; cmax += 1;
			inew.push(i);
			i = bNeiDir(arr, i, dir, rows, cols);
			if (nundef(i)) break;
			el = arr[i];
		}
		if (el == plSym) {
			res = res.concat(inew);
		}
	}
	return res;
}
function bCheck(r, c, rows, cols) { return r >= 0 && r < rows && c >= 0 && c < cols ? r * cols + c : null; }
function bCreateEmpty(rows, cols) { return new Array(rows * cols).fill(null); }
function beautify_history(lines, title, fen, uplayer) {
	let html = `<div class="history"><span style="color:red;font-weight:bold;">${title}: </span>`;
	for (const l of lines) {
		let words = toWords(l);
		for (const w1 of words) {
			if (is_card_key(w1)) {
				html += mCardText(w1);
				continue;
			}
			w = w1.toLowerCase();
			if (isdef(fen.players[w])) {
				html += `<span style="color:${get_user_color(w)};font-weight:bold"> ${w} </span>`;
			} else html += ` ${w} `;
		}
	}
	html += "</div>";
	return html;
}
function beep(vol, freq, duration) {
	console.log('sollte beepen!!!');
	if (nundef(_AUDIOCONTEXT)) _AUDIOCONTEXT = new AudioContext();
	let a = _AUDIOCONTEXT;
	v = a.createOscillator()
	u = a.createGain()
	v.connect(u)
	v.frequency.value = freq
	v.type = "square";
	u.connect(a.destination)
	u.gain.value = vol * 0.01
	v.start(a.currentTime)
	v.stop(a.currentTime + duration * 0.001);
}
function beforeActivationUI() { uiPaused |= beforeActivationMask; uiPaused &= ~hasClickedMask; }
function being_blackmailed() {
	let [stage, A, fen, uplayer] = [Z.stage, Z.A, Z.fen, Z.uplayer];
	let item = A.items[A.selected[0]];
	let cmd = item.key;
	console.log('selected reaction to blackmail:', item.key);
	if (cmd == 'accept') { Z.stage = 34; ari_pre_action(); }
	else if (cmd == 'reject') { post_reject_blackmail(); }
	else { post_defend_blackmail(); }
}
function bestContrastingColor(color, colorlist) {
	let contrast = 0;
	let result = null;
	let rgb = colorRGB(color, true);
	rgb = [rgb.r, rgb.g, rgb.b];
	for (c1 of colorlist) {
		let x = colorRGB(c1, true)
		x = [x.r, x.g, x.b];
		let c = getContrast(rgb, x);
		if (c > contrast) { contrast = c; result = c1; }
	}
	return result;
}
function bFreeRayDir(arr, idx, dir, rows, cols) {
	let indices = [];
	let i = idx;
	while (i < arr.length) {
		i = bNeiDir(arr, i, dir, rows, cols);
		if (!i || !empty_func(arr[i])) break; else indices.push(i);
	}
	return indices;
}
function bFreeRayDir1(arr, idx, dir, rows, cols) {
	let indices = [];
	let i = idx;
	while (i < arr.length) {
		i = bNeiDir(arr, i, dir, rows, cols);
		if (!i) break;
		else indices.push(i);
		if (!empty_func(arr[i])) break;
	}
	return indices;
}
function bFullCol(arr, icol, rows, cols) {
	let iStart = icol;
	let x = arr[iStart]; if (empty_func(x)) return null;
	for (let i = iStart + cols; i < iStart + (cols * rows); i += cols) if (arr[i] != x) return null;
	return x;
}
function bFullDiag(arr, rows, cols) {
	let iStart = 0;
	let x = arr[iStart]; if (empty_func(x)) return null;
	for (let i = iStart + cols + 1; i < arr.length; i += cols + 1) { if (arr[i] != x) return null; }
	return x;
}
function bFullDiag2(arr, rows, cols) {
	let iStart = cols - 1;
	let x = arr[iStart]; if (empty_func(x)) return null;
	for (let i = iStart + cols - 1; i < arr.length - 1; i += cols - 1) { if (arr[i] != x) return null; }
	return x;
}
function bFullRow(arr, irow, rows, cols) {
	let iStart = irow * cols;
	let x = arr[iStart]; if (empty_func(x)) return null;
	for (let i = iStart + 1; i < iStart + cols; i++) if (arr[i] != x) return null;
	return x;
}
function bGetChunks(arr2d, rowsEach, colsEach) {
	let res = [];
	let [rTotal, cTotal] = [arr2d.length, arr2d[0].length];
	for (let r = 0; r < rTotal; r += rowsEach) {
		let m1 = [];
		for (let c = 0; c < cTotal; c += colsEach) {
			m1 = bGetSubMatrix(arr2d, r, rowsEach, c, colsEach);
			res.push(arrFlatten(m1));
		}
	}
	return res;
}
function bGetChunksWithIndices(arr2d, rowsEach, colsEach) {
	let res = [];
	let [rTotal, cTotal] = [arr2d.length, arr2d[0].length];
	for (let r = 0; r < rTotal; r += rowsEach) {
		let m1 = [];
		for (let c = 0; c < cTotal; c += colsEach) {
			m1 = bGetSubMatrixWithIndices(arr2d, r, rowsEach, c, colsEach);
			res.push(arrFlatten(m1));
		}
	}
	return res;
}
function bGetCol(arr, icol, rows, cols) {
	let iStart = icol;
	let res = [];
	for (let i = iStart; i < iStart + (cols * rows); i += cols) res.push(arr[i]);
	return res;
}
function bGetCols(arr2d) {
	let rows = arr2d.length;
	let cols = arr2d[0].length;
	let res = [];
	for (let c = 0; c < cols; c++) { res.push([]); }
	for (let r = 0; r < rows; r++) {
		for (let c = 0; c < cols; c++) {
			res[c].push(arr2d[r][c]);
		}
	}
	return res;
}
function bGetInitialState() { }
function bGetRow(arr, irow, rows, cols) {
	let iStart = irow * cols;
	let arrNew = arr.slice(iStart, iStart + cols);
	let res = [];
	for (let i = iStart; i < iStart + cols; i++) res.push(arr[i]);
	console.assert(sameList(arrNew, res), 'NOOOOOO');
	return res;
}
function bGetRows(arr2d) {
	return arr2d;
}
function bGetSubMatrix(arr2d, rFrom, rows, cFrom, cols) {
	let res = []; for (let i = 0; i < rows; i++) res.push([]);
	let [rTotal, cTotal] = [arr2d.length, arr2d[0].length];
	let rIndex = 0;
	for (let r = rFrom; r < rFrom + rows; r++) {
		for (let c = cFrom; c < cFrom + cols; c++) {
			res[rIndex].push(arr2d[r][c]);
		}
		rIndex += 1;
	}
	return res;
}
function bGetSubMatrixWithIndices(arr2d, rFrom, rows, cFrom, cols) {
	let res = []; for (let i = 0; i < rows; i++) res.push([]);
	let [rTotal, cTotal] = [arr2d.length, arr2d[0].length];
	let rIndex = 0;
	for (let r = rFrom; r < rFrom + rows; r++) {
		for (let c = cFrom; c < cFrom + cols; c++) {
			res[rIndex].push({ row: r, col: c, val: arr2d[r][c] });
		}
		rIndex += 1;
	}
	return res;
}
function bgFromPal(ipal_dep, pal) {
	return getpal(ipal_dep, 0, 'b', pal);
}
function bgNum(k, v) { }
function bid_to_string(bid) { return bid.join(' '); }
function binding01(R) {
	serverData.table.o1.name = 'felix';
	let upd = { oid: 'o1', prop: 'name', ukind: 'valueChange', oldval: 'max', newval: 'felix' };
	let sUpdated = { o1: [upd] };
	updateBindings(sUpdated, R);
}
function binding02(R) {
	let o = serverData.table.o3 = { name: 'ama' };
	let upd = { oid: 'o3', o: o, ukind: 'new' };
	let sCreated = { o3: [upd] };
	updateCreatedBindings(sCreated, R);
}
function blackOrWhite(cssHSLA, maxLumForWhite = 88) {
	let l = getLuminosity(cssHSLA);
	let hue = getHue(cssHSLA);
	if (hue > 40 && hue < 90) maxLumForWhite = 60;
	let result = l <= maxLumForWhite ? 'white' : 'black';
	testHelpers('lum(' + l + '), hue(' + hue + ') : ' + result);
	return result;
}
function blank(card) { clearElement(card.elem); }
function blankExpResult() { }
function blankInputs(d, ilist, blink = true) {
	let inputs = [];
	for (const idx of ilist) {
		let inp = d.children[idx];
		inp.innerHTML = '_';
		if (blink) mClass(inp, 'blink');
		inputs.push({ letter: Goal.word[idx].toUpperCase(), div: inp, index: idx });
	}
	return inputs;
}
function blankOperand2() { }
function blankOperator() { }
function blankWordInputs(wi, n, pos = 'random') {
	let indivInputs = [];
	let remels =
		pos == 'random' ? choose(wi, n)
			: pos == 'notStart' ? arrTake(wi.slice(1, wi.length - 1), n)
				: pos == 'start' ? arrTake(wi, n)
					: takeFromTo(wi, wi.length - n, wi.length);
	for (const el of remels) {
		for (const inp of el.charInputs) { unfillCharInput(inp); }
		indivInputs = indivInputs.concat(el.charInputs);
		el.hasBlanks = true;
		el.nMissing = el.charInputs.length;
		if (n > 1) iDiv(el).onclick = onClickWordInput;
	}
	return { iFocus: null, words: remels, letters: indivInputs };
}
function bluff() {
	const rankstr = '3456789TJQKA2';
	function setup(players, options) {
		let fen = { players: {}, plorder: jsCopy(players), history: {}, stage: 'move', phase: '' };
		let num_cards_needed = players.length * options.max_handsize;
		let num_decks_needed = fen.num_decks = Math.ceil(num_cards_needed / 52);
		let deck = fen.deck = create_fen_deck('n', num_decks_needed);
		shuffle(deck);
		shuffle(fen.plorder);
		fen.turn = [fen.plorder[0]];
		for (const plname of fen.plorder) {
			let handsize = options.min_handsize;
			fen.players[plname] = {
				hand: deck_deal(deck, handsize),
				handsize: handsize,
				name: plname,
				color: get_user_color(plname),
			};
		}
		fen.stage = 0;
		return fen;
	}
	function clear_ack() { if (Z.stage == 1) { bluff_change_to_turn_round(); take_turn_fen(); } }
	function check_gameover(Z) { let pls = get_keys(Z.fen.players); if (pls.length < 2) Z.fen.winners = pls; return valf(Z.fen.winners, false); }
	function activate_ui() { bluff_activate_new(); }
	function present(dParent) { bluff_present(dParent); }
	function stats(dParent) { bluff_stats(dParent); }
	function state_info(dParent) { bluff_state(dParent); }
	return { rankstr, setup, activate_ui, check_gameover, clear_ack, present, state_info, stats };
}
function bluff_ack_uplayer() {
	let [A, fen, stage, uplayer] = [Z.A, Z.fen, Z.stage, Z.uplayer];
	fen.players[uplayer].ack = true;
	ack_player(uplayer);
}
function bluff_activate(fen, plname) {
	console.log('activating for', plname)
}
function bluff_activate_new() {
	let [z, A, fen, stage, uplayer, ui, dt] = [Z, Z.A, Z.fen, Z.stage, Z.uplayer, UI, UI.dOpenTable];
	if (stage == 1) bluff_activate_stage1(); else { bluff_activate_stage0(); if (is_ai_player()) ai_move(1000); }
}
function bluff_activate_stage0() {
	let [z, A, fen, stage, uplayer, ui, dt] = [Z, Z.A, Z.fen, Z.stage, Z.uplayer, UI, UI.dOpenTable];
	if (isdef(fen.lastbid)) show(ui.currentBidItem.button);
	bluff_show_new_bid(dt);
	mLinebreak(dt, 10);
	bluff_button_panel1(dt, fen.newbid, 50);
}
function bluff_activate_stage1() {
	let [z, A, fen, stage, uplayer, ui, dt] = [Z, Z.A, Z.fen, Z.stage, Z.uplayer, UI, UI.dOpenTable];
	if (isdef(DA.ack) && isdef(DA.ack[uplayer])) { console.log('DA.ack', DA.ack); mText('...waiting for ack', dt); return; }
	if (isdef(ui.dHandsize)) mPulse(ui.dHandsize, 2000);
}
function bluff_ai() {
	let [A, fen, uplayer, pl] = [Z.A, Z.fen, Z.uplayer, Z.pl];
	const torank = { _: '_', three: '3', four: '4', five: '5', six: '6', seven: '7', eight: '8', nine: '9', ten: 'T', jack: 'J', queen: 'Q', king: 'K', ace: 'A' };
	const toword = { _: '_', '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine', T: 'ten', J: 'jack', Q: 'queen', K: 'king', A: 'ace' };
	let words = get_keys(torank).slice(1);
	let all_hand_cards = aggregate_elements(dict2list(fen.players, 'name'), 'hand');
	let no_twos = all_hand_cards.filter(x => x[0] != '2');
	let rankstr = '3456789TJQKA2';
	sortByRank(all_hand_cards, rankstr);
	let byrank = aggregate_player_hands_by_rank(fen);
	let rank_list = dict2list(byrank, 'rank');
	let unique_ranks = sortByRank(get_keys(byrank));
	let myranks = sortByRank(pl.hand.map(x => x[0]));
	let my_unique = unique_ranks.filter(x => myranks.includes(x));
	rank_list.map(x => { x.mine = myranks.includes(x.rank); x.irank = rankstr.indexOf(x.rank); x.i = x.irank + 100 * x.value; });
	rank_list = rank_list.filter(x => x.rank != '2');
	sortByDescending(rank_list, 'i');
	let maxcount = rank_list[0].value;
	let mymaxcount = rank_list.filter(x => x.mine)[0].value;
	let expected = all_hand_cards.length / 13;
	let nreason = Math.max(1, Math.round(expected * 2));
	let n_twos = all_hand_cards.filter(x => x[0] == '2').length;
	let have2 = firstCond(rank_list, x => x.rank == '2' && x.mine);
	return botbest(rank_list, maxcount, mymaxcount, expected, nreason, n_twos, have2, words, fen);
}
function bluff_button_panel1(dt, bid, sz) {
	let n = bid[0] == '_' ? 1 : Number(bid[0]);
	let arr1 = arrRange(n, n + 5);
	let arr2 = toLetters('3456789TJQKA');
	let arr3 = arrRange(0, 5);
	let arr4 = toLetters('3456789TJQKA');
	let dPanel = mDiv(dt, { gap: 5 });
	[d1, d2, d3, d4] = mColFlex(dPanel, [1, 2, 1, 2]);
	UI.dn1 = create_bluff_input1(d1, arr1, 1, sz, 0); d1.onmouseenter = () => iHigh(UI.panelItems[0]); d1.onmouseleave = () => iUnhigh(UI.panelItems[0]);
	UI.dr1 = create_bluff_input1(d2, arr2, 2, sz, 1); d2.onmouseenter = () => iHigh(UI.panelItems[1]); d2.onmouseleave = () => iUnhigh(UI.panelItems[1]);
	UI.dn2 = create_bluff_input1(d3, arr3, 1, sz, 2); d3.onmouseenter = () => iHigh(UI.panelItems[2]); d3.onmouseleave = () => iUnhigh(UI.panelItems[2]);
	UI.dr2 = create_bluff_input1(d4, arr4, 2, sz, 3); d4.onmouseenter = () => iHigh(UI.panelItems[3]); d4.onmouseleave = () => iUnhigh(UI.panelItems[3]);
}
function bluff_change_to_ack_round(fen, nextplayer) {
	[Z.stage, Z.turn] = [1, [get_admin_player(fen.plorder)]];
	fen.keeppolling = true;
	fen.nextturn = [nextplayer];
}
function bluff_change_to_turn_round() {
	let [fen, stage] = [Z.fen, Z.stage];
	assertion(stage == 1, "ALREADY IN TURN ROUND!!!!!!!!!!!!!!!!!!!!!!");
	Z.stage = 0;
	Z.turn = fen.nextturn;
	Z.round += 1;
	for (const k of ['bidder', 'loser', 'aufheber', 'lastbid', 'lastbidder']) delete fen[k];
	for (const k of ['nextturn', 'keeppolling']) delete fen[k];
	for (const plname of fen.plorder) { delete fen.players[plname].lastbid; }
}
function bluff_clear_panel() {
	for (const item of UI.panelItems) {
		let d = iDiv(item);
		d.innerHTML = '_';
	}
	Z.fen.newbid = ['_', '_', '_', '_'];
}
function bluff_convert2ranks(b) { return [b[0], BLUFF.torank[b[1]], b[2] == '_' ? 0 : b[2], BLUFF.torank[b[3]]]; }
function bluff_convert2words(b) { return [b[0], BLUFF.toword[b[1]], b[2] < 1 ? '_' : b[2], BLUFF.toword[b[3]]]; }
function bluff_generate_random_bid() {
	let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];
	const di2 = { _: '_', three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine: 9, ten: 'T', jack: 'J', queen: 'Q', king: 'K', ace: 'A' };
	let words = get_keys(di2).slice(1);
	let b = isdef(fen.lastbid) ? jsCopy(fen.lastbid) : null;
	if (isdef(b)) {
		assertion(b[0] >= (b[2] == '_' ? 0 : b[2]), 'bluff_generate_random_bid: bid not formatted correctly!!!!!!!', b)
		let nmax = calc_reasonable_max(fen);
		let n = b[0] == '_' ? 1 : Number(b[0]);
		let done = false;
		if (n > nmax + 1) {
			const di = { '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine', T: 'ten', J: 'jack', Q: 'queen', K: 'king', A: 'ace' };
			let rankstr = '3456789TJQKA';
			let w1 = di2[b[1]];
			let idx = isdef(w1) ? rankstr.indexOf(w1) : -1;
			if (idx >= 0 && idx < rankstr.length - 2) {
				let r = rankstr[idx + 1];
				b[1] = di[r];
				done = true;
			}
		}
		if (!done) {
			if (b[3] == '_') { b[2] = 1; b[3] = rChoose(words, 1, x => x != b[1]); }
			else if (b[0] > b[2]) { b[2] += 1; }
			else { b[0] += coin(80) ? 1 : 2; if (coin()) b[2] = b[3] = '_'; }
		}
	} else {
		let nmax = calc_reasonable_max(fen);
		let nmin = Math.max(nmax - 1, 1);
		let arr_nmax = arrRange(1, nmax);
		let arr_nmin = arrRange(1, nmin);
		b = [rChoose(arr_nmax), rChoose(words), rChoose(arr_nmin), rChoose(words)];
		if (b[1] == b[3]) b[3] = rChoose(words, 1, x => x != b[1]);
		if (coin()) b[2] = b[3] = '_';
	}
	fen.newbid = b;
	UI.dAnzeige.innerHTML = bid_to_string(b);
}
function bluff_present(fen, dParent, plname) {
	console.log('fen', fen);
}
function bluff_present_new(dParent) {
	let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent, 1, 0);
	let [fen, uplayer, ui, stage, dt] = [Z.fen, Z.uplayer, UI, Z.stage, dOpenTable];
	clearElement(dt); mCenterFlex(dt);
	if (stage == 1) { DA.no_shield = true; } else { DA.ack = {}; DA.no_shield = false; }
	bluff_stats_new(dt);
	mLinebreak(dt, 10);
	bluff_show_cards(dt);
	mLinebreak(dt, 4);
	let item = ui.currentBidItem = bluff_show_current_bid(dt);
	hide(item.button);
	mLinebreak(dt, 10);
	if (stage == 1) {
		let loser = fen.loser;
		let msg1 = fen.war_drin ? 'war drin!' : 'war NICHT drin!!!';
		let msg2 = isdef(fen.players[loser]) ? `${capitalize(loser)} will get ${fen.players[loser].handsize} cards!` : `${capitalize(loser)} is out!`;
		mText(`<span style="color:red">${msg1} ${msg2}</span>`, dt, { fz: 22 });
		mLinebreak(dt, 4);
	}
}
function bluff_reset_to_current_bid() { onclick_reload(); }
function bluff_setup(players) {
	let fen = {};
	let deck = fen.deck = get_keys(Aristocards).filter(x => 'r'.includes(x[2]));
	shuffle(deck);
	let pls = fen.players = {};
	for (const uname of players) {
		let pl = pls[uname] = {};
		pl.hand = deck_deal(deck, 2);
	}
	fen.plorder = rPlayerOrder(players);
	fen.turn = [fen.plorder[0]];
	fen.iturn = 0;
	fen.round = [];
	fen.phase = 'create';
	fen.instruction = 'bid!';
	return fen;
}
function bluff_show_cards(dt) {
	let [fen, ui, stage, uplayer] = [Z.fen, UI, Z.stage, Z.uplayer];
	let pl = fen.players[uplayer], upl = ui.players[uplayer] = {};
	mText(stage == 1 ? "all players' cards: " : "player's hand: ", dt); mLinebreak(dt, 2);
	let cards = stage == 1 ? fen.akku : pl.hand;
	cards = sort_cards(cards, false, 'CDSH', true, '3456789TJQKA2');
	let hand = upl.hand = ui_type_hand(cards, dt, { hmin: 160 }, null, '', ckey => ari_get_card(ckey, 150));
	let uname_plays = isdef(fen.players[Z.uname]);;
	let ishidden = stage == 0 && uname_plays && uplayer != Z.uname && Z.mode != 'hotseat';
	if (ishidden) { hand.items.map(x => face_down(x)); }
}
function bluff_show_current_bid(dt) {
	let fen = Z.fen;
	let bid = fen.oldbid = valf(fen.lastbid, ['_', '_', '_', '_']);
	let d = mDiv(dt);
	let content = `${bid_to_string(bid)}`;
	let item = { container: d, label: 'current bid', content: content, caption: 'geht hoch!', handler: handle_gehtHoch };
	apply_skin2(item);
	return item;
}
function bluff_show_new_bid(dt) {
	let fen = Z.fen;
	let bid = fen.oldbid = valf(fen.lastbid, ['_', '_', '_', '_']);
	fen.newbid = jsCopy(bid);
	let d = mDiv(dt);
	let content = `${bid_to_string(bid)}`;
	let item = { container: d, label: 'YOUR bid', content: content, caption: 'BID', handler: handle_bid };
	apply_skin3(item);
}
function bluff_start_bid(o) {
	let ranks = rChoose(BLUFF.rankstr, 2).map(x => BLUFF.toword[x]);
	let b2 = coin(10) ? '_' : rNumber(1, 4);
	o.fen.lastbid = [rNumber(1, 4), ranks[0], b2, b2 == '_' ? '_' : ranks[1]];
}
function bluff_state(dParent) {
	let user_html = get_user_pic_html(Z.uplayer, 30);
	dParent.innerHTML = `Round ${Z.round}:&nbsp;player: ${user_html} `;
}
function bluff_state_new(dParent) {
	let user_html = get_user_pic_html(Z.uplayer, 30);
	dParent.innerHTML = `Round ${Z.round}:&nbsp;player: ${user_html} `;
}
function bluff_stats(dParent) {
	let player_stat_items = UI.player_stat_items = ui_player_info(dParent, {}, { 'border-width': 1, margin: 10, wmax: 180 });
	let fen = Z.fen;
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		let item = player_stat_items[plname];
		let d = iDiv(item); mCenterFlex(d); mLinebreak(d);
		if (fen.turn.includes(plname)) {
			let dh = show_hourglass(plname, d, 20, { left: -4, top: 0 });
		}
		let dhz = mDiv(d, { fg: pl.handsize == Z.options.max_handsize ? 'yellow' : 'white' }, null, `hand: ${pl.handsize}`); mLinebreak(d);
		if (plname == fen.loser) UI.dHandsize = dhz;
		let elem = mDiv(d, { fg: plname == fen.lastbidder ? 'red' : 'white' }, null, `${valf(pl.lastbid, ['_']).join(' ')}`);
		let szhand = getSizeNeeded(dhz);
		let sz = getSizeNeeded(elem);
		let w = Math.max(szhand.w + 20, sz.w + 20, 80);
		mStyle(d, { w: w });
		mLinebreak(d);
	}
	return player_stat_items[Z.uplayer];
}
function bluff_stats_new(dParent) {
	let player_stat_items = UI.player_stat_items = ui_player_info(Z, dParent, {}, { 'border-width': 1, margin: 10, wmax: 180 });
	let fen = Z.fen;
	for (const uname of fen.plorder) {
		let pl = fen.players[uname];
		let item = player_stat_items[uname];
		let d = iDiv(item); mCenterFlex(d); mLinebreak(d);
		if (fen.turn.includes(uname)) {
			let dh = show_hourglass(uname, d, 20, { left: -4, top: 0 });
		}
		let dhz = mDiv(d, { fg: pl.handsize == Z.options.max_handsize ? 'yellow' : 'white' }, null, `hand: ${pl.handsize}`); mLinebreak(d);
		if (uname == fen.loser) UI.dHandsize = dhz;
		let elem = mDiv(d, { fg: uname == fen.lastbidder ? 'red' : 'white' }, null, `${valf(pl.lastbid, ['_']).join(' ')}`);
		let szhand = getSizeNeeded(dhz);
		let sz = getSizeNeeded(elem);
		let w = Math.max(szhand.w + 20, sz.w + 20, 80);
		mStyle(d, { w: w });
		mLinebreak(d);
	}
	return player_stat_items[Z.uplayer];
}
function bNei(arr, idx, rows, cols, includeDiagonals = true) {
	let nei = [];
	let [r, c] = iToRowCol(idx, rows, cols);
	if (r > 0) nei.push(idx - cols); else nei.push(null);
	if (r > 0 && c < cols - 1 && includeDiagonals) nei.push(idx - cols + 1); else nei.push(null);
	if (c < cols - 1) nei.push(idx + 1); else nei.push(null);
	if (r < rows - 1 && c < cols - 1 && includeDiagonals) nei.push(idx + cols + 1); else nei.push(null);
	if (r < rows - 1) nei.push(idx + cols); else nei.push(null);
	if (r < rows - 1 && c > 0 && includeDiagonals) nei.push(idx + cols - 1); else nei.push(null);
	if (c > 0) nei.push(idx - 1); else nei.push(null);
	if (r > 0 && c > 0 && includeDiagonals) nei.push(idx - cols - 1); else nei.push(null);
	return nei;
}
function bNeiDir(arr, idx, dir, rows, cols, includeDiagonals = true) {
	let [r, c] = iToRowCol(idx, rows, cols);
	switch (dir) {
		case 0: if (r > 0) return (idx - cols); else return (null);
		case 1: if (r > 0 && c < cols - 1 && includeDiagonals) return (idx - cols + 1); else return (null);
		case 2: if (c < cols - 1) return (idx + 1); else return (null);
		case 3: if (r < rows - 1 && c < cols - 1 && includeDiagonals) return (idx + cols + 1); else return (null);
		case 4: if (r < rows - 1) return (idx + cols); else return (null);
		case 5: if (r < rows - 1 && c > 0 && includeDiagonals) return (idx + cols - 1); else return (null);
		case 6: if (c > 0) return (idx - 1); else return (null);
		case 7: if (r > 0 && c > 0 && includeDiagonals) return (idx - cols - 1); else return (null);
	}
	return null;
}
function boa_save() { localStorage.setItem('boa', JSON.stringify(S)); }
function boa_start() {
	let d = mBy('dBoa');
	mClear(d);
	mAppend(d, get_header_top('Log In'));
	mAppend(d, get_red_header('Mobile and Online Bill Pay', true));
	mAppend(d, get_boa_start_content());
	let footer = mAppend(d, get_boa_footer1());
	mStyle(footer, { matop: 100, hmax: 150 });
	S.boa_loggedin = false;
}
function boahavecode_start() {
	let d = mBy('dBoa');
	mClear(d);
	mAppend(d, get_header_top('Extra Security At Sign-in'));
	mAppend(d, get_red_header('Verify Your Identity'));
	add_havecode_content(d);
	mAppend(d, get_boa_footer2());
	S.boa_state = 'authorization_pending';
	console.log(S.boa_authorization_code);
}
function boalogin_start() {
	console.log('boalogin_start');
	let d = mBy('dBoa');
	mClear(d);
	mAppend(d, get_header_top(''));
	mAppend(d, get_red_header('Log In to Online Banking'));
	mAppend(d, get_boalogin_html());
	mAppend(d, get_boa_footer2());
	S.boa_state = 'loginform';
	let elem = get_boa_userid_input();
	elem.onfocus = () => { bw_symbol_pulse(); S.current_input = get_boa_userid_input(); S.current_label = 'userid'; };
	let elem2 = get_boa_pwd_input();
	elem2.onfocus = () => { bw_symbol_pulse(); S.current_input = get_boa_pwd_input(); S.current_label = 'pwd'; };
}
function boamain_start() {
	S.boa_state = 'authorized';
	if (DA.challenge == 1) {
		TO.boa = setTimeout(() => {
			S.boa_state = null;
			let msg = DA.challenge == 1 ? 'CONGRATULATIONS!!!! YOU SUCCEEDED IN LOGGING IN TO BOA' : 'Session timed out!';
			show_eval_message(true, null, onclick_home);
		}, 1000);
	} else if (DA.challenge == 3) show_bill_button();
	show_correct_location('boa');
	let dParent = mBy('dBoa'); mClear(dParent);
	let d0 = mDiv(dParent, { align: 'center' }, 'dBoaMain'); mCenterFlex(d0);
	let [wtotal, wleft, wright] = [972, 972 - 298, 292];
	let d = mDiv(d0, { w: wtotal, hmin: 500 }); mAppend(d, createImage('boamain_header.png', { h: 111 }));
	let dl = mDiv(d, { float: 'left', w: wleft, hmin: 400 });
	let dr = mDiv(d, { float: 'right', hmin: 400, w: wright });
	mDiv(dr, { h: 100 });
	mAppend(dr, createImage('boamain_rechts.png', { w: 292 }));
	mAppend(dl, createImage('boamain_left_top.jpg', { matop: 50, maleft: -20 }));
	mDiv(dl, { bg: '#857363', fg: 'white', fz: 15 }, null, '&nbsp;&nbsp;<i class="fa fa-caret-down"></i>&nbsp;&nbsp;Default Group<div style="float:right;">Sort&nbsp;&nbsp;</div>');
	let boadata = get_fake_boa_data_list();
	let color_alt = '#F9F7F4';
	let i = 0;
	for (const o of boadata) {
		let k = o.key;
		o.index = i;
		let logo = valf(o.logo, 'defaultacct.jpg');
		let path = `${logo}`;
		let [sz, bg] = [25, i % 2 ? 'white' : color_alt];
		let dall = mDiv(dl, { bg: bg, fg: '#FCFCFC', 'border-bottom': '1px dotted silver' }, `dAccount${i}`);
		let da = mDiv(dall);
		mFlexLR(da);
		let img = createImage(path, { h: sz, margin: 10 });
		let da1 = mDiv(da);
		mAppend(da1, img);
		let dtext = mDiv(da1, { align: 'left', display: 'inline-block', fg: '#FCFCFC', fz: 14 });
		mAppend(dtext, mCreateFrom(`<a>${k}</a>`));
		let dsub = mDiv(dtext, { fg: 'dimgray', fz: 12 }, null, o.sub);
		let da2 = mDiv(da); mFlex(da2);
		let da21 = mDiv(da2, { w: 100, hmargin: 20, mabottom: 20 });
		let padinput = 7;
		mDiv(da21, { fg: 'black', fz: 12, weight: 'bold' }, null, 'Amount');
		mDiv(da21, { w: 100 }, null, `<input onfocus="add_make_payments_button(event)" style="color:dimgray;font-size:14px;border:1px dotted silver;padding:${padinput}px;width:85px" id="inp${i}" name="authocode" value="$" type="text" />`);
		let da22 = mDiv(da2, { maright: 10 });
		mDiv(da22, { fg: 'black', fz: 12, weight: 'bold' }, null, 'Deliver By');
		mDiv(da22, {}, null, `<input style="color:dimgray;font-size:12px;border:1px dotted silver;padding:${padinput}px" id="inpAuthocode" name="authocode" value="" type="date" />`);
		let dabot = mDiv(dall);
		mFlexLR(dabot);
		let lastpayment = isdef(o['Last Payment']) ? `Last Payment: ${o['Last Payment']}` : ' ';
		mDiv(dabot, { fz: 12, fg: '#303030', maleft: 10, mabottom: 25 }, null, `${lastpayment}`);
		mDiv(dabot, { fz: 12, fg: 'blue', maright: 90, mabottom: 25 }, null, `<a>Activity</a>&nbsp;&nbsp;&nbsp;<a>Reminders</a>&nbsp;&nbsp;&nbsp;<a>AutoPay</a>`);
		mDiv(dall);
		i++;
	}
}
function board_to_fen(board) {
	let result = "";
	for (let y = 0; y < board.length; y++) {
		let empty = 0;
		for (let x = 0; x < board[y].length; x++) {
			let c = board[y][x][0];
			if (c == 'w' || c == 'b') {
				if (empty > 0) {
					result += empty.toString();
					empty = 0;
				}
				if (c == 'w') {
					result += board[y][x][1].toUpperCase();
				} else {
					result += board[y][x][1].toLowerCase();
				}
			} else {
				empty += 1;
			}
		}
		if (empty > 0) {
			result += empty.toString();
		}
		if (y < board.length - 1) {
			result += '/';
		}
	}
	result += ' w KQkq - 0 1';
	return result;
}
function boardArrOmitFirstRowCol(boardArr, rows, cols) {
	let res = [];
	for (let r = 1; r < rows; r++) {
		for (let c = 1; c < cols; c++) {
			let i = iFromRowCol(r, c, rows, cols);
			res.push(boardArr[i]);
		}
	}
	return res;
}
function boardArrReduced(boardArr, rows, cols) {
	let res = [];
	for (let r = 1; r < rows; r++) {
		for (let c = 1; c < cols; c++) {
			let i = iFromRowCol(r, c, rows, cols);
			res.push(boardArr[i]);
		}
	}
	return res;
}
function boardTestGetCol() {
	let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
	let [rows, cols] = [3, 4];
	for (let i = 0; i < cols; i++) {
		let x = bGetCol(arr, i, rows, cols);
		console.log('arr', toBoardString(arr, rows, cols), 'col', i, x);
	}
}
function boardTestGetRow() {
	let arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
	let [rows, cols] = [6, 2];
	for (let i = 0; i < rows; i++) {
		let x = bGetRow(arr, i, rows, cols);
		console.log('arr', toBoardString(arr, rows, cols), 'row', i, x);
	}
}
function BoardToFen() {
	var fenStr = '';
	var rank, file, sq, piece;
	var emptyCount = 0;
	for (rank = RANKS.RANK_8; rank >= RANKS.RANK_1; rank--) {
		emptyCount = 0;
		for (file = FILES.FILE_A; file <= FILES.FILE_H; file++) {
			sq = FR2SQ(file, rank);
			piece = brd_pieces[sq];
			if (piece == PIECES.EMPTY) {
				emptyCount++;
			} else {
				if (emptyCount != 0) {
					fenStr += String.fromCharCode('0'.charCodeAt() + emptyCount);
				}
				emptyCount = 0;
				fenStr += PceChar[piece];
			}
		}
		if (emptyCount != 0) {
			fenStr += String.fromCharCode('0'.charCodeAt() + emptyCount);
		}
		if (rank != RANKS.RANK_1) {
			fenStr += '/'
		} else {
			fenStr += ' ';
		}
	}
	fenStr += SideChar[brd_side] + ' ';
	if (brd_enPas == SQUARES.NO_SQ) {
		fenStr += '- '
	} else {
		fenStr += PrSq(brd_enPas) + ' ';
	}
	if (brd_castlePerm == 0) {
		fenStr += '- '
	} else {
		if (brd_castlePerm & CASTLEBIT.WKCA) fenStr += 'K';
		if (brd_castlePerm & CASTLEBIT.WQCA) fenStr += 'Q';
		if (brd_castlePerm & CASTLEBIT.BKCA) fenStr += 'k';
		if (brd_castlePerm & CASTLEBIT.BQCA) fenStr += 'q';
	}
	fenStr += ' ';
	fenStr += brd_fiftyMove;
	fenStr += ' ';
	var tempHalfMove = brd_hisPly;
	if (brd_side == COLOURS.BLACK) {
		tempHalfMove--;
	}
	fenStr += tempHalfMove / 2;
	return fenStr;
}
function boardToNode(state) {
	let res = new Array();
	for (let i = 0; i < state.length; i++) {
		if (state[i] == null) res[i] = ' ';
		else res[i] = state[i];
	}
	return res;
}
function boaverify_start() {
	let d = mBy('dBoa');
	mClear(d);
	mAppend(d, get_header_top('Extra Security At Sign-in'));
	mAppend(d, get_red_header('Verify Your Identity'));
	add_verify_content(d);
	mAppend(d, get_boa_footer2());
}
function book_animals_1() {
	let pics = {};
	for (const k of KeySets.animals) {
		let item = miPic(k, dContent)
		pics[k] = item;
	}
	return { pics: pics, play: () => { } };
}
function book_blaettern(page) {
	if (DA.currentpage != page && isNumber(DA.currentpage)) mStyleRemove(dFooter.children[DA.currentpage], 'fg');
	mStyle(dFooter.children[page], { fg: 'yellow' });
	DA.currentpage = page;
	dTitle.innerHTML = DA.currentbook.title + ' pg.' + page;
}
function book_cs_1() {
	let o = mCanvas(dContent, { w: 600, h: 300 }, {}, startloop, pauseloop, 'cc');
	o.draw = draw_random_walk;
	return o;
}
function book_cs_2() {
	let o = mCanvas(dContent, { w: 600, h: 300 }, {}, startloop, pauseloop, 'cc');
	o.draw = draw_perlin_x;
	return o;
}
function book_cs_3() {
	let o = mCanvas(dContent, { w: 600, h: 300 }, {}, startloop, pauseloop, 'cc');
	o.draw = draw_perlin_xy;
	return o;
}
function book_cs_4() {
	let o = mCanvas(dContent, { w: 600, h: 300, bg: 'transparent' }, {}, startloop, pauseloop, 'cc');
	o.draw = draw_random_walk;
	return o;
}
function book_get(id) { return jsCopy(DB.appdata.book.find(x => x.id == id)); }
function book_open(item) {
	console.log('BOOK OPEN!!!!!!!!!!!!!!!');
	let d = iDiv(item);
	let dg = mGrid(2, 1, d, { gap: 3, matop: 22 });
	let books = DB.appdata.book;
	for (const book of books) {
		let d1 = mDiv(dg, { fg: rColor(23) }, null, book.title, 'hop1');
		d1.onclick = () => book_open_title(book.id);
	}
}
function book_open_next_page() {
	let page = isNumber(DA.currentpage) ? DA.currentpage + 1 : 1;
	if (page > DA.currentbook.pages) page = 1;
	book_open_page(page);
}
function book_open_page(page) {
	pauseloop(); iClear(dContent);
	book_blaettern(page);
	let book = G = book_get(dContent.getAttribute('book'));
	let func = window[`book_${book.id}_${page}`];
	let o = G.canvas = func();
	iReg(o);
	dButtons = G.canvas.controls;
	addKeys(G, window);
	o.play();
}
function book_open_prev_page() {
	let page = isNumber(DA.currentpage) ? DA.currentpage - 1 : DA.currentbook.pages;
	if (page < 1) page = DA.currentbook.pages;
	book_open_page(page);
}
function book_open_title(id, page) {
	clear_all();
	dTable = mSection({ bg: DB.apps.book.color }, 'dTable', null, null, 'bookgrid');
	let book = DA.currentbook = book_get(id);
	dTitle = mDiv(dTable, {}, null, book.title)
	mButtonX(dTable, () => mClear(dTable), pos = 'tr', sz = 25, color = 'white')
	dContent = mDiv(dTable, {}, 'dContent'); mCenterCenterFlex(dContent);
	dContent.setAttribute('book', id);
	let footer = dFooter = mDiv(dTable, { align: 'center' });
	maButton('<', () => book_open_prev_page(), footer);
	for (const p of range(1, book.pages)) {
		maButton(p, () => book_open_page(p), footer);
	}
	maButton('>', () => book_open_next_page(), footer);
	book_open_page(valf(page, 1));
}
function BookMove() {
	var gameLine = printGameLine();
	var bookMoves = [];
	var lengthOfLineHack = gameLine.length;
	if (gameLine.length == 0) lengthOfLineHack--;
	for (var bookLineNum = 0; bookLineNum < brd_bookLines.length; ++bookLineNum) {
		if (LineMatch(brd_bookLines[bookLineNum], gameLine) == BOOL.TRUE) {
			var move = brd_bookLines[bookLineNum].substr(lengthOfLineHack + 1, 4);
			if (move.length == 4) {
				var from = SqFromAlg(move.substr(0, 2));
				var to = SqFromAlg(move.substr(2, 2));
				varInternalMove = ParseMove(from, to);
				bookMoves.push(varInternalMove);
			}
		}
	}
	console.log("Total + " + bookMoves.length + " moves in array");
	if (bookMoves.length == 0) return NOMOVE;
	var num = Math.floor(Math.random() * bookMoves.length);
	return bookMoves[num];
}
function bot_clairvoyant(list, maxvalue, mmax, exp, nreas, n2, have2, words, fen) {
	let reduced_list = list.filter(x => x.value == list[0].value || x.mine);
	let res = reduced_list.length >= 2 ? rChoose(list, 2) : [reduced_list[0], { value: 0, rank: '_' }];
	let max = res[0].value >= res[1].value ? res[0] : res[1]; let min = res[0].value < res[1].value ? res[0] : res[1];
	let b = [max.value, max.rank, min.value, min.rank];
	if (isdef(fen.lastbid)) {
		let [n1, r1, n2, r2] = bluff_convert2ranks(fen.lastbid);
		if (!is_bid_higher_than(bluff_convert2words(b), fen.lastbid)) {
			return [null, handle_gehtHoch];
		}
	}
	return [bluff_convert2words(b), handle_bid];
}
function bot_perfect(list, max, mmax, exp, nreas, n2, have2, words, fen) {
	let i = 0; while (list[i].rank == '2') i++;
	let b = [list[i].value + n2, list[i].rank, list[i + 1].value, list[i + 1].rank];
	list.map(x => console.log(x));
	console.log('b:', b);
	if (isdef(fen.lastbid)) {
		let [n1, r1, n2, r2] = bluff_convert2ranks(fen.lastbid);
		if (!is_bid_higher_than(bluff_convert2words(b), fen.lastbid)) {
			return [null, handle_gehtHoch];
		}
	}
	return [bluff_convert2words(b), handle_bid];
}
function bot_random(list, max, mmax, exp, nreas, n2, have2, words, fen) {
	let ranks = rChoose('3456789TJQKA', 2);
	let b;
	if (nundef(fen.lastbid)) b = [rNumber(1, nreas), ranks[0], rNumber(1, nreas), ranks[1]];
	else if (fen.lastbid[0] > nreas + 2) {
		return [null, handle_gehtHoch];
	} else {
		[n1, r1, n2, r2] = bluff_convert2ranks(fen.lastbid);
		assertion(isNumber(n1) && n1 > 0 && isNumber(n2), 'bot_random: n1 or n2 is not a number OR n1<=0!!!!!!!', n1, n2);
		if ((n1 + n2) / 2 > nreas && coin(50)) {
			return [null, handle_gehtHoch];
		} else if ((n1 + n2) / 2 <= nreas + 1) b = n1 <= nreas + 1 ? [n1 + 1, r1, n2, r2] : [n1, r1, n2 + 1, r2];
		else {
			let [i1, i2] = [BLUFF.rankstr.indexOf(r1), BLUFF.rankstr.indexOf(r2)];
			let s = '3456789TJQKA';
			let imin = Math.min(i1, i2); let imax = Math.max(i1, i2); let i = imax == i1 ? 1 : 2;
			let [smin, between, smax] = [s.substring(0, imin), s.substring(imin + 1, imax), s.substring(imax + 1, s.length)];
			if (!isEmpty(smax)) { if (i == 1) b = [n1, rChoose(smax), n2, r2]; else b = [n1, r1, n2, rChoose(smax)]; }
			else if (!isEmpty(between)) { if (i == 2) b = [n1, rChoose(between), n2, r2]; else b = [n1, r1, n2, rChoose(between)]; }
			else return [null, handle_gehtHoch];
		}
	}
	return [bluff_convert2words(b), handle_bid];
}
function botbest(list, max, mmax, exp, nreas, n2, have2, words, fen) {
	if (nundef(DA.ctrandom)) DA.ctrandom = 1; console.log(`${DA.ctrandom++}: ${Z.uplayer} using strategy`, Z.strategy)
	let bot = window[`bot_${Z.strategy}`];
	let [b, f] = bot(list, max, mmax, exp, nreas, n2, have2, words, fen);
	assertion(!b || b[2] != 0, 'bot returned bid with n2==0');
	return [b, f];
}
function bottom_elem_from_to(arr1, arr2) { last_elem_from_to(arr1, arr2); }
function bottom_elem_from_to_top(arr1, arr2) { arr2.unshift(arr1.pop()); }
function bPartialCol(arr, icol, rows, cols) {
	let iStart = icol;
	let x = null;
	for (let i = iStart; i < iStart + (cols * rows); i += cols) { if (empty_func(arr[i])) continue; else if (empty_func(x)) x = arr[i]; else if (arr[i] != x) return null; }
	return x;
}
function bPartialDiag(arr, rows, cols) {
	let iStart = 0;
	let x = null;
	for (let i = iStart; i < arr.length; i += cols + 1) { if (empty_func(arr[i])) continue; else if (empty_func(x)) x = arr[i]; else if (arr[i] != x) return null; }
	return x;
}
function bPartialDiag2(arr, rows, cols) {
	let iStart = cols - 1;
	let x = null;
	for (let i = iStart; i < arr.length - 1; i += cols - 1) {
		if (empty_func(arr[i])) continue; else if (empty_func(x)) x = arr[i]; else if (arr[i] != x) return null;
	}
	return x;
}
function bPartialRow(arr, irow, rows, cols) {
	let iStart = irow * cols;
	let x = null;
	for (let i = iStart; i < iStart + cols; i++) {
		if (empty_func(arr[i])) continue;
		else if (empty_func(x)) x = arr[i];
		else if (arr[i] != x) return null;
	}
	return x;
}
function Branch(start, end) {
	this.start = start;
	this.end = end;
	this.init = [start.x, start.y, end.x, end.y];
	this.children = [];
	this.finished = false;
	this.get_healthy_end = () => { return createVector(this.init[2], this.init[3]); }
	this.repair = () => {
		this.start.x = this.init[0];
		this.start.y = this.init[1];
		this.end.x = this.init[2];
		this.end.y = this.init[3];
	}
	this.jitter = () => {
		this.end.x += random(-1, 1);
		this.end.y += random(-1, 1);
	}
	this.show = () => {
		stroke(255);
		line(this.start.x, this.start.y, this.end.x, this.end.y)
	}
	this.branch = (angle, factor = .67) => {
		let dir = p5.Vector.sub(this.end, this.start);
		dir.rotate(angle);
		dir.mult(factor);
		let newend = p5.Vector.add(this.end, dir);
		let b = new Branch(this.end, newend);
		this.children.push(b);
		return b;
	}
}
function branch_draw(o) {
	cStyle({ fg: o.color, thickness: o.thickness, cap: 'round' }, CX);
	if (C.root.jitter) cLine(o.p1.x, o.p1.y, o.p2.x + Math.random() * 2 - 1, o.p2.y + Math.random() * 2 - 1, {}, CX);
	else cLine(o.p1.x, o.p1.y, o.p2.x, o.p2.y, {}, CX);
}
function bRayDir(arr, idx, dir, rows, cols) {
	let indices = [];
	let i = idx;
	while (i < arr.length) {
		let i = bNeiDir(arr, i, dir, rows, cols);
		if (!i) break; else indices.push(i);
	}
	return indices;
}
function bringInfoboxToFront(mobj) {
	mobj.elem.style.zIndex = maxZIndex;
	maxZIndex += 1;
}
function bringToFront(ui) {
	ui.style.zIndex = maxZIndex;
	maxZIndex += 1;
}
async function broadcastSIMA(usersPath = './_users.yaml', settingsPath = './_settings.yaml', gamesPath = './_games.yaml', addonsPath = './_addons.yaml') {
	let users = await loadYamlDict(usersPath);
	let settings = await loadYamlDict(settingsPath);
	let games = await loadYamlDict(gamesPath);
	let addons = await loadYamlDict(addonsPath);
	DB = {
		id: 'speechGames',
		users: users,
		settings: settings,
		games: games,
		addons: addons,
	};
	saveSIMA();
	if (CLEAR_LOCAL_STORAGE) localStorage.clear();
	await loadAssetsSIMA('../assets/');
}
function bStrideCol(arr, icol, rows, cols, stride) {
	for (let i = 0; i <= rows - stride; i++) {
		let ch = bStrideColFrom(arr, i, icol, rows, cols, stride);
		if (ch) return ch;
	}
	return null;
}
function bStrideColFrom(arr, irow, icol, rows, cols, stride) {
	if (rows - irow < stride) return null;
	let iStart = irow * cols + icol;
	let x = arr[iStart];
	if (empty_func(x)) return null;
	for (let i = iStart + cols; i < iStart + cols * stride; i += cols) if (arr[i] != x) return null;
	return x;
}
function bStrideDiag2From(arr, irow, icol, rows, cols, stride) {
	if (rows - irow < stride || icol - stride + 1 < 0) return null;
	let iStart = irow * cols + icol;
	let x = arr[iStart];
	if (empty_func(x)) return null;
	for (let i = iStart + cols - 1; i < iStart + (cols - 1) * stride; i += cols - 1) if (arr[i] != x) return null;
	return x;
}
function bStrideDiagFrom(arr, irow, icol, rows, cols, stride) {
	if (rows - irow < stride || cols - icol < stride) return null;
	let iStart = irow * cols + icol;
	let x = arr[iStart];
	if (empty_func(x)) return null;
	for (let i = iStart + cols + 1; i < iStart + (cols + 1) * stride; i += cols + 1) if (arr[i] != x) return null;
	return x;
}
function bStrideRow(arr, irow, rows, cols, stride) {
	for (let i = 0; i <= cols - stride; i++) {
		let ch = bStrideRowFrom(arr, irow, i, rows, cols, stride);
		if (ch) return ch;
	}
	return null;
}
function bStrideRowFrom(arr, irow, icol, rows, cols, stride) {
	if (cols - icol < stride) return null;
	let iStart = irow * cols + icol;
	let x = arr[iStart];
	if (empty_func(x)) return null;
	for (let i = iStart + 1; i < iStart + stride; i++) if (arr[i] != x) return null;
	return x;
}
function bTest01() {
	let arr = [1, 1, 1, 1, 2, 1, 0, 1, 0], rows = 3, cols = 3, irow = 0;
	console.log(bFullRow(arr, irow, rows, cols));
	console.log('____________')
	arr = [1, 1, 1, 1, 2, 1, 1, 1, 0], rows = 3, cols = 3, irow = 2;
	console.log(bFullRow(arr, irow, rows, cols));
	console.log('____________')
	arr = [1, 1, 1, 1, 2, 1, 1, 1, 0], rows = 3, cols = 3, icol = 0;
	console.log(bFullCol(arr, icol, rows, cols));
	console.log('____________')
	arr = [1, 1, 0, 2, 1, 1, 1, 0, 1], rows = 3, cols = 3;
	console.log(bFullDiag(arr, rows, cols));
	console.log('____________')
	arr = [2, 1, 0, 2, 1, 1, 1, 0, 1], rows = 3, cols = 3;
	console.log(bFullDiag(arr, rows, cols));
	console.log('____________')
	arr = [2, 1, 0, 0, 2, 1, 1, 0, 1], rows = 3, cols = 3;
	console.log(bFullDiag(arr, rows, cols));
	console.log('____________')
	arr = [2, 2, 1, 2, 1, 2, 1, 2, 2], rows = 3, cols = 3;
	console.log(bFullDiag2(arr, rows, cols));
	console.log('____________')
	arr = [2, 1, 0, 0, 0, 1, 0, 0, 1], rows = 3, cols = 3;
	console.log(bFullDiag2(arr, rows, cols));
	console.log('============================')
}
function bTest02() {
	let arr = [1, null, 1, 1, 2, 1, 0, 1, 0], rows = 3, cols = 3, irow = 0;
	console.log(bPartialRow(arr, irow, rows, cols));
	console.log('____________')
	arr = [1, 1, 1, 1, 0, 1, 1, 1, 2], rows = 3, cols = 3, irow = 2;
	console.log(bPartialRow(arr, irow, rows, cols));
	console.log('____________')
	arr = [1, 1, 1, null, 2, 1, 1, 1, 0], rows = 3, cols = 3, icol = 0;
	console.log(bPartialCol(arr, icol, rows, cols));
	console.log('____________')
	arr = [1, 1, 0, 2, null, 1, 1, 0, 1], rows = 3, cols = 3;
	console.log(bPartialDiag(arr, rows, cols));
	console.log('____________')
	arr = [2, 1, 0, 2, 1, 1, 1, 0, 1], rows = 3, cols = 3;
	console.log(bPartialDiag(arr, rows, cols));
	console.log('____________')
	arr = [2, 1, 0, 0, 2, 1, 1, 0, 1], rows = 3, cols = 3;
	console.log(bPartialDiag(arr, rows, cols));
	console.log('____________')
	arr = [2, 2, 1, 2, null, 2, 1, 2, 2], rows = 3, cols = 3;
	console.log(bPartialDiag2(arr, rows, cols));
	console.log('____________')
	arr = [2, 1, 0, 0, 0, 1, 0, 0, 1], rows = 3, cols = 3;
	console.log(bPartialDiag2(arr, rows, cols));
}
function bTest03() {
	let arr = [[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	['O', 'X', 0, 0, 0, 0, 0],
	['O', 'O', 'O', 'O', 0, 0, 0]]
	let arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 5, stride = 4;
	console.log('arr', arr[5]);
	console.log('stride in row', irow + ':', bStrideRow(arrf, irow, rows, cols, stride));
	console.log('____________');
	arr = [[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	['O', 'X', 0, 0, 0, 0, 0],
	[0, 0, 0, 'O', 'O', 'O', 0]]
	arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 5, stride = 4;
	console.log('arr', arr[5]);
	console.log('stride in row', irow + ':', bStrideRow(arrf, irow, rows, cols, stride));
	console.log('____________');
	arr = [[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	['O', 'X', 0, 0, 0, 0, 0],
	[0, 'O', 'O', 'O', 'O', 0, 0]]
	arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 5, stride = 4;
	console.log('arr', arr[5]);
	console.log('stride in row', irow + ':', bStrideRow(arrf, irow, rows, cols, stride));
	console.log('____________');
	arr = [[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	['O', 'X', 0, 0, 0, 0, 0],
	[0, 0, 0, 'O', 'O', 'O', 'O']]
	arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 5, stride = 4;
	console.log('arr', arr[5]);
	console.log('stride in row', irow + ':', bStrideRow(arrf, irow, rows, cols, stride));
	console.log('____________');
}
function bTest04() {
	let arr = [[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 0, 0, 0],
	['O', 0, 0, 0, 0, 0, 0],
	['O', 0, 0, 0, 0, 0, 0],
	['O', 'X', 0, 0, 0, 0, 0],
	['O', 'O', 'O', 'O', 0, 0, 0]]
	let arrf = arrFlatten(arr), rows = 6, cols = 7, icol = 0, stride = 4;
	console.log('stride in col', icol + ':', bStrideCol(arrf, icol, rows, cols, stride));
	console.log('____________');
	arr = [[0, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 'X', 0, 0],
	['O', 0, 0, 0, 'X', 0, 0],
	['O', 0, 0, 0, 'O', 0, 0],
	['O', 'X', 0, 0, 'X', 0, 0],
	['O', 'O', 'O', 'O', 0, 0, 0]]
	arrf = arrFlatten(arr), rows = 6, cols = 7, icol = 4, stride = 4;
	console.log('stride in col', icol + ':', bStrideCol(arrf, icol, rows, cols, stride));
	console.log('____________');
	arr = [[0, 0, 'X', 0, 'X', 0, 0],
	[0, 0, 0, 0, 'X', 0, 0],
	['O', 0, 0, 0, 'X', 0, 0],
	['O', 0, 0, 0, 'X', 0, 0],
	['O', 'X', 0, 0, 'O', 0, 0],
	['O', 'O', 'O', 'O', 0, 0, 0]]
	arrf = arrFlatten(arr), rows = 6, cols = 7, icol = 4, stride = 4;
	console.log('stride in col', icol + ':', bStrideCol(arrf, icol, rows, cols, stride));
	console.log('____________');
}
function bTest05() {
	let arr = [
		[0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0],
		['O', 0, 0, 0, 0, 0, 0],
		[0, 'O', 0, 0, 0, 0, 0],
		['O', 'X', 'O', 0, 0, 0, 0],
		['O', 'O', 'O', 'O', 0, 0, 0]]
	let arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 2, icol = 0, stride = 4;
	console.log('stride in diag', irow, icol + ':', bStrideDiagFrom(arrf, irow, icol, rows, cols, stride));
	console.log('____________');
	arr = [
		[0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 'X', 0],
		['O', 0, 0, 0, 0, 0, 'X'],
		[0, 'O', 0, 0, 0, 0, 0],
		['O', 'X', 'O', 0, 0, 0, 0],
		['O', 'O', 'O', 'O', 0, 0, 0]]
	arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 1, icol = 5, stride = 4;
	console.log('stride in diag', irow, icol + ':', bStrideDiagFrom(arrf, irow, icol, rows, cols, stride));
	console.log('____________');
	arr = [
		[0, 0, 0, 0, 0, 0, 'X'],
		[0, 0, 0, 0, 0, 'X', 0],
		['O', 0, 0, 0, 'X', 0, 'X'],
		[0, 'O', 0, 'X', 0, 0, 0],
		['O', 'X', 'O', 0, 0, 0, 0],
		['O', 'O', 'O', 'O', 0, 0, 0]]
	arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 0, icol = 6, stride = 4;
	console.log('stride in diag2', irow, icol + ':', bStrideDiag2From(arrf, irow, icol, rows, cols, stride));
	console.log('____________');
	arr = [
		[0, 0, 0, 0, 0, 0, 'X'],
		[0, 0, 0, 0, 0, 'X', 0],
		['O', 0, 0, 'O', 'X', 0, 'X'],
		[0, 'O', 'O', 'X', 0, 0, 0],
		['O', 'O', 'O', 0, 0, 0, 0],
		['O', 'O', 'O', 'O', 0, 0, 0]]
	arrf = arrFlatten(arr), rows = 6, cols = 7, irow = 2, icol = 3, stride = 4;
	console.log('stride in diag2', irow, icol + ':', bStrideDiag2From(arrf, irow, icol, rows, cols, stride));
	console.log('____________');
}
function bTest06() {
	let pos = [
		[0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0],
		[0, 'X', 0, 0, 0, 0, 0],
		[0, 'X', 0, 'O', 0, 0, 0],
		['O', 'X', 0, 'O', 0, 0, 0],
		['O', 'X', 0, 'O', 0, 0, 0]];
	let arr = arrFlatten(pos);
	let str = bStrideCol(arr, 1, 6, 7, 4);
	console.log('stride', str)
	let w = checkWinnerC4(arr, 6, 7, 4);
	printState(arr)
	console.log('w', w);
}
function bTest07() {
	let arr = [0, 0, 0, 0, 0, 0, 0, "X", 0, 0, 0, 0, 0, 0, "X", 0, 0, "X", "X", 0, "O", "X", 0, "X", "O", "O", "O", "X", "O", "X", "O", "O", "O", "X", "O", "O", "X", "O", "O", "O", "X", "O"];
	let w = checkWinnerC4(arr, 6, 7, 4);
	printState(arr)
	console.log('w', w);
}
function bTest08() {
	let arr = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "X", 0, 0, 0, "X", 0, 0, "O", 0, 0, 0, "O", "X", 0, "O", 0, 0, 0, "O", "X", "O", "O", "O", "O", 0];
	let w = checkWinnerC4(arr, 6, 7, 4);
	printState(arr)
	console.log('w', w);
}
function bTest09() {
	let pos = [
		[0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0],
		[0, 'X', 0, 0, 0],
		[0, 'X', 0, 'O', 0],
		['O', 'X', 0, 'O', 0]];
	let arr = arrFlatten(pos);
	let nei = bNei(arr, 6, 5, 5);
	console.log(nei)
	nei = bNei(arr, 0, 5, 5);
	console.log(nei)
	nei = bNei(arr, 24, 5, 5);
	console.log(nei)
}
function bTest10() {
	let pos = [
		[0, 1, 2, 3, 4, 5],
		[6, 7, 8, 9, 10, 11],
		[12, 13, 14, 15, 16, 17],
		[18, 19, 20, 21, 22, 23],
		[24, 25, 26, 27, 28, 29]];
	let arr = arrFlatten(pos);
	printState(arr);
	let nei = bNei(arr, 6, 6, 6);
	console.log(nei);
	nei = bNei(arr, 7, 6, 6);
	console.log(nei);
	nei = bNei(arr, 16, 6, 6);
	console.log(nei);
}
function btest11_fractions() {
	let a = math.fraction(1, 4);
	let b = math.fraction(1, 4);
	let c = math.multiply(a, b);
	console.log(a, b, c);
	let d = math.add(a, b);
	console.log(d)
	let e = math.multiply(2, a);
	console.log(e)
}
function buildChanav(n, rParent) {
	let parentChanav = convertToList(rParent ? rParent.chanav : R.initialChannels);
	let ownChanav = convertToList(n.chanav);
	let res = ownChanav;
	parentChanav.map(x => addIf(res, x));
	return isEmpty(res) ? null : res.length == 1 ? res[0] : res;
}
function building_is_correct(b) {
	let key = b.keycard.key;
	let list = b.list;
	for (let i = 0; i < list.length; i++) { if (list[i][0] != key[0]) return false; }
	return true;
}
function buildNewSyms() {
	let newSyms = {};
	for (const k of KeySets.all) {
		let info = Syms[k];
		console.log(info)
		delete info.w;
		delete info.h;
		let old = symbolDict[k];
		console.log('old symbol:', old);
		if (isdef(old)) {
			addIf(info.cats, old.group);
			addIf(info.cats, old.subgroups);
		}
		newSyms[k] = Syms[k];
	}
	downloadAsYaml(newSyms, 'newSyms')
}
function buildPalette(colorsList) {
	const paletteContainer = document.getElementById("palette");
	const complementaryContainer = document.getElementById("complementary");
	paletteContainer.innerHTML = "";
	complementaryContainer.innerHTML = "";
	const orderedByColor = orderByLuminance(colorsList);
	const hslColors = convertRGBtoHSL(orderedByColor);
	for (let i = 0; i < orderedByColor.length; i++) {
		const hexColor = rgbToHexCOOL(orderedByColor[i]);
		const hexColorComplementary = hslToHexCOOL(hslColors[i]);
		if (i > 0) {
			const difference = calculateColorDifference(
				orderedByColor[i],
				orderedByColor[i - 1]
			);
			if (difference < 120) {
				continue;
			}
		}
		const colorElement = document.createElement("div");
		colorElement.style.backgroundColor = hexColor;
		colorElement.appendChild(document.createTextNode(hexColor));
		paletteContainer.appendChild(colorElement);
		if (hslColors[i].h) {
			const complementaryElement = document.createElement("div");
			complementaryElement.style.backgroundColor = `hsl(${hslColors[i].h},${hslColors[i].s}%,${hslColors[i].l}%)`;
			complementaryElement.appendChild(
				document.createTextNode(hexColorComplementary)
			);
			complementaryContainer.appendChild(complementaryElement);
		}
	}
}
function buildRgb(imageData) {
	const rgbValues = [];
	for (let i = 0; i < imageData.length; i += 4) {
		const rgb = {
			r: imageData[i],
			g: imageData[i + 1],
			b: imageData[i + 2],
		};
		rgbValues.push(rgb);
	}
	return rgbValues;
}
function buildWordFromLetters(dParent) {
	let letters = Array.from(dParent.children);
	let s = letters.map(x => x.innerHTML);
	s = s.join('');
	return s;
}
async function bundleGenerateFrom(htmlScriptsFile, htmlBodyFile = null, download = true) {
	let html = await route_path_text(htmlScriptsFile);
	html = removeCommentLines(html, '<!--', '-->');
	if (htmlBodyFile) html += await route_path_text(htmlBodyFile);
	let dirhtml = stringBeforeLast(htmlScriptsFile, '/');
	let project = stringAfter(dirhtml, '/'); if (project.includes('/')) project = stringBefore(project, '/');
	let files = extractFilesFromHtml(html, htmlScriptsFile);
	let byKey = {}, ckeys = [], idx = 0, haveBundle = false;
	if (files.length == 1) {
		haveBundle = true;
		console.log('bundle already generated!!!', files[0]);
	}
	for (const f of files) { let idxnew = await parseCodeFile(f, byKey, ckeys, idx); idx = idxnew; }
	let bundle_code = _assemble_code_sorted(ckeys, byKey, haveBundle);
	let knownNogos = { codingfull: ['uiGetContact'] };
	let seed = ['start'].concat(extractOnclickFromHtml(html)); //console.log('seed',seed)
	let byKeyMinimized = _minimizeCode(byKey, seed, valf(knownNogos[project], []));
	let ckeysMinimized = ckeys.filter(x => isdef(byKeyMinimized[x]));
	let closure_code = _assemble_code_sorted(ckeysMinimized, byKeyMinimized, haveBundle);
	if (download) downloadAsText(closure_code, `${project}_closure`, 'js');
	let scripts = `</body><script src="../${dirhtml}/closure.js"></script><script>onload = start;</script>\n</html>`;
	let htmlcode = stringBefore(html, `</body>`) + scripts;
	AU.ta.value = closure_code;
	cssfiles = extractFilesFromHtml(html, htmlScriptsFile, 'css');
	console.log('cssfiles', cssfiles)
	let csstext = files.length > 0 ? await cssGenerateFrom(cssfiles[0], bundle_code, html) : 'no css';
	return [bundle_code, closure_code, csstext, html];
}
async function bundleGenFromProject(projectname, genfiles) {
	return await bundleGenerateFrom(`../${projectname}/index.html`, null, genfiles);
}
function busy_wait_until_slot(slot) {
	let diff = get_slot_diff(Z.fen);
	let dd;
	do {
		dd = last_n_digits(Date.now(), 2);
		if (dd >= slot && dd <= slot + diff) { break; }
	} while (true);
	return dd;
}
function bw_list_entry(d, key, loginOrCard = 'login') {
	let logins = loginOrCard == 'login' ? get_fake_bw_logins() : get_fake_bw_cards();
	let login = logins[key];
	let d4 = mDiv(d, { bg: 'white', fg: 'black', 'border-bottom': '1px dotted #ddd' });
	let d5 = mDiv(d4, { display: 'flex' });
	let dimg = mDiv(d5, { bg: 'white', fg: 'black' }, null, `<img src='../rechnung/images/${login.logo}' height=14 style="margin:8px">`);
	let dtext = mDiv(d5, { cursor: 'pointer' }, null, `<div>${key}</div><div style="font-size:12px;color:gray">${login.sub}</div>`);
	dtext.onclick = () => onclick_bw_symbol(key)
	let d6 = mDiv(d4, { display: 'flex', padding: 2 });
	let disyms = {
		bwtext: { postfix: 'userid', matop: 2, maright: 0, mabottom: 0, maleft: 0, sz: 27 },
		bwcross: { postfix: 'cross', matop: 2, maright: 0, mabottom: 0, maleft: -13, sz: 25 },
		bwkey: { postfix: 'pwd', matop: 0, maright: 0, mabottom: 0, maleft: -12, sz: 27 },
		bwclock: { postfix: 'clock', matop: 0, maright: 0, mabottom: 0, maleft: 0, sz: 25 },
	}
	for (const k of ['bwtext', 'bwcross', 'bwkey']) {
		let o = disyms[k];
		let [filename, styles] = [k, disyms[k]];
		let path = `../rechnung/images/${filename}.png`;
		let [sz, ma] = [styles.sz, `${styles.matop}px ${styles.maright}px ${styles.mabottom}px ${styles.maleft}px`];
		let img = mDiv(d6, { paright: 16 }, null, `<img src='${path}' height=${sz} style="margin:${ma}">`);
		if (k != 'bwcross') {
			mStyle(img, { cursor: 'pointer' });
			img.onclick = () => onclick_bw_symbol(key, o.postfix);
		}
	}
	mFlexSpacebetween(d4);
	return d4;
}
function bw_login_popup() {
	let html = `
    <div id="dBw" class="mystyle" style="background:silver;padding:12px">
      <div id="dBWLogin">
        <form action="javascript:bw_master_password_check()" id="fBitwarden">
          <label for="inputPassword">Enter Master Password:</label>
          <input type="password" id="inputPassword" placeholder="" />
        </form>
        <div id="bw_login_status" style="color:red"></div>
      </div>
    </div>
  `;
	let d = mCreateFrom(html);
	let dParent = mBy('dPopup');
	show(dParent);
	mClear(dParent);
	mStyle(dParent, { top: 50, right: 10 });
	mAppend(dParent, d);
	document.getElementById("inputPassword").focus();
}
function bw_master_password_check() {
	let pw = mBy('inputPassword').value;
	if (pw == S.master_password) {
		S.bw_state = 'loggedin';
		toggle_bw_symbol();
		hide('dPopup');
		if (DA.name == 'Password') {
			show_eval_message(true); DA.name = DA.challenge = null;
		}
	} else if (DA.name == 'Password') {
		DA.name = DA.challenge = null;
		show_eval_message(false, `Fail! the password is ${S.master_password}`);
		mBy('inputPassword').value = '';
		hide('dPopup');
	} else {
		let d = mBy('bw_login_status');
		d.innerHTML = 'Incorrect Master Password';
	}
}
function bw_master_password_renew() {
	let [inp1, inp2] = [document.getElementById('inputPassword'), document.getElementById('inputPassword2')];
	let pw = inp1.value;
	let pw2 = inp2.value;
	let letters = toLetters(pw);
	let minlen = 8;
	let correct = false;
	let d = mBy('dError');
	if (pw.length < minlen) {
		d.innerHTML = `password needs to be at least ${minlen} long!`;
	} else if (!letters.find(x => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.includes(x))) {
		d.innerHTML = 'password needs to contain at least 1 uppercase letter!';
	} else if (!letters.find(x => '0123456789'.includes(x))) {
		d.innerHTML = 'password needs to contain at least 1 digit!';
	} else if (isAlphaNum(pw)) {
		d.innerHTML = 'password needs to contain at least 1 special symbol!';
	} else if (pw !== pw2) {
		d.innerHTML = 'passwords do not match';
	} else correct = true;
	if (correct) {
		console.log('new password has been set!', pw);
		S.master_password = pw;
		boa_save();
		hide('dPopup');
		show_eval_message(true, `Password has been set to ${pw}`); DA.challenge = DA.name = null;
	} else {
		inp1.value = inp2.value = '';
		inp1.focus();
	}
}
function bw_set_new_password_popup() {
	let w = 200;
	let html = `
    <div id="dBw" class="mystyle" style="background:silver;padding:12px">
    <h2 style="text-align:center">Set New Master Password</h2>
    <div id="dBWLogin" style="text-align:right">
        <form action="javascript:bw_master_password_renew()" id="fBitwarden">
          <label for="inputPassword">New Password:</label>
          <input style="width:${w}px" type="password" id="inputPassword" placeholder="" onkeydown="focusNextSiblingOrSubmitOnEnter(event,'inputPassword2')" />
          <br><br><label for="inputPassword2">Repeat Password:</label>
          <input style="width:${w}px" type="password" id="inputPassword2" placeholder="" onkeydown="focusNextSiblingOrSubmitOnEnter(event,'fBitwarden')" />
          <br>
          <div id="dError" style="color:yellow;background:red;text-align:center;margin-top:4px;padding:0px 10px;box-sizing:border-box"></div>
          <br><button onclick="bw_master_password_renew()" >Submit</button>
        </form>
      </div>
    </div>
  `;
	let d = mCreateFrom(html);
	let dParent = mBy('dPopup');
	show(dParent);
	mClear(dParent);
	mStyle(dParent, { top: 50, right: 10 });
	mAppend(dParent, d);
	document.getElementById("inputPassword").focus();
}
function bw_symbol_pulse() { let elem = mBy('tbbw'); if (nundef(elem)) return; else { mPulse1(elem); } }
function bw_widget_popup(key = 'boa') {
	let dpop = mBy('dPopup');
	show(dpop); mClear(dpop)
	mStyle(dpop, { top: 50, right: 10, border: 'silver' });
	let prefix = key;
	let douter = mDiv(dpop, { wmin: 200, bg: 'white', fg: 'black', border: '1px single #ccc' }, 'dBw');
	let d2 = mDiv(douter, { padding: 0, h: 30 }, null, `<img width='100%' src='../rechnung/images/bwsearch.jpg'>`);
	let d = mDiv(douter, { padding: 0, hmax: 600, 'overflow-y': 'auto' });
	let dtb = mDiv(douter, { padding: 8 }); mFlexEvenly(dtb);
	let dibuttons = { tab: { top: 2, left: 0 }, vault: { top: 1, left: 3 }, send: { top: 2, left: 3 }, generator: { top: 2, left: 1 }, settings: { top: 4, left: 2 } };
	for (const bname in dibuttons) {
		let path = `../rechnung/images/bw${bname}.jpg`;
		let db = mDiv(dtb, { w: 60 }); mCenterFlex(db);
		let img = mDiv(db, { h: 36, w: 36, bg: 'white', position: 'relative' }, null, `<img style="position:absolute;top:${dibuttons[bname].top}px;left:${dibuttons[bname].left}px" src='${path}'>`);
		mLinebreak(db);
		let txt = mDiv(db, { fz: 12 }, null, capitalize(bname));
	}
	let d3 = mDiv(d, { bg: '#eee', fg: 'dimgray', padding: 8, matop: 8 }, null, 'LOGINS');
	bw_list_entry(d, key);
	let d7 = mDiv(d, { bg: '#eee', fg: 'dimgray', padding: 7 }, null, 'CARDS');
	let data = get_fake_bw_cards();
	let color_alt = '#F9F7F4';
	let i = 0;
	for (const k in data) {
		let dentry = bw_list_entry(d, k, 'cards');
	}
}
function byEndNodeIds(nid1, nid2) { }
function byId(id) {
	return lookup(EID, [id]);
}
function byPos(x, y, func) {
	let els = lookup(EC, [y]);
	if (els) {
		let lst = lookup(els, [x]);
		if (lst) {
			return func ? lst.filter(x => func(x)) : lst;
		}
	}
}
function byPos1(x, y, func) {
	let els = byPos(x, y, func);
	if (els && els.length > 0) return els[0];
	return null;
}
function byType(type, func) {
	els = lookup(ET, [type]);
	if (els) {
		return func ? els.filter(x => func(x)) : els;
	}
}
function byType1(type, func) {
	let els = byType(type, func);
	if (els && els.length > 0) return els[0];
	return null;
}
//#endregion

//#region C
function C_draw() {
	if (!C.changed) return;
	cClear(CV, CX);
	for (const type in C.items) { let f = get_func(type, 'draw'); for (const item of C.items[type]) { f(item); } }
	C.changed = false;
}
function C_update() { C.root.animated = true; get_func(C.name, 'add')(); }
function cal_num_syms_adaptive() {
	let [uplayer, fen] = [Z.uplayer, Z.fen];
	let pl = fen.players[uplayer];
	pl.score = get_player_score(pl.name);
	let by_score = dict2list(fen.players);
	for (const pl of by_score) { pl.score = get_player_score(pl.name); }
	let avg_score = 0;
	for (const pl of by_score) { avg_score += pl.score; }
	avg_score /= by_score.length;
	let di = { nasi: -3, gul: -3, sheeba: -2, mimi: -1, annabel: 1 };
	let baseline = valf(di[uplayer], 0);
	let dn = baseline + Math.floor(pl.score - avg_score);
	let n = Z.options.num_symbols;
	let nfinal = Math.max(4, Math.min(14, dn + n));
	return nfinal;
}
function calc_bid_minus_cards(fen, bid) {
	let di2 = { _: '_', three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine: 9, ten: 'T', jack: 'J', queen: 'Q', king: 'K', ace: 'A' };
	let di_ranks = aggregate_player_hands_by_rank(fen);
	let [brauch1, r1, brauch2, r2] = bid;
	[r1, r2] = [di2[r1], di2[r2]];
	if (brauch1 == '_') brauch1 = 0;
	if (brauch2 == '_') brauch2 = 0;
	let hab1 = valf(di_ranks[r1], 0);
	let hab2 = valf(di_ranks[r2], 0);
	let wildcards = valf(di_ranks['2'], 0);
	let diff1 = Math.max(0, brauch1 - hab1);
	let diff2 = Math.max(0, brauch2 - hab2);
	return diff1 + diff2 - wildcards;
}
function calc_building_vps(bs) {
	let res = 0;
	res += bs.farm.length;
	res += bs.estate.length * 2;
	res += bs.chateau.length * 3;
	return res;
}
function calc_ferro_highest_goal_achieved(pl) {
	let jsorted = jsCopy(pl.journeys).sort((a, b) => b.length - a.length);
	let di = {
		'3': jsorted.length > 0 && is_group(jsorted[0]) && jsorted[0].length >= 3,
		'33': jsorted.length > 1 && is_group(jsorted[0]) && jsorted[0].length >= 3
			&& is_group(jsorted[1]) && jsorted[1].length >= 3,
		'4': jsorted.length > 0 && is_group(jsorted[0]) && jsorted[0].length >= 4,
		'44': jsorted.length > 1 && is_group(jsorted[0]) && jsorted[0].length >= 4
			&& is_group(jsorted[1]) && jsorted[1].length >= 4,
		'5': jsorted.length > 0 && is_group(jsorted[0]) && jsorted[0].length >= 5,
		'55': jsorted.length > 1 && is_group(jsorted[0]) && jsorted[0].length >= 5
			&& is_group(jsorted[1]) && jsorted[1].length >= 5,
		'7R': jsorted.length > 0 && is_sequence(jsorted[0]) && jsorted[0].length >= 7,
	};
	for (const k of Z.fen.availableGoals) {
		if (pl.goals[k]) {
			console.log('player', pl.name, 'already achieved goal', k);
			continue;
		}
		let achieved = di[k];
		if (achieved) {
			return k;
		}
	}
	return null;
}
function calc_ferro_score(roundwinner) {
	let [round, plorder, stage, A, fen, uplayer] = [Z.round, Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer];
	assertion(roundwinner == uplayer, '_calc_ferro_score: roundwinner != uplayer');
	for (const plname of plorder) {
		let pl = fen.players[plname];
		pl.newcards = [];
		if (nundef(pl.score)) pl.score = 0;
		if (uplayer == plname) pl.score -= round * 5;
		else pl.score += calc_hand_value(pl.hand);
	}
}
function calc_fritz_score() {
	let [round, plorder, stage, A, fen, uplayer] = [Z.round, Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer];
	for (const plname of fen.roundorder) {
		let pl = fen.players[plname];
		if (nundef(pl.score)) pl.score = 0;
		else pl.score += calc_hand_value(pl.hand.concat(pl.loosecards), fritz_get_card);
	}
}
function calc_hand_value(hand, card_func = ferro_get_card) {
	let vals = hand.map(x => card_func(x).val);
	let sum = vals.reduce((a, b) => a + b, 0);
	return sum;
}
function calc_hex_col_array(rows, cols) {
	let colarr = [];
	for (let i = 0; i < rows; i++) {
		colarr[i] = cols;
		if (i < (rows - 1) / 2) cols += 1;
		else cols -= 1;
	}
	return colarr;
}
function calc_map_dims() {
	let d = M.dims = {
		pixels: get_map_dims_in_pixel(),
		meters: get_map_dims_in_meters(),
		latlng: get_map_dims_in_lat_lng(),
		zoom: M.map.getZoom(),
	};
	let ppm = M.dims.pixels_per_meter = [d.pixels[0] / d.meters[0], d.pixels[1] / d.meters[1]];
	M.dims.meters_per_pixel = [1 / ppm[0], 1 / ppm[1]];
	let ppll = M.dims.pixels_per_ll = [d.pixels[0] / d.latlng[1], d.pixels[1] / d.latlng[0]];
	M.dims.ll_per_pixel = [1 / ppll[0], 1 / ppll[1]];
	let mpll = M.dims.meters_per_ll = [d.meters[0] / d.latlng[1], d.meters[1] / d.latlng[0]];
	M.dims.ll_per_meters = [1 / mpll[1], 1 / mpll[0]];
}
function calc_maxdepth(maxnodes, rules) {
	let laus = rules.map(x => x.aus).join();
	let lwird = rules.map(x => x.wird).join();
	let naus = countAll(laus, 'ABF');
	let nwird = countAll(lwird, 'ABF');
	let ratio = nwird / naus;
	let pow = 2;
	while (Math.pow(ratio, pow) < maxnodes) pow++;
	return pow - 1;
}
function calc_reasonable_max(fen) {
	let allcards = [];
	for (const plname in fen.players) {
		let pl = fen.players[plname];
		allcards = allcards.concat(pl.hand);
	}
	let ncards = allcards.length;
	let nmax = Math.floor(ncards / 13) + 1;
	return nmax;
}
function calc_speed(oldgoal, newgoal) {
	let speed = Math.abs(newgoal - oldgoal) / 10;
	return speed;
}
function calc_stall_value(fen, plname) { let st = fen.players[plname].stall; if (isEmpty(st)) return 0; else return arrSum(st.map(x => ari_get_card(x).val)); }
function calc_syms(numSyms) {
	let n = numSyms, rows, realrows, colarr;
	if (n == 3) { rows = 2; realrows = 1; colarr = [1, 2]; }
	else if (n == 4) { rows = 2; realrows = 2; colarr = [2, 2]; }
	else if (n == 5) { rows = 3; realrows = 3; colarr = [1, 3, 1]; }
	else if (n == 6) { rows = 3.3; realrows = 3; colarr = [2, 3, 1]; }
	else if (n == 7) { rows = 3; realrows = 3; colarr = [2, 3, 2]; }
	else if (n == 8) { rows = 3.8; realrows = 4; colarr = [1, 3, 3, 1]; }
	else if (n == 9) { rows = 4; realrows = 4; colarr = [2, 3, 3, 1]; }
	else if (n == 10) { rows = 4; realrows = 4; colarr = [2, 3, 3, 2]; }
	else if (n == 11) { rows = 4.5; realrows = 4; colarr = [2, 3, 4, 2]; }
	else if (n == 12) { rows = 5; realrows = 5; colarr = [1, 3, 4, 3, 1]; }
	else if (n == 13) { rows = 5; realrows = 5; colarr = [2, 3, 4, 3, 1]; }
	else if (n == 14) { rows = 5; realrows = 5; colarr = [2, 3, 4, 3, 2]; }
	else if (n == 15) { rows = 5.5; realrows = 5; colarr = [2, 3, 5, 3, 2]; }
	else if (n == 16) { rows = 5.5; realrows = 5; colarr = [2, 3, 5, 4, 2]; }
	else if (n == 17) { rows = 5.5; realrows = 5; colarr = [2, 4, 5, 4, 2]; }
	else if (n == 18) { rows = 5.8; realrows = 5; colarr = [2, 4, 5, 4, 3]; }
	return [rows, realrows, colarr];
}
function calcAddressWithin(o, addr, R) {
	if (!o) return addr;
	if (isLiteral(addr)) {
		if (isString(addr)) {
			if (addr[0] != '.') return addr;
			let props = addr.split('.').slice(1);
			if (props.length == 1 && isEmpty(props[0])) {
				console.log('ERROR!!!!!!!! sollte abgefangen werden!!!! props empty!')
				return o;
			} else if (props.length == 1) {
				return { key: props[0], obj: o };
			}
			else {
				let key = arrLast(props);
				let len = props.length;
				let props1 = props.slice(0, len - 1);
				return { key: key, obj: dPP(o, props1, R) };
			}
		} else {
			return addr;
		}
	}
	else if (isDict(addr)) {
		let content = {};
		for (const k in addr) {
			let c = calcAddressWithin(o, addr[k], R);
			if (c) content[k] = c;
		}
		return content;
	} else if (isList(addr)) {
		let content = addr.map(x => calcAddressWithin(o, x, R));
		return content;
	}
	return null;
}
function calcAristoHandValue(cards) {
	let ranks = cards.map(x => x % 13);
	let total = 0;
	for (const rank of ranks) { total += Math.min(10, rank + 1); }
	return total;
}
function calcBoardDimensions(nuiBoard, R) {
	let boardInfo = nuiBoard.bi.board.info;
	let bParams = nuiBoard.params;
	let fSpacing = bParams.field_spacing;
	if (nundef(fSpacing)) nuiBoard.params.field_spacing = fSpacing = 60;
	let margin = isdef(bParams.padding) ? bParams.padding : 0;
	let gap = fSpacing - nuiBoard.params.sizes.f;
	let [fw, fh] = [fSpacing / boardInfo.wdef, fSpacing / boardInfo.hdef];
	let cornerSize = isEmpty(nuiBoard.bi.corners) ? 0 : isdef(bParams.corners) ? bParams.corners.size : 15;
	let [wBoard, hBoard] = [fw * boardInfo.w + cornerSize, fh * boardInfo.h + cornerSize];
	let [wTotal, hTotal] = [wBoard + 2 * margin, hBoard + 2 * margin];
	nuiBoard.wTotal = wTotal;
	nuiBoard.hTotal = hTotal;
	nuiBoard.wBoard = wBoard;
	nuiBoard.hBoard = hBoard;
	nuiBoard.fSpacing = fSpacing;
	nuiBoard.fw = fw;
	nuiBoard.fh = fh;
	nuiBoard.gap = gap;
	nuiBoard.fSize = fSpacing - gap;
}
function calcBoardDimensionsX(nuiBoard, R) {
	let boardInfo = nuiBoard.bi.board.info;
	let bParams = nuiBoard.params;
	let fSpacing = bParams.field_spacing;
	if (nundef(fSpacing)) nuiBoard.params.field_spacing = fSpacing = 60;
	let margin = isdef(bParams.padding) ? bParams.padding : 0;
	let gap = fSpacing - nuiBoard.params.sizes.f;
	let [fw, fh] = [fSpacing / boardInfo.wdef, fSpacing / boardInfo.hdef];
	let cornerSize = isEmpty(nuiBoard.bi.corners) ? 0 : nuiBoard.params.sizes.c;
	let [wBoard, hBoard] = [fw * boardInfo.w + cornerSize, fh * boardInfo.h + cornerSize];
	let [wTotal, hTotal] = [wBoard + 2 * margin, hBoard + 2 * margin];
	nuiBoard.wTotal = wTotal;
	nuiBoard.hTotal = hTotal;
	nuiBoard.wBoard = wBoard;
	nuiBoard.hBoard = hBoard;
	nuiBoard.fSpacing = fSpacing;
	nuiBoard.fw = fw;
	nuiBoard.fh = fh;
	nuiBoard.gap = gap;
	nuiBoard.fSize = fSpacing - gap;
}
function calcContent_dep(oid, o, path) {
	if (isString(path)) {
		if (path[0] != '.') return path;
		let props = path.split('.').slice(1);
		let content = isEmpty(props) ? o.obj_type : lookup(o, props);
		return content;
	} else if (isDict(path)) {
		let content = {};
		for (const k in path) {
			let c = calcContent_dep(oid, o, path[k]);
			if (c) content[k] = c;
		}
		return content;
	}
	return null;
}
function calcContentFromData(oid, o, data, R, default_data) {
	if (!o) return data;
	if (isLiteral(data)) {
		if (isString(data)) {
			if (data[0] != '.') return data;
			let props = data.split('.').slice(1);
			if (props.length == 1 && isEmpty(props[0])) return o;
			else {
				let res = dPP1(o, props, R);
				if (isdef(res)) return res;
			}
		} else {
			return data;
		}
	}
	else if (isDict(data)) {
		let content = {};
		for (const k in data) {
			let c = calcContentFromData(oid, o, data[k], R);
			if (isdef(c)) content[k] = c;
		}
		return content;
	} else if (isList(data)) {
		let content = data.map(x => calcContentFromData(oid, o, x, R));
		return content;
	}
	if (isdef(default_data)) {
		let finalRes = calcContentFromData(oid, o, default_data, R);
		return finalRes;
	} else return null;
}
function calcCycles(R) {
	let oids = jsCopy(R.locOids);
	let cycles = R.partitions = {};
	let oid2partition = R.oid2partition = {};
	let cid;
	while (!isEmpty(oids)) {
		let oid = oids[0];
		cid = getUID();
		let c = cycles[cid] = { isCycle: false, oids: [] };
		while (true) {
			if (c.oids.includes(oid)) {
				c.isCycle = true;
				break;
			}
			if (isdef(oid2partition[oid])) {
				let cid2 = oid2partition[oid];
				let c2 = cycles[cid2];
				c.oids.map(x => oid2partition[x] = cid2);
				c2.oids = c.oids.concat(c2.oids);
				c = c2;
				delete cycles[cid];
				break;
			} else {
				c.oids.push(oid);
				oid2partition[oid] = cid;
			}
			removeInPlace(oids, oid);
			let o = R.getO(oid);
			if (nundef(o.loc)) break;
			oid = o.loc;
		}
	}
	for (const k in R.partitions) {
		let c = R.partitions[k];
		c.oids.reverse();
		let removed;
		if (!c.isCycle) { removed = c.oids.shift(); }
		for (const oid of c.oids) {
			if (nundef(R.getO(oid)).loc) {
				alert('SORT CYCLES SAFETY CHECK FAILED! no loc in ' + oid);
			}
		}
		if (isdef(removed && isdef(R.getO(removed)).loc)) {
			alert('SORT CYCLES SAFETY CHECK FAILED! removed has loc' + removed);
		}
	}
}
function calcDimsAndSize(cols, lines, dParent, wmax, hmax) {
	let ww, wh, hpercent, wpercent;
	if (isdef(dParent)) {
		let b = getBounds(dParent);
		ww = b.width;
		wh = b.height;
		hpercent = .9;
		wpercent = .9;
	} else if (isdef(wmax) && isdef(hmax)) {
		ww = wmax;
		wh = hmax;
		hpercent = .6;
		wpercent = .6;
	} else {
		ww = window.innerWidth;
		wh = window.innerHeight;
		hpercent = .56;
		wpercent = .64;
	}
	let sz, picsPerLine;
	if (lines > 1) {
		let hpic = wh * hpercent / lines;
		let wpic = ww * wpercent / cols;
		sz = Math.min(hpic, wpic);
		picsPerLine = cols;
	} else {
		let dims = calcRowsColsX(cols);
		let hpic = wh * hpercent / dims.rows;
		let wpic = ww * wpercent / dims.cols;
		sz = Math.min(hpic, wpic);
		picsPerLine = dims.cols;
	}
	pictureSize = Math.max(50, Math.min(sz, 200));
	return [pictureSize, picsPerLine];
}
function calcFieldGaps(sz) {
	sz = Number(sz);
	let s = G.settings;
	s.wGap = s.dxCenter - sz;
	s.hGap = s.dyCenter - sz;
	G.clientBoard = applySettings(G.clientBoard, s);
}
function calcIdUiParent(n, R, uidParent) {
	if (uidParent && isBoardMember(uidParent, R)) {
		let divParent = findAncestorElemOfType(mBy(uidParent), 'div');
		n.idUiParent = divParent.id;
	} else {
		n.idUiParent = uidParent;
	}
}
function calcLayoutParameters(s, b, scale = 1) {
	let [layout, horDist, vertDist, rows, cols] = [s.boardLayout, s.dxCenter, s.dyCenter, s.rows, s.cols];
	let isHexLayout = startsWith(layout, 'hex');
	let hline = isHexLayout ? vertDist * .75 : vertDist;
	if (nundef(rows) || layout == 'circle') rows = Math.floor(s.hFieldArea / hline);
	if (nundef(cols) || layout == 'circle') cols = Math.floor(s.wFieldArea / horDist)
	let [centers, wNeeded, hNeeded] = getCentersFromRowsCols(layout, rows, cols, horDist, vertDist);
	s.nFields = centers.length;
	[b.nFields, b.wNeeded, b.hNeeded, b.centers] = [s.nFields, wNeeded, hNeeded, centers];
	[b.layout, b.rows, b.cols, b.dxCenter, b.dyCenter, b.hline] = [s.boardLayout, rows, cols, horDist, vertDist, hline];
	if (scale != 1) {
		for (const c of centers) {
			c.x = c.x * scale;
			c.y = c.y * scale;
		}
		b.wNeeded *= scale;
		b.hNeeded *= scale;
		b.dxCenter *= scale;
		b.dyCenter *= scale;
		b.hline *= scale;
	}
	return s.nFields;
}
function calcMainVisualPosCenterInGameArea(mobj) {
	let area = UIS['a_d_game'];
	let parent = UIS[mobj.idParent];
	if (nundef(parent.x)) parent = UIS[parent.idParent];
	let offX = 0;
	let offY = 0;
	if (mobj.cat == 'g') { offX = parent.w / 2; offY = parent.h / 2; }
	let x = offX + parent.x + mobj.x;
	let y = offY + parent.y + mobj.y;
	return { x: x, y: y };
}
function calcMemorizingTime(numItems, randomGoal = true) {
	let ldep = Math.max(6, randomGoal ? numItems * 2 : numItems);
	return ldep;
}
function calcNFields(s) {
	let [layout, wCell, hCell, rows, cols] = [s.boardLayout, s.dxCenter, s.dyCenter, s.rows, s.cols];
	let boardSize = { w: s.wFieldArea, h: s.hFieldArea };
	let [w, h] = [boardSize.w, boardSize.h];
	if (layout == 'circle') {
		let hline = layout == 'circle' ? hCell * 1.2 : layout == 'hex' ? hCell * .78 : hCell;
		rows = Math.floor(h / hline);
		cols = Math.floor(w / wCell);
	}
	let n;
	if (layout == 'hex1') {
		let colarr = _calc_hex_col_array(rows, cols);
		n = arrSum(colarr);
	} else if (layout == 'quad') {
		n = rows * cols;
	} else if (layout == 'hex') {
		console.log('rows', rows, 'cols', cols)
		let [cs, wn, hn] = hexCenters(rows, cols, wCell, hCell);
		n = cs.length;
	} else if (layout == 'circle') {
		let [cs, wn, hn] = circleCenters(rows, cols, wCell, hCell);
		n = cs.length;
	}
	return n;
}
function calcNumRowsFitting(dParent, maxHeight, html) {
	let sz = getTextSize(html, dParent);
	return maxHeight / (sz.h + 2);
}
function calcParentContentYOffsetAndWidth(n, parentPadding) {
	let y0 = 0;
	let wTitle = 0;
	if (isdef(n.content)) {
		let uiParent = n.ui;
		let cont = uiParent.firstChild;
		let b = getBounds(cont, true);
		wTitle = b.width;
		if (isdef(n.params.padding)) wTitle += 2 * n.params.padding;
		y0 = parentPadding + b.top + b.height + parentPadding;
	} else y0 = parentPadding;
	return [y0, wTitle];
}
function calcRays(n, gParent, R) {
	if (n.params.dray) {
		let ui = n.ui;
		let buid = n.uidParent;
		let b = R.rNodes[buid];
		let bui = R.UIS[buid];
		let size = 20;
		let fsp = bui.params.field_spacing;
		let info = n.info;
		let x = info.x * fsp;
		let y = info.y * fsp;
		let w = size;
		let h = size;
		let D = distance(0, 0, x, y);
		let p = n.params.dray;
		let rel = p.rel;
		let nanc = n;
		if (rel == 'ancestor') {
			console.log('haaaaaaaaaaaaaaaaalllllllllllllllooooooooooooo')
			while (true) {
				nanc = R.rNodes[nanc.uidParent];
				if (nundef(nanc) || nundef(nanc.oid)) { nanc = null; break; }
				let o = R.getO(nanc.oid);
				let conds = p.cond;
				let tf = evalConds(o, conds);
				if (tf) { break; }
			}
		}
		let by = p.by;
		nby = isNumber(by) ? by : firstNumber(by);
		if (isString(by) && by[by.length - 1] == '%') {
			nby = nby * size / 100;
		}
		let elem = isdef(nanc) ? nanc : rel == 'parent' ? gParent : ui;
		let norm = nby / D;
		let xdisp = x * norm;
		let ydisp = y * norm;
		let txt = n.label.texts;
		let el = n.label.texts[0].ui;
		el.setAttribute('x', xdisp);
		el.setAttribute('y', ydisp);
		if (isdef(n.label.textBackground)) {
			if (n.params.bgText) {
				let tb = n.label.textBackground;
				let tbb = getBounds(tb);
				let origX = tb.getAttribute('x');
				let newX = origX + xdisp;
				tb.setAttribute('x', xdisp - tbb.width / 2);
				let origY = tb.getAttribute('y');
				let newY = origY + ydisp;
				tb.setAttribute('y', ydisp - tbb.height * 4 / 5);
			} else {
				n.label.textBackground.remove();
				delete n.label.textBackground;
			}
		}
	}
}
function calcRowsCols(num, rows, cols) {
	let shape = 'rect';
	if (isdef(rows) && isdef(cols)) {
	} else if (isdef(rows)) {
		cols = Math.ceil(num / rows);
	} else if (isdef(cols)) {
		rows = Math.ceil(num / cols);
	} else if (num == 2) {
		rows = 1; cols = 2;
	} else if ([4, 6, 9, 12, 16, 20, 25, 30, 36, 42, 29, 56, 64].includes(num)) {
		rows = Math.floor(Math.sqrt(num));
		cols = Math.ceil(Math.sqrt(num));
	} else if ([3, 8, 15, 24, 35, 48, 63].includes(num)) {
		let lower = Math.floor(Math.sqrt(num));
		console.assert(num == lower * (lower + 2), 'RECHNUNG FALSCH IN calcRowsCols');
		rows = lower;
		cols = lower + 2;
	} else if (num > 1 && num < 10) {
		shape = 'circle';
	} else if (num > 16 && 0 == num % 4) {
		rows = 4; cols = num / 4;
	} else if (num > 9 && 0 == num % 3) {
		rows = 3; cols = num / 3;
	} else if (0 == num % 2) {
		rows = 2; cols = num / 2;
	} else {
		rows = 1; cols = num;
	}
	return { rows: rows, cols: cols, recommendedShape: shape };
}
function calcRowsColsSizeAbWo(n, wmax, hmax, showLabels, wimax = 200, himax = 200, fw = 1, fh = 1) {
	let rows = n > 35 ? 6 : n > 28 ? 5 : n > 24 && !showLabels || n > 21 ? 4 : n > 8 ? 3 : n > 3 ? 2 : 1;
	let cols = Math.ceil(n / rows);
	return calcSizeAbWo(n, rows, cols, wmax, hmax, wimax, himax, fw, fh);
}
function calcRowsColsX(num) {
	const table = {
		2: { rows: 1, cols: 2 },
		5: { rows: 2, cols: 3 },
		7: { rows: 2, cols: 4 },
		11: { rows: 3, cols: 4 },
	};
	if (isdef(table[num])) return table[num]; else return calcRowsCols(num);
}
function calcScreenSizeNeeded() {
	if (nundef(bodyZoom)) bodyZoom = 1.0;
	let wAreas = ['a_d_actions', 'a_d_game', 'a_d_player', 'a_d_log'];
	let wTotal = 0;
	let wTotal2 = 0;
	for (const a of wAreas) {
		let mobj = UIS[a];
		let b = getBounds(mobj.elem);
		let wIst = Math.round(b.width / bodyZoom);
		wTotal2 += wIst;
	}
	let hAreas = ['a_d_header', 'a_d_status', 'a_d_game', 'a_d_buttons'];
	let hTotal = 0;
	let hTotal2 = 0;
	for (const a of hAreas) {
		let mobj = UIS[a];
		let hSoll = mobj.h;
		hTotal += hSoll;
		let b = getBounds(mobj.elem);
		let hIst = Math.round(b.height);
		hTotal2 += hIst;
	}
	return (window.innerWidth * 100) / wTotal2;
}
function calcSizeAbWo(n, rows, cols, wmax, hmax, wimax = 200, himax = 200, fw = 1, fh = 1) {
	if (nundef(cols)) cols = Math.ceil(n / rows); else if (nundef(rows)) rows = Math.ceil(n / cols);
	let wi = wmax * fw / cols;
	let hi = hmax * fh / rows;
	wi = Math.min(wi, wimax);
	hi = Math.min(hi, himax);
	return [wi, hi, rows, cols];
}
function calcSizeMeasured(n, R) {
	if (isdef(n.info)) {
		return { w: n.info.size, h: n.info.size };
	} else if (n.type == 'grid') {
		calcBoardDimensions(n, R);
		return { w: n.wTotal, h: n.hTotal };
	} else if (n.type == 'hand' || n.ui.style.display == 'flex' && isdef(n.children)) {
		return { w: 0, h: 0 };
	} else {
		let b = getBounds(n.ui, true);
		return { w: b.width, h: b.height };
	}
}
function calcSnailPositions(x, y, d, n) {
	let p = { x: x, y: y };
	let res = [p];
	let step = 1;
	let k = 1;
	while (true) {
		for (i = 0; i < step; i++) {
			if (k < n) {
				p = mup(null, p, d);
				res.push(p);
				k += 1;
			} else return res;
		}
		for (i = 0; i < step; i++) {
			if (k < n) {
				p = mri(null, p, d);
				res.push(p);
				k += 1;
			} else return res;
		}
		step += 1;
		for (i = 0; i < step; i++) {
			if (k < n) {
				p = mdo(null, p, d);
				res.push(p);
				k += 1;
			} else return res;
		}
		for (i = 0; i < step; i++) {
			if (k < n) {
				p = mle(null, p, d);
				res.push(p);
				k += 1;
			} else return res;
		}
		step += 1;
	}
}
function calcStallOrder(players) {
	for (const pl of players) {
		pl.stallValue = calcAristoHandValue(pl.stall);
	}
	let stallOrder = players.map(x => ({ stallValue: x.stallValue, index: x.index }));
	let plSorted = sortBy(stallOrder, 'stallValue').map(x => x.index);
	return plSorted;
}
function calcTotalDims(n, uids, R) {
	let hMax = 0;
	let margin = isdef(n.params.margin) ? n.params.margin : 0;
	let wTotal = margin;
	for (const ch of uids) {
		let n1 = R.uiNodes[ch];
		let w = n1.size.w;
		let h = n1.size.h;
		hMax = Math.max(hMax, h);
		wTotal += w + margin;
	}
	return { w: wTotal, h: hMax + 2 * margin, margin: margin };
}
function calculateColorDifference(color1, color2) {
	const rDifference = Math.pow(color2.r - color1.r, 2);
	const gDifference = Math.pow(color2.g - color1.g, 2);
	const bDifference = Math.pow(color2.b - color1.b, 2);
	return rDifference + gDifference + bDifference;
}
function calculateDaysBetweenDates(begin, end) {
	var oneDay = 24 * 60 * 60 * 1000;
	var firstDate = new Date(begin);
	var secondDate = new Date(end);
	var diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime()) / (oneDay)));
	return diffDays;
}
function calculateDims(n, sz = 60, minRows = 1) {
	var rows = minRows;
	var cols = Math.ceil(n / rows);
	var gap = 10;
	var padding = 20;
	let w = 9999999;
	testHelpers('calculateDims with:', rows, cols);
	let rOld = 0;
	while (true) {
		rOld = rows;
		for (var i = Math.max(2, rows); i < n / 2; i++) {
			if (n % i == 0) {
				rows = i;
				cols = n / i;
				break;
			}
		}
		w = padding * 2 - gap + (sz + gap) * cols;
		if (w > window.innerWidth) {
			if (rows == rOld) {
				rows += 1;
				cols = Math.ceil(n / rows);
			} else if (gap > 1) gap -= 1;
			else if (padding > 1) padding -= 2;
			else {
				minRows += 1;
				gap = 6;
				padding = 10;
			}
		} else break;
		if (rows == rOld) break;
	}
	return { rows: rows, cols: cols, gap: gap, padding: padding, width: w };
}
function calculateTopLevelGElement(el) {
	while (el && el.parentNode) {
		let t = getTypeOf(el);
		let tParent = getTypeOf(el.parentNode);
		if (tParent == 'svg') break;
		el = el.parentNode;
	}
	return el;
}
function call_answer(i) { call_func('a' + i); }
function call_func(name) { let f = window[name]; f(); }
function call_question(i) { call_func('q' + i); }
function Camera(scene) {
	this.canvas = scene.canvas;
	this.context = this.canvas.getContext("2d");
	this.cHeight = parseInt(this.canvas.height);
	this.cWidth = parseInt(this.canvas.width);
	this.cameraOffsetX = 0;
	this.cameraOffsetY = 0;
	this.target = false;
	this.waitX = 0;
	this.waitY = 0;
	this.focalPointX = 0;
	this.focalPointY = 0;
	this.moveCamera = function (x, y) {
		this.cameraOffsetX += x;
		this.cameraOffsetY += y;
	}
	this.followSprite = function (sprite, waitX, waitY) {
		this.target = sprite;
		if (typeof waitX != "undefined") {
			this.waitX = waitX;
			this.waitY = waitY;
		}
	}
	this.update = function () {
		this.focalPointX = this.cameraOffsetX + this.cWidth / 2;
		this.focalPointY = this.cameraOffsetY + this.cHeight / 2;
		if (this.target && !this.checkFocusBounds()) {
			this.cameraOffsetX = this.target.x + (this.target.width / 2) - (this.cWidth / 2) + this.waitX;
			this.cameraOffsetY = this.target.y + (this.target.height / 2) - (this.cHeight / 2) + this.waitY;
		}
	}
	this.checkFocusBounds = function () {
		centerX = this.target.x + (this.target.width / 2);
		centerY = this.target.y + (this.target.height / 2);
		if (Math.abs(this.focalPointX - centerX) >= this.waitX) { return false; }
		if (Math.abs(this.focalPointY - centerY) >= this.waitY) { return false; }
		else { return true; }
	}
}
function canAct() { return (aiActivated || uiActivated) && !auxOpen; }
function canAIAct() { return aiActivated && !auxOpen; }
function cancel_game() { iClear('dMenu'); }
function cancelDD() {
	DragElem.remove();
	DragElem = DragSource = DragSourceItem = DropZoneItem = null;
}
function canHumanAct() { return uiActivated && !auxOpen; }
function cap_each_word(s) {
	let arr = s.split(' ');
	let res = '';
	for (const a of arr) { res += capitalize(a) + ' '; }
	return res.slice(0, -1);
}
function capitalize(s) {
	if (typeof s !== 'string') return '';
	return s.charAt(0).toUpperCase() + s.slice(1);
}
function capitals_in_red(feature) {
	console.log('feature data', feature.data);
	let type = lookup(feature, ['data', 'type']);
	console.log('city', lookup(feature, ['data', 'name']), ':', type)
	return type == 'capital' ? 'red' : 'yellow';
}
function CAPTURED(m) { return (((m) >> 14) & 0xF); }
function Card(img, bunch, id, reverse) {
	var self = this;
	this.img = img;
	this.bunch = bunch;
	this.id = id;
	this.reverse = reverse;
	this.suit = Math.floor(id / self.bunch.board.deck.cardSuit);
	this.number = Math.floor(id % self.bunch.board.deck.cardSuit) + 1;
	this.color = Math.floor(id / self.bunch.board.deck.cardSuit) % 2;
	this.img.card = self;
	this.onDblClick = function () {
		self.reverse ? self.bunch.onDblClickReverse(self) : self.bunch.onDblClickCard(self);
	}
	this.flip = function () {
		self.reverse = !self.reverse;
		self.img.src = self.bunch.board.deck.cardSrc(self.id, self.reverse);
	}
	this.moveTo = function (bunch) {
		self.bunch = bunch;
		self.img.style.zIndex = self.bunch.cardZIndex();
		self.img.style.left = String(self.bunch.cardLeft()) + "px";
		self.img.style.top = String(self.bunch.cardTop()) + "px";
		self.reverse = self.bunch.cardReverse();
		self.img.src = self.bunch.board.deck.cardSrc(self.id, self.reverse);
	}
}
function card123(oCard, w, h) {
	if (lookup(SPEC, ['typeMappings', 'card'])) {
		for (const k in SPEC.typeMappings.card) {
			oCard[k] = oCard[SPEC.typeMappings.card[k]];
		}
	}
	let el = cardFace(oCard, w, h);
	return el;
}
function card52(irankey, suit, w, h) {
	let rank = irankey;
	if (nundef(irankey) && nundef(suit)) {
		irankey = chooseRandom(Object.keys(c52));
		rank = irankey[5];
		suit = irankey[6];
	} else if (nundef(irankey)) {
		irankey = '2';
		suit = 'B';
	} else if (nundef(suit)) {
		if (isNumber(irankey)) irankey = getC52Key(iramkey);
		rank = irankey[5];
		suit = irankey[6];
	}
	console.log('rank', rank, 'suit', suit);
	if (rank == '10') rank = 'T';
	if (rank == '1') rank = 'A';
	if (nundef(suit)) suit = 'H'; else suit = suit[0].toUpperCase();
	let cardKey = 'card_' + rank + suit;
	let svgCode = c52[cardKey];
	svgCode = '<div>' + svgCode + '</div>';
	let el = createElementFromHTML(svgCode);
	if (isdef(h) || isdef(w)) { mSize(el, w, h); }
	return { rank: rank, suit: suit, key: cardKey, div: el };
}
function cardContent(card, { topLeft, topRight, bottomLeft, bottomRight, reverseBottom = false, title, footer, middle, text }) {
	let svg = card.firstChild;
	let div = card;
	card.style.setProperty('position', 'relative');
	card.style.setProperty('font-size', '3mm');
	topLeft = ['A', '2'];
	bottomRight = ['A', 2];
	middle = null;
	let gap = 2; let d;
	let fBL = reverseBottom ? posBLR : posBL;
	let fBR = reverseBottom ? posBRR : posBR;
	if (isdef(topLeft)) { d = mDiv(card); mGap(d, gap); posTL(d); asList(topLeft).map(x => mDiv(d).innerHTML = x); }
	if (isdef(topRight)) { d = mDiv(card); mGap(d, gap); posTR(d); asList(topRight).map(x => mDiv(d).innerHTML = x); }
	if (isdef(bottomLeft)) { d = mDiv(card); mGap(d, gap); fBL(d); asList(bottomLeft).map(x => mDiv(d).innerHTML = x); }
	if (isdef(bottomRight)) { d = mDiv(card); mGap(d, gap); fBR(d); asList(bottomRight).map(x => mDiv(d).innerHTML = x); }
	if (isdef(middle)) {
		d = mDiv(card); mSize(d, 50, 50, '%'); mFont(d, '7mm');
		let dContent = mDiv(d); dContent.innerHTML = middle; if (isdef(text)) posCICT(dContent); else posCIC(dContent);
	}
	if (isdef(text)) {
		d = mDiv(card); mSize(d, 80, 50, '%'); mFont(d, '1.8mm');
		let lines = 4; if (isdef(middle)) { posCICB(d); d.appendChild(document.createElement('hr')); } else { posCIC(d); lines = 8; }
		let dContent = mDiv(d); dContent.innerHTML = text; dContent.classList.add('textEllipsis4Lines'); dContent.style.setProperty('-webkit-line-clamp', lines);
	}
}
function cardFace({ cardKey, rank, suit, key } = {}, w, h) {
	let svgCode;
	if (isdef(cardKey)) {
		cardKey = 'card_' + cardKey;
		svgCode = isdef(c52[cardKey]) ? c52[cardKey] : testCards[cardKey];
		if (!svgCode) svgCode = vidCache.getRandom('c52');
	} else if (isdef(key)) {
		cardKey = key;
		svgCode = testCards[cardKey];
		if (!svgCode) svgCode = vidCache.getRandom('c52');
	} else {
		if (nundef(rank)) { rank = '2'; suit = 'B'; }
		if (rank == '10') rank = 'T';
		if (rank == '1') rank = 'A';
		if (nundef(suit)) suit = 'H';
		cardKey = 'card_' + rank + suit;
		svgCode = c52[cardKey];
	}
	svgCode = '<div>' + svgCode + '</div>';
	let el = createElementFromHTML(svgCode);
	if (isdef(h)) { mSize(el, w, h); }
	return el;
}
function cardFromInfo(info, h, w, ov) {
	let svgCode = C52[info.c52key];
	svgCode = '<div>' + svgCode + '</div>';
	let el = mCreateFrom(svgCode);
	h = valf(h, valf(info.h, 100));
	w = valf(w, h * .7);
	mSize(el, w, h);
	let res = {};
	copyKeys(info, res);
	copyKeys({ w: w, h: h, faceUp: true, div: el }, res);
	if (isdef(ov)) res.ov = ov;
	return res;
}
function cardGameTest01() {
	rAreas();
}
function cardGameTest02() {
	setBackgroundColor(null, 'random');
	mStyle(dTable, { h: 400, bg: 'black', padding: 10 });
	let SPEC = { layout: ['T', 'H A'], showAreaNames: true };
	let s = '';
	let m = [];
	for (const line of SPEC.layout) {
		s += '"' + line + '" ';
		let letters = line.split(' ');
		let arr = [];
		for (const l of letters) { if (!isEmpty(l)) arr.push(l); }
		m.push(arr);
	}
	console.log('m', m, '\ns', s); return;
}
function cardGameTest03_OK() {
	setBackgroundColor(null, 'random');
	mStyle(dTable, { h: 400, bg: 'black', padding: 10 });
	let dGrid = mDiv100(dTable, { display: 'inline-grid' });
	let layout = ['T', 'H A'];
	let x = createGridLayout(dGrid, layout);
	console.log('result', x);
	createAreas(dGrid, x, 'a');
}
function cardGameTest04() {
	setBackgroundColor(null, 'random');
	let dGrid = mDiv(dTable, { bg: 'red', w: '80%', h: 400, padding: 10, display: 'inline-grid', rounding: 10 }, 'dGrid');
	let layout = ['T', 'H A'];
	let x = createGridLayout(dGrid, layout);
	console.log('result', x);
	createAreas(dGrid, x, 'dGrid');
}
function cardGameTest05() {
	setBackgroundColor(null, 'random');
	let dGrid = mDiv(dTable, { gap: 10, bg: 'white', w: '80%', h: 400, padding: 10, display: 'inline-grid', rounding: 10 }, 'dGrid');
	let layout = ['T', 'H A'];
	let areaStyles = { bg: 'random', rounding: 6 };
	let contentStyles = { bg: 'dimgray', lowerRounding: 6 };
	let messageStyles = { bg: 'dimgray', fg: 'yellow' };
	let titleStyles = { family: 'AlgerianRegular', upperRounding: 6 };
	let areas = {
		T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles },
		H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles },
		A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles },
	};
	let x = createGridLayout(dGrid, layout);
	console.log('result', x);
	let items = [];
	for (const k in areas) {
		let item = areas[k];
		item.areaStyles['grid-area'] = k;
		let dCell = mTitledMessageDiv(item.title, dGrid, item.id, item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles)
		iRegister(item, item.id);
		iAdd(item, { div: dCell, dTitle: dCell.children[0], dMessage: dCell.children[1], dContent: dCell.children[2] });
		items.push(item);
	}
	return items;
}
function cardGameTest06_clean_OK() {
	setBackgroundColor(null, 'random');
	let dGrid = mDiv(dTable, { gap: 10, bg: 'white', w: '90%', hmin: 400, padding: 10, display: 'inline-grid', rounding: 10 }, 'dGrid');
	let layout = ['T', 'H A'];
	let areaStyles = { bg: 'green', rounding: 6 };
	let contentStyles = { lowerRounding: 6 };
	let messageStyles = { fg: 'yellow' };
	let titleStyles = { bg: 'dimgray', family: 'AlgerianRegular', upperRounding: 6 };
	let areas = {
		T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles },
		H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles },
		A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles },
	};
	areas.T.areaStyles.w = '100%';
	let x = createGridLayout(dGrid, layout);
	console.log('result', x);
	let items = [];
	for (const k in areas) {
		let item = areas[k];
		item.areaStyles['grid-area'] = k;
		let dCell = mTitledMessageDiv(item.title, dGrid, item.id, item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles)
		iRegister(item, item.id);
		iAdd(item, { div: dCell, dTitle: dCell.children[0], dMessage: dCell.children[1], dContent: dCell.children[2] });
		mCenterCenterFlex(diContent(item));
		mStyle(diContent(item), { gap: 10 });
		items.push(item);
	}
	return items;
}
function cardGameTest07() {
	let items = cardGameTest07_helper();
	for (let i = 0; i < 3; i++) {
		let arr = [0, 1, 2, 10, 11].map(x => 1 + (x + i * 13) % 52);
		let d = diContent(items[i]);
		let id = 'h' + i;
		iH00(arr, d, { bg: 'blue' }, id);
	}
}
function cardGameTest07_helper() {
	setBackgroundColor(null, 'random');
	let dGrid = mDiv(dTable, { gap: 10, bg: 'white', w: '90%', padding: 10, display: 'inline-grid', rounding: 10 }, 'dGrid');
	let layout = ['T', 'H A'];
	let areaStyles = { bg: 'green', rounding: 6 };
	let contentStyles = { lowerRounding: 6 };
	let messageStyles = { fg: 'yellow' };
	let titleStyles = { bg: 'dimgray', family: 'AlgerianRegular', upperRounding: 6 };
	let areas = {
		T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles },
		H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles },
		A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles },
	};
	let x = createGridLayout(dGrid, layout);
	console.log('result', x);
	let items = [];
	for (const k in areas) {
		let item = areas[k];
		item.areaStyles['grid-area'] = k;
		let dCell = mTitledMessageDiv(item.title, dGrid, item.id, item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles)
		iRegister(item, item.id);
		iAdd(item, { div: dCell, dTitle: dCell.children[0], dMessage: dCell.children[1], dContent: dCell.children[2] });
		mCenterCenterFlex(diContent(item));
		mStyle(diContent(item), { gap: 10 });
		items.push(item);
	}
	return items;
}
function cardGameTest08() {
	let state = {
		pl1: { hand: [1, 2, 3, 4, 5], trick: [[6]] },
		pl2: { hand: [11, 12, 13, 14, 15], trick: [[16]] },
	};
	let trick = arrFlatten(state.pl1.trick).concat(arrFlatten(state.pl2.trick));
	let pl1Hand = state.pl1.hand;
	let pl2Hand = state.pl2.hand;
	let arrs = [trick, pl1Hand, pl2Hand];
	let items = makeAreasKrieg(dTable);
	for (let i = 0; i < 3; i++) {
		let arr = arrs[i];
		let item = items[i];
		let d = diContent(item);
		let id = 'h' + i;
		iMessage(item, '');
		iH00(arr, d, { bg: 'blue' }, id);
	}
}
function cardGameTest09() {
	let state = {
		pl1: { hand: [1, 2, 3, 4, 5], trick: [[6], [7, 8, 9]] },
		pl2: { hand: [11, 12, 13, 14, 15], trick: [[16], [17, 18, 19]] },
	};
	let areaItems = makeAreasKrieg(dTable);
	presentState1(state, areaItems);
}
function cardHand(pool, loc, o, oid, path, omap) {
	let size = CARD_SZ;
	let [w, h, gap] = [size * .66, size, 4];
	let olist = mapOMap(omap, pool);
	if (isEmpty(olist)) return null;
	let uis = getUis(olist, sizedCard123(w, h));
	let area = stage2_prepArea(loc);
	let container = stage3_prepContainer(area); mColor(container, 'red')
	stage4_layout(uis, container, w, h, gap, layoutHand);
}
function cardInno(dParent, key) {
	if (nundef(key)) key = chooseRandom(Object.keys(Cinno));
	let cardInfo = Cinno[key];
	cardInfo.key = key;
	let sym = INNO.sym[cardInfo.type];
	let info = Syms[sym.key];
	let card = cBlank(dParent, { fg: 'black', bg: INNO.color[cardInfo.color], w: CSZ, h: CSZ * .65 });
	let [dCard, sz, szTitle, margin] = [iDiv(card), CSZ / 5, CSZ / 8, CSZ / 40];
	let [dTitle, dMain] = cTitleArea(card, szTitle);
	let d = mAddContent(dTitle, key, {
		patop: 4, bg: sym.bg, fg: 'white', h: szTitle, fz: szTitle * .7, align: 'center',
		position: 'relative'
	});
	mAddContent(d, cardInfo.age, { hpadding: szTitle / 4, float: 'right' });
	let s = mSym(sym.key, d, { hpadding: szTitle / 4, h: szTitle * .7, fg: sym.fg, float: 'left' });
	let positions = ['tl', 'bl', 'bc', 'br'];
	for (let i = 0; i < 4; i++) {
		let r = cardInfo.resources[i];
		let pos = positions[i];
		if (r in INNO.sym) { innoSym(r, dMain, sz, pos, margin); }
		else if (r == 'None') { innoAgeNumber(cardInfo.age, dMain, sz, pos, margin); }
		else if (isNumber(r)) { innoBonusNumber(r, dMain, sz, pos, margin); }
		else if (r == 'echo') { innoEcho(cardInfo.echo, dMain, sz, pos, margin); }
	}
	let box = mBoxFromMargins(dMain, 10, margin, sz + margin, sz + 2 * margin);
	mStyle(box, { align: 'left' });
	let text = '';
	for (const dog of cardInfo.dogmas) {
		console.log('text', cardInfo.type, sym);
		let t = startsWith(dog, 'I demand') ? ('I <b>demand</b>' + dog.substring(8)) : dog;
		text += `<span style="color:${sym.bg};font-family:${info.family}">${info.text}</span>` + '&nbsp;' + t + '<br>';
	}
	let t2 = innoText(text);
	box.onclick = (ev) => makeInfobox(ev, box, 2);
	mFillText(t2, box);
}
function cardInno1(key, wCard = 420) {
	if (nundef(key)) key = chooseRandom(Object.keys(Cinno));
	let f = wCard / 420;
	let [w, h, szSym, paSym, fz, pa, bth, vGapTxt, rnd, gap] = [420 * f, 200 * f, 100 * f, 8 * f, 100 * f * .8, 20 * f, 4 * f, 8 * f, 10 * f, 6 * f].map(x => Math.ceil(x));
	let info = Cinno[key];
	info.key = key;
	let cdict = { red: RED, blue: 'royalblue', green: 'green', yellow: 'yelloworange', purple: 'indigo' };
	info.c = getColorDictColor(cdict[info.color]);
	let d = mDiv();
	mSize(d, w, h);
	mStyle(d, { fz: pa, margin: 8, align: 'left', bg: info.c, rounding: rnd, patop: paSym, paright: pa, pabottom: szSym, paleft: szSym + paSym, border: '' + bth + 'px solid silver', position: 'relative' })
	mText(info.key.toUpperCase(), d, { fz: pa, weight: 'bold', margin: 'auto' });
	mLinebreak(d);
	for (const dog of info.dogmas) {
		let text = replaceSymbols(dog);
		let d1 = mText(text, d);
		d1.style.marginBottom = '' + vGapTxt + 'px';
	}
	let syms = []; let d1;
	szSym -= gap;
	let sdict = {
		tower: { k: 'white-tower', bg: 'dimgray' }, clock: { k: 'watch', bg: 'navy' }, crown: { k: 'crown', bg: 'black' },
		tree: { k: 'tree', bg: GREEN },
		bulb: { k: 'lightbulb', bg: 'purple' }, factory: { k: 'factory', bg: 'red' }
	};
	for (const s in sdict) { sdict[s].sym = Syms[sdict[s].k]; }
	for (const sym of info.resources) {
		let isEcho = false;
		if (sym == 'None') {
			d1 = mDiv(d, { fz: fz * .75, fg: 'black', bg: 'white', rounding: '50%', display: 'inline' });
			let d2 = mText('' + info.age, d1, {});
			mClass(d2, 'centerCentered');
		} else if (sym == 'echo') {
			let text = info.echo;
			console.log('info.echo', info.echo);
			if (isList(info.echo)) text = info.echo[0];
			text = replaceSymbols(text);
			wEcho = szSym;
			let [w1, h1, w2, h2] = [wEcho, szSym, wEcho - 8, szSym - 8];
			d1 = mDiv(d, { display: 'inline', fg: 'white', bg: 'dimgray', rounding: 6, h: h1, w: w1 });
			let [bestFont, w3, h3] = fitFont(text, 20, w2, h2);
			let d2 = mDiv(d1, { w: w3, h: h3, fz: bestFont }, null, text);
			mCenterCenterFlex(d1);
			isEcho = true;
		} else if (isNumber(sym)) {
			d1 = mDiv(d, { fz: fz * .75, fg: 'white', bg: 'brown', border: '2px solid black', rounding: '50%', display: 'inline' });
			mCenterCenterFlex(d1);
			let d2 = mText('' + info.age, d1, {});
		} else {
			let key = sdict[sym].k;
			let mi = mPic(key, d, { w: szSym, fz: szSym * .8, bg: sdict[sym].bg, rounding: '10%' });
			d1 = iDiv(mi);
		}
		syms.push({ isEcho: isEcho, div: d1 });
	}
	placeSymbol(syms[0], szSym, gap, { left: 0, top: 0 });
	placeSymbol(syms[1], szSym, gap, { left: 0, bottom: 0 });
	placeSymbol(syms[2], szSym, gap, { left: w / 2, bottom: 0 });
	placeSymbol(syms[3], szSym, gap, { right: 0, bottom: 0 });
	info.div = d;
	return info;
}
function cardInnoSZ(key, wCard = 420) {
	if (nundef(key)) key = chooseRandom(Object.keys(cinno));
	let f = wCard / 420;
	let [w, h, szSym, paSym, fz, pa, bth, vGapTxt, rnd, gap] = [420 * f, 200 * f, 50 * f, 8 * f, 50 * f * .8, 20 * f, 4 * f, 8 * f, 10 * f, 6 * f].map(x => Math.ceil(x));
	let info = cinno[key];
	info.key = key;
	let cdict = { red: 'red1', blue: 'blue1', green: 'green1', yellow: 'yellow1', purple: 'purple' }
	info.c = colorDarker(ColorDict[cdict[info.color]].c, .6);
	let d = mDiv();
	mSize(d, w, h);
	mStyleX(d, { fz: pa, margin: 8, align: 'left', bg: info.c, rounding: rnd, patop: paSym, paright: pa, pabottom: szSym, paleft: szSym + paSym, border: '' + bth + 'px solid silver', position: 'relative' })
	mText(info.key.toUpperCase(), d, { fz: pa, weight: 'bold', margin: 'auto' });
	mLinebreak(d);
	for (const dog of info.dogmas) {
		console.log(dog);
		let d1 = mText(dog, d);
		d1.style.marginBottom = '' + vGapTxt + 'px';
	}
	let syms = []; let d1;
	szSym -= gap;
	let sdict = {
		tower: { k: 'white-tower', bg: 'dimgray' }, clock: { k: 'watch', bg: 'navy' }, crown: { k: 'crown', bg: 'black' },
		tree: { k: 'tree', bg: GREEN },
		bulb: { k: 'lightbulb', bg: 'purple' }, factory: { k: 'factory', bg: 'red' }
	};
	for (const sym of info.resources) {
		console.log(sym)
		if (sym == 'None') {
			console.log('age of card:', info.age)
			d1 = mDiv(d, { fz: fz * .75, fg: 'black', bg: 'white', rounding: '50%', display: 'inline' });
			let d2 = mText('' + info.age, d1, {});
			mClass(d2, 'centerCentered')
		} else if (sym == 'echo') {
		} else {
			console.log('ssssssssssssssssssssssss', sym)
			let key = sdict[sym].k;
			d1 = maPic(key, d, { w: szSym, bg: sdict[sym].bg, rounding: '10%' });
		}
		syms.push(d1);
	}
	mStyleX(syms[0], { position: 'absolute', w: szSym, h: szSym, left: 0, top: 0, margin: gap });
	mStyleX(syms[1], { position: 'absolute', w: szSym, h: szSym, left: 0, bottom: 0, margin: gap });
	mStyleX(syms[2], { position: 'absolute', w: szSym, h: szSym, left: w / 2, bottom: 0, margin: gap });
	mStyleX(syms[3], { position: 'absolute', w: szSym, h: szSym, right: 0, bottom: 0, margin: gap });
	info.div = d;
	return info;
	return 'hallo';
}
function cardInnoz(key, wCard = 420) {
	if (nundef(key)) key = chooseRandom(Object.keys(cinno));
	let f = wCard / 420;
	let [w, h, szSym, paSym, fz, pa, bth, vGapTxt, rnd, gap] = [420 * f, 200 * f, 50 * f, 8 * f, 50 * f * .8, 20 * f, 4 * f, 8 * f, 10 * f, 6 * f].map(x => Math.ceil(x));
	let info = cinno[key]; info.key = key;
	let cdict = { red: 'red1', blue: 'blue1', green: 'green1', yellow: 'yellow1', purple: 'purple' }
	info.c = colorDarker(ColorDict[cdict[info.color]].c, .6);
	let d = mDiv();
	mSize(d, w, h);
	mStyleX(d, { fz: pa, margin: 8, align: 'left', bg: info.c, rounding: rnd, patop: paSym, paright: pa, pabottom: szSym, paleft: szSym + paSym, border: '' + bth + 'px solid silver', position: 'relative' })
	mText(info.key.toUpperCase(), d, { fz: pa, weight: 'bold', margin: 'auto' });
	mLinebreak(d);
	for (const dog of info.dogmas) {
		let d1 = mText(dog, d);
		d1.style.marginBottom = '' + vGapTxt + 'px';
	}
	let syms = []; let d1;
	szSym -= gap;
	let sdict = {
		tower: { k: 'white-tower', bg: 'dimgray' }, clock: { k: 'watch', bg: 'navy' }, crown: { k: 'crown', bg: 'black' },
		tree: { k: 'tree', bg: GREEN },
		bulb: { k: 'lightbulb', bg: 'purple' }, factory: { k: 'factory', bg: 'red' }
	};
	for (const sym of info.resources) {
		if (sym == 'None') {
			d1 = { div: mDiv(d, { fz: fz * .75, w: szSym, h: szSym, fg: 'black', bg: 'white', rounding: '50%', display: 'inline' }) };
			let d2 = mText('' + info.age, d1.div, {});
			mClass(d2, 'centerCentered')
		} else if (sym == 'echo') {
		} else {
			let key = sdict[sym].k;
			d1 = zPic(key, d, { padding: 0, w: szSym, h: szSym, bg: sdict[sym].bg, rounding: '10%' });
		}
		syms.push(d1);
	}
	mStyleX(syms[0].div, { position: 'absolute', left: 0, top: 0, margin: gap });
	mStyleX(syms[1].div, { position: 'absolute', left: 0, bottom: 0, margin: gap });
	mStyleX(syms[2].div, { position: 'absolute', left: w / 2, bottom: 0, margin: gap });
	mStyleX(syms[3].div, { position: 'absolute', right: 0, bottom: 0, margin: gap });
	info.div = d;
	return info;
	return 'hallo';
}
function cardPattern(n, sym) {
	let di = {
		1: [sym],
		2: [[sym], [sym]],
		3: [[sym], [sym], [sym]],
		4: [[sym, sym], [sym, sym]],
		5: [[sym, sym], [sym], [sym, sym]],
		6: [[sym, sym], [sym, sym], [sym, sym]],
		7: [[sym, sym], [sym, sym, sym], [sym, sym]],
		8: [[sym, sym, sym], [sym, sym], [sym, sym, sym]],
		9: [[sym, sym, sym], [sym, sym, sym], [sym, sym, sym]],
		10: [[sym, sym, sym], [sym, sym, sym, sym], [sym, sym, sym]],
		11: [[sym, sym, sym, sym], [sym, sym, sym], [sym, sym, sym, sym]],
		12: [[sym, sym, sym, sym], [sym, sym, sym, sym], [sym, sym, sym, sym]],
		13: [[sym, sym, sym], [sym, sym], [sym, sym, sym], [sym, sym], [sym, sym, sym]],
		14: [[sym, sym, sym, sym], [sym, sym, sym, sym], [sym, sym, sym, sym]],
		15: [[sym, sym, sym, sym], [sym, sym, sym, sym], [sym, sym, sym, sym]],
	};
	return di[n];
}
function cards52GetRankFromName(name) {
	let rank;
	let n = firstNumber(name);
	if (isdef(n) && !isNaN(n)) rank = n;
	else {
		let ch = name.toLowerCase()[0];
		rank = ch == 'k' ? 13 : ch == 'q' ? 12 : 11;
	}
	return rank;
}
function cardZone(dParent, o, flex = 1, hmin = 170) {
	let dOuter = mDiv(dParent, { bg: o.color, fg: 'contrast', flex: flex, hmin: hmin }, 'd' + o.name, o.name);
	let dInner = mDiv(dOuter);
	mFlex(dInner); dInner.style.alignContent = 'flex-start';
	return dInner;
}
function carteset(l1, l2) {
	let res = [];
	for (var el1 of l1) {
		for (var el2 of l2) {
			if (isList(el1)) res.push(el1.concat(el2));
			else res.push([el1].concat(el2));
		}
	}
	return res;
}
function cartesi(l1, l2) {
	let res = [];
	for (var el1 of l1) {
		for (var el2 of l2) {
			res.push(el1.concat(el2));
		}
	}
	return res;
}
function cartesian(s1, s2, sep = '_') {
	let res = [];
	for (const el1 of s1) {
		for (const el2 of s2) {
			res.push(el1 + '_' + el2);
		}
	}
	return res;
}
function cartesianOf(ll) {
	let cart = ll[0];
	for (let i = 1; i < ll.length; i++) {
		cart = cartesian(cart, ll[i]);
	}
	return cart;
}
function catanBoard(dParent, rows, topcols, styles = {}) {
	let g = hex1Board(dParent, rows, topcols, styles);
	hexCornerNodes(g);
}
function catFiltered(cats, name, best) {
	let keys = setCategories(cats);
	let bestName = null;
	let k1 = keys.filter(x => best.includes(x));
	if (k1.length > 80) bestName = name + '100';
	else if (k1.length > 40) bestName = name + '50';
	else if (k1.length > 20) bestName = name + '25';
	let result = {};
	result[name] = keys;
	if (bestName) result[bestName] = k1;
	return result;
}
function cBlank(dParent, styles = {}, id) {
	if (nundef(styles.h)) styles.h = Card.sz;
	if (nundef(styles.w)) styles.w = styles.h * .7;
	if (nundef(styles.bg)) styles.bg = 'white';
	styles.position = 'relative';
	let [w, h, sz] = [styles.w, styles.h, Math.min(styles.w, styles.h)];
	if (nundef(styles.rounding)) styles.rounding = sz * .05;
	let d = mDiv(dParent, styles, id, null, 'card');
	let item = mItem(null, { div: d }, { type: 'card', sz: sz, rounding: styles.rounding });
	copyKeys(styles, item);
	return item;
}
function cBlankSvg(dParent, styles = {}) {
	if (nundef(styles.h)) styles.h = Card.sz;
	if (nundef(styles.w)) styles.w = styles.h * .7;
	if (nundef(styles.bg)) styles.bg = 'white';
	styles.position = 'relative';
	let [w, h, sz] = [styles.w, styles.h, Math.min(styles.w, styles.h)];
	if (nundef(styles.rounding)) styles.rounding = sz * .05;
	let d = mDiv(dParent, styles, null, null, 'card');
	let svg = mgTag('svg', d, { width: '100%', height: '100%' });
	let g = mgTag('g', svg);
	let item = mItem(null, { div: d, svg: svg, g: g }, { type: 'card', sz: sz });
	copyKeys(styles, item);
	return item;
}
function ccanvas(dParent, styles, bstyles, play, pause, origin = 'cc') {
	let o = mCanvas(dParent, styles, bstyles, play, pause);
	[this.cv, this.cx, this.play, this.pause] = [o.cv, o.cx, o.play, o.pause];
	let [w, h] = [this.w, this.h] = [this.cv.width, this.cv.height];
	this.defaultsize = 20;
	this.origin = cv_init_origin(this, origin);
	this.cx.translate(this.origin.x, this.origin.y);
	this.maxx = w - this.origin.x; this.minx = this.maxx - w;
	this.maxy = h - this.origin.y; this.miny = this.maxy - h;
	this.items = [];
}
function cCenterOrigin(cnv, ctx) {
	cSetOrigin(ctx, cnv.width / 2, cnv.height / 2);
}
function cCircle(c, sz, n, disp = -90) {
	let rad = sz / 2;
	centers = getEllipsePoints(rad, rad, n, disp)
	centers = centers.map(pt => ({ x: pt.X + c.x, y: pt.Y + c.y }));
	return centers;
}
function cClear(cnv = null, ctx = null) {
	if (nundef(cnv)) { cnv = CV; ctx = CX; if (!ctx) return; }
	ctx.save();
	ctx.setTransform(1, 0, 0, 1, 0, 0);
	ctx.clearRect(0, 0, cnv.width, cnv.height);
	ctx.restore();
}
function cColor(fill, cvx) { if (nundef(cvx)) cvx = CX; CX.fillStyle = fill; }
function cdf0(x) {
	function normal(x, mu, sigma) {
		return stdNormal((x - mu) / sigma);
	}
	function stdNormal(z) {
		var j, k, kMax, m, values, total, subtotal, item, z2, z4, a, b;
		if (z < -6) { return 0; }
		if (z > 6) { return 1; }
		m = 1;
		b = z;
		z2 = z * z;
		z4 = z2 * z2;
		values = [];
		for (k = 0; k < 100; k += 2) {
			a = 2 * k + 1;
			item = b / (a * m);
			item *= (1 - (a * z2) / ((a + 1) * (a + 2)));
			values.push(item);
			m *= (4 * (k + 1) * (k + 2));
			b *= z4;
		}
		total = 0;
		for (k = 49; k >= 0; k--) {
			total += values[k];
		}
		return 0.5 + 0.3989422804014327 * total;
	}
	return normal(x, 100, 15);
}
function cEllipse(x, y, w, h, styles = null, angle = 0, ctx = null) {
	if (nundef(ctx)) { ctx = CX; if (!ctx) return; }
	if (styles) cStyle(styles, ctx);
	ctx.beginPath();
	ctx.ellipse(x, y, w / 2, h / 2, -angle, 0, 2 * Math.PI);
	if (isdef(styles.bg) || nundef(styles.fg)) ctx.fill();
	if (isdef(styles.fg)) ctx.stroke();
}
function centerFit(d, child) {
	let bChild = getBounds(child);
	let b = getBounds(d);
	let padding = firstNumber(d.style.padding);
	let wdes = b.width;
	let hdes = b.height;
	let wdesChild = wdes - 2 * padding;
	let hdesChild = hdes - 2 * padding;
	let wChild = bChild.width;
	let hChild = bChild.height;
	let padx = Math.floor(padding + (wdesChild - bChild.width) / 2);
	let pady = Math.floor(padding + (hdesChild - bChild.height) / 2);
	d.style.padding = pady + 'px ' + padx + 'px';
}
function cha3(cities) {
	let list = rChoose(cities, 20);
	for (const o of list) {
		map_add_city(o);
	}
	console.log('source', ensure_city_layer().getSource().getFeatures().map(x => x.data.city_ascii));
}
function chainCancel() {
	CancelChain = true;
	clearTimeout(ChainTimeout);
	TaskChain = [];
	setTimeout(() => BlockChain = false, 100);
}
function chainEx(taskChain, onComplete, ifBlocked = 'wait', singleThreaded = true) {
	if (BlockChain) {
		console.log('chain blocked!')
		switch (ifBlocked) {
			case 'interrupt': CancelChain = true; setTimeout(() => chainEx(taskChain, onComplete, 'wait'), 300); break;
			case 'wait': setTimeout(() => chainEx(taskChain, onComplete, 'wait'), 300); break;
			case 'return': default://just drop it
		}
	} else {
		BlockChain = true;
		CancelChain = false;
		let akku = [];
		if (singleThreaded) {
			TaskChain = taskChain;
			_singleThreadedChainExRec(akku, onComplete);
		} else {
			_chainExRec(akku, taskChain, onComplete);
		}
	}
}
function chainSend(msgChain, callback) {
	let akku = [];
	this.chainSendRec(akku, msgChain, callback);
}
function chainSendRec(akku, msgChain, callback) {
	if (msgChain.length > 0) {
		_sendRoute(msgChain[0], d => {
			akku.push(d);
			this.chainSendRec(akku, msgChain.slice(1), callback)
		});
	} else {
		callback(akku);
	}
}
function chall4() {
	let caps = M.capitals;
	let list = caps;
	for (const o of list) {
		map_add_city(o);
		console.log('city', o)
	}
	console.log('source', ensure_city_layer().getSource().getFeatures().map(x => x.data.city_ascii));
}
function challenge0() {
	for (const o of arrTake(cities, 10)) {
		console.log('o', o)
		add_circle(Number(o.lng), Number(o.lat), M.map);
	}
}
async function challenge1() {
	let data = await route_path_json('../base/mapdata/gadm36_AUT_2.json');
	var mapOptions = {
		center: [48.3, 16.3],
		zoom: 10
	}
	var map = new L.map('map', mapOptions);
	var layer = new L.TileLayer(''); //http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
	map.addLayer(layer);
	geojson = L.geoJson(data, {}).addTo(map);
	for (const f of data.features) {
		let name = f.properties.NAME_2;
		let fpoly = single_poly_feature(f);
		let center = get_poly_center(fpoly);
		let p = get_circle(center).addTo(map);
		var marker = L.marker(center, { opacity: 0 });
		marker.addTo(map);
		marker.bindTooltip(f.properties.NAME_2, { direction: 'center', permanent: true, className: 'mylabel', offset: L.point({ x: -30, y: 30 }) });
	}
}
function challenge2() {
	let layer = map_add_layer('city', M.map);
	let feature = map_add_circle_to_layer(16, 48, layer);
	feature.data = { hallo: 'Vienna' };
	console.log('source', layer.getSource().getFeatures());
}
function change(arr, n) {
	for (let i = 0; i < n; i++) {
		let mobj = chooseRandom(arr);
	}
}
function change_parent_type_if_needed(n, R) {
	let uiNode = R.uiNodes[n.uid];
	if (!isContainerType(uiNode.type)) {
		uiNode.type = 'panel';
		uiNode.changing = true;
		let uidParent = n.uidParent;
		let area = uidParent ? uidParent : R.baseArea;
		let uiNew = createUi(uiNode, area, R, uiNode.defParams);
	}
}
function changeGameTo(id) {
	if (isdef(id) && id == Gamename) return;
	if (isdef(T)) { saveTable(); }
	loadGame(id);
	loadTable();
}
function changeTableTo(id) {
	id = id.toLowerCase();
	if (isdef(id) && id == Tablename) return;
	if (id != Tablename && isdef(T)) { saveTable(); }
	loadTable(id);
}
function changeTo(newListName) {
	var x = newListName;
	document.getElementById('List').value = "";
	document.getElementById('List').setAttribute('list', x);
}
function changeToForInput(newListName, elid, defaultVal) {
	var x = newListName;
	document.getElementById(elid).value = '';
	document.getElementById(elid).setAttribute('list', x);
}
function changeUserTo(name) {
	if (name != Username) { saveUser(); }
	mBy('spUser').innerHTML = name;
	loadUser(name);
	startUnit();
}
function chat_2handleResult(result) {
	result = JSON.parse(result);
	console.log('chat result:', result);
	ActiveChats[result.userdata.username] = result;
	activateChat(result.userdata.username);
}
function chatStartOrActivate() {
	if (nundef(DA.currentContact) && nundef(DA.activeChat)) {
		console.log('no current contact!');
	} else if (nundef(DA.currentContact)) {
		console.log('no current contact! - activate activeChat!');
		console.log('(nothing to do!)')
	} else if (DA.currentContact == DA.activeChat) {
		console.log('currentContact is already active', DA.currentContact);
		return;
	} else if (isdef(ActiveChats[DA.currentContact])) {
		console.log('messages have been loaded for', DA.currentContact, '- just activate');
		activateChat(DA.currentContact);
		console.log('if another contact was active, deactivate,');
		console.log('activate this new contact');
	} else {
		console.log('new data for', DA.currentContact, 'have to be requested from phphost!');
		let data = { username: Username, currentContact: DA.currentContact, data_type: 'chat' };
		get_request('chat', data);
	}
}
function cheatDevcard() { sendRoute('/cheat/devcard', runToDevdeckAction); }
function check_complete_set(fenlist) {
	if (fenlist.length != 3) return false;
	let [f1, f2, f3] = fenlist;
	console.log('set clicked', f1, f2, f3)
	for (let i = 0; i < f1.length; i++) {
		let [a, b, c] = [f1[i], f2[i], f3[i]];
		console.log('...set clicked', a, b, c)
		let correct = (a == b && b == c) || (a != b && b != c && a != c);
		if (!correct) return false;
	}
	return true;
}
function check_correct_journey(A, fen, uplayer) {
	let items = A.selected.map(x => A.items[x]);
	if (items.length < 2) {
		select_error('please select at least 2 items!'); return [null, null, null];
	}
	let carditems = items.filter(x => is_card(x));
	if (isEmpty(carditems)) {
		select_error('please select at least 1 card!'); return [null, null, null];
	} else if (items.length - carditems.length > 1) {
		select_error('please select no more than 1 journey!'); return [null, null, null];
	}
	let journeyitem = firstCond(items, x => !is_card(x));
	let cards = journeyitem ? jsCopy(journeyitem.o.list) : [];
	cards = cards.concat(carditems.map(x => x.o.key));
	let jlegal = is_journey(cards);
	if (!jlegal || jlegal.length != cards.length) {
		select_error('this is not a legal journey!!'); return [null, null, null];
	}
	return [carditems, journeyitem, jlegal];
}
function check_for_clicks() {
	let cur = get_bar_values();
	let clicks = get_clicks_from_playerdata();
	let newgoals = jsCopy(Z.fen), changed = false;
	for (const k in cur) {
		if (clicks[k] == 0) continue;
		changed = true;
		let newgoal = cur[k] + clicks[k] * 10;
		newgoals[k] = newgoal;
		set_new_goal(k, newgoal);
	}
	Z.fen = newgoals;
	if (changed) {
		phpPost({ friendly: 'feedback', fen: newgoals, newstate: { green: 0, red: 0 } }, 'update_fen');
	} else {
		autopoll();
	}
}
function check_id(specKey, node, R) {
	let akku = {};
	recFindProp(node, '_id', 'self', akku);
	for (const k in akku) { R.addToPlaces(specKey, akku[k], k); }
}
function check_if_church() {
	let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];
	let jacks = fen.market.filter(x => x[0] == 'J');
	let queens = fen.market.filter(x => x[0] == 'Q');
	for (const plname of plorder) {
		let pl = fen.players[plname];
		let pl_jacks = pl.stall.filter(x => x[0] == 'J');
		let pl_queens = pl.stall.filter(x => x[0] == 'Q');
		jacks = jacks.concat(pl_jacks);
		queens = queens.concat(pl_queens);
	}
	let ischurch = false;
	for (const j of jacks) {
		if (firstCond(queens, x => x[1] != j[1])) ischurch = true;
	}
	return ischurch;
}
function check_poll_bot_send_move(obj) {
	console.log('...bot check table status: ', lookup(obj, ['table', 'status']) ?? 'no obj.table.status!!!', obj);
	if (nundef(DA.poll)) return;
	else if (isdef(obj) && isdef(obj.table) && obj.table.status == 'over') {
		DA.poll.onsuccess(obj);
	} else {
		BotTicker = setTimeout(poll, DA.poll.ms);
	}
}
function check_poll_orig() {
	let p = DA.long_polling;
	if (nundef(p)) { console.log('no polling is active!'); return; }
	to_server(p.data, p.type);
}
function check_poll_table_seen(obj) {
	console.assert(isdef(obj.table), 'check_poll_table_seen NO TABLE!!!!');
	let t = obj.table;
	if (t.status == 'seen' || t.status == 'past') {
		DA.poll.onsuccess(obj);
	} else {
		TOTicker = setTimeout(poll, DA.poll.ms);
	}
}
function check_poll_table_show(obj) {
	if (isdef(obj) && !isEmpty(obj.table) && obj.table.status == 'show') {
		DA.poll.onsuccess(obj);
	} else {
		TOTicker = setTimeout(poll, DA.poll.ms);
	}
}
function check_poll_table_started(obj) {
	if (isdef(obj) && !isEmpty(obj.tables)) {
		DA.poll.onsuccess(obj);
	} else {
		let dcheck = document.getElementById('ddd_logout');
		if (!dcheck) {
			present_non_admin_waiting_screen();
		}
		TOTicker = setTimeout(poll, DA.poll.ms);
	}
}
function check_ref(specKey, node, R) {
	let akku = {};
	recFindProp(node, '_ref', 'self', akku);
	for (const k in akku) { R.addToRefs(specKey, akku[k], k); }
}
function check_resolve() {
	let can_resolve = true;
	for (const plname of Z.plorder) {
		let data1 = firstCond(Z.playerdata, x => x.name == plname && !isEmpty(x.state));
		if (nundef(data1)) { can_resolve = false; break; }
	}
	return can_resolve;
}
function CheckAndSet() {
	if (CheckResult() != BOOL.TRUE) {
		GameController.GameOver = BOOL.FALSE;
		$("#GameStatus").text('');
	} else {
		GameController.GameOver = BOOL.TRUE;
		GameController.GameSaved = BOOL.TRUE;
		let win = GameController.winner;
		lookupAddToList(GameController, ['games'], isdef(win) ? win : 0);
	}
	ShowFenPosition();
}
function checkArrowKeys(ev) {
	if (!ev.ctrlKey) return;
	if (ev.keyCode == '13' && boatHighlighted) onClickSelectTuple(null, boatHighlighted);
	else if (ev.keyCode == '38') _highlightPrevBoat();
	else if (ev.keyCode == '40') _highlightNextBoat();
	else if (ev.keyCode == '37') { }
	else if (ev.keyCode == '39') { }
}
function checkAvailable(i) {
	id = getidAvailable(i); document.getElementById(id).checked = true;
}
function CheckBoard() {
	var t_pceNum = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	var t_material = [0, 0];
	var sq64, t_piece, t_pce_num, sq120, colour, pcount;
	for (t_piece = PIECES.wP; t_piece <= PIECES.bK; ++t_piece) {
		for (t_pce_num = 0; t_pce_num < brd_pceNum[t_piece]; ++t_pce_num) {
			sq120 = brd_pList[PCEINDEX(t_piece, t_pce_num)];
			if (brd_pieces[sq120] != t_piece) {
				console.log('Error Pce Lists');
				return BOOL.FALSE;
			}
		}
	}
	for (sq64 = 0; sq64 < 64; ++sq64) {
		sq120 = SQ120(sq64);
		t_piece = brd_pieces[sq120];
		t_pceNum[t_piece]++;
		t_material[PieceCol[t_piece]] += PieceVal[t_piece];
	}
	for (t_piece = PIECES.wP; t_piece <= PIECES.bK; ++t_piece) {
		if (t_pceNum[t_piece] != brd_pceNum[t_piece]) {
			console.log('Error t_pceNum');
			return BOOL.FALSE;
		}
	}
	if (t_material[COLOURS.WHITE] != brd_material[COLOURS.WHITE] || t_material[COLOURS.BLACK] != brd_material[COLOURS.BLACK]) {
		console.log('Error t_material');
		return BOOL.FALSE;
	}
	if (brd_side != COLOURS.WHITE && brd_side != COLOURS.BLACK) {
		console.log('Error brd_side');
		return BOOL.FALSE;
	}
	if (GeneratePosKey() != brd_posKey) {
		console.log('Error brd_posKey');
		return BOOL.FALSE;
	}
	return BOOL.TRUE;
}
function checkBoardEmpty(arr) { for (const x of arr) { if (!empty_func(x)) return false; } return true; }
function checkBoardFull(arr) { for (const x of arr) if (empty_func(x)) return false; return true; }
function checkCleanup() {
	if (!S.vars.firstTime) {
		pageHeaderClearAll();
		restoreBehaviors();
		stopBlinking('a_d_status');
		openTabTesting('London');
		UIS['a_d_status'].clear({ innerHTML: '<div id="c_d_statusText">status</div>' });
		UIS['a_d_actions'].clear({ innerHTML: '<div id="a_d_divSelect" class="sidenav1"></div>' });
		let areaPlayer = isdef(UIS['a_d_player']) ? 'a_d_player' : isdef(UIS['a_d_players']) ? 'a_d_players' : 'a_d_options';
		for (const id of ['a_d_log', 'a_d_objects', areaPlayer, 'a_d_game']) clearElement(id);
		delete S.players;
	} else S.vars.firstTime = false;
}
function checkCleanup_I() {
	if (isdef(UIS)) {
		stopBlinking('a_d_status');
		hide('passToNextPlayerUI');
		hide('freezer');
		stopInteraction();
		clearLog();
		delete G.end;
		delete G.signals.receivedEndMessage;
		delete G.previousPlayer;
		delete G.player;
		collections = {};
		scenarioQ = [];
	}
}
function checkCleanup_II() {
	if (isdef(UIS)) {
		checkCleanup_I();
		pageHeaderClearAll();
		restoreBehaviors();
		openTabTesting('ObjectsTab');
		UIS['a_d_status'].clear({ innerHTML: '<div id="c_d_statusText">status</div>' });
		UIS['a_d_actions'].clear({ innerHTML: '<div id="a_d_divSelect" class="sidenav1"></div>' });
		let areaPlayer = isdef(UIS['a_d_player']) ? 'a_d_player' : isdef(UIS['a_d_players']) ? 'a_d_players' : 'a_d_options';
		for (const id of ['a_d_log', 'a_d_objects', areaPlayer, 'a_d_game']) clearElement(id);
	}
}
function checkCleanup_III() {
	if (isdef(UIS)) {
		checkCleanup_II();
		delete S.players;
	}
}
function checkControlKey(ev) {
	if (ev.key == 'Control') {
		isControlKeyDown = false;
		clearInfoboxes();
	}
}
function checkGameConfigComplete() {
	for (const pl of S.gameConfig.players) {
		if (isEmpty(pl.username)) return false;
	}
	return true;
}
function checkKey(superdi, key, type) {
	let types = ['const', 'var', 'cla', 'func'];
	let itype = types.indexOf(type);
	for (const t in superdi) {
		if (lookup(superdi, [t, key])) {
			let it = types.indexOf(t);
			if (itype > it) { delete superdi[t][key]; return type; }
			else if (it > itype) { return type == 'const' ? t : false; }
			else return type;
		}
	}
	return type;
}
function checkPlayer(i) {
	id = getidNum(i); document.getElementById(id).checked = true;
}
function checkPotentialTTT(arr, rows, cols) { return checkWinnerPossible(arr, rows, cols); }
function CheckResult() {
	if (brd_fiftyMove > 100) {
		$("#GameStatus").text("GAME DRAWN {fifty move rule}");
		return BOOL.TRUE;
	}
	if (ThreeFoldRep() >= 2) {
		$("#GameStatus").text("GAME DRAWN {3-fold repetition}");
		return BOOL.TRUE;
	}
	if (DrawMaterial() == BOOL.TRUE) {
		$("#GameStatus").text("GAME DRAWN {insufficient material to mate}");
		return BOOL.TRUE;
	}
	GenerateMoves();
	var MoveNum = 0;
	var found = 0;
	for (MoveNum = brd_moveListStart[brd_ply]; MoveNum < brd_moveListStart[brd_ply + 1]; ++MoveNum) {
		if (MakeMove(brd_moveList[MoveNum]) == BOOL.FALSE) {
			continue;
		}
		found++;
		TakeMove();
		break;
	}
	$("#currentFenSpan").text(BoardToFen());
	if (found != 0) return BOOL.FALSE;
	var InCheck = SqAttacked(brd_pList[PCEINDEX(Kings[brd_side], 0)], brd_side ^ 1);
	console.log('No Move Found, incheck:' + InCheck);
	if (InCheck == BOOL.TRUE) {
		if (brd_side == COLOURS.WHITE) {
			$("#GameStatus").text("GAME OVER {black mates}");
			GameController.winner = 'black';
			return BOOL.TRUE;
		} else {
			$("#GameStatus").text("GAME OVER {white mates}");
			GameController.winner = 'white';
			return BOOL.TRUE;
		}
	} else {
		$("#GameStatus").text("GAME DRAWN {stalemate}"); return BOOL.TRUE;
	}
	console.log('Returning False');
	return BOOL.FALSE;
}
function checkSudokuRule(matrix) {
	let i = 0;
	for (const arr of matrix) {
		let dd = hasDuplicate(arr);
		if (dd) {
			let err = { type: 'row', row: i, col: dd.i, val: dd.val, info: dd, i: i };
			return err;
		}
		i += 1;
	}
	i = 0;
	for (const arr of bGetCols(matrix)) {
		let dd = hasDuplicate(arr);
		if (dd) {
			let err = { type: 'column', col: i, row: dd.i, val: dd.val, i: i, info: dd };
			return err;
		}
		i += 1;
	}
	let [rows, cols] = [matrix.length, matrix[0].length];
	let rowsEach = rows == 9 ? 3 : 2;
	let colsEach = cols == 4 ? 2 : 3;
	let chunks = bGetChunksWithIndices(matrix, rowsEach, colsEach);
	i = 0;
	for (const arr of chunks) {
		let dd = hasDuplicate(arr);
		if (dd) {
			let val = dd.val;
			let err = { type: 'quadrant', row: val.row, col: val.col, val: val.val, i: i, info: dd };
		}
		i += 1;
	}
	return null;
}
function checkSudokuRule_trial1(matrix) {
	for (const arr of matrix) { let dd = hasDuplicate(arr); if (dd) return { type: 'row', info: dd }; }
	for (const arr of bGetCols(matrix)) { let dd = hasDuplicate(arr); if (dd) return { type: 'column', info: dd }; }
	let chunks = bGetChunks(matrix, 2, 2);
	for (const arr of chunks) { let dd = hasDuplicate(arr); if (dd) return { type: 'quadrant', info: dd }; }
	return null;
}
function checkTimer(G) { if (nundef(GameTimer)) return false; return GameTimer.check(G); }
function CheckUp() {
	if (($.now() - srch_start) > srch_time) srch_stop = BOOL.TRUE;
}
function checkWinner(arr, rows, cols) {
	for (i = 0; i < rows; i++) { let ch = bFullRow(arr, i, rows, cols); if (ch) return ch; }
	for (i = 0; i < cols; i++) { let ch = bFullCol(arr, i, rows, cols); if (ch) return ch; }
	let ch = bFullDiag(arr, rows, cols); if (ch) return ch;
	ch = bFullDiag2(arr, rows, cols); if (ch) return ch;
	return null;
}
function checkWinnerC4(arr, rows = 6, cols = 7, stride = 4) {
	for (i = 0; i < rows; i++) { let ch = bStrideRow(arr, i, rows, cols, stride); if (ch) return ch; }
	for (i = 0; i < cols; i++) { let ch = bStrideCol(arr, i, rows, cols, stride); if (ch) return ch; }
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			let ch = bStrideDiagFrom(arr, i, j, rows, cols, stride); if (ch) return ch;
			ch = bStrideDiag2From(arr, i, j, rows, cols, stride); if (ch) return ch;
		}
	}
	return null;
}
function checkWinnerPossible(arr, rows, cols) {
	for (i = 0; i < rows; i++) { let ch = bPartialRow(arr, i, rows, cols); if (ch) return ch; }
	for (i = 0; i < cols; i++) { let ch = bPartialCol(arr, i, rows, cols); if (ch) return ch; }
	let ch = bPartialDiag(arr, rows, cols); if (ch) return ch;
	ch = bPartialDiag2(arr, rows, cols); if (ch) return ch;
	return null;
}
function checkwinners(arr, rows, cols) {
	for (i = 0; i < rows; i++) { let ch = bFullRow(arr, i, rows, cols); if (ch) return ch; }
	for (i = 0; i < cols; i++) { let ch = bFullCol(arr, i, rows, cols); if (ch) return ch; }
	let ch = bFullDiag(arr, rows, cols); if (ch) return ch;
	ch = bFullDiag2(arr, rows, cols); if (ch) return ch;
	return null;
}
function checkwinnersC4(arr, rows = 6, cols = 7, stride = 4) {
	for (i = 0; i < rows; i++) { let ch = bStrideRow(arr, i, rows, cols, stride); if (ch) return ch; }
	for (i = 0; i < cols; i++) { let ch = bStrideCol(arr, i, rows, cols, stride); if (ch) return ch; }
	for (i = 0; i < rows; i++) {
		for (j = 0; j < cols; j++) {
			let ch = bStrideDiagFrom(arr, i, j, rows, cols, stride); if (ch) return ch;
			ch = bStrideDiag2From(arr, i, j, rows, cols, stride); if (ch) return ch;
		}
	}
	return null;
}
function checkwinnersPossible(arr, rows, cols) {
	for (i = 0; i < rows; i++) { let ch = bPartialRow(arr, i, rows, cols); if (ch) return ch; }
	for (i = 0; i < cols; i++) { let ch = bPartialCol(arr, i, rows, cols); if (ch) return ch; }
	let ch = bPartialDiag(arr, rows, cols); if (ch) return ch;
	ch = bPartialDiag2(arr, rows, cols); if (ch) return ch;
	return null;
}
function checkwinnersTTT(arr, rows, cols) { return checkwinners(arr, rows, cols); }
function checkWinnerTTT(arr, rows, cols) { return checkWinner(arr, rows, cols); }
function chessTestPos01() {
	let board = [
		['bk', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
		['em', 'bn', 'em', 'wr', 'em', 'wp', 'em', 'em'],
		['br', 'em', 'bp', 'em', 'em', 'bn', 'wn', 'em'],
		['em', 'em', 'bp', 'bp', 'bp', 'em', 'wp', 'bp'],
		['bp', 'bp', 'em', 'bp', 'wn', 'em', 'wp', 'em'],
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
		['em', 'em', 'em', 'wk', 'em', 'em', 'em', 'em'],
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
	];
	console.log(arrToFen(board));
}
function chessTestPos02() {
	let board = [
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
		['em', 'em', 'em', 'em', 'em', 'em', 'em', 'em'],
	];
	console.log(arrToFen(board, 'b'));
}
function choose(arr, n, excepti) { return rChoose(arr, n, null, excepti); }
function choose_dep(arr, n) {
	var result = new Array(n);
	var len = arr.length;
	var taken = new Array(len);
	if (n > len) n = len - 1;
	while (n--) {
		var iRandom = Math.floor(Math.random() * len);
		result[n] = arr[iRandom in taken ? taken[iRandom] : iRandom];
		taken[iRandom] = --len in taken ? taken[len] : len;
	}
	return result;
}
function chooseDeterministicOrRandom(n, arr, condFunc = null) {
	if (n < 0) return chooseRandomElement(arr, condFunc);
	if (condFunc) {
		let best = arr.filter(condFunc);
		if (!empty(best)) return best[n % best.length];
	}
	return arr[n % arr.length];
}
function chooseKeys(dict, n, except) { let keys = Object.keys(dict); let ind = except.map(x => keys.indexOf(x)); return choose(keys, n, ind); }
function chooseRandom(arr) { return rChoose(arr); }
function chooseRandomDictKey(dict, condFunc = null) {
	if (isEmpty(dict)) return null;
	let arr = Object.keys(dict);
	let len = arr.length;
	if (condFunc) {
		let best = arr.filter(condFunc);
		if (!isEmpty(best)) return chooseRandom(best);
	}
	let idx = Math.floor(Math.random() * len);
	return arr[idx];
}
function chooseRandomElement(arr, condFunc = null) {
	let len = arr.length;
	if (condFunc) {
		let best = arr.filter(condFunc);
		if (!empty(best)) return chooseRandomElement(best);
	}
	let idx = Math.floor(Math.random() * len);
	return arr[idx];
}
function chooseRandomKey(dict) { return chooseRandom(Object.keys(dict)); }
function circleCenters(rows, cols, wCell, hCell) {
	let [w, h] = [cols * wCell, rows * hCell];
	let cx = w / 2;
	let cy = h / 2;
	let centers = [{ x: cx, y: cy }];
	let rx = cx + wCell / 2; let dradx = rx / wCell;
	let ry = cy + hCell / 2; let drady = ry / hCell;
	let nSchichten = Math.floor(Math.min(dradx, drady));
	for (let i = 1; i < nSchichten; i++) {
		let [newCenters, wsch, hsch] = oneCircleCenters(i * 2 + 1, i * 2 + 1, wCell, hCell);
		for (const nc of newCenters) {
			centers.push({ x: nc.x + cx - wsch / 2, y: nc.y + cy - hsch / 2 });
		}
	}
	return [centers, wCell * cols, hCell * rows];
}
async function cities_from_csv_and_info(min = 25000) {
	let info = await route_path_yaml_dict('../base/assets/lists/info.yaml');
	let text = await route_path_text('../base/mapdata/cities.csv');
	let cities = M.cities = csv2list(text);
	let capitals = [];
	let new_cities = {};
	let num = 0;
	for (const o of cities) {
		let n = o.population;
		if (nundef(n)) continue;
		n = Number(n);
		if (n < min) continue;
		let w1 = o.city_ascii.toLowerCase();
		if (nundef(o.country)) {
			console.log('missing country', o);
			continue;
		}
		num += 1;
		let land1 = o.country.toLowerCase();
		for (const k of info.capital) {
			let w = k.toLowerCase();
			if (w.includes(w1) && w.includes(land1)) {
				capitals.push(o);
				o.capital = 'capital';
			}
			let name = o.name = o.city_ascii;
			if (isdef(new_cities[name]) && new_cities[name].includes('capital')) continue;
			else if (isdef(new_cities[name]) && Number(stringAfterLast(new_cities[name], ',')) > n) continue;
			new_cities[name] = `${o.lng},${o.lat},${o.country},${o.capital},${o.population}`;
		}
	}
	downloadAsYaml(new_cities, 'cities');
	return new_cities;
}
function clamp(x, min, max) { return Math.min(Math.max(x, min), max); }
function cLandscape(dParent, styles = {}, id) {
	if (nundef(styles.w)) styles.w = Card.sz;
	if (nundef(styles.h)) styles.h = styles.w * .65;
	return cBlank(dParent, styles, id);
}
function classByName(name) { return eval(name); }
function cleanup_or_resplay(oldgroup) {
	if (isdef(oldgroup) && isEmpty(oldgroup.ids)) {
		let oldgroupid = oldgroup.id;
		mRemove(iDiv(oldgroup));
		removeInPlace(DA.TJ, oldgroup);
		delete Items[oldgroupid];
	} else if (isdef(oldgroup)) { oldgroup.ov = .3222; resplay_container(oldgroup, .3222) }
}
function cleanupOldGame() {
	updateUserScore();
	if (isdef(G)) { G.clear(); }
	clearTable();
	clearStats();
	clearFleetingMessage();
}
function clear_ack_variables() {
	let [fen, uplayer, pl] = [Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];
	delete fen.ack_players;
	delete fen.lastplayer;
	delete fen.nextplayer;
	delete fen.turn_after_ack;
	delete fen.ackstage;
	delete fen.callbackname_after_ack;
	delete fen.keeppolling;
}
function clear_agents() {
	for (const a of M.agents) {
		let marker = a.ui;
		M.map.removeLayer(marker);
	}
	M.agents = [];
}
function clear_all() { for (const id of ['dFiddle', 'dMenu', 'dSearch', 'dSearchResult', 'dTable']) iClear(id); console.log('ids', get_keys(Items)) }
function clear_all_players() {
	console.log('trying to clear!!!')
	let d = mBy('d_players');
	let children = d.getElementsByTagName('input');
	console.log('children', children);
	for (const ch of children) { if (!ch.getAttribute('disabled')) ch.checked = false; }
}
function clear_gametable() {
	if (!isEmpty(DA.gameItems)) {
		let t = iDiv(DA.gameItems[0]).parentNode;
		t.remove();
	}
}
function clear_previous_level() {
	if (!isEmpty(A.items)) {
		console.assert(A.level >= 1, 'have items but level is ' + A.level);
		A.ll.push({ items: A.items, selected: A.selected });
		for (const item of A.items) {
			let bui = mBy(item.idButton);
			remove_hover_ui(bui);
			item.idButton = bui.id = getUID();
			let uid = item.idCard;
			let cui = isdef(uid) ? mBy(uid) : null;
			if (A.selected.includes(item.index)) {
				bui.onclick = null;
				if (cui) { mRemoveClass(cui, 'hoverScale'); cui.onclick = null; }
			} else {
				bui.style.opacity = 0;
				if (cui) { mRemoveClass(cui, 'hoverScale'); cui.onclick = null; }
			}
		}
	}
}
function clear_quick_buttons() {
	if (isdef(DA.bQuick)) { DA.bQuick.remove(); delete DA.bQuick; }
}
function clear_router() { M.map.removeControl(M.router); }
function clear_screen() { mShieldsOff(); clear_status(); clear_title(); for (const ch of arrChildren('dScreen')) mClear(ch); mClassRemove('dTexture', 'wood'); mStyle(document.body, { bg: 'white', fg: 'black' }); }
function clear_select(selected, selstyle = 'selected') {
	for (const item of selected) {
		item.isSelected = false;
		let ui = iDiv(item);
		if (isString(selstyle)) {
			mClassRemove(ui, selstyle);
		} else if (isdef(item.style)) {
			mStyle(ui, item.style);
		} else {
			mStyleUndo(ui, selstyle);
		}
	}
	return [];
}
function clear_selection() {
	let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];
	if (nundef(Z.A) || isEmpty(A.selected)) return;
	let selitems = A.selected.map(x => A.items[x]);
	for (const item of selitems) { ari_make_unselected(item); }
	A.selected = [];
}
function clear_status() { if (nundef(mBy('dStatus'))) return; clearTimeout(TO.fleeting); mRemove("dStatus"); }
function clear_table_all() {
	clear_table_events();
	if (isdef(mBy('table'))) clearTable();
	resetUIDs();
	Items = {};
}
function clear_table_events() {
	clear_timeouts();
	STOPAUS = true;
	pauseSound();
	DELAY = 1000;
	uiActivated = aiActivated = false;
	onclick = null;
	clearMarkers();
}
function clear_timeouts() {
	for (const k in TO) clearTimeout(TO[k]);
	stop_simple_timer();
}
function clear_title() { mClear('dTitleMiddle'); mClear('dTitleLeft'); mClear('dTitleRight'); }
function clear_transaction() { DA.simulate = false; DA.transactionlist = []; }
function ClearAllPieces() {
	$(".Piece").remove();
}
function clearBadges() {
	removeBadges(null, 0);
	badges = [];
}
function clearChat() { clearElement(document.getElementById('chatEvent')); }
function clearChatWindow() { clearElement('dChatWindow'); }
function clearDOM() { }
function clearElement(elem) {
	if (isString(elem)) elem = document.getElementById(elem);
	if (window.jQuery == undefined) { elem.innerHTML = ''; return elem; }
	while (elem.firstChild) {
		$(elem.firstChild).remove();
	}
	return elem;
}
function clearElementFromChildIndex(elem, idx = 0) {
	let charr = arrChildren(elem).slice(idx);
	for (const ch of charr) {
		elem.removeChild(ch);
	}
}
function clearerror() { errormsg(""); }
function clearFleetingMessage() {
	if (isdef(dFleetingMessage)) {
		dFleetingMessage.remove();
		dFleetingMessage = null;
	}
}
function ClearForSearch() {
	var index = 0;
	var index2 = 0;
	for (index = 0; index < 14 * BRD_SQ_NUM; ++index) {
		brd_searchHistory[index] = 0;
	}
	for (index = 0; index < 3 * MAXDEPTH; ++index) {
		brd_searchKillers[index] = 0;
	}
	ClearPvTable();
	brd_ply = 0;
	srch_nodes = 0;
	srch_fh = 0;
	srch_fhf = 0;
	srch_start = $.now();
	srch_stop = BOOL.FALSE;
}
function clearGame() { }
function clearGameTitle() { clearElement(dGameTitle); }
function clearIncludingAttr(elem) {
	if (isString(elem)) elem = document.getElementById(elem);
	elem.innerHTML = '';
	removeAttributes(elem);
	return elem;
}
function clearInfoboxes() {
	let ids = Array.from(getIdsInfobox());
	for (const id of ids) { deleteRSG(id); }
	maxZIndex = 10;
}
function clearInit(elem, startProps = {}) {
	clearElement(elem);
	for (const k in startProps) { elem[k] = startProps[k]; }
}
function clearLevel() { clearElement(dLevel); clearBadges(); }
function clearLog() {
	delete G.log;
	UIS['a_d_log'].clear();
}
function clearMarkers() {
	for (const m of Markers) {
		mRemove(m);
	}
	Markers = [];
}
function clearMessages() { clearElement(document.getElementById('events')); }
function clearPageHeader() {
	UIS['a_d_divPlayerNames'].clear();
}
function ClearPiece(sq) {
	var pce = brd_pieces[sq];
	var col = PieceCol[pce];
	var index = 0;
	var t_pceNum = -1;
	HASH_PCE(pce, sq);
	brd_pieces[sq] = PIECES.EMPTY;
	brd_material[col] -= PieceVal[pce];
	for (index = 0; index < brd_pceNum[pce]; ++index) {
		if (brd_pList[PCEINDEX(pce, index)] == sq) {
			t_pceNum = index;
			break;
		}
	}
	brd_pceNum[pce]--;
	brd_pList[PCEINDEX(pce, t_pceNum)] = brd_pList[PCEINDEX(pce, brd_pceNum[pce])];
}
function ClearPvTable() {
	for (index = 0; index < PVENTRIES; index++) {
		brd_PvTable[index].move = NOMOVE;
		brd_PvTable[index].posKey = 0;
	}
}
function clearScore() { clearElement(dScore) }
function clearStats() {
	clearLevel();
	clearScore();
	clearGameTitle();
}
function clearStatus() { clearFleetingMessage(); }
function clearStep() { }
function clearTable() {
	clearElement('dTable');
	clearElement('dHistory');
	show_title();
	clearElement('dMessage');
	clearElement('dInstruction');
	clearElement('dTitleRight');
	hide('bPauseContinue');
}
function clearTimeCD() {
	if (nundef(MSTimeTO)) return;
	clearTimeout(MSTimeTO); MSTimeClock = MSTimeDiff = MSTimeStart = MSTimeCallback = MSTimeTO = null;
}
function clearTimeouts() {
	onclick = null;
	clearTimeout(TOMain);
	clearTimeout(TOFleetingMessage);
	clearTimeout(TOTrial);
	if (isdef(TOList)) { for (const k in TOList) { TOList[k].map(x => clearTimeout(x)); } }
}
function clearZones() {
	for (const k in Zones) {
		clearElement(Zones[k].dData);
	}
}
function click_shield_off() { mBy('dShield').style.display = 'none'; }
function click_shield_on(msg) { show_shield(msg); }
function ClickedSquare(pageX, pageY) {
	var position = $("#ChessBoard").position();
	let dBoard = mBy('ChessBoard');
	let rBoard = setRectInt(dBoard);
	let dParent = mBy('ChessBoard').parentNode;
	let r = setRectInt(dParent);
	var workedX = Math.floor(position.left);
	var workedY = Math.floor(position.top);
	var pageX = Math.floor(pageX);
	var pageY = Math.floor(pageY);
	var file = Math.floor((pageX - workedX - r.l) / 60);
	var rank = 7 - Math.floor((pageY - workedY - r.t) / 60);
	var sq = FR2SQ(file, rank);
	if (GameController.BoardFlipped == BOOL.TRUE) {
		sq = MIRROR120(sq);
	}
	SetSqSelected(sq);
	return sq;
}
function cLine(x1, y1, x2, y2, styles = null, ctx = null) {
	if (nundef(ctx)) { ctx = CX; if (!ctx) return; }
	if (styles) cStyle(styles, ctx);
	ctx.beginPath();
	ctx.moveTo(x1, y1);
	ctx.lineTo(x2, y2)
	ctx.stroke();
}
function cloneIfNecessary(value, optionsArgument) {
	var clone = optionsArgument && optionsArgument.clone === true
	return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
}
function cloneSvg(svg, id) {
	var newPawn = svg.cloneNode(true);
	newPawn.id = id;
	return newPawn;
}
function close_game_options() { mBy('inner_left_panel').innerHTML = ''; }
function close_image(e) {
	e.target.className = "image_off";
}
function close_mini_user_info() {
	setTimeout(() => {
		mBy('user_info_mini').style.display = 'none';
	}, 500);
}
function close_popup() {
	let dpop = mBy('dPopup');
	hide(dpop);
}
function close_sidebar() {
	let d = mBy('left_panel'); d.style.flex = 0;
	DA.left_panel = 'closed';
}
function closeAux() {
	hide(dAux);
	hide('dGo');
	show('dGear');
	show('dTemple');
	if (Settings.hasChanged) { Settings.updateSettings(); dbSaveX(); }
	Settings.hasChanged = false;
	auxOpen = false;
}
function closeGameConfig() {
	hideGameConfig();
	if (USE_SOCKETIO) {
		showEventList();
	}
	setMessage('hi again!');
	show('bJoinGame');
	show('bCreateGame');
	show('bResumeGame');
	hide('bLobbyOk');
	hide('bLobbyCancel');
}
function closeInfoboxesForBoatOids(boat) {
	let oids = boat.o.oids;
	for (const oid of oids) hideInfobox(oid);
}
function closeJoinConfig() {
	hideJoinConfig();
	if (USE_SOCKETIO) {
		showEventList();
	}
	setMessage('hi again!');
	show('bJoinGame');
	show('bCreateGame');
	show('bResumeGame');
	hide('bLobbyJoinOk');
	hide('bLobbyJoinCancel');
}
function closeLeftPane() {
	if (!paneOpen) return 0;
	let right = mBy('dInnerRight');
	mStyle(right, { flex: 2 });
	paneOpen = false;
	return DELAY_PANE;
}
function closeSettings() { setPicsPerLevel(); hide(dSettings); resumeUI(); }
function closeSocket() {
	if (!USE_SOCKETIO) return;
	if (clientData.name !== null && socket !== null) {
		socket.emit('message', clientData.name + ' has left');
		socket.close();
	}
}
function closestParent(elem, selector) {
	for (; elem && elem !== document; elem = elem.parentNode) {
		if (elem.matches(selector)) return elem;
	}
	return null;
}
async function closureFromProject(project) {
	let globlist = await codeParseFile('../allg.js');
	let funclist = await codeParseFile('../allf.js');
	let list = globlist.concat(funclist);
	let bykey = list2dict(list, 'key');
	let bytype = {};
	for (const k in bykey) { let o = bykey[k]; lookupAddIfToList(bytype, [o.type], o); }
	let htmlFile = `../${project}/index.html`;
	let html = await route_path_text(htmlFile);
	html = removeCommentLines(html, '<!--', '-->');
	let dirhtml = `../${project}`;
	let files = extractFilesFromHtml(html, htmlFile);
	files = files.filter(x => !x.includes('../all'));
	let olist = [];
	for (const path of files) {
		let opath = await codeParseFile(path);
		olist = olist.concat(opath);
	}
	let mytype = {}, mykey = {};
	for (const o of olist) { mykey[o.key] = o; }
	for (const k in mykey) { let o = mykey[k]; lookupAddIfToList(mytype, [o.type], o); }
	let dupltext = '';
	for (const k in mykey) {
		let onew = mykey[k];
		let oold = bykey[k];
		if (isdef(oold) && onew.code == oold.code) {
		} else if (isdef(oold)) {
			console.log('override w/ DIFFERENT code', k);//override code with new code but keep old code!
			oold.oldcode = oold.code;
			oold.code = onew.code;
			dupltext += oold.oldcode + '\n' + oold.code + '\n';
		} else {
			bykey[k] = onew;
			lookupAddIfToList(bytype, [onew.type], onew);
			list.push(onew);
		}
	}
	let knownNogos = { codingfull: ['uiGetContact'], coding: ['uiGetContact', 'grid'] };
	let seed = ['start'].concat(extractOnclickFromHtml(html)); console.log('seed', seed);
	if (project == 'nature') seed = seed.concat(['branch_draw', 'leaf_draw', 'lsys_init', 'tree_init', 'lsys_add', 'tree_add', 'lsys_draw', 'tree_draw']);
	let byKeyMinimized = _minimizeCode(bykey, seed, valf(knownNogos[project], []));
	for (const k in byKeyMinimized) {
		let code = byKeyMinimized[k].code;
		let lines = code.split('\n');
		let newcode = '';
		for (const l of lines) {
			newcode += removeTrailingComments(l) + '\n';
		}
		byKeyMinimized[k].code = newcode.trim();
	}
	let cvckeys = list.filter(x => isdef(byKeyMinimized[x.key]) && x.type != 'function').map(x => x.key); //in order of appearance!
	let funckeys = list.filter(x => isdef(byKeyMinimized[x.key]) && x.type == 'function').map(x => x.key); //in order of appearance!
	funckeys = sortCaseInsensitive(funckeys);
	let closuretext = '';
	for (const k of cvckeys) { closuretext += byKeyMinimized[k].code + '\n'; }
	for (const k of funckeys) { closuretext += byKeyMinimized[k].code + '\n'; }
	cssfiles = extractFilesFromHtml(html, htmlFile, 'css');
	cssfiles.unshift('../allcss.css');
	let tcss = '';
	for (const path of cssfiles) { tcss += await route_path_text(path) + '\r\n'; }
	let t = replaceAllSpecialChars(tcss, '\t', '  ');
	let lines = t.split('\r\n');
	if (lines.length <= 2) lines = t.split('\n');
	let allkeys = [], newlines = [];
	let di = {};
	let testresult = '';
	for (const line of lines) {
		let type = cssKeywordType(line);
		if (type) {
			testresult += line[0] + '=';//addIf(testresult,line[0]); 
			let newline = isLetter(line[0]) || line[0] == '*' ? line : line[0] == '@' ? stringAfter(line, ' ') : line.substring(1);
			let key = line.includes('{') ? stringBefore(newline, '{') : stringBefore(newline, ','); //firstWordIncluding(newline, '_-: >').trim();
			key = key.trim();
			if (isdef(di[key]) && type != di[key].type) {
				console.log('duplicate key', key, type, di[key].type);
			}
			di[key] = { type: type, key: key }
			newline = key + stringAfter(newline, key);
			if (key == '*') console.log('***', stringAfter(newline, key));
			addIf(allkeys, key);
			newlines.push(newline)
			di[key] = { type: type, key: key }
		} else {
			newlines.push(line);
		}
	}
	let neededkeys = [], code = closuretext;
	for (const k of allkeys) {
		if (['rubberBand'].includes(k)) continue;
		let ktest = k.includes(' ') ? stringBefore(k, ' ') : k.includes(':') ? stringBefore(k, ':') : k;
		if (['root'].some(x => x == k)) addIf(neededkeys, k);
		else if (code.includes(`${ktest}`) || code.includes(`'${ktest}'`) || code.includes(`"${ktest}"`)) addIf(neededkeys, k);
		else if (html.includes(`${ktest}`)) addIf(neededkeys, k);
	}
	let clause = '';
	let state = 'search_kw';
	for (const kw of neededkeys) {
		let i = 0;
		for (const line of newlines) {
			if (line.startsWith(kw)) {
				let w1 = line.includes('{') ? stringBefore(line, '{') : stringBefore(line, ',');
				if (w1.trim() != kw) continue;
				assertion(line.includes('{') || line.includes(','), `WEIRED LINE: ${kw} ${line}`);
				if (line.includes('{')) {
					clause = '{\n'; state = 'search_clause_end';
				} else if (line.includes(',')) {
					state = 'search_clause_start';
				}
			} else if (state == 'search_clause_start' && line.includes('{')) {
				clause = '{\n'; state = 'search_clause_end';
			} else if (state == 'search_clause_end') {
				if (line[0] == '}') {
					clause += line;
					let cleanclause = cssCleanupClause(clause, kw);
					lookupAddIfToList(di, [kw, 'clauses'], cleanclause);
					lookupAddIfToList(di, [kw, 'fullclauses'], clause);
					state = 'search_kw';
				} else {
					clause += line + '\n';
				}
			}
		}
	}
	let dis = {};
	for (const o of get_values(di)) {
		if (nundef(o.clauses)) continue;
		let x = lookup(dis, [o.type, o.key]); if (x) console.log('DUPL:', o.key, o.type)
		lookupSet(dis, [o.type, o.key], o);
	}
	let csstext = '';
	let types = ['root', 'tag', 'class', 'id', 'keyframes'];
	let ditypes = { root: 58, tag: 't', class: 46, id: 35, keyframes: 64 }; // : tags . # @
	if (types.includes('root')) types = ['root'].concat(arrMinus(types, ['root']));
	types = types.map(x => ditypes[x]);
	for (const type of types) {
		if (nundef(dis[type])) continue;
		let ksorted = sortCaseInsensitive(get_keys(dis[type]));
		let prefix = type == 't' ? '' : String.fromCharCode(type);
		if (prefix == '@') prefix += 'keyframes ';
		for (const kw of ksorted) {
			let startfix = prefix + kw;
			for (const clause of dis[type][kw].clauses) {
				csstext += startfix + clause;
			}
		}
	}
	return [closuretext, csstext];
}
function cls() {
	clearElement(document.getElementById('g'));
}
function coButtonSidebarDiv_00(dParent, bCaption = '☰', bStyles = { fz: 30 }, sbStyles = { bg: wpink }, divStyles = {}, outerStyles = { matop: 4, bg: wgrey }) {
	let d0 = mDiv100(dParent);
	let b = mButton(bCaption, null, d0, bStyles, 'mybutton');
	outerStyles.position = 'relative';
	let h = getRect(d0).h - (getRect(b).h + outerStyles.matop);
	outerStyles.h = h;
	let d = mDiv(d0, outerStyles);
	let dSide = mDiv(d, sbStyles);
	let dContent = mDiv(d, divStyles);
	let sb = iSidebar(d, dSide, dContent, b, 120, false);
	return { button: b, sidebar: sb, div: dContent };
}
async function codebaseExtend(project) {
	let globlist = await codeParseFile('../allg.js');
	let funclist = await codeParseFile('../allf.js');
	let list = globlist.concat(funclist);
	let bykey = list2dict(list, 'key');
	let bytype = {};
	for (const k in bykey) { let o = bykey[k]; lookupAddIfToList(bytype, [o.type], o); }
	let htmlFile = `../${project}/index.html`;
	let html = await route_path_text(htmlFile);
	html = removeCommentLines(html, '<!--', '-->');
	let dirhtml = `../${project}`;
	let files = extractFilesFromHtml(html, htmlFile);
	files = files.filter(x => !x.includes('../all'));
	console.log('files', files)
	let olist = [];
	for (const path of files) {
		let opath = await codeParseFile(path);
		olist = olist.concat(opath);
	}
	let mytype = {}, mykey = {};
	for (const o of olist) { mykey[o.key] = o; }
	for (const k in mykey) { let o = mykey[k]; lookupAddIfToList(mytype, [o.type], o); }
	let dupltext = '';
	for (const k in mykey) {
		let onew = mykey[k];
		let oold = bykey[k];
		if (isdef(oold) && onew.code == oold.code) {
			console.log('override w/ SAME code', k);//brauch garnix machen!
		} else if (isdef(oold)) {
			console.log('override w/ DIFFERENT code', k);//override code with new code but keep old code!
			oold.oldcode = oold.code;
			oold.code = onew.code;
			dupltext += oold.oldcode + '\n' + oold.code + '\n';
		} else {
			bykey[k] = onew;
			lookupAddIfToList(bytype, [onew.type], onew);
			list.push(onew);
		}
	}
	let globtext = '', functext = '', functextold = '';
	for (const type of ['const', 'var', 'class']) {
		if (nundef(bytype[type])) continue;
		for (const o of bytype[type]) { globtext += o.code + '\n'; }
	}
	let sortedFuncKeys = sortCaseInsensitive(bytype.function.map(x => x.key));
	sortedFuncKeys.map(x => functext += bykey[x].code + '\n');
	sortedFuncKeys.map(x => functextold += (isdef(bykey[x].oldcode) ? bykey[x].oldcode : bykey[x].code) + '\n');
	return [globtext, functext, functextold]
}
async function codebaseExtendFromProject(project) {
	let globlist = await codeParseFile('../allg.js');
	let funclist = await codeParseFile('../allf.js');
	let list = globlist.concat(funclist);
	let bykey = list2dict(list, 'key');
	let bytype = {};
	for (const k in bykey) { let o = bykey[k]; lookupAddIfToList(bytype, [o.type], o); }
	let htmlFile = `../${project}/index.html`;
	let html = await route_path_text(htmlFile);
	html = removeCommentLines(html, '<!--', '-->');
	let dirhtml = `../${project}`;
	let files = extractFilesFromHtml(html, htmlFile);
	files = files.filter(x => !x.includes('../all'));
	console.log('files', files)
	let [globtext, functext, functextold] = await codebaseFromFiles(files, bykey, bytype, list);
	return [globtext, functext, functextold];
}
async function codebaseFromFiles(files, bykey, bytype, list) {
	let olist = [];
	for (const path of files) {
		let opath = await codeParseFile(path);
		olist = olist.concat(opath);
	}
	let mytype = {}, mykey = {};
	for (const o of olist) { mykey[o.key] = o; }
	for (const k in mykey) { let o = mykey[k]; lookupAddIfToList(mytype, [o.type], o); }
	let dupltext = '';
	for (const k in mykey) {
		let onew = mykey[k];
		let oold = bykey[k];
		if (isdef(oold) && onew.code == oold.code) {
			console.log('override w/ SAME code', k);//brauch garnix machen!
		} else if (isdef(oold)) {
			console.log('override w/ DIFFERENT code', k);//override code with new code but keep old code!
			oold.oldcode = oold.code;
			oold.code = onew.code;
			dupltext += oold.oldcode + '\n' + oold.code + '\n';
		} else {
			bykey[k] = onew;
			lookupAddIfToList(bytype, [onew.type], onew);
			list.push(onew);
		}
	}
	let globtext = '', functext = '', functextold = '';
	for (const type of ['const', 'var', 'class']) {
		if (nundef(bytype[type])) continue;
		for (const o of bytype[type]) { globtext += o.code + '\n'; }
	}
	let sortedFuncKeys = sortCaseInsensitive(bytype.function.map(x => x.key));
	sortedFuncKeys.map(x => functext += bykey[x].code + '\n');
	sortedFuncKeys.map(x => functextold += (isdef(bykey[x].oldcode) ? bykey[x].oldcode : bykey[x].code) + '\n');
	return [globtext, functext, functextold]
}
function codeNormalize(code) {
	let res = '';
	res = replaceAllSpecialChars(code, '\t', '  ');
	return res.trim();
}
function codeParseBlock(lines, i) {
	let l = lines[i];
	let type = l[0] == 'a' ? ithWord(l, 1) : ithWord(l, 0);
	let key = l[0] == 'a' ? ithWord(l, 2, true) : ithWord(l, 1, true);
	let code = l + '\n'; i++; l = lines[i];
	while (i < lines.length && !(['var', 'const', 'cla', 'func', 'async'].some(x => l.startsWith(x)) && !l.startsWith('}'))) {
		if (!(l.trim().startsWith('//') || isEmptyOrWhiteSpace(l))) code += l + '\n';
		i++; l = lines[i];
	}
	code = replaceAllSpecialChars(code, '\t', '  ');
	code = code.trim();
	return [{ key: key, type: type, code: code }, i];
}
function codeParseBlocks(text) {
	let lines = text.split('\r\n');
	lines = lines.map(x => removeTrailingComments(x));
	let i = 0, o = null, res = [];
	while (i < lines.length) {
		let l = lines[i];
		if (['var', 'const', 'cla', 'func', 'async'].some(x => l.startsWith(x))) {
			[o, iLineAfterBlock] = codeParseBlock(lines, i);
			i = iLineAfterBlock;
			res.push(o)
		} else i++;
	}
	return res;
}
async function codeParseFile(path) {
	let text = await route_path_text(path);
	let olist = codeParseBlocks(text);
	return olist;
}
function codeParseKeys(text) {
	let keys = [];
	let lines = text.split('\r\n');
	for (const l of lines) {
		if (['var', 'const', 'cla', 'func', 'async'].some(x => l.startsWith(x))) {
			let key = ithWord(l, (l[0] == 'a' ? 2 : 1), true);
			keys.push(key);
		}
	}
	return keys;
}
function coin(percent = 50) { return Math.random() * 100 < percent; }
function collapseAll() {
	let coll = document.getElementsByClassName("collapsible");
	for (let i = 0; i < coll.length; i++) {
		let elem = coll[i];
		if (isVisible(getLinkContainerId(elem.id))) fireClick(elem);
	}
}
function collapseSmallLetterAreas(m, d) {
	let rows = m.length;
	let cols = m[0].length;
	let gtc = [];
	for (let c = 0; c < cols; c++) {
		gtc[c] = 'min-content';
		for (let r = 0; r < rows; r++) {
			let sArea = m[r][c];
			if (sArea[0] == sArea[0].toUpperCase()) gtc[c] = 'auto';
		}
	}
	let cres = gtc.join(' ');
	d.style.gridTemplateColumns = gtc.join(' '); //'min-content 1fr 1fr min-content';// 'min-content'.repeat(rows);
	let gtr = [];
	for (let r = 0; r < rows; r++) {
		gtr[r] = 'min-content';
		for (let c = 0; c < cols; c++) {
			let sArea = m[r][c];
			if (sArea[0] == sArea[0].toUpperCase()) gtr[r] = 'auto';
		}
	}
	let rres = gtr.join(' ');
	d.style.gridTemplateRows = gtr.join(' '); //'min-content 1fr 1fr min-content';// 'min-content'.repeat(rows);
}
function collect_data() {
	var myform = mBy("myform");
	var inputs = myform.getElementsByTagName("INPUT");
	var data = {};
	for (var i = inputs.length - 1; i >= 0; i--) {
		var key = inputs[i].name;
		switch (key) {
			case "username":
			case "name":
				let uname = inputs[i].value;
				console.log(`${key} in input is`, uname);
				uname = replaceAllSpecialChars(uname, ' ', '_');
				uname = replaceAllSpecialChars(uname, '&', '_');
				uname = replaceAllSpecialChars(uname, '+', '_');
				uname = replaceAllSpecialChars(uname, '?', '_');
				uname = replaceAllSpecialChars(uname, '=', '_');
				uname = replaceAllSpecialChars(uname, '+', '_');
				uname = replaceAllSpecialChars(uname, '/', '_');
				uname = replaceAllSpecialChars(uname, '\\', '_');
				data[key] = uname.toLowerCase();
				break;
			case "motto":
				data[key] = inputs[i].value.toLowerCase();
		}
	}
	if (DA.imageChanged) {
		sendHtml('imgPreview', Session.cur_user);
	} else {
		let udata = get_current_userdata();
		let changed = false;
		if (DA.colorChanged) { udata.color = DA.newColor; changed = true; }
		if (data.motto != udata.motto) {
			changed = true;
			udata.motto = data.motto;
			mBy('motto').innerHTML = udata.motto;
		}
		if (changed) {
			DA.next = get_login;
			db_save();
		}
	}
}
function collect_game_options() {
	collect_player_list();
	collect_game_specific_options();
}
function collect_game_specific_options(game) {
	let poss = Config.games[game].options;
	if (nundef(poss)) return;
	let di = {};
	for (const p in poss) {
		let fs = mBy(`d_${p}`);
		let val = get_checked_radios(fs)[0];
		di[p] = isNumber(val) ? Number(val) : val;
	}
	return di;
}
function collect_innerHTML(arr, sep = '') { return arr.map(x => iDiv(x).innerHTML).join(sep); }
function collect_player_list() {
	let d = mBy('d_players');
	let checkboxes = d.getElementsByTagName('input');
	Session.game_options.players = [];
	for (const chk of checkboxes) {
		if (chk.checked) {
			Session.game_options.players.push(chk.value);
		}
	}
}
function collectPropFromCss(prop) {
	const styles = document.styleSheets;
	let cssArr = [...styles[0].cssRules].map(x => ({
		class: x.selectorText,
		color: rgbToHex(x.style[prop]),
	}));
	return cssArr;
}
function color_areas(nHues = 2, iButtonHue = 0, areaClass = 'area', gridDiv = 'root') {
	let hue1 = Math.floor(Math.random() * 360);
	let pal = gen_palette(hue1, nHues);
	palette = pal;
	setCSSButtonColors(pal, iButtonHue);
	let areas = document.getElementsByClassName(areaClass);
	let grid = document.getElementById(gridDiv);
	grid.style.backgroundColor = pal[pal.length - 1][0].b;
	idx = 0;
	ihue = 0;
	for (const a of areas) {
		let cb = (a.style.backgroundColor = pal[idx][ihue].b);
		let cf = (a.style.color = pal[idx][ihue].f);
		testHelpers('back', standardize_color(cb));
		let hex = standardize_color(cb);
		let f = complementaryColor(hex);
		a.style.color = f;
		let rgbString = hex2rgb(hex);
		let f2 = getTextColor(rgbString);
		a.style.color = f2;
		let f3 = niceColor(rgbString);
		a.style.color = f3;
		let f4 = blackOrWhite(cb);
		a.style.color = f4;
		let f5 = idealTextColor(hex);
		a.style.color = f5;
		idx += 1;
		if (idx >= pal.length - 2) idx = 0;
		ihue = (ihue + 1) % pal[0].length;
		if (idx % pal[0].length == 0) ihue = (ihue + 1) % pal[0].length;
	}
}
function color2trans(color, alpha = 0.5) {
	let hex = standardize_color(color);
	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	result = result
		? {
			r: parseInt(result[1], 16),
			g: parseInt(result[2], 16),
			b: parseInt(result[3], 16)
		}
		: null;
	if (result) return `rgba(${result.r},${result.g},${result.b},${alpha})`;
	else return 'rgb(0,0,0,0.5)';
}
function colorA(cAny) {
	let rgb = colorRGB(cAny, true);
	return rgb.a;
}
function colorAreas(fromLocalStorage = true, nColors = 2) {
	let key = chooseRandom(Object.keys(modern_palettes));
	let colors = Object.values(modern_palettes[key]);
	colors = choose(colors, nColors + 1);
	shuffle(colors);
	let pals = colors.map(x => getPalette(x));
	setSYS('pals', pals);
	let ihue = 0;
	let idarkness = 1;
	setCSSVariable('--bgBody', pals[0][2]);
	setCSSButtonColors(pals, 0);
	for (const areaName of getSYS('baseAreaNames')) {
		console.log(areaName, ihue, idarkness);
		let areaInfo = getArea(areaName);
		let a = areaInfo.div;
		let bg = pals[ihue][idarkness];
		a.style.backgroundColor = bg;
		areaInfo.bg = bg;
		let fg = colorIdealText(bg);
		a.style.color = fg;
		areaInfo.fg = fg;
		areaInfo.idarkness = idarkness;
		areaInfo.ihue = ihue;
		idarkness += 1;
		if (idarkness >= pals[0].length - 2) idarkness = 1;
		ihue = (ihue + 1) % 2;
	}
}
function colorAreas_dep(hue0 = 260, nHues = 25, areaClass = 'area', root = 'root') {
	let hue1 = nHues;
	let hues = [hue0, hue1];
	let pals = [];
	for (const hue of hues) {
		let c = colorFrom(colorFromHue(hue));
		let pal = colorPalShade(c);
		pals.push(pal);
	}
	let ihue = 0;
	let idarkness = 1;
	setCSSVariable('--bgBody', pals[0][2]);
	setCSSButtonColors(pals, 0);
	let areas = document.getElementsByClassName(areaClass);
	let grid = document.getElementById(root);
	let areaColors = {};
	for (const a of areas) {
		let bg = (a.style.backgroundColor = pals[ihue][idarkness]);
		a.style.color = colorIdealText(bg);
		areaColors[a.id] = { bg: bg, fg: a.style.color, ihue: ihue, idarkness: idarkness };
		idarkness += 1;
		if (idarkness >= pals[0].length - 2) idarkness = 1;
		ihue = (ihue + 1) % pals.length;
	}
	return { hue0: hue0, nHues: nHues, pals: pals, mode: 'shades', areaColors: areaColors };
}
function colorAreas_wild(fromLocalStorage = true, { className = null } = {}) {
	let hues = getRandomHues(fromLocalStorage);
	let pals = getPaletteFromHues(hues);
	setSYS('pals', pals);
	setSYS('hues', hues);
	let ihue = 0;
	let idarkness = 1;
	setCSSVariable('--bgBody', pals[0][2]);
	setCSSButtonColors(pals, 0);
	let areaNames = [];
	if (isdef(className)) {
		let divs = document.getElementsByClassName(className);
		areaNames = divs.map(x => x.id);
		console.log(divs, areaNames);
	} else {
		areaNames = getSYS('baseAreaNames');
	}
	console.log(areaNames);
	for (const areaName of areaNames) {
		if (isdef(className)) {
			let d = document.getElementById(areaName);
			a.style.backgroundColor = randomColor();
			let fg = colorIdealText(bg);
			continue;
		}
		let areaInfo = getArea(areaName);
		let a = areaInfo.div;
		let bg = pals[ihue][idarkness];
		a.style.backgroundColor = bg;
		areaInfo.bg = bg;
		let fg = colorIdealText(bg);
		a.style.color = fg;
		areaInfo.fg = fg;
		areaInfo.idarkness = idarkness;
		areaInfo.ihue = ihue;
		idarkness += 1;
		if (idarkness >= pals[0].length - 2) idarkness = 1;
		ihue = (ihue + 1) % pals.length;
	}
}
function colorAreasBlend(c1, c2, areaClass = 'area', root = 'root') {
	c1 = colorFrom(c1);
	c2 = colorFrom(c2);
	let pb = colorPalBlend(c1, c2);
	let pals = [];
	for (const c of pb) {
		let pal = colorPalShade(c);
		pals.push(pal);
	}
	let ihue = 0;
	let idarkness = 1;
	setCSSButtonColors(pals, 0);
	let areas = document.getElementsByClassName(areaClass);
	let grid = document.getElementById(root);
	grid.style.backgroundColor = pals[pals.length - 1][0];
	for (const a of areas) {
		let bg = (a.style.backgroundColor = pals[ihue][idarkness]);
		a.style.color = colorIdealText(bg);
		idarkness += 1;
		if (idarkness >= pals[0].length - 2) idarkness = 1;
		ihue = (ihue + 4) % pals.length;
	}
	return pals;
}
function colorAreasN(hue0 = 120, nHues = 25, areaClass = 'area', root = 'root') {
	let hues = [];
	let hueDiff = Math.round(360 / nHues);
	let h = hue0;
	for (let i = 0; i < nHues; i++) {
		hues.push(h);
		h += hueDiff;
	}
	let pals = [];
	for (const hue of hues) {
		let c = colorFrom(colorFromHue(hue));
		let pal = colorPalShade(c);
		pals.push(pal);
	}
	let ihue = 0;
	let idarkness = 1;
	setCSSVariable('--bgBody', pals[0][2]);
	setCSSButtonColors(pals, 0);
	let areas = document.getElementsByClassName(areaClass);
	let grid = document.getElementById(root);
	let areaColors = {};
	for (const a of areas) {
		let bg = (a.style.backgroundColor = pals[ihue][idarkness]);
		a.style.color = colorIdealText(bg);
		areaColors[a.id] = { bg: bg, fg: a.style.color, ihue: ihue, idarkness: idarkness };
		idarkness += 1;
		if (idarkness >= pals[0].length - 2) idarkness = 1;
		ihue = (ihue + 1) % pals.length;
	}
	return { hue0: hue0, nHues: nHues, pals: pals, mode: 'shades', areaColors: areaColors };
}
function colorAreasOppositesBlend(hue = 120, areaClass = 'area', root = 'root') {
	let hueOpp = (hue + 180) % 360;
	let c1 = colorFromHue(hue);
	let c2 = colorFromHue(hueOpp);
	colorAreasBlend(c1, c2, areaClass, root);
}
function colorAreasRandomBlend(areaClass = 'area', root = 'root') {
	let c1 = randomColor();
	let c2 = randomColor();
	colorAreasBlend(c1, c2, areaClass, root);
}
function colorArrToString(r, g, b) {
	return 'rgb(' + r + ',' + g + ',' + b + ')';
}
function colorB(cAny) {
	let rgb = colorRGB(cAny, true);
	return rgb.b;
}
function colorBlend(zero1, c0, c1, log = true) {
	c0 = colorFrom(c0);
	c1 = colorFrom(c1);
	return pSBC(zero1, c0, c1, log);
}
function colorBright(c, percent) {
	let hex = colorHex(c);
	hex = hex.replace(/^\s*#|\s*$/g, '');
	if (hex.length == 3) {
		hex = hex.replace(/(.)/g, '$1$1');
	}
	var r = parseInt(hex.substr(0, 2), 16),
		g = parseInt(hex.substr(2, 2), 16),
		b = parseInt(hex.substr(4, 2), 16);
	return '#' +
		((0 | (1 << 8) + r + (256 - r) * percent / 100).toString(16)).substr(1) +
		((0 | (1 << 8) + g + (256 - g) * percent / 100).toString(16)).substr(1) +
		((0 | (1 << 8) + b + (256 - b) * percent / 100).toString(16)).substr(1);
}
function colorChannelMixer(colorChannelA, colorChannelB, amountToMix) {
	var channelA = colorChannelA * amountToMix;
	var channelB = colorChannelB * (1 - amountToMix);
	return parseInt(channelA + channelB);
}
function colorChildren(strid, setFg = true) {
	for (const spid of strid.ids) {
		colorElem(spid, setFg);
	}
}
function colorChrome() {
	let pals = S.pals;
	setCSSVariable('--bgTabs', pals[0][3]);
	setCSSVariable('--bgBody', pals[0][2]);
	setCSSButtonColors(pals, 0);
}
function colorDark(c, percent = 50, log = true) {
	if (nundef(c)) c = rColor(); else c = colorFrom(c);
	let zero1 = -percent / 100;
	return pSBC(zero1, c, undefined, !log);
}
function colorDarker(c, zero1 = .8, log = true) {
	c = colorFrom(c);
	return pSBC(-zero1, c, undefined, !log);
}
function colorElem(id, setFg = true) {
	let spa = getVisual(id);
	if (!('spa' in spa.isa)) return;
	let bg = S.pals[spa.iPalette][spa.ipal];
	let elem = M.uis[id];
	if (isdef(spa.cssColor)) {
		setCSSVariable(spa.cssColor, bg);
	} else {
		elem.style.backgroundColor = fg;
	}
	if (setFg) {
		let fg = colorIdealText(bg);
		elem.style.color = fg;
	}
}
function colorFrom(cAny, a, allowHsl = false) {
	if (isString(cAny)) {
		if (cAny[0] == '#') {
			if (a == undefined) return cAny;
			cAny = cAny.substring(0, 7);
			return cAny + (a == 1 ? '' : alphaToHex(a));
		} else if (isdef(ColorDi) && lookup(ColorDi, [cAny])) {
			let c = ColorDi[cAny].c;
			if (a == undefined) return c;
			c = c.substring(0, 7);
			return c + (a == 1 ? '' : alphaToHex(a));
		} else if (startsWith(cAny, 'rand')) {
			let spec = capitalize(cAny.substring(4));
			if (isdef(window['color' + spec])) {
				c = window['color' + spec]();
			} else c = rColor();
			if (a == undefined) return c;
			return c + (a == 1 ? '' : alphaToHex(a));
		} else if (startsWith(cAny, 'linear')) {
			return cAny;
		} else if (cAny[0] == 'r' && cAny[1] == 'g') {
			if (a == undefined) return cAny;
			if (cAny[3] == 'a') {
				if (a < 1) {
					return stringBeforeLast(cAny, ',') + ',' + a + ')';
				} else {
					let parts = cAny.split(',');
					let r = firstNumber(parts[0]);
					return 'rgb(' + r + ',' + parts[1] + ',' + parts[2] + ')';
				}
			} else {
				if (a < 1) {
					return 'rgba' + cAny.substring(3, cAny.length - 1) + ',' + a + ')';
				} else {
					return cAny;
				}
			}
		} else if (cAny[0] == 'h' && cAny[1] == 's') {
			if (allowHsl) {
				if (a == undefined) return cAny;
				if (cAny[3] == 'a') {
					if (a < 1) {
						return stringBeforeLast(cAny, ',') + ',' + a + ')';
					} else {
						let parts = cAny.split(',');
						let r = firstNumber(parts[0]);
						return 'hsl(' + r + ',' + parts[1] + ',' + parts[2] + ')';
					}
				} else {
					return a == 1 ? cAny : 'hsla' + cAny.substring(3, cAny.length - 1) + ',' + a + ')';
				}
			} else {
				if (cAny[3] == 'a') {
					cAny = HSLAToRGBA(cAny);
				} else {
					cAny = HSLToRGB(cAny);
				}
				return colorFrom(cAny, a, false);
			}
		} else {
			ensureColorDict();
			let c = ColorDi[cAny];
			if (nundef(c)) {
				if (startsWith(cAny, 'rand')) {
					let spec = cAny.substring(4);
					if (isdef(window['color' + spec])) {
						c = window['color' + spec](res);
					} else c = rColor();
				} else {
					console.log('color not available:', cAny);
					throw new Error('color not found: ' + cAny)
					return '#00000000';
				}
			} else c = c.c;
			if (a == undefined) return c;
			c = c.substring(0, 7);
			return c + (a == 1 ? '' : alphaToHex(a));
		}
	} else if (Array.isArray(cAny)) {
		if (cAny.length == 3 && isNumber(cAny[0])) {
			let r = cAny[0];
			let g = cAny[1];
			let b = cAny[2];
			return a == undefined || a == 1 ? `rgb(${r},${g},${b})` : `rgba(${r},${g},${b},${a})`;
		} else {
			return rChoose(cAny);
		}
	} else if (typeof cAny == 'object') {
		if ('h' in cAny) {
			let hslString = '';
			if (a == undefined || a == 1) {
				hslString = `hsl(${cAny.h},${Math.round(cAny.s <= 1.0 ? cAny.s * 100 : cAny.s)}%,${Math.round(cAny.l <= 1.0 ? cAny.l * 100 : cAny.l)}%)`;
			} else {
				hslString = `hsla(${cAny.h},${Math.round(cAny.s <= 1.0 ? cAny.s * 100 : cAny.s)}%,${Math.round(cAny.l <= 1.0 ? cAny.l * 100 : cAny.l)}%,${a})`;
			}
			if (allowHsl) {
				return hslString;
			} else {
				return colorFrom(hslString, a, allowHsl);
			}
		} else if ('r' in cAny) {
			if (a !== undefined && a < 1) {
				return `rgba(${cAny.r},${cAny.g},${cAny.b},${a})`;
			} else {
				return `rgb(${cAny.r},${cAny.g},${cAny.b})`;
			}
		}
	}
}
function colorFromHSL(hue, sat = 100, lum = 50) {
	return hslToHex(valf(hue, rHue()), sat, lum);
}
function colorFromHue(h, s = 100, l = 50, asObject = false) {
	if (asObject) return { h: h, s: s, l: l }; else return `hsl(${h},${s},${l})`;
}
function colorG(cAny) {
	let rgb = colorRGB(cAny, true);
	return rgb.g;
}
function colorHex(cAny) {
	let c = colorFrom(cAny);
	if (c[0] == '#') {
		return c;
	} else {
		let res = pSBC(0, c, 'c');
		return res;
	}
}
function colorHex_RGBAToHex9(cAny) {
	let c = colorFrom(cAny);
	if (c[0] == '#') {
		return c;
	} else if (c[3] == '(') {
		return RGBToHex7(c);
	} else {
		let res = RGBAToHex9(c);
		return res;
	}
}
function colorHSL(cAny, asObject = false) {
	let res = colorFrom(cAny, undefined, true);
	let shsl = res;
	if (res[0] == '#') {
		if (res.length == 9) {
			shsl = hexAToHSLA(res);
		} else if (res.length == 7) {
			shsl = hexToHSL(res);
		}
	} else if (res[0] == 'r') {
		if (res[3] == 'a') {
			shsl = RGBAToHSLA(res);
		} else {
			shsl = RGBToHSL(res);
		}
	}
	let n = allNumbers(shsl);
	if (asObject) {
		return { h: n[0], s: n[1] / 100, l: n[2] / 100, a: n.length > 3 ? n[3] : 1 };
	} else {
		return shsl;
	}
}
function colorHSLBuild(hue, sat = 100, lum = 50) { let result = "hsl(" + hue + ',' + sat + '%,' + lum + '%)'; return result; }
function colorHue(cAny) { let hsl = colorHSL(cAny, true); return hsl.h; }
function colorHueWheel(contrastTo, minDiff = 25, mod = 30, start = 0) {
	let hc = colorHue(contrastTo);
	let wheel = [];
	while (start < 360) {
		let d1 = Math.abs((start + 360) - hc);
		let d2 = Math.abs((start) - hc);
		let d3 = Math.abs((start - 360) - hc);
		let min = Math.min(d1, d2, d3);
		if (min > minDiff) wheel.push(start);
		start += mod;
	}
	return wheel;
}
function colorIdealText(bg, grayPreferred = false) {
	let rgb = colorRGB(bg, true);
	const nThreshold = 105;
	let r = rgb.r;
	let g = rgb.g;
	let b = rgb.b;
	var bgDelta = r * 0.299 + g * 0.587 + b * 0.114;
	var foreColor = 255 - bgDelta < nThreshold ? 'black' : 'white';
	if (grayPreferred) foreColor = 255 - bgDelta < nThreshold ? 'dimgray' : 'snow';
	return foreColor;
}
function colorLabelDiv(size) { return o => labelDiv(o.label, o.color, size, size); }
function colorLabelRow(pool, loc, o, oid, path, omap) {
	let size = LABEL_SZ, gap = 4;
	let olist = mapOMap(omap);
	if (isEmpty(olist)) return;
	olist = olist.map(item => ({ color: convertToColor(item.key), label: convertToLabel(item.value) }));
	let uis = getUis(olist, colorLabelDiv(size));
	let area = stage2_prepArea(loc);
	let container = stage3_prepContainer(area); mColor(container, 'white');
	stage4_layout(uis, container, size, size, gap, layoutRow);
}
function colorLight(c, percent = 20, log = true) {
	if (nundef(c)) {
		return colorFromHSL(rHue(), 100, 85);
	} else c = colorFrom(c);
	let zero1 = percent / 100;
	return pSBC(zero1, c, undefined, !log);
}
function colorLighter(c, zero1 = .2, log = true) {
	c = colorFrom(c);
	return pSBC(zero1, c, undefined, !log);
}
function colorLum(cAny) {
	let hsl = colorHSL(cAny, true);
	return hsl.l;
}
function colorMap(spec) {
	const Colormap = {
		"jet": [{ "index": 0, "rgb": [0, 0, 131] }, { "index": 0.125, "rgb": [0, 60, 170] }, { "index": 0.375, "rgb": [5, 255, 255] }, { "index": 0.625, "rgb": [255, 255, 0] }, { "index": 0.875, "rgb": [250, 0, 0] }, { "index": 1, "rgb": [128, 0, 0] }],
		"hsv": [{ "index": 0, "rgb": [255, 0, 0] }, { "index": 0.169, "rgb": [253, 255, 2] }, { "index": 0.173, "rgb": [247, 255, 2] }, { "index": 0.337, "rgb": [0, 252, 4] }, { "index": 0.341, "rgb": [0, 252, 10] }, { "index": 0.506, "rgb": [1, 249, 255] }, { "index": 0.671, "rgb": [2, 0, 253] }, { "index": 0.675, "rgb": [8, 0, 253] }, { "index": 0.839, "rgb": [255, 0, 251] }, { "index": 0.843, "rgb": [255, 0, 245] }, { "index": 1, "rgb": [255, 0, 6] }],
		"hot": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.3, "rgb": [230, 0, 0] }, { "index": 0.6, "rgb": [255, 210, 0] }, { "index": 1, "rgb": [255, 255, 255] }],
		"spring": [{ "index": 0, "rgb": [255, 0, 255] }, { "index": 1, "rgb": [255, 255, 0] }],
		"summer": [{ "index": 0, "rgb": [0, 128, 102] }, { "index": 1, "rgb": [255, 255, 102] }],
		"autumn": [{ "index": 0, "rgb": [255, 0, 0] }, { "index": 1, "rgb": [255, 255, 0] }],
		"winter": [{ "index": 0, "rgb": [0, 0, 255] }, { "index": 1, "rgb": [0, 255, 128] }],
		"bone": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.376, "rgb": [84, 84, 116] }, { "index": 0.753, "rgb": [169, 200, 200] }, { "index": 1, "rgb": [255, 255, 255] }],
		"copper": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.804, "rgb": [255, 160, 102] }, { "index": 1, "rgb": [255, 199, 127] }],
		"greys": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 1, "rgb": [255, 255, 255] }],
		"yignbu": [{ "index": 0, "rgb": [8, 29, 88] }, { "index": 0.125, "rgb": [37, 52, 148] }, { "index": 0.25, "rgb": [34, 94, 168] }, { "index": 0.375, "rgb": [29, 145, 192] }, { "index": 0.5, "rgb": [65, 182, 196] }, { "index": 0.625, "rgb": [127, 205, 187] }, { "index": 0.75, "rgb": [199, 233, 180] }, { "index": 0.875, "rgb": [237, 248, 217] }, { "index": 1, "rgb": [255, 255, 217] }],
		"greens": [{ "index": 0, "rgb": [0, 68, 27] }, { "index": 0.125, "rgb": [0, 109, 44] }, { "index": 0.25, "rgb": [35, 139, 69] }, { "index": 0.375, "rgb": [65, 171, 93] }, { "index": 0.5, "rgb": [116, 196, 118] }, { "index": 0.625, "rgb": [161, 217, 155] }, { "index": 0.75, "rgb": [199, 233, 192] }, { "index": 0.875, "rgb": [229, 245, 224] }, { "index": 1, "rgb": [247, 252, 245] }],
		"yiorrd": [{ "index": 0, "rgb": [128, 0, 38] }, { "index": 0.125, "rgb": [189, 0, 38] }, { "index": 0.25, "rgb": [227, 26, 28] }, { "index": 0.375, "rgb": [252, 78, 42] }, { "index": 0.5, "rgb": [253, 141, 60] }, { "index": 0.625, "rgb": [254, 178, 76] }, { "index": 0.75, "rgb": [254, 217, 118] }, { "index": 0.875, "rgb": [255, 237, 160] }, { "index": 1, "rgb": [255, 255, 204] }],
		"bluered": [{ "index": 0, "rgb": [0, 0, 255] }, { "index": 1, "rgb": [255, 0, 0] }],
		"rdbu": [{ "index": 0, "rgb": [5, 10, 172] }, { "index": 0.35, "rgb": [106, 137, 247] }, { "index": 0.5, "rgb": [190, 190, 190] }, { "index": 0.6, "rgb": [220, 170, 132] }, { "index": 0.7, "rgb": [230, 145, 90] }, { "index": 1, "rgb": [178, 10, 28] }],
		"picnic": [{ "index": 0, "rgb": [0, 0, 255] }, { "index": 0.1, "rgb": [51, 153, 255] }, { "index": 0.2, "rgb": [102, 204, 255] }, { "index": 0.3, "rgb": [153, 204, 255] }, { "index": 0.4, "rgb": [204, 204, 255] }, { "index": 0.5, "rgb": [255, 255, 255] }, { "index": 0.6, "rgb": [255, 204, 255] }, { "index": 0.7, "rgb": [255, 153, 255] }, { "index": 0.8, "rgb": [255, 102, 204] }, { "index": 0.9, "rgb": [255, 102, 102] }, { "index": 1, "rgb": [255, 0, 0] }],
		"rainbow": [{ "index": 0, "rgb": [150, 0, 90] }, { "index": 0.125, "rgb": [0, 0, 200] }, { "index": 0.25, "rgb": [0, 25, 255] }, { "index": 0.375, "rgb": [0, 152, 255] }, { "index": 0.5, "rgb": [44, 255, 150] }, { "index": 0.625, "rgb": [151, 255, 0] }, { "index": 0.75, "rgb": [255, 234, 0] }, { "index": 0.875, "rgb": [255, 111, 0] }, { "index": 1, "rgb": [255, 0, 0] }],
		"portland": [{ "index": 0, "rgb": [12, 51, 131] }, { "index": 0.25, "rgb": [10, 136, 186] }, { "index": 0.5, "rgb": [242, 211, 56] }, { "index": 0.75, "rgb": [242, 143, 56] }, { "index": 1, "rgb": [217, 30, 30] }],
		"blackbody": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.2, "rgb": [230, 0, 0] }, { "index": 0.4, "rgb": [230, 210, 0] }, { "index": 0.7, "rgb": [255, 255, 255] }, { "index": 1, "rgb": [160, 200, 255] }],
		"earth": [{ "index": 0, "rgb": [0, 0, 130] }, { "index": 0.1, "rgb": [0, 180, 180] }, { "index": 0.2, "rgb": [40, 210, 40] }, { "index": 0.4, "rgb": [230, 230, 50] }, { "index": 0.6, "rgb": [120, 70, 20] }, { "index": 1, "rgb": [255, 255, 255] }],
		"electric": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.15, "rgb": [30, 0, 100] }, { "index": 0.4, "rgb": [120, 0, 100] }, { "index": 0.6, "rgb": [160, 90, 0] }, { "index": 0.8, "rgb": [230, 200, 0] }, { "index": 1, "rgb": [255, 250, 220] }],
		"alpha": [{ "index": 0, "rgb": [255, 255, 255, 0] }, { "index": 1, "rgb": [255, 255, 255, 1] }],
		"viridis": [{ "index": 0, "rgb": [68, 1, 84] }, { "index": 0.13, "rgb": [71, 44, 122] }, { "index": 0.25, "rgb": [59, 81, 139] }, { "index": 0.38, "rgb": [44, 113, 142] }, { "index": 0.5, "rgb": [33, 144, 141] }, { "index": 0.63, "rgb": [39, 173, 129] }, { "index": 0.75, "rgb": [92, 200, 99] }, { "index": 0.88, "rgb": [170, 220, 50] }, { "index": 1, "rgb": [253, 231, 37] }],
		"inferno": [{ "index": 0, "rgb": [0, 0, 4] }, { "index": 0.13, "rgb": [31, 12, 72] }, { "index": 0.25, "rgb": [85, 15, 109] }, { "index": 0.38, "rgb": [136, 34, 106] }, { "index": 0.5, "rgb": [186, 54, 85] }, { "index": 0.63, "rgb": [227, 89, 51] }, { "index": 0.75, "rgb": [249, 140, 10] }, { "index": 0.88, "rgb": [249, 201, 50] }, { "index": 1, "rgb": [252, 255, 164] }],
		"magma": [{ "index": 0, "rgb": [0, 0, 4] }, { "index": 0.13, "rgb": [28, 16, 68] }, { "index": 0.25, "rgb": [79, 18, 123] }, { "index": 0.38, "rgb": [129, 37, 129] }, { "index": 0.5, "rgb": [181, 54, 122] }, { "index": 0.63, "rgb": [229, 80, 100] }, { "index": 0.75, "rgb": [251, 135, 97] }, { "index": 0.88, "rgb": [254, 194, 135] }, { "index": 1, "rgb": [252, 253, 191] }],
		"plasma": [{ "index": 0, "rgb": [13, 8, 135] }, { "index": 0.13, "rgb": [75, 3, 161] }, { "index": 0.25, "rgb": [125, 3, 168] }, { "index": 0.38, "rgb": [168, 34, 150] }, { "index": 0.5, "rgb": [203, 70, 121] }, { "index": 0.63, "rgb": [229, 107, 93] }, { "index": 0.75, "rgb": [248, 148, 65] }, { "index": 0.88, "rgb": [253, 195, 40] }, { "index": 1, "rgb": [240, 249, 33] }],
		"warm": [{ "index": 0, "rgb": [125, 0, 179] }, { "index": 0.13, "rgb": [172, 0, 187] }, { "index": 0.25, "rgb": [219, 0, 170] }, { "index": 0.38, "rgb": [255, 0, 130] }, { "index": 0.5, "rgb": [255, 63, 74] }, { "index": 0.63, "rgb": [255, 123, 0] }, { "index": 0.75, "rgb": [234, 176, 0] }, { "index": 0.88, "rgb": [190, 228, 0] }, { "index": 1, "rgb": [147, 255, 0] }],
		"cool": [{ "index": 0, "rgb": [125, 0, 179] }, { "index": 0.13, "rgb": [116, 0, 218] }, { "index": 0.25, "rgb": [98, 74, 237] }, { "index": 0.38, "rgb": [68, 146, 231] }, { "index": 0.5, "rgb": [0, 204, 197] }, { "index": 0.63, "rgb": [0, 247, 146] }, { "index": 0.75, "rgb": [0, 255, 88] }, { "index": 0.88, "rgb": [40, 255, 8] }, { "index": 1, "rgb": [147, 255, 0] }],
		"rainbow-soft": [{ "index": 0, "rgb": [125, 0, 179] }, { "index": 0.1, "rgb": [199, 0, 180] }, { "index": 0.2, "rgb": [255, 0, 121] }, { "index": 0.3, "rgb": [255, 108, 0] }, { "index": 0.4, "rgb": [222, 194, 0] }, { "index": 0.5, "rgb": [150, 255, 0] }, { "index": 0.6, "rgb": [0, 255, 55] }, { "index": 0.7, "rgb": [0, 246, 150] }, { "index": 0.8, "rgb": [50, 167, 222] }, { "index": 0.9, "rgb": [103, 51, 235] }, { "index": 1, "rgb": [124, 0, 186] }],
		"bathymetry": [{ "index": 0, "rgb": [40, 26, 44] }, { "index": 0.13, "rgb": [59, 49, 90] }, { "index": 0.25, "rgb": [64, 76, 139] }, { "index": 0.38, "rgb": [63, 110, 151] }, { "index": 0.5, "rgb": [72, 142, 158] }, { "index": 0.63, "rgb": [85, 174, 163] }, { "index": 0.75, "rgb": [120, 206, 163] }, { "index": 0.88, "rgb": [187, 230, 172] }, { "index": 1, "rgb": [253, 254, 204] }],
		"cdom": [{ "index": 0, "rgb": [47, 15, 62] }, { "index": 0.13, "rgb": [87, 23, 86] }, { "index": 0.25, "rgb": [130, 28, 99] }, { "index": 0.38, "rgb": [171, 41, 96] }, { "index": 0.5, "rgb": [206, 67, 86] }, { "index": 0.63, "rgb": [230, 106, 84] }, { "index": 0.75, "rgb": [242, 149, 103] }, { "index": 0.88, "rgb": [249, 193, 135] }, { "index": 1, "rgb": [254, 237, 176] }],
		"chlorophyll": [{ "index": 0, "rgb": [18, 36, 20] }, { "index": 0.13, "rgb": [25, 63, 41] }, { "index": 0.25, "rgb": [24, 91, 59] }, { "index": 0.38, "rgb": [13, 119, 72] }, { "index": 0.5, "rgb": [18, 148, 80] }, { "index": 0.63, "rgb": [80, 173, 89] }, { "index": 0.75, "rgb": [132, 196, 122] }, { "index": 0.88, "rgb": [175, 221, 162] }, { "index": 1, "rgb": [215, 249, 208] }],
		"density": [{ "index": 0, "rgb": [54, 14, 36] }, { "index": 0.13, "rgb": [89, 23, 80] }, { "index": 0.25, "rgb": [110, 45, 132] }, { "index": 0.38, "rgb": [120, 77, 178] }, { "index": 0.5, "rgb": [120, 113, 213] }, { "index": 0.63, "rgb": [115, 151, 228] }, { "index": 0.75, "rgb": [134, 185, 227] }, { "index": 0.88, "rgb": [177, 214, 227] }, { "index": 1, "rgb": [230, 241, 241] }],
		"freesurface-blue": [{ "index": 0, "rgb": [30, 4, 110] }, { "index": 0.13, "rgb": [47, 14, 176] }, { "index": 0.25, "rgb": [41, 45, 236] }, { "index": 0.38, "rgb": [25, 99, 212] }, { "index": 0.5, "rgb": [68, 131, 200] }, { "index": 0.63, "rgb": [114, 156, 197] }, { "index": 0.75, "rgb": [157, 181, 203] }, { "index": 0.88, "rgb": [200, 208, 216] }, { "index": 1, "rgb": [241, 237, 236] }],
		"freesurface-red": [{ "index": 0, "rgb": [60, 9, 18] }, { "index": 0.13, "rgb": [100, 17, 27] }, { "index": 0.25, "rgb": [142, 20, 29] }, { "index": 0.38, "rgb": [177, 43, 27] }, { "index": 0.5, "rgb": [192, 87, 63] }, { "index": 0.63, "rgb": [205, 125, 105] }, { "index": 0.75, "rgb": [216, 162, 148] }, { "index": 0.88, "rgb": [227, 199, 193] }, { "index": 1, "rgb": [241, 237, 236] }],
		"oxygen": [{ "index": 0, "rgb": [64, 5, 5] }, { "index": 0.13, "rgb": [106, 6, 15] }, { "index": 0.25, "rgb": [144, 26, 7] }, { "index": 0.38, "rgb": [168, 64, 3] }, { "index": 0.5, "rgb": [188, 100, 4] }, { "index": 0.63, "rgb": [206, 136, 11] }, { "index": 0.75, "rgb": [220, 174, 25] }, { "index": 0.88, "rgb": [231, 215, 44] }, { "index": 1, "rgb": [248, 254, 105] }],
		"par": [{ "index": 0, "rgb": [51, 20, 24] }, { "index": 0.13, "rgb": [90, 32, 35] }, { "index": 0.25, "rgb": [129, 44, 34] }, { "index": 0.38, "rgb": [159, 68, 25] }, { "index": 0.5, "rgb": [182, 99, 19] }, { "index": 0.63, "rgb": [199, 134, 22] }, { "index": 0.75, "rgb": [212, 171, 35] }, { "index": 0.88, "rgb": [221, 210, 54] }, { "index": 1, "rgb": [225, 253, 75] }],
		"phase": [{ "index": 0, "rgb": [145, 105, 18] }, { "index": 0.13, "rgb": [184, 71, 38] }, { "index": 0.25, "rgb": [186, 58, 115] }, { "index": 0.38, "rgb": [160, 71, 185] }, { "index": 0.5, "rgb": [110, 97, 218] }, { "index": 0.63, "rgb": [50, 123, 164] }, { "index": 0.75, "rgb": [31, 131, 110] }, { "index": 0.88, "rgb": [77, 129, 34] }, { "index": 1, "rgb": [145, 105, 18] }],
		"salinity": [{ "index": 0, "rgb": [42, 24, 108] }, { "index": 0.13, "rgb": [33, 50, 162] }, { "index": 0.25, "rgb": [15, 90, 145] }, { "index": 0.38, "rgb": [40, 118, 137] }, { "index": 0.5, "rgb": [59, 146, 135] }, { "index": 0.63, "rgb": [79, 175, 126] }, { "index": 0.75, "rgb": [120, 203, 104] }, { "index": 0.88, "rgb": [193, 221, 100] }, { "index": 1, "rgb": [253, 239, 154] }],
		"temperature": [{ "index": 0, "rgb": [4, 35, 51] }, { "index": 0.13, "rgb": [23, 51, 122] }, { "index": 0.25, "rgb": [85, 59, 157] }, { "index": 0.38, "rgb": [129, 79, 143] }, { "index": 0.5, "rgb": [175, 95, 130] }, { "index": 0.63, "rgb": [222, 112, 101] }, { "index": 0.75, "rgb": [249, 146, 66] }, { "index": 0.88, "rgb": [249, 196, 65] }, { "index": 1, "rgb": [232, 250, 91] }],
		"turbidity": [{ "index": 0, "rgb": [34, 31, 27] }, { "index": 0.13, "rgb": [65, 50, 41] }, { "index": 0.25, "rgb": [98, 69, 52] }, { "index": 0.38, "rgb": [131, 89, 57] }, { "index": 0.5, "rgb": [161, 112, 59] }, { "index": 0.63, "rgb": [185, 140, 66] }, { "index": 0.75, "rgb": [202, 174, 88] }, { "index": 0.88, "rgb": [216, 209, 126] }, { "index": 1, "rgb": [233, 246, 171] }],
		"velocity-blue": [{ "index": 0, "rgb": [17, 32, 64] }, { "index": 0.13, "rgb": [35, 52, 116] }, { "index": 0.25, "rgb": [29, 81, 156] }, { "index": 0.38, "rgb": [31, 113, 162] }, { "index": 0.5, "rgb": [50, 144, 169] }, { "index": 0.63, "rgb": [87, 173, 176] }, { "index": 0.75, "rgb": [149, 196, 189] }, { "index": 0.88, "rgb": [203, 221, 211] }, { "index": 1, "rgb": [254, 251, 230] }],
		"velocity-green": [{ "index": 0, "rgb": [23, 35, 19] }, { "index": 0.13, "rgb": [24, 64, 38] }, { "index": 0.25, "rgb": [11, 95, 45] }, { "index": 0.38, "rgb": [39, 123, 35] }, { "index": 0.5, "rgb": [95, 146, 12] }, { "index": 0.63, "rgb": [152, 165, 18] }, { "index": 0.75, "rgb": [201, 186, 69] }, { "index": 0.88, "rgb": [233, 216, 137] }, { "index": 1, "rgb": [255, 253, 205] }],
		"cubehelix": [{ "index": 0, "rgb": [0, 0, 0] }, { "index": 0.07, "rgb": [22, 5, 59] }, { "index": 0.13, "rgb": [60, 4, 105] }, { "index": 0.2, "rgb": [109, 1, 135] }, { "index": 0.27, "rgb": [161, 0, 147] }, { "index": 0.33, "rgb": [210, 2, 142] }, { "index": 0.4, "rgb": [251, 11, 123] }, { "index": 0.47, "rgb": [255, 29, 97] }, { "index": 0.53, "rgb": [255, 54, 69] }, { "index": 0.6, "rgb": [255, 85, 46] }, { "index": 0.67, "rgb": [255, 120, 34] }, { "index": 0.73, "rgb": [255, 157, 37] }, { "index": 0.8, "rgb": [241, 191, 57] }, { "index": 0.87, "rgb": [224, 220, 93] }, { "index": 0.93, "rgb": [218, 241, 142] }, { "index": 1, "rgb": [227, 253, 198] }]
	};
	var indicies, fromrgba, torgba, nsteps, cmap, colormap, format, nshades, colors, alpha, i;
	if (!spec) spec = {};
	nshades = (spec.nshades || 72) - 1;
	format = spec.format || 'hex';
	colormap = spec.colormap;
	if (!colormap) colormap = 'jet';
	if (typeof colormap === 'string') {
		colormap = colormap.toLowerCase();
		if (!Colormap[colormap]) {
			throw Error(colormap + ' not a supported colorscale');
		}
		cmap = Colormap[colormap];
	} else if (Array.isArray(colormap)) {
		cmap = colormap.slice();
	} else {
		throw Error('unsupported colormap option', colormap);
	}
	if (cmap.length > nshades + 1) {
		throw new Error(
			colormap + ' map requires nshades to be at least size ' + cmap.length
		);
	}
	if (!Array.isArray(spec.alpha)) {
		if (typeof spec.alpha === 'number') {
			alpha = [spec.alpha, spec.alpha];
		} else {
			alpha = [1, 1];
		}
	} else if (spec.alpha.length !== 2) {
		alpha = [1, 1];
	} else {
		alpha = spec.alpha.slice();
	}
	indicies = cmap.map(c => {
		return Math.round(c.index * nshades);
	});
	alpha[0] = Math.min(Math.max(alpha[0], 0), 1);
	alpha[1] = Math.min(Math.max(alpha[1], 0), 1);
	var steps = cmap.map((c, i) => {
		var index = cmap[i].index
		var rgba = cmap[i].rgb.slice();
		if (rgba.length === 4 && rgba[3] >= 0 && rgba[3] <= 1) {
			return rgba
		}
		rgba[3] = alpha[0] + (alpha[1] - alpha[0]) * index;
		return rgba
	})
	var colors = []
	for (i = 0; i < indicies.length - 1; ++i) {
		nsteps = indicies[i + 1] - indicies[i];
		fromrgba = steps[i];
		torgba = steps[i + 1];
		for (var j = 0; j < nsteps; j++) {
			var amt = j / nsteps
			colors.push([
				Math.round(lerp(fromrgba[0], torgba[0], amt)),
				Math.round(lerp(fromrgba[1], torgba[1], amt)),
				Math.round(lerp(fromrgba[2], torgba[2], amt)),
				lerp(fromrgba[3], torgba[3], amt)
			])
		}
	}
	colors.push(cmap[cmap.length - 1].rgb.concat(alpha[1]))
	if (format === 'hex') colors = colors.map(rgb2hex);
	else if (format === 'rgbaString') colors = colors.map(rgbaStr);
	else if (format === 'float') colors = colors.map(rgb2float);
	return colors;
}
function colorMellow(c, zero1 = .3, factorLum = .5) {
	hsl = colorHSL(c, true);
	let res = colorFromHue(hsl.h, zero1, hsl.l * factorLum);
	return res;
}
function colorMix(c1, c2, percent = 50) {
	return pSBC(percent / 100, colorHex(c1), colorHex(c2), true);
	let o1 = colorRGB(c1, true); let rgbA = [o1.r, o1.g, o1.b];
	let o2 = colorRGB(c2, true); let rgbB = [o2.r, o2.g, o2.b];
	amountToMix = percent / 100;
	var r = colorChannelMixer(rgbA[0], rgbB[0], amountToMix);
	var g = colorChannelMixer(rgbA[1], rgbB[1], amountToMix);
	var b = colorChannelMixer(rgbA[2], rgbB[2], amountToMix);
	return "rgb(" + r + "," + g + "," + b + ")";
}
function colorMixer(rgbA, rgbB, amountToMix) {
	var r = colorChannelMixer(rgbA[0], rgbB[0], amountToMix);
	var g = colorChannelMixer(rgbA[1], rgbB[1], amountToMix);
	var b = colorChannelMixer(rgbA[2], rgbB[2], amountToMix);
	return "rgb(" + r + "," + g + "," + b + ")";
}
function colorNameToHexString(str) {
	var ctx = document.createElement('canvas').getContext('2d');
	ctx.fillStyle = str;
	return ctx.fillStyle;
}
function colorNameToHslaString(str) {
	let hex = colorNameToHexString(str);
	let rgb = hexToRgb(hex);
	let hsv = rgbToHsv(rgb.r, rgb.g, rgb.b);
	let hsl = hsvToHsl(hsv.h, hsv.s, hsv.v);
	hsla = hslToHslaString(hsl.h, hsl.s, hsl.l, 1);
	return hsla;
}
function colorNameToRgb(str) {
	let hex = colorNameToHexString(str);
	let rgb = hexToRgb(hex);
	return rgb;
}
function colorPalBlend(c1, c2) {
	let res = [];
	for (let frac = 0.1; frac <= 0.9; frac += 0.1) {
		let c = pSBC(frac, c1, c2, true);
		res.push(c);
	}
	return res;
}
function colorPalette(color, type = 'shade') {
	color = colorFrom(color);
	return colorShades(color);
}
function colorPaletteFromImage(img) {
	if (nundef(ColorThiefObject)) ColorThiefObject = new ColorThief();
	let palette0 = ColorThiefObject.getPalette(img);
	let palette = [];
	for (const pal of palette0) {
		let color = colorFrom(pal);
		palette.push(color);
	}
	return palette;
}
function colorPaletteFromUrl(path) {
	let img = mCreateFrom(`<img src='${path}' />`);
	let pal = colorPaletteFromImage(img);
	return pal;
}
function colorPalSet(chStart, nHues = 2, { ch2, lum = 50, sat = 100, lumSatMode = 1, blendMode = 1, a } = {}) {
	let h1 = chStart;
	let h2 = ch2;
	if (!isNumber(chStart)) {
		let hsl = colorHSL(chStart);
		h1 = hsl.h;
		lum = hsl.l;
		sat = hsl.s;
	}
	if (ch2 !== undefined && !isNumber(ch2)) {
		h2 = colorHue(ch2);
	}
	let palettes = [];
	let hueDiff = Math.floor(360 / nHues);
	let pal;
	for (let i = 0; i < nHues; i++) {
		if (h2 !== undefined) {
			pal = colorPalette(h1, { ch2: h2, lum: lum, sat: sat, a: a });
		} else {
			pal = colorPalette(h1, { ch2: undefined, lum: lum, sat: sat, a: a });
		}
		palettes.push(pal);
		h1 += hueDiff;
	}
	return palettes;
}
function colorPalShade(color) {
	let res = [];
	for (let frac = -0.8; frac <= 0.8; frac += 0.2) {
		let c = pSBC(frac, color, undefined, true);
		res.push(c);
	}
	return res;
}
function colorPalShadeX(color, n) {
	let res = [];
	let step = 1.6 / (n - 1);
	for (let frac = -0.8; frac <= 0.8; frac += step) {
		let c = pSBC(frac, color, undefined, true);
		res.push(c);
	}
	return res;
}
function colorPrepper(val) {
	return `<span style="color:${ColorDict[val].c}">${ColorDict[val][G.language].toUpperCase()}</span>`;
}
function colorR(cAny) {
	let rgb = colorRGB(cAny, true);
	return rgb.r;
}
function colorRGB(cAny, asObject = false) {
	let res = colorFrom(cAny);
	let srgb = res;
	if (res[0] == '#') {
		srgb = pSBC(0, res, 'c');
	}
	let n = allNumbers(srgb);
	if (asObject) {
		return { r: n[0], g: n[1], b: n[2], a: n.length > 3 ? n[3] : 1 };
	} else {
		return srgb;
	}
}
function colorRGBArrToHSLObject(rgbArr) {
	var r1 = Number(rgbArr[0]) / 255,
		g1 = Number(rgbArr[1]) / 255,
		b1 = Number(rgbArr[2]) / 255;
	var maxColor = Math.max(r1, g1, b1),
		minColor = Math.min(r1, g1, b1);
	var L = (maxColor + minColor) / 2,
		s = 0,
		H = 0;
	if (maxColor != minColor) {
		if (L < 0.5) {
			s = (maxColor - minColor) / (maxColor + minColor);
		} else {
			s = (maxColor - minColor) / (2.0 - maxColor - minColor);
		}
		if (r1 == maxColor) {
			H = (g1 - b1) / (maxColor - minColor);
		} else if (g1 == maxColor) {
			H = 2.0 + (b1 - r1) / (maxColor - minColor);
		} else {
			H = 4.0 + (r1 - g1) / (maxColor - minColor);
		}
	}
	L = L * 100;
	s = s * 100;
	H = H * 60;
	if (H < 0) {
		H += 360;
	}
	return { h: H, s: s, l: L };
}
function colorRGBArrToString(r, g, b) {
	return 'rgb(' + r + ',' + g + ',' + b + ')';
}
function colorSat(cAny) {
	let hsl = colorHSL(cAny, true);
	return hsl.s;
}
function colorsFromBFA(bg, fg, alpha) {
	if (fg == 'contrast') {
		if (bg != 'inherit') bg = colorFrom(bg, alpha);
		fg = colorIdealText(bg);
	} else if (bg == 'contrast') {
		fg = colorFrom(fg);
		bg = colorIdealText(fg);
	} else {
		if (isdef(bg) && bg != 'inherit') bg = colorFrom(bg, alpha);
		if (isdef(fg) && fg != 'inherit') fg = colorFrom(fg);
	}
	return [bg, fg];
}
function colorShade(plusMinus1, color, log = true) {
	let c = colorFrom(color);
	return pSBC(plusMinus1, c, undefined, !log);
}
function colorShades(color) {
	let res = [];
	for (let frac = -0.8; frac <= 0.8; frac += 0.2) {
		let c = pSBC(frac, color, undefined, true);
		res.push(c);
	}
	return res;
}
function colorShadeX(c, amt) {
	let col = colorHex(c);
	col = col.replace(/^#/, '')
	if (col.length === 3) col = col[0] + col[0] + col[1] + col[1] + col[2] + col[2]
	let [r, g, b] = col.match(/.{2}/g);
	([r, g, b] = [parseInt(r, 16) + amt, parseInt(g, 16) + amt, parseInt(b, 16) + amt])
	r = Math.max(Math.min(255, r), 0).toString(16)
	g = Math.max(Math.min(255, g), 0).toString(16)
	b = Math.max(Math.min(255, b), 0).toString(16)
	const rr = (r.length < 2 ? '0' : '') + r
	const gg = (g.length < 2 ? '0' : '') + g
	const bb = (b.length < 2 ? '0' : '') + b
	return `#${rr}${gg}${bb}`
}
function colorSystem() {
	simpleColors(randomColor());
}
function colorToFillStyle(c) {
	var ctx = document.createElement('canvas').getContext('2d');
	ctx.fillStyle = c;
	return ctx.fillStyle;
}
function colorTrans(cAny, alpha = 0.5) {
	return colorFrom(cAny, alpha);
}
function colorTransPalette(color = '#000000') {
	let res = [];
	for (const alpha of [.0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1]) res.push(colorTrans(color, alpha));
	return res;
}
function colorWheel(contrastTo, n) {
	let hc = colorHue(contrastTo);
	let wheel = [];
	let start = hc;
	let inc = Math.round(360 / (n + 1));
	start += inc;
	for (let i = 0; i < n; i++) {
		wheel.push(start % 360);
		start += inc;
	}
	return wheel.map(x => colorHSLBuild(x));
}
function combine(combiner, f, g) {
	if (typeof f != 'function') f = x => f;
	if (typeof g != 'function') g = x => g;
	return combiner(f, g);
}
function comp_(...arr) {
	return arr.join('_');
}
function comp_1(id) {
	return stringBefore(id, '_');
}
function comp_2(id) {
	return stringBefore(stringAfter(id, '_'), '_');
}
function comp_last(id) {
	return stringAfterLast(id, '_');
}
function compactObjectString(o) {
	let s = '';
	for (const k in o) {
		if (isSimple(o[k]) && !isComplexColor(o[k])) {
			if (isDict(o[k])) { error('!!!!!!!!!!!!!!!!isDict', o[k]); }
			s += k + ':' + o[k] + ' ';
		}
	}
	return s;
}
function compare(expected, actual) {
	let array1 = expected.slice()
	let array2 = actual.slice()
	return array1.length === array2.length && array1.sort().every(function (value, index) { return value === array2.sort()[index] });
}
function complementaryColor() {
	const hexColor = color.replace('#', '0x');
	return `#${('000000' + ('0xffffff' ^ hexColor).toString(16)).slice(-6)}`;
}
function complete_cell(board, r, c) {
	let used = [...get_row(board, r), ...get_column(board, c), ...get_square(board, square_coordinates[r][c])]
	let possibilities = []
	for (let p = 1; p <= 9; p++) {
		if (!used.includes(p)) {
			possibilities.push(p)
		}
	}
	if (possibilities.length == 1) {
		board[r][c] = possibilities[0]
		return true
	} else {
		board[r][c] = possibilities
		return false
	}
}
function completelyRemoveServerObjectFromRsg(oid, R) {
	aushaengen(oid, R);
	R.deleteObject(oid);
}
function complexCompare(obj1, obj2) {
	const obj1Keys = Object.keys(obj1);
	const obj2Keys = Object.keys(obj2);
	if (obj1Keys.length !== obj2Keys.length) {
		return false;
	}
	for (let objKey of obj1Keys) {
		if (obj1[objKey] !== obj2[objKey]) {
			if (typeof obj1[objKey] == "object" && typeof obj2[objKey] == "object") {
				if (!isEqual(obj1[objKey], obj2[objKey])) {
					return false;
				}
			}
			else {
				return false;
			}
		}
	}
	return true;
}
function complus(...arr) {
	return arr.join('+');
}
function complus1(id) {
	return stringBefore(id, '+');
}
function complus2(id) {
	return stringBefore(stringAfter(id, '+'), '+');
}
function compluslast(id) {
	return stringAfterLast(id, '+');
}
function component(width, height, color, x, y, type) {
	this.type = type;
	this.score = 0;
	this.width = width;
	this.height = height;
	this.speedX = 0;
	this.speedY = 0;
	this.x = x;
	this.y = y;
	this.gravity = 0;
	this.gravitySpeed = 0;
	this.draw = function () {
		ctx = myGameArea.context;
		if (this.type == 'text') {
			ctx.font = this.width + ' ' + this.height;
			ctx.fillStyle = color;
			ctx.fillText(this.text, this.x, this.y);
		} else {
			ctx.fillStyle = color;
			ctx.fillRect(this.x, this.y, this.width, this.height);
		}
	};
	this.newPos = function () {
		this.gravitySpeed += this.gravity;
		this.x += this.speedX;
		this.y += this.speedY + this.gravitySpeed;
		this.hitBottom();
	};
	this.hitBottom = function () {
		var rockbottom = myGameArea.canvas.height - this.height;
		if (this.y > rockbottom) {
			this.y = rockbottom;
			this.gravitySpeed = 0;
		}
	};
	this.crashWith = function (otherobj) {
		var myleft = this.x;
		var myright = this.x + this.width;
		var mytop = this.y;
		var mybottom = this.y + this.height;
		var otherleft = otherobj.x;
		var otherright = otherobj.x + otherobj.width;
		var othertop = otherobj.y;
		var otherbottom = otherobj.y + otherobj.height;
		var crash = true;
		if (mybottom < othertop || mytop > otherbottom || myright < otherleft || myleft > otherright) {
			crash = false;
		}
		return crash;
	};
}
function compose(itop, ichild, x, y) {
	mPosAbs()
}
function composeFleetingMessage() {
	let lst = inputs;
	let msg = lst.map(x => x.letter).join(',');
	let edecl = lst.length > 1 ? 's ' : ' ';
	let ddecl = lst.length > 1 ? 'den' : 'die';
	let s = (currentLanguage == 'E' ? 'Type the letter' + edecl : 'Tippe ' + ddecl + ' Buchstaben ');
	return s + msg;
}
function compute_closure(code) {
	if (nundef(code)) code = AU.ta.value;
	let disub = CODE.closure = computeClosure();
	let keylist = [];
	for (const type of ['const', 'var', 'cla', 'func']) {
		if (nundef(disub[type])) continue;
		let knownkeys = CODE.keysSorted.filter(x => lookup(disub, [type, x]));
		let extras = sortCaseInsensitive(get_keys(disub[type]).filter(x => !knownkeys.includes(x)));
		keylist = keylist.concat(knownkeys).concat(extras);
	}
	console.log('duplicates', hasDuplicates(keylist))
	write_code_text_file(keylist);
}
function compute_elo_ranking(players, game) {
	players = sortBy(players, 'score');
	let buckets = {};
	for (const pl of players) {
		let sc = pl.score;
		if (nundef(buckets[sc])) buckets[sc] = [];
		buckets[sc].push(pl.name);
	}
	let nBuckets = get_keys(buckets).length;
	let elopart = 2 / (nBuckets - 1);
	let val = -1;
	for (const b in buckets) {
		for (const name of buckets[b]) {
			let elo = get_elo(name, game);
			set_elo(name, game, elo + val);
			console.log('user', name, 'with score', b, 'gets', val, 'added to elo!');
		}
		val += elopart;
	}
}
function compute_hidden(plname) {
	let [fen, uplayer] = [Z.fen, Z.uplayer];
	let pl = fen.players[plname];
	let hidden;
	if (isdef(fen.winners)) hidden = false;
	else if (Z.role == 'spectator') hidden = plname != uplayer;
	else if (Z.mode == 'hotseat') hidden = (pl.playmode == 'bot' || plname != uplayer);
	else hidden = plname != Z.uname;
	return hidden;
}
function computeClosure(symlist) {
	let keys = {};
	for (const k in CODE.di) { for (const k1 in CODE.di[k]) keys[k1] = CODE.di[k][k1]; }
	CODE.all = keys;
	CODE.keylist = Object.keys(keys)
	let inter = intersection(Object.keys(keys), Object.keys(window));
	let done = {};
	let tbd = valf(symlist, ['_start']);
	let MAX = 1007, i = 0;
	let alltext = '';
	while (!isEmpty(tbd)) {
		if (++i > MAX) break;
		let sym = tbd[0];
		let o = CODE.all[sym];
		if (nundef(o)) o = getObjectFromWindow(sym);
		if (o.type == 'var' && !o.name.startsWith('d') && o.name == o.name.toLowerCase()) { tbd.shift(); continue; }
		if (o.type != 'func') { tbd.shift(); lookupSet(done, [o.type, sym], o); continue; }
		let olive = window[sym];
		if (nundef(olive)) { tbd.shift(); lookupSet(done, [o.type, sym], o); continue; }
		let text = olive.toString();
		if (!isEmpty(text)) alltext += text + '\r\n';
		let words = toWords(text, true);
		words = words.filter(x => text.includes(' ' + x));
		for (const w of words) {
			if (nundef(done[w]) && w != sym && isdef(CODE.all[w])) addIf(tbd, w);
		}
		tbd.shift();
		lookupSet(done, [o.type, sym], o);
	}
	let tres = '';
	for (const k of ['const', 'var', 'cla', 'func']) {
		console.log('done', k, done[k])
		let o = done[k]; if (nundef(o)) continue;
		let klist = get_keys(o);
		if (k == 'func') klist = sortCaseInsensitive(klist);
		for (const k1 of klist) {
			let code = CODE.justcode[k1];
			if (!isEmptyOrWhiteSpace(code)) tres += code + '\r\n';
		}
	}
}
function computeColor(c) { return (c == 'random') ? randomColor() : c; }
function computeColorX(c) {
	let res = c;
	if (isList(c)) return chooseRandom(c);
	else if (isString(c) && startsWith(c, 'rand')) {
		res = randomColor();
		let spec = c.substring(4);
		if (isdef(window['color' + spec])) {
			console.log('YES!');
			res = window['color' + spec](res);
		}
	}
	return res;
}
function computePresentedKeys(o, isTableObject) {
	let optin = isTableObject ? S.settings.table.optin : S.settings.player.optin;
	if (optin) return intersection(Object.keys(o), optin);
	let optout;
	if (S.settings.useExtendedOptout) {
		let keys = [];
		optout = S.settings.extendedOptout;
		for (const k in o) { if (optout[k]) continue; keys.push(k); }
		return keys;
	}
	optout = isTableObject ? S.settings.table.optout : S.settings.player.optout;
	for (const k in o) { if (optout[k]) continue; keys.push(k); }
	return keys;
}
function consExpand(o, keys, indent = 0) {
	console.log('.'.repeat(indent), o);
	for (const k in o) {
		if (!keys.includes(k)) continue;
		let oNew = o[k];
		console.log('.'.repeat(indent), k + ':')
		if (isList(oNew)) {
			for (const el of oNew) {
				consExpand(el, keys, indent + 2);
			}
		} else if (isDict(oNew)) {
			consExpand(oNew, keys, indent + 2);
		}
	}
}
function consout() {
	if (isTraceOn) console.log(...arguments);
}
function consOutput() { console.log(...arguments); }
function consoutt() {
	if (isTraceOn) console.log(...arguments, getFunctionsNameThatCalledThisFunction());
}
function contacts_2handleResult(result) {
	let d = mBy('dContacts');
	mCenterCenterFlex(d);
	d.innerHTML = JSON.parse(result).message;
}
function containedInAny(el, ll) {
	for (const lst of ll) {
		if (lst.includes(el)) return true;
	}
	return false;
}
function contains(s, sSub) { return s.toLowerCase().includes(sSub.toLowerCase()); }
function containsAll(arr, lst) {
	for (const el of lst) {
		if (!arr.includes(el)) return false;
	}
	return true;
}
function containsAny(arr, lst) {
	for (const x of lst) {
		if (arr.includes(x)) {
			return true;
		}
	}
	return false;
}
function containsColorWord(s) {
	let colors = ['old', 'blond', 'red', 'blue', 'green', 'purple', 'black', 'brown', 'white', 'grey', 'gray', 'yellow', 'orange'];
	for (const c of colors) {
		if (s.toLowerCase().includes(c)) return false;
	}
	return true;
}
function containsSet(arr, lst) {
	return containsAll(arr, lst);
}
function contentHallo(n, r) { return isdef(n.children) ? null : n.uid == '_2' ? 'HALLO' : 'WELT'; }
function contentNoParentContent(x, R) {
	if (nundef(x.children)) return x.uid; else return null;
}
function contentNoParentContentRootExtralong(x, R) {
	if (nundef(x.children)) return x.uid;
	else if (x.uid == R.tree.uid) return 'hallo das ist ein super super super langer string let it go - unclutch!';
	else return null;
}
function contentNoRootContent(x, R) {
	if (x.uid == R.tree.uid) return null; else return x.uid;
}
function contentRootExtralong(x, R) {
	if (x.uid == R.tree.uid) return 'hallo das ist ein besonders langer string!!!';
	else return x.uid;
}
function contentToElement(cont, styles, keepInLine = true) {
	let elem = cont;
	if (isString(cont)) {
		if (cont[0] === '<') {
			elem = createElementFromHtml(cont);
		} else {
			elem = mText(elem);
		}
	}
	if (keepInLine) styles['white-space'] = 'nowrap';
	mStyleX(elem, styles);
	return elem;
}
function continue_after_error() {
	dError.innerHTML = ''; if (isdef(DA.callback)) { DA.callback(); delete (DA.callback); }
}
function continue_game_ending_process() {
	let game = Session.cur_game;
	let winners = Session.winners;
	if (nundef(Session.cur_table.scoring_complete)) {
		console.log('scoring...')
		decrease_handicap_if_winstreak(winners, game);
		Session.cur_table.scoring_complete = true;
	}
	to_server({ tid: Session.cur_tid, uname: Session.cur_user }, 'seen');
}
function convert_from_row(row) {
	for (const k in row) {
		let val = row[k];
		if (isNumber(val)) row[k] = Number(val);
		if (isString(val) && val[0] == '{') { row[k] = JSON.parse(val); }
		if (val == 'null') row[k] = null;
		if (k == 'players' && isString(row[k])) row[k] = val.split(',');
	}
}
function convert_from_server(obj) {
	if (isdef(obj.table)) convert_from_row(obj.table);
	if (isdef(obj.playerdata)) {
		for (const row of obj.playerdata) {
			convert_from_row(row);
		}
	}
	if (isdef(obj.moves)) {
		for (const row of obj.moves) {
			convert_from_row(row);
		}
	}
}
function convert_to_range(x, min1, max1, min2, max2) {
	return (x - min1) * ((max2 - min2) / (max1 - min1)) + min2;
}
function convertGermanUhrzeitToNumbers(w) {
	console.log('...', w)
	let parts = multiSplit(w, ' :');
	console.log('...parts', parts)
	let res = [];
	for (const p of parts) {
		let p1 = p.trim().toLowerCase();
		if (isNumber(p1)) res.push(Number(p1));
		else if (isdef(germanNumbers[p1])) res.push(germanNumbers[p1]);
	}
	return res;
}
function convertRGBtoHSL(rgbValues) {
	return rgbValues.map((pixel) => {
		let hue,
			saturation,
			luminance = 0;
		let redOpposite = pixel.r / 255;
		let greenOpposite = pixel.g / 255;
		let blueOpposite = pixel.b / 255;
		const Cmax = Math.max(redOpposite, greenOpposite, blueOpposite);
		const Cmin = Math.min(redOpposite, greenOpposite, blueOpposite);
		const difference = Cmax - Cmin;
		luminance = (Cmax + Cmin) / 2.0;
		if (luminance <= 0.5) {
			saturation = difference / (Cmax + Cmin);
		} else if (luminance >= 0.5) {
			saturation = difference / (2.0 - Cmax - Cmin);
		}
		const maxColorValue = Math.max(pixel.r, pixel.g, pixel.b);
		if (maxColorValue === pixel.r) {
			hue = (greenOpposite - blueOpposite) / difference;
		} else if (maxColorValue === pixel.g) {
			hue = 2.0 + (blueOpposite - redOpposite) / difference;
		} else {
			hue = 4.0 + (greenOpposite - blueOpposite) / difference;
		}
		hue = hue * 60;
		if (hue < 0) {
			hue = hue + 360;
		}
		if (difference === 0) {
			return false;
		}
		return {
			h: Math.round(hue) + 180,
			s: parseFloat(saturation * 100).toFixed(2),
			l: parseFloat(luminance * 100).toFixed(2),
		};
	});
}
function convertTimesAndNumbersToWords(w) {
	if (w.includes(':')) {
		let h = stringBefore(w, ':');
		let m = stringAfter(w, ':');
		let hn = Number(h);
		let mn = Number(m);
		let xlist = allIntegers(w);
		if (xlist.length == 2) {
			if (xlist[1] == 0) xlist = [xlist[0]];
			xlist = xlist.map(n => n.toString());
			let res1 = xlist.join('');
			w = res1;
		}
	}
	if (isNumber(w)) {
		let res = toWordsSpeechS(w);
		return res;
	}
	return w;
}
function convertTimeStringToNumbers(ts) {
	return allIntegers(ts);
}
function convertToColor(x) {
	let res = SPEC.color[x];
	if (!res) {
		res = SPEC.color[x] = randomColor();
	}
	return res;
}
function convertToGraphElements(g1, house) {
	let vertices = house.rooms.map(x => Items[x]);
	let doors = [];
	for (const v of vertices) {
		v.center = getCenter(v.rect);
		v.center.x += v.rect.l - house.rect.l;
		v.center.y += v.rect.t - house.rect.t;
		g1.addNode(v, v.center);
		doors = union(doors, v.doors);
	}
	let centers = g1.getNodes().map(x => x.data('center'));
	g1.storePositions('prest', centers);
	let edges = doors.map(x => Items[x]).filter(x => x.rooms.length == 2);
	for (const e of edges) {
		if (e.rooms.length < 2) continue;
		e.source = e.rooms[0];
		e.target = e.rooms[1];
		g1.addEdge(e.source, e.target, e);
	}
}
function convertToGraphElements_dep(g1, house) {
	let elements = { nodes: [], edges: [] };
	let vertices = house.rooms.map(x => Items[x]);
	let doors = [];
	for (const v of vertices) {
		v.center = getCenter(v.rect);
		elements.nodes.push({ data: v, position: v.center });
		doors = union(doors, v.doors);
	}
	let edges = doors.map(x => Items[x]).filter(x => x.rooms.length == 2);
	for (const e of edges) {
		if (e.rooms.length < 2) continue;
		e.source = e.rooms[0];
		e.target = e.rooms[1];
		elements.edges.push({ data: e });
	}
	return elements;
}
function convertToLabel(x) {
	let res = lookup(SPEC, ['label', x]);
	return res ? res : x;
}
function convertToList(x) {
	if (isList(x)) return x;
	if (isString(x) && x != '') return [x];
	return [];
}
function convertToMS(p) {
	let res = undefined;
	if (isMS(p)) {
		res = p;
	} else if (isEvent(p)) {
		p = p.target;
		res = findParentWithId(p);
		res = MS.byId[res.id];
	} else if (isString(p)) {
		res = MS.byId[p];
	} else {
	}
	return res;
}
function convertToRgba(cAny, alpha = 1) {
	let a = alpha >= 0 && alpha <= 1 ? alpha : alpha / 100;
	testHelpers('type is', typeof cAny);
	if (isString(cAny)) {
		testHelpers('convertToRgba is a String', cAny);
		if (cAny[0] == '#') {
			let rgbObj = hexToRgb(cAny);
			return `rgba(${rgbObj.r},${rgbObj.g},${rgbObj.b},${a})`;
		} else if (startsWith(cAny, 'hsl') || startsWith(cAny, 'rgb')) {
			testHelpers('hsla or rgba color!', cAny);
			return cAny;
		} else if (cAny == 'transparent') {
			return cAny;
		} else {
			testHelpers('should be a color name!!!', cAny);
			let rgbObj = colorNameToRgb(cAny);
			return `rgba(${rgbObj.r},${rgbObj.g},${rgbObj.b},${a})`;
		}
	} else if (Array.isArray(cAny)) {
		if (cAny.length == 3) {
			let r = cAny[0];
			let g = cAny[1];
			let b = cAny[2];
			return `rgba(${r},${g},${b},${a})`;
		} else {
			testHelpers('convertToRgba: ERROR! NOT A COLOR:', cAny);
			return randomColor(100, 70, a);
		}
	}
}
function convertUmlaute(w) {
	w = replaceAll(w, 'ue', 'ü');
	w = replaceAll(w, 'ae', 'ä');
	w = replaceAll(w, 'oe', 'ö');
	w = replaceAll(w, 'UE', 'Ü');
	w = replaceAll(w, 'AE', 'Ä');
	w = replaceAll(w, 'OE', 'Ö');
	w = replaceAll(w, 'ß', 'ss');
	return w;
}
function copyKeys(ofrom, oto, except = {}, only = null) {
	let keys = isdef(only) ? only : Object.keys(ofrom);
	for (const k of keys) {
		if (isdef(except[k])) continue;
		oto[k] = ofrom[k];
	}
	return oto;
}
function copyLinesFromTo(lines, iStart, iEnd, trimStart, trimEnd) {
	let block = isdef(trimStart) ? stringAfter(lines[iStart], '/*') : lines[iStart];
	iStart += 1;
	while (iStart < iEnd) {
		block += '\n' + lines[iStart];
		iStart += 1;
	}
	if (isdef(trimEnd)) block = stringBefore(block, '*/');
	return block.trim();
}
function copySimpleProps(ofrom, oto = {}) { for (const k in ofrom) { if (isLiteral(k)) oto[k] = ofrom[k]; } return oto; }
function correct_code_text(code) {
	code = replaceAllSpecialChars(code, '\t', '  ');
	let lines = code.split('\r\n');
	for (const line of lines) {
		if (line.includes('\r')) console.log('CR in line!!!!', code);
		if (line.includes('\t')) {
			console.log('TAB in line!!!!', code);
		}
	}
	return lines[0] + lines.slice(1).join('\n');
}
function correct_handsorting(hand, plname) {
	let pl = Z.fen.players[plname];
	let [cs, pls, locs] = [Clientdata.handsorting, pl.handsorting, localStorage.getItem('handsorting')];
	let s = cs ?? pls ?? locs ?? Config.games[Z.game].defaulthandsorting;
	hand = sort_cards(hand, s == 'suit', 'CDSH', true, Z.func.rankstr);
	return hand;
}
function correctBlanks() {
	let wrong = getWrongWords();
	if (nundef(TOList)) TOList = {};
	Selected.feedbackUI = wrong.map(x => iDiv(x));
	failPictureGoal();
	let t1 = setTimeout(removeMarkers, 1000);
	let t2 = setTimeout(() => wrong.map(x => { correctWordInput(x); animate(iDiv(x), 'komisch', 1300); }), 1000);
	TOList.correction = [t1, t2];
	return 2500;
}
function correctFuncName(specType) {
	switch (specType) {
		case 'list': specType = 'liste'; break;
		case 'dict': specType = 'dicti'; break;
		case undefined: specType = 'panel'; break;
	}
	return specType;
}
function correctNumbersInString(s, dec) {
	let parts = s.split('_');
	for (let i = 0; i < parts.length; i++) {
		let p = parts[i];
		if (isNumber(p)) {
			let n = Number(p);
			n -= dec;
			parts[i] = '' + n;
		}
	}
	let res = parts.join('_');
	return res;
}
function correctPolys(polys, approx = 10) {
	let clusters = [];
	for (const p of polys) {
		for (const pt of p) {
			let found = false;
			for (const cl of clusters) {
				for (const v of cl) {
					let dx = Math.abs(v.x - pt.x);
					let dy = Math.abs(v.y - pt.y);
					if (dx < approx && dy < approx) {
						cl.push(pt);
						found = true;
						break;
					}
				}
				if (found) break;
			}
			if (!found) {
				clusters.push([pt]);
			}
		}
	}
	let vertices = [];
	for (const cl of clusters) {
		let sumx = 0;
		let sumy = 0;
		let len = cl.length;
		for (const pt of cl) {
			sumx += pt.x;
			sumy += pt.y;
		}
		vertices.push({ x: Math.round(sumx / len), y: Math.round(sumy / len) });
	}
	for (const p of polys) {
		for (const pt of p) {
			let found = false;
			for (const v of vertices) {
				let dx = Math.abs(v.x - pt.x);
				let dy = Math.abs(v.y - pt.y);
				if (dx < approx && dy < approx) {
					if (dx != 0 || dy != 0) {
						pt.x = v.x;
						pt.y = v.y;
					}
					found = true;
				}
				if (found) break;
			}
			if (!found) {
				error('point not found in vertices!!! ' + pt.x + ' ' + pt.y);
			}
		}
	}
	return vertices;
}
function correctWordInput(winp) { winp.charInputs.map(x => refillCharInput(x, x.letter)); }
function countAll(s, scount) {
	let letters = toLetters(scount);
	function counter(total, ch) { if (letters.includes(ch)) return total + 1; else return total; }
	let res = [...s].reduce(counter, 0);
	return res;
}
function countIndent(s, ntab = 2) {
	let i = 0;
	let inc;
	while (!isEmpty(s)) {
		if (startsWith(s, '\t')) { i += ntab; inc = ntab; }
		else if (s[0] == ' ') { i += 1; inc = 1; }
		else break;
		s = s.slice(1);
	}
	return i;
}
function countLetters(s, letter) {
	let n = 0;
	for (const ch of s) {
		if (ch == letter) n++;
	}
	return n;
}
function cPortrait(dParent, styles = {}, id) {
	if (nundef(styles.h)) styles.h = Card.sz;
	if (nundef(styles.w)) styles.w = styles.h * .7;
	return cBlank(dParent, styles, id);
}
function create_agent(where, o = {}) {
	let res;
	if (is_map(where)) {
		res = L.marker(valf(o.center, where.options.center)).addTo(where);
	} else {
		res = mDiv(where, o);
	}
	return res;
}
function create_ai_move(data) {
	let newscore = Math.min(Session.winning_score, data.score + 1);
	console.log('AI score is', newscore);
	let newstate = data.state;
	let newdata = {
		tid: data.tid,
		player_status: newscore >= Session.winning_score ? 'done' : 'joined',
		score: newscore,
		state: newstate,
		uname: data.uname
	};
	return newdata;
}
function create_bluff_input1(dParent, arr, units = 1, sz, index) {
	let d = mDiv(dParent, { gap: 5, w: units * sz * 1.35 }); mCenterFlex(d);
	for (const a of arr) {
		let da = mDiv(d, { align: 'center', wmin: 20, padding: 4, cursor: 'pointer', rounding: 4, bg: units == 1 ? '#e4914b' : 'sienna', fg: 'contrast' }, null, a == 'T' ? '10' : a);
		da.onclick = () => input_to_anzeige1(a, index);
	}
	return d;
}
function create_branch(b, angle, len, color) {
	let root = C.root;
	let x = b.p2.x + Math.cos(angle) * len;
	let y = b.p2.y - Math.sin(angle) * len;
	let age = b.age + 1;
	let o = {
		done: false,
		p1: b.p2,
		p2: { x: x, y: y },
		x: x,
		y: y,
		t: 'branch',
		age: age,
		angle: angle,
		len: len,
		thickness: b.thickness * root.dthickness,
		color: color,
	};
	b.done = true;
	return o;
}
function create_card_assets_c52() {
	let ranknames = { A: 'Ace', K: 'King', T: '10', J: 'Jack', Q: 'Queen' };
	let suitnames = { S: 'Spades', H: 'Hearts', C: 'Clubs', D: 'Diamonds' };
	let rankstr = '23456789TJQKA';
	let suitstr = 'SHDC';
	sz = 100;
	let di = {};
	for (const r of toLetters(rankstr)) {
		for (const s of toLetters(suitstr)) {
			let k = r + s;
			let info = di[k] = { key: k, val: 1, irank: rankstr.indexOf(r), isuit: suitstr.indexOf(s), rank: r, suit: s, color: RED, c52key: 'card_' + r + s, w: sz * .7, h: sz, sz: sz, ov: .25, friendly: `${isNumber(r) ? r : ranknames[r]} of ${suitnames[s]}`, short: `${r}${s}` };
			info.isort = info.isuit * 13 + info.irank;
		}
	}
	C52Cards = di;
	return di;
}
function create_div(where, o = {}) {
	let res;
	if (is_map(where)) {
		let icon = L.divIcon({ className: 'my-div-icon' });
		var greenIcon = L.icon({
			iconUrl: 'leaf-green.png',
			shadowUrl: 'leaf-shadow.png',
			iconSize: [38, 95],
			shadowSize: [50, 64],
			iconAnchor: [22, 94],
			shadowAnchor: [4, 62],
			popupAnchor: [-3, -76]
		});
		res = L.marker(o.center, { icon: greenIcon }).addTo(map);
	} else {
		res = mDiv(where, o);
	}
	return res;
}
function create_div_marker(map, html, center, sz, offset) {
	let res = L.marker(center, { icon: L.divIcon({ iconAnchor: offset, className: `custom-div-icon ${sz}`, html: html }) }).addTo(map);
	return res;
}
function create_fa(map, key, center, styles = {}) {
	addKeys({ fz: 30 }, styles);
	let d = mCreate('i');
	mStyle(d, styles);
	mClass(d, `fa fa-${key}`);
	let dp = mCreate('div');
	mAppend(dp, d);
	let html = dp.innerHTML;
	let offset = [styles.fz / 2, styles.fz / 3];
	let className = `custom-div-icon`;
	let res = L.marker(center, { icon: L.divIcon({ iconAnchor: offset, className: className, html: html }) }).addTo(map);
	return res;
}
function create_fen_deck(cardtype, num_decks = 1, num_jokers = 0) {
	let arr = get_keys(C52Cards).map(x => x + cardtype);
	let newarr = [];
	while (num_decks > 0) { newarr = newarr.concat(arr); num_decks--; }
	while (num_jokers > 0) { newarr.push('*H' + cardtype); num_jokers--; }
	return newarr;
}
function create_flower() { }
function create_leaf(b, root) {
	let o = {
		done: true,
		p: b.p2,
		x: b.p2.x,
		y: b.p2.y,
		t: 'leaf',
		age: b.age + 1,
		len: b.len * root.dlen,
		angle: b.angle,
		thickness: 20,
		color: 'lawngreen',
	};
	b.done = true;
	return o;
}
function create_left_side_extended() {
	let dl = dLeft;
	mClear(dLeft);
	let [dt, dse, dsb, dft, dfta] = [mDiv(dl), mDiv(dl), mDiv(dl), mDiv(dl), mDiv(dl)];
	for (const d of [dt, dse, dsb, dft, dfta]) mStyle(d, { padding: 4, hmin: 10 })
	mSearchGoLive('keywords', mySearch, dse, { hmargin: 6 }, { selectOnClick: true });
	let dm = mDom(dft, {}, { html: 'Edit Code:' });
	mButton('closure', compute_closure, dm)
	let r = getRect(dm);
	h = window.innerHeight - (r.y + r.h + 4); mStyle(dfta, { h: h, box: true, padding: 4 });
	AU.ta = mDom(dfta, { fz: 18, family: 'consolas', w100: true, box: true, h: '99%', bg: 'white', fg: 'black' }, { tag: 'textarea', id: 'ta', className: 'plain' });
}
function create_map(o = {}) {
	addKeys({ maxBounds: [[-89.98155760646617, -180], [89.99346179538875, 180]], key: 'osm', center: Geo.places.tuerkenschanzpark, zoom: 17, id: 'map' }, o);
	let info = Geo.layerInfo[o.key];
	o.layers = [isdef(info) ? L.tileLayer(info.url, info.options) : L.tileLayer('')];
	let map = L.map(o.id, o);
	return map;
}
function create_marker(text) {
	let d = mCreate('div');
	d.innerHTML = text;
	mStyle(d, { position: 'fixed', fz: 50 });
	document.body.appendChild(d);
	Markers.push(d);
	return d;
}
function create_menu(dParent, dir = 'h') {
	let d;
	if (dir == 'h') {
		d = dMenu = mDiv(dParent, { w: '100%', display: 'flex' });
	} else {
		d = dMenu = mDiv(dParent, { padding: 10, gap: 10, h: '100%', display: 'flex', dir: dir });
	}
	mToolbar(['grow', 'clear'], handle_command, d, {}, { vmargin: 5 });
	mTogglebar({ jitter: false }, flag_toggle, { bg: 'lightgreen' }, { bg: '#eee' }, d);
	mLinebreak(dTable, 10);
}
function create_new_table(user, game) {
	user = valf(user, Session.cur_user);
	game = valf(game, Session.cur_game);
	let opt = extract_game_options();
	let t = {};
	t.friendly = generate_friendly_table_name();
	t.game = Session.cur_game;
	t.host = user;
	t.players = opt.players;
	t.fen = GSpotitMulti.start_fen(t.players);
	t.status = 'created';
	t.player_init = '';
	DA.next = get_games;
	to_server(t, 'create_table');
}
function create_new_table_and_join_all(user, game) {
	Session.cut_tid = Session.cur_table = null;
	let t = {};
	t.friendly = generate_friendly_table_name();
	t.game = 'gSpotit';
	t.host = Session.cur_user;
	t.players = valf(lookup(Session, ['game_options', 'players']), get_def_players_for_user(Session.cur_user));
	t.fen = 'noneed';
	t.options = valf(lookup(Session, ['game_options', 'game']), {});
	t.status = 'started';
	t.host_status = 'joined';
	t.player_status = 'joined';
	t.player_init = {};
	to_server(t, 'create_table_and_start');
}
function create_nodes(r, pad, dmin) {
	let [xstart, ystart, w, h] = [r.x + pad, r.y + pad, r.w, r.h];
	let [x, y] = [xstart, ystart];
	let items = []; let [rows, cols, row, col] = [0, 0, 0, 0];
	while (y < h - dmin) {
		while (x < w - dmin) {
			let item = { w: 5, h: 5, iy: row, ix: col, bg: 'blue', position: 'absolute', x: x, y: y };
			x += dmin;
			items.push(item);
			cols++; col++;
		}
		rows++; row++; col = 0;
		x = xstart;
		y += dmin;
	}
	return items;
}
async function create_pic_dict(l, syms) {
	let edict = await route_path_text(`../base/assets/words/${l}dict.txt`);
	console.log('dict', edict);
	let lang = l.toUpperCase();
	let words = l == 'e' ? edict.split('\r\n') : edict.split('\n');
	console.log('words', words);
	console.log('syms', syms);
	let wdi = {};
	for (const w of words) {
		let w1 = w.trim().toLowerCase();
		if (isEmpty(w1)) continue;
		wdi[w1] = true;
	}
	let slist = [];
	for (const skey in syms) {
		let e = syms[skey][lang];
		if (nundef(e)) continue;
		e = e.trim().toLowerCase();
		slist.push({ key: skey, w: e });
	}
	slist_sorted = sortBy(slist, 'w');
	console.log('slist sorted', slist_sorted);
	console.log(wdi);
	let edi = {};
	for (const o of slist_sorted) {
		let [e, skey] = [o.w, o.key];
		if (e in wdi) edi[e] = skey;
		else console.log('word', e, 'from syms not in dict!!!');
	}
	console.log('result', edi, Object.keys(edi).length);
	return edi;
	return;
	for (const skey in syms) {
		let e = syms[skey][lang];
		if (nundef(e)) continue;
		e = e.trim().toLowerCase();
		console.assert(isdef(e) && e == e.toLowerCase(), 'word in syms not lowercasse:' + e);
		if (e in wdi) edi[e] = skey;
		else console.log('word', e, 'from syms not in dict!!!');
	}
	console.log('result', edi, Object.keys(edi).length);
	return edi;
}
async function create_pic_dicts(list = ['e', 'd', 'f', 's']) {
	let syms = await route_path_yaml_dict('../base/assets/allSyms.yaml');
	for (const l of list) {
		let di = await create_pic_dict(l, syms);
		downloadAsYaml(di, l + 'picdict');
	}
	loader_off();
}
function create_random_players(n = 1) {
	let colors = rWheel(n);
	let res = [{ name: 'mimi', playmode: 'human', color: colors[0] }];
	let names = rChoose(MyNames, n - 1);
	if (!isList(names)) names = [names];
	for (let i = 1; i < n; i++) {
		let pl = { name: names[i - 1], playmode: 'bot', color: colors[i], strategy: 'random' };
		res.push(pl);
	}
	return res;
}
function create_score_table() {
	let t = Session.cur_table;
	let fen = t.fen;
	let dParent = mBy('dIntro');
	let d = mDiv(dParent, { margin: 'auto', w: 300, bg: 'red' });
	html = `<div style='text-align:center;margin-top:200px'>
  <table id='customers'><tr><th>player</th><th>score</th></tr>
  `;
	let plparts = fen.split(',');
	for (const pl of plparts) {
		html += `<tr><td>${stringBefore(pl, ':')}</td><td>${stringAfter(pl, ':')}</td></tr>`
	}
	html += '</table></div>';
	d.innerHTML = html;
}
function create_set_card(fen, dParent, card_styles) {
	let myinfo = info_from_fen(fen);
	let info = { shape: 'circle', color: BLUE, num: 1, shading: 'solid', background: 'white', text: 'none' };
	copyKeys(myinfo, info);
	let card = draw_set_card(dParent, info, card_styles);
	card.fen = fen;
	return card;
}
function create_sym(map, key, center, sz, styles) {
	let d1 = mSym(key, null, styles);
	let html = d1.innerHTML;
	let [xoff, yoff] = sz == 'large' ? [136, 150] : sz == 'medium' ? [36, 40] : [16, 18];
	let offset = [xoff, yoff];
	return create_div_marker(map, html, center, sz, offset);
}
function create_table(options, players) {
	Session.cur_tid = Session.cur_table = Selected = null;
	let gname = Session.cur_game;
	let t = {};
	t.friendly = generate_friendly_table_name();
	t.game = Session.cur_game;
	t.host = Session.cur_user;
	t.turn = 'none';
	t.players = valf(players, valf(lookup(Session, ['game_options', 'players']), get_def_players_for_user(Session.cur_user)));
	t.options = valf(options, lookup(Session, ['game_options', 'game']));
	t.pl_options = get_player_options(t.players, gname);
	t.status = 'started';
	t.host_status = 'joined';
	t.player_status = 'joined';
	t.player_init = DB.games[gname].game_type == 'turn' ? null : {};
	if (gname == 'gPreinno') { t.fen = inno_setup(t.players); }
	else if (gname == 'gAristo') { t.fen = ari_setup(t.players); }
	return t;
}
function create_toolbar(map) {
	let d = map._controlContainer;
	console.log('control container', d);
	dMap = mDiv(d, { position: 'absolute', top: 0, left: 50, w: '100%', h: '100%' });
	dMap.style.zIndex = 12000;
	let toolbar = mDiv(dMap, { hmargin: 10, padding: 10, cursor: 'pointer' }, null, null, 'top'); mFlexWrap(toolbar);
	return toolbar;
}
function createAccountContent(userdata) {
	DA.imageChanged = DA.colorChanged = false;
	return `
  <div id="dAccount" style="max-width=500px; margin-top:10px; display:flex; animation: appear1 1s ease;justify-content:center; align-content:center">
    <div id="error">some text</div>
    <div style='text-align:center'>
      <form id="myform" autocomplete="off" style='text-align:center;background:${userdata.color}'>
        <span id='img_dd_instruction' style="font-size:11px;">drag and drop an image to change</span><br>
        <img id="imgPreview" onload='addColorPicker("${userdata.color}");' src='${get_image_path(userdata)}' ondragover="handle_drag_and_drop(event)" ondrop="handle_drag_and_drop(event)" ondragleave="handle_drag_and_drop(event)"
          style="height:200px;margin:10px;" />
        <input id='iUsername' type="text" name="motto" placeholder='motto' value="${userdata.motto}" autofocus
          onkeydown="if (event.keyCode === 13){event.preventDefault();collect_data(event);}" />
        <br />
        <input id='save_settings_button' type="button" value="Submit" onclick="collect_data(event)" ><br>
      </form>
  </div></div>
  `;
}
function createAccountContent1(userdata) {
	var d = mBy("inner_left_panel");
	clearElement(d);
	let d1 = mDiv(d, { w: '100%', matop: 10, animation: 'rotateIntoView 1s ease' });
	mCenterFlex(d1);
	let d2 = mDiv(d1, {}, 'error', 'hallo das ist ein error');
	let d3 = mDiv(d1, { align: 'center', bg: 'yellow' });
	let form = mCreate('form', { align: 'center', bg: 'red' }, 'myform');
	form.id = 'myform';
	form.setAttribute('autocomplete', 'off');
	form.onsubmit = (ev) => { ev.preventDefault(); collect_data(); }
	mAppend(d3, form);
	let sp1 = mSpan(form, { fz: 11 }, null, 'drag and drop an image to change');
	form.innerHTML += '<br>';
	DA.imageChanged = DA.colorChanged = false;
	let img = mImg(userdata.imagePath + '?=' + Date.now(), form, { h: 200, margin: 10 });
	img.onload = () => {
		let inp = mCreate('input');
		mAppend(form, inp);
		inp.setAttribute('type', 'text');
		inp.setAttribute('placeholder', 'username');
		inp.setAttribute('name', 'username');
		inp.setAttribute('id', 'iUsername');
		inp.setAttribute('value', userdata.username);
		inp.setAttribute('autofocus', true);
		inp.onkeydown = ev => {
			if (ev.keyCode === 13) {
				ev.preventDefault();
				console.log('WTF!!!!!!!!!!!!!!!!!!!!!!!!!!!!');
				collect_data(ev);
			}
		};
		form.innerHTML += '<br />';
		let picker = mColorPickerBehavior(U.settings.userColor, img, form,
			(a) => { console.log('new color is', a); DA.newColor = a; DA.colorChanged = true; },
			{ w: 322, h: 45, bg: 'green', rounding: 6, margin: 'auto', align: 'center' });
		form.innerHTML += `<input id='save_account_button' type="button" value="Submit" onclick="collect_data(event)" ><br>`;
	};
	img.id = 'imgPreview';
	img.setAttribute('allowDrop', true);
	img.ondragover = img.ondrop = img.ondragleave = handle_drag_and_drop;
}
function createAreas(dGrid, areaNames, prefix, shadeAreaBackgrounds = false, showAreaNames = true) {
	console.log('creating areas', areaNames)
	let SPEC = {}; SPEC.areas = { T: 'dTrick', H: 'dHuman', A: 'dAI' };
	let palette = getTransPalette9();
	let ipal = 1;
	let result = [];
	for (const k in SPEC.areas) {
		let areaName = SPEC.areas[k];
		let dCell = mDiv(dGrid, { h: '100%', w: '100%', bg: 'random', 'grid-area': k, });
		if (shadeAreaBackgrounds) { dCell.style.backgroundColor = palette[ipal]; ipal = (ipal + 1) % palette.length; }
		if (showAreaNames) {
			dCell = mTitledDiv(areaName, dCell, { bg: 'green', }, { h: '100%', w: '100%', bg: 'yellow', }, areaName)
		} else { dCell.id = areaName; }
		result.push({ name: areaName, div: dCell });
	}
	return result;
	for (const areaName of areaNames) {
		let d1 = document.createElement('div');
		let id = (isdef(prefix) ? prefix + '.' : '') + areaName;
		d1.id = id;
		d1.style.gridArea = areaName;
		mStyleX(d1, { bg: 'random' });
		d1.innerHTML = 'hallo'
		if (shadeAreaBackgrounds) { d1.style.backgroundColor = colorPalette[ipal]; ipal = (ipal + 1) % colorPalette.length; }
		if (showAreaNames) { d1.innerHTML = makeAreaNameDomel(areaName); }
		dGrid.appendChild(d1);
	}
}
function createAreas_dep(d, areaNames, prefix, shadeAreaBackgrounds = false, showAreaNames = true) {
	console.log('creating areas', areaNames)
	let palette = getTransPalette9();
	let ipal = 1;
	for (const areaName of areaNames) {
		let d1 = document.createElement('div');
		let id = (isdef(prefix) ? prefix + '.' : '') + areaName;
		d1.id = id;
		d1.style.gridArea = areaName;
		mStyleX(d1, { bg: 'random' });
		d1.innerHTML = 'hallo'
		if (shadeAreaBackgrounds) { d1.style.backgroundColor = colorPalette[ipal]; ipal = (ipal + 1) % colorPalette.length; }
		if (showAreaNames) { d1.innerHTML = makeAreaNameDomel(areaName); }
		d.appendChild(d1);
	}
}
function createArtificialSpecForBoardMemberIfNeeded(oid, o, R) {
	let key = R.getR(oid);
	if (!isEmpty(key)) {
		key = key[0];
	}
	else {
		key = getUID();
		R.lastSpec[key] = { cond: { obj_type: o.obj_type }, type: 'info' };
		R.addR(oid, key);
		R.updateR(key);
	}
	return key;
}
function createBoard(nui, R, area) {
	console.log('nui', nui, 'R', R, 'area', area);
	let [oid, boardType, r0, c0] = detectBoardOidAndType(nui.oid, nui.boardType, R);
	nui.oid = oid;
	nui.boardType = boardType;
	let baseIndex = { r0: r0, c0: c0 };
	nui.bi = window[nui.boardType](R.getO(nui.oid), R, baseIndex);
	generalGrid(nui, R, area);
}
function createCardZone(id, label, labelPos = 'top', hCard = 110) {
	let gap = 2;
	let dZone = mDiv(dTable, { padding: 10, align: 'center', rounding: 20 });
	dZone.id = 'zone_' + id;
	let dLabel;
	if (isdef(label) && labelPos == 'top') {
		dLabel = mText(label, dZone, { display: 'inline-block', maleft: -10 });
	}
	let dData = mDiv(dZone, { h: hCard + gap, align: 'center' });
	dData.id = 'data_' + id;
	if (isdef(label) && labelPos == 'bottom') {
		dLabel = mText(label, dZone, { display: 'inline-block', maleft: -10 });
	}
	let b = getBounds(dZone);
	return { div: dZone, dData: dData, dLabel: dLabel, label: label, labelPos: labelPos, w: b.width, h: b.height, center: actualCenter(dZone) };
}
function createcircle(posx, posy, radius, stroke, fill, filter) {
	var circle = document.createElementNS(svgns, "circle");
	circle.setAttributeNS(null, "id", "c" + circles);
	circle.setAttributeNS(null, "cx", posx);
	circle.setAttributeNS(null, "cy", posy);
	circle.setAttributeNS(null, "r", radius);
	circle.setAttributeNS(null, "stroke-width", stroke);
	circle.setAttributeNS(null, "fill", fill);
	circle.setAttributeNS(null, "filter", filter);
	circle.setAttributeNS(null, "data-posx", posx);
	svg.appendChild(circle);
}
function createClassByName(name, ...a) { var c = eval(name); return new c(...a); }
function createClientBoardNew(o, s) {
	let [layout, wCell, hCell, wGap, hGap] = [s.boardLayout, s.dxCenter, s.dyCenter, s.wGap, s.hGap];
	let dInner = o.dInner;
	mCenterCenterFlex(dInner);
	let [wArea, hArea] = [Math.min(o.wOuter, s.wFieldArea), Math.min(o.hOuter, s.hFieldArea)];
	let dArea = o.dArea = mDiv(dInner, { matop: s.boardMarginTop, maleft: s.boardMarginLeft, w: wArea, h: hArea }, 'dFieldArea');
	mCenterCenterFlex(dArea);
	let [w, h] = [wArea, hArea];
	let isHexLayout = startsWith(layout, 'hex');
	let hline = isHexLayout ? hCell * .75 : hCell;
	let rows, cols;
	if (isdef(s.rows) && layout != 'circle') rows = s.rows; else rows = Math.floor(h / hline);
	if (isdef(s.cols) && layout != 'circle') cols = s.cols; else cols = Math.floor(w / wCell)
	let [centers, wTotal, hTotal] = getCentersFromRowsCols(layout, rows, cols, wCell, hCell);
	let dCells = mDiv(dArea, { w: wTotal, h: hTotal, position: 'relative' });
	mStyleX(dArea, { w: Math.max(wArea, wTotal), h: Math.max(hArea, hTotal) });
	let fields;
	if (isdef(centers)) fields = createFieldsFromCenters(dCells, o, centers, wCell, hCell, wGap, hGap, wTotal, hTotal);
	let bg = valf(s.fieldColor, colorTrans('black', .3));
	fields.map(x => mStyleX(iDiv(x), { bg: bg }));
	if (s.boardRotation != 0) {
		dCells.style.transform = `rotate(${s.boardRotation}deg)`;
	}
}
function createCollapsibles(dv, lst, collapsed) {
	let pageContent = mBy('pageContent');
	for (const item of lst) {
		let path = item;
		let info = dv[path];
		let coll = genCollapsible(path, dv[path]);
		dv[path].collapsible = coll;
		DOC_UIS[coll.id] = dv[path];
		let signatureLinkContainer = mDiv(mBy('menu'));
		signatureLinkContainer.id = getLinkContainerId(coll.id);
		let pathContainer = mDiv(pageContent);
		pathContainer.id = info.idPathContainer;
		let pathTitle = mDiv(pathContainer);
		pathTitle.innerHTML = info.filename;
		pathTitle.classList.add('pathTitle');
		let pathContent = mDiv(pathContainer);
		if (!isEmpty(info.topComment)) addComment(info.topComment, pathContent);
		pathContent.classList.add('comments');
		for (const signature of dv[path].funcIndex) {
			let entry = dv[path].funcDict[signature];
			let comments = entry.comments;
			let l = genLink(signature, signatureLinkContainer);
			let functionName = stringBefore(signature, '(').trim();
			l.id = 'a_' + entry.index + '@' + entry.path;
			entry.idLink = l.id;
			entry.idDiv = 'div' + entry.index + '@' + entry.path;
			let fDiv0 = mDiv(pathContent);
			fDiv0.id = entry.idDiv;
			let fDiv = mCreate('p');
			fDiv0.appendChild(fDiv);
			let fSignature = mDiv(fDiv);
			fSignature.innerHTML = signature;
			fSignature.classList.add('signature');
			let fComments = mDiv(fDiv);
			if (!isEmpty(comments)) addComment(comments, fComments);
			fComments.classList.add('comments');
		}
		hide(pathContainer);
	}
	let coll = document.getElementsByClassName("collapsible");
	for (let i = 0; i < coll.length; i++) {
		coll[i].addEventListener("click", toggleCollapsible);
	}
	if (collapsed) collapseAll();
}
function createContactsContent(myusers, msgs) {
	let mydata = uiGetContactStylesAndStart();
	mydata += uiGetContacts(myusers, msgs);
	return mydata;
}
function createContainers(list, dArea, styles) {
	let i = 0;
	let containers = [];
	let defStyles = { w: 150, h: 200, bg: 'random', rounding: 12, display: 'inline-block', margin: 12 };
	addKeys(defStyles, styles);
	for (const cat of list) {
		let cont = mTitledDiv(cat, dArea, styles, {}, 'c' + i);
		mStyleX(cont, { h: '100%' });
		i += 1;
		containers.push({ label: cat, div: cont });
	}
	return containers;
}
function createDeck() { return DeckA(); }
function createDeckWithJokers() { return _createDeck({ hasJokers: true }); }
function createDiv(id, className, left, top, width, height) {
	var div = document.createElement("div");
	div.id = id;
	div.className = className;
	div.style.left = String(left) + "px";
	div.style.top = String(top) + "px";
	div.style.width = String(width) + "px";
	div.style.height = String(height) + "px";
	return (div);
}
async function createDocs(collapsed = true) {
	let dv = DOC_vault = await createVault();
	DOC_UIS = {};
	let pkeys = Object.keys(dv).map(x => dv[x].filename);
	pkeys.sort();
	let lst = dict2list(dv);
	let sortedlst = lst.sort(fieldSorter(['filename']));
	i = 0;
	for (const item of sortedlst) {
		let id = item.id;
		let x = dv[item.id];
		x.index = i;
		x.idLink = 'a_path_' + i;
		x.idPathContainer = 'div_path_' + i;
		i += 1;
	}
	for (const p in dv) {
		let funcDict = dv[p].funcDict;
		let keys = Object.keys(funcDict);
		keys.sort();
		dv[p].funcIndex = keys;
		for (let i = 0; i < keys.length; i++) { funcDict[keys[i]].index = i; }
	}
	DOC_dvIndex = sortedlst.map(x => x.id);
	createCollapsibles(dv, DOC_dvIndex, collapsed);
	setCurrentPath('assetHelpers.js');
}
function createDragClone(ev, items, onRelease) {
	DragSourceItems = items;
	DragSourceItem = findItemFromEvent(items, ev);
	let elem = DragSource = iDiv(DragSourceItem);
	var clone = DragElem = elem.cloneNode(true);
	clone.id = DragElem.id + '_' + clone;
	DragSource = elem;
	mAppend(document.body, clone);
	mClass(clone, 'dragelem');
	mStyleX(clone, { left: ev.clientX - ev.offsetX, top: ev.clientY - ev.offsetY });
	clone.drag = { offsetX: ev.offsetX, offsetY: ev.offsetY };
	document.body.onmousemove = onMovingCloneAround;
	document.body.onmouseup = onRelease;
}
function createDraggable(id, className, left, top, width, text) {
	var div = document.createElement("div");
	div.innerHTML = String(text);
	div.id = id;
	div.className = className;
	div.style.left = String(left) + "px";
	div.style.top = String(top) + "px";
	div.style.width = String(width) + "px";
	div.draggable = true;
	ondragstart = "drag(event)";
	return (div);
}
function createDragLetters() {
	fz = 60; let word = Goal.label.toUpperCase();
	let dp = createLetterInputsX(word, dTable, { bg: 'silver', display: 'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });
	scrambleInputs(dp);
	let letters = Array.from(dp.children);
	for (let i = 0; i < letters.length; i++) {
		let l = letters[i]
		l.onmousedown = onMouseDownOnLetter;
		mClass(l, 'draggable');
		l.id = 'letter' + i;
	}
	return letters;
}
function createDragWords(items, handler) {
	let keys = items.map(x => x.key);
	shuffle(keys);
	G.showLabels = true;
	titems = myShowLabels(null, undefined, { rows: 1, showLabels: true }, keys);
	titems.map(x => iDiv(x).style.cursor = 'pointer');
	titems.map(x => iDiv(x).onmousedown = (ev) => {
		createDragClone(ev, titems, dropAndEval);
	});
	return titems;
}
function createDropInputs() {
	let fz = 120; let word = Goal.label.toUpperCase(); let wlen = word.length;
	let dpEmpty = createLetterInputsX(word, dTable, { pabottom: 5, bg: 'grey', display: 'inline-block', fz: fz, w: fz, h: fz * 1.1, margin: 4 });
	let inputs = blankInputs(dpEmpty, range(0, wlen - 1), false);
	DropZones = [];
	for (let i = 0; i < inputs.length; i++) {
		let l = iDiv(inputs[i]);
		l.onmousedown = onMouseDownOnLetter;
		l.onclick = l.innerHTML = '_';
		mClass(l, 'dropzone');
		l.id = 'input' + i;
		DropZones.push(l);
	}
	return inputs;
}
function createDroppable(id, className, left, top, width, height) {
	var div = document.createElement("div");
	div.id = id;
	div.className = className;
	div.style.left = String(left) + "px";
	div.style.top = String(top) + "px";
	div.style.width = String(width) + "px";
	div.style.height = String(height) + "px";
	div.ondrop = "drop(event)";
	div.ondragover = "allowDrop(event)";
	return (div);
}
function createElementFromHTML(htmlString) {
	var div = document.createElement('div');
	div.innerHTML = htmlString.trim();
	return div.firstChild;
}
function createElementFromHtml(s) { return createElementFromHTML(s); }
function createEmoji({ key, w, h, unit = 'px', fg, bg, padding, cat, parent, border, rounding }) {
	let emoji = emojiChars[emojiKeys[key]];
	console.log('emoji', emoji);
	if (nundef(key)) key = getRandomKey(emojiChars);
	let ch = emoji.hexcode;
	console.log('ch', ch)
	let family = 'emoOpen';
	let text = emoji.emoji;
	if (isdef(parent) && isString(parent)) parent = mBy(parent);
	console.log(parent);
	console.log(typeof text, text)
	cat = isdef(cat) ? cat : isdef(parent) ? getTypeOf(parent) == 'div' ? 'd' : 'g' : isdef(cat) ? cat : 'd';
	let domel;
	if (cat == 'd') {
		let d = document.createElement('div');
		d.style.textAlign = 'center';
		if (isdef(bg)) {
			console.log('bg', bg);
			d.style.backgroundColor = bg;
		}
		d.innerHTML = text;
		domel = d;
		if (isdef(padding)) d.style.padding = padding + unit;
		d.style.display = 'inline-block';
		d.style.height = h + 2 * padding + unit;
		d.style.width = d.style.height;
		if (isdef(border)) d.style.border = border;
		if (isdef(rounding)) d.style.borderRadius = rounding + unit;
	} else {
	}
	domel.key = key;
	if (parent) parent.appendChild(domel);
	return domel;
}
function createFakeState() {
	let settings = DB.games.gPerlen2;
	let fakeServer = new FakeServerClass(Socket, PerlenDict, settings, null);
	let state = fakeServer.State;
	return { settings: settings, state: state, perlenDict: PerlenDict };
}
function createFields(s, b, scale) {
	let dCells = b.dCells = mDiv(b.dOuter, { matop: s.boardMarginTop * scale, maleft: s.boardMarginLeft * scale, w: b.wNeeded, h: b.hNeeded, position: 'relative' }, 'dFieldArea');
	let [horDist, vertDist, szField] = [b.dxCenter, b.dyCenter, s.szField * scale];
	let fields = b.fields = [], i = 0, dx = horDist / 2, dy = vertDist / 2;
	let bg = s.fieldColor;
	for (const p of b.centers) {
		let left = p.x - szField / 2;
		let top = p.y - szField / 2;
		let dItem = mDiv(dCells, { position: 'absolute', left: left, top: top, display: 'inline', w: szField, h: szField, rounding: '50%', bg: bg });
		mCenterCenterFlex(dItem)
		let f = { div: dItem, index: i, center: p, isField: true }; i += 1;
		fields.push(f);
	}
	if (s.boardRotation != 0) { dCells.style.transform = `rotate(${s.boardRotation}deg)`; }
}
function createFields_dep(s, b, scale) {
	let dCells = b.dCells = mDiv(b.dOuter, { matop: s.boardMarginTop * scale, maleft: s.boardMarginLeft * scale, w: b.wNeeded, h: b.hNeeded, position: 'relative' });
	let [wCell, hCell, wGap, hGap] = [b.dxCenter, b.dyCenter, s.wGap * scale, s.hGap * scale];
	let fields = b.fields = [], i = 0, dx = wCell / 2, dy = hCell / 2;
	let bg = s.fieldColor;
	for (const p of b.centers) {
		let left = p.x - dx + wGap / 2;
		let top = p.y - dy + hGap / 2;
		let dItem = mDiv(dCells, { position: 'absolute', left: left, top: top, display: 'inline', w: wCell - wGap, h: hCell - hGap, rounding: '50%', bg: bg });
		mCenterCenterFlex(dItem)
		let f = { div: dItem, index: i, center: p, isField: true }; i += 1;
		fields.push(f);
	}
	if (s.boardRotation != 0) { dCells.style.transform = `rotate(${s.boardRotation}deg)`; }
}
function createFilter(svg, posx, posy, sizex, sizey, type, data) {
	var svgns = "http://www.w3.org/2000/svg";
	var defs = document.createElementNS(svgns, "defs");
	svg.appendChild(defs);
	var filter = document.createElementNS(svgns, "filter");
	defs.appendChild(filter);
	filter.setAttribute("id", "filterBlur");
	filter.setAttribute("x", posx);
	filter.setAttribute("y", posy);
	filter.setAttribute("width", sizex);
	filter.setAttribute("height", sizey);
	for (z = 0; z < (data.length / 2); z++) {
		var filter = document.createElementNS(svgns, type[z]);
		filter.setAttributeNS(null, "in", "SourceGraphic");
		filter.setAttributeNS(null, data[2 * z], data[2 * z + 1]);
		document.getElementById("f" + circles).appendChild(filter);
	}
}
function createfilter1(posx, posy, sizex, sizey, type, data) {
	var svg = document.getElementById("canvas");
	var fs = document.getElementById("filters");
	var circles = 0;
	var svgns = "http://www.w3.org/2000/svg";
	var w = window.innerWidth;
	var filter = document.createElementNS(svgns, "filter");
	filter.setAttribute("id", "f" + circles);
	fs.appendChild(filter);
	for (z = 0; z < (data.length / 2); z++) {
		var filter = document.createElementNS(svgns, type[z]);
		filter.setAttributeNS(null, "in", "SourceGraphic");
		filter.setAttributeNS(null, data[2 * z], data[2 * z + 1]);
		document.getElementById("f" + circles).appendChild(filter);
	}
}
function createGamesContent(mygames, tables = {}) {
	let mydata = uiGetGamesStylesAndStart();
	mydata += uiGetGames(mygames, tables);
	return mydata;
}
function createGrid(areaName, idBoard, sBoard, sMemberPool, shape) {
	let board = makeBoard(idBoard, sBoard, areaName);
	board.structInfo = shape == 'hex' ? getHexGridInfo(sBoard.rows, sBoard.cols) : getQuadGridInfo(sBoard.rows, sBoard.cols);
	makeFields(sMemberPool, board, sBoard, shape);
	if (isdef(sBoard.corners)) makeCorners(sMemberPool, board, sBoard);
	if (isdef(sBoard.edges)) makeEdges(sMemberPool, board, sBoard);
	return board;
}
function createGridLayout(d, layout, collapseEmptySmallLetterAreas = false) {
	let s = '';
	let m = [];
	let maxNum = 0;
	let areaNames = [];
	for (const line of layout) {
		let letters = line.split(' ');
		let arr = [];
		for (const l of letters) {
			if (!isEmpty(l)) {
				addIf(areaNames, l);
				arr.push(l);
			}
		}
		m.push(arr);
		if (arr.length > maxNum) maxNum = arr.length;
	}
	for (const line of m) {
		let el = line[line.length - 1];
		while (line.length < maxNum) line.push(el);
		s += '"' + line.join(' ') + '" ';
	}
	d.style.gridTemplateAreas = s;
	if (collapseEmptySmallLetterAreas) { collapseSmallLetterAreas(m, d); }
	else fixedSizeGrid(m, d);
	return areaNames;
}
function createGridLayout_dep(d, layout) {
	let s = '';
	let m = [];
	let maxNum = 0;
	let areaNames = [];
	for (const line of layout) {
		let letters = line.split(' ');
		let arr = [];
		for (const l of letters) {
			if (!isEmpty(l)) {
				addIf(areaNames, l);
				arr.push(l);
			}
		}
		m.push(arr);
		if (arr.length > maxNum) maxNum = arr.length;
	}
	for (const line of m) {
		let el = line[line.length - 1];
		while (line.length < maxNum) line.push(el);
		s += '"' + line.join(' ') + '" ';
	}
	d.style.gridTemplateAreas = s;
	if (SPEC.collapseEmptySmallLetterAreas) { collapseSmallLetterAreas(m, d); }
	else fixedSizeGrid(m, d);
	return areaNames;
}
function createHandler(param, func) {
	return function (ev) {
		let id = evToId(ev);
		console.log(param, 'and', id);
		param.push(getOid(id));
		for (const oid of param) {
			getDefVisual(oid)[func]();
		}
	}
}
function createHexboard(rows = 3, cols = 3, a = 48) {
	let sq3 = Math.sqrt(3);
	let wp = a / 4, hp = a / 4, h = sq3 * a / 2;
	let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];
	let ys = 2 + 3 * rows;
	let xs = cols;
	let x = xoff, y = yoff;
	let pts = [];
	let infos = [];
	let idx = 0;
	let yEven = true;
	for (let i = 0; i < ys; i++) {
		let tcolOffset = yEven ? 1 : 0;
		let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;
		for (let j = 0; j < xs + (1 - tcolOffset); j++) {
			let pt = { x: x, y: y };
			pts.push(pt);
			infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y: y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j % 2 == 1 });
			x += dx;
			idx += 1;
		}
		yEven = !yEven;
		y += dy; x = i % 2 ? xoff : wp / 2;
	}
	let byrc = {};
	for (const i of infos) {
		lookupSet(byrc, [i.trow, i.tcol], i.index);
	}
	console.log('byrc', byrc)
	let byxy = {};
	let adjList = [];
	let di = {};
	for (const info of infos) {
		let [r, c] = [info.trow, info.tcol];
		info.nodes = [
			lookup(byrc, [r - 2, c]),
			lookup(byrc, [r - 1, c + 1]),
			lookup(byrc, [r + 1, c + 1]),
			lookup(byrc, [r + 2, c]),
			lookup(byrc, [r + 1, c - 1]),
			lookup(byrc, [r + 1, c - 1]),
		];
		for (let i = 0; i < 6; i++) {
			let n1 = info.nodes[i];
			if (n1 == null) continue;
			let n2 = info.nodes[(i + 1 % 6)];
			if (n2 == null) continue;
			if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;
			lookupSet(di, [n1, n2], true);
			adjList.push([n1, n2]);
		}
		info.neighbors = [
			lookup(byrc, [r - 3, c + 1]),
			lookup(byrc, [r, c + 2]),
			lookup(byrc, [r + 3, c + 1]),
			lookup(byrc, [r + 3, c - 1]),
			lookup(byrc, [r, c - 2]),
			lookup(byrc, [r - 3, c - 1]),
		];
	}
	return { items: infos, adjList: adjList, rows: rows, cols: cols, dx: dx, dy: dy, sz: a }
}
function createHexboard1(rows = 3, cols = 3, a = 48) {
	let sq3 = Math.sqrt(3);
	let wp = a / 4, hp = a / 4, h = sq3 * a / 2;
	let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];
	return createHexboardHelper(rows, cols, dy, dx, yoff, xoff, hp, wp, a);
}
function createHexboard2(rows = 3, cols = 3, a = 48) {
	let sq3 = Math.sqrt(3);
	let wp = a / 4, hp = a / 4, h = sq3 * a / 2;
	let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];
	return createHexboardHelper(rows, cols, dy, dx, yoff, xoff, hp, wp, a);
}
function createHexboardHelper(rows, cols, dy, dx, yoff, xoff, hp, wp, a) {
	let ys = 2 + 3 * rows;
	let xs = cols;
	let x = xoff, y = yoff;
	let pts = [];
	let infos = [];
	let idx = 0;
	let yEven = true;
	for (let i = 0; i < ys; i++) {
		let tcolOffset = yEven ? 1 : 0;
		let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;
		for (let j = 0; j < xs + (1 - tcolOffset); j++) {
			let pt = { x: x, y: y };
			pts.push(pt);
			infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y: y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j % 2 == 1 });
			x += dx;
			idx += 1;
		}
		yEven = !yEven;
		y += dy; x = i % 2 ? xoff : wp / 2;
	}
	let byrc = {};
	for (const i of infos) {
		lookupSet(byrc, [i.trow, i.tcol], i.index);
	}
	let byxy = {};
	let adjList = [];
	let di = {};
	for (const info of infos) {
		let [r, c] = [info.trow, info.tcol];
		info.nodes = [
			lookup(byrc, [r - 2, c]),
			lookup(byrc, [r - 1, c + 1]),
			lookup(byrc, [r + 1, c + 1]),
			lookup(byrc, [r + 2, c]),
			lookup(byrc, [r + 1, c - 1]),
			lookup(byrc, [r + 1, c - 1]),
		];
		for (let i = 0; i < 6; i++) {
			let n1 = info.nodes[i];
			if (n1 == null) continue;
			let n2 = info.nodes[(i + 1 % 6)];
			if (n2 == null) continue;
			if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;
			lookupSet(di, [n1, n2], true);
			adjList.push([n1, n2]);
		}
		info.neighbors = [
			lookup(byrc, [r - 3, c + 1]),
			lookup(byrc, [r, c + 2]),
			lookup(byrc, [r + 3, c + 1]),
			lookup(byrc, [r + 3, c - 1]),
			lookup(byrc, [r, c - 2]),
			lookup(byrc, [r - 3, c - 1]),
		];
	}
	return { items: infos, adjList: adjList, rows: rows, cols: cols, dx: dx, dy: dy, sz: a, byrc: byrc }
}
function createImage(filename, styles) {
	let img = mCreateFrom(`<img src='../rechnung/images/${filename}'>`);
	if (isdef(styles.w)) { img.setAttribute('width', styles.w); }
	if (isdef(styles.h)) { img.setAttribute('height', styles.h); }
	mStyle(img, styles);
	return img;
}
function createImg(id, className, zIndex, left, top, width, height, src) {
	var img = document.createElement("img");
	img.id = id;
	img.className = className;
	img.style.zIndex = zIndex;
	img.style.left = String(left) + "px";
	img.style.top = String(top) + "px";
	img.style.width = String(width) + "px";
	img.style.height = String(height) + "px";
	img.src = src;
	return (img);
}
function createIndependentUi(n, area) {
	if (nundef(n.type)) { n.type = inferType(n); }
	R.registerNode(n);
	decodeParams(n, R, {});
	calcIdUiParent(n, R, area);
	let ui;
	if (nundef(RCREATE[n.type])) ui = mDefault(n, area, R);
	else ui = RCREATE[n.type](n, R, area);
	if (nundef(n.uiType)) n.uiType = 'd';
	if (n.uiType == 'NONE') return ui;
	if (n.uiType != 'childOfBoardElement') {
		if (isBoard(n.uid, R)) { delete n.cssParams.padding; }
		applyCssStyles(n.uiType == 'h' ? mBy(n.uidStyle) : ui, n.cssParams);
	}
	if (!isEmpty(n.stdParams)) {
		switch (n.stdParams.show) {
			case 'if_content': if (!n.content) hide(ui); break;
			case 'hidden': hide(ui); break;
			default: break;
		}
	}
	R.setUid(n, ui);
	return ui;
}
function createKeyIndex(di, prop) {
	let res = {};
	for (const k in di) {
		res[di[k][prop]] = k;
	}
	return res;
}
function createLabel_dep(n1, ui, R) {
	let g = ui;
	if (n1.content) {
		let pa = n1.params;
		let transPa = { txt: n1.content };
		let fill = pa.fg;
		if (isdef(fill)) { transPa.fill = fill; }
		else if (isdef(pa.bg)) { transPa.fill = colorIdealText(pa.bg); }
		else {
			transPa.fill = 'white';
		}
		let font = pa.font; if (isdef(font)) transPa.font = font;
		let gt = n1.label = new gText(g);
		gt.text(transPa);
	}
}
function createLayout(dParent, l) {
	console.log('*** createLayout ***', dParent, l);
	let d = mBy(dParent);
	let areaNames = createGridLayout(d, l);
	console.log(areaNames, d)
	createAreas(d, areaNames, dParent);
}
function createLetterInputs(s, dParent, style, idForContainerDiv, colorWhiteSpaceChars = true, preserveColorsBetweenWhiteSpace = true) {
	let d = mDiv(dParent);
	if (isdef(idForContainerDiv)) d.id = idForContainerDiv;
	inputs = [];
	let whiteStyle = jsCopy(style);
	if (!colorWhiteSpaceChars) {
		if (isdef(whiteStyle.fg)) delete whiteStyle.fg;
		if (isdef(whiteStyle.bg)) delete whiteStyle.bg;
		if (isdef(whiteStyle.border)) delete whiteStyle.border;
	}
	let fg, fgOrig, bg, bgOrig;
	fgOrig = style.fg;
	bgOrig = style.bg;
	if (isVariableColor(fgOrig) && isdef(style.fg)) { fg = computeColorX(fgOrig); style.fg = fg; }
	if (isVariableColor(bgOrig) && isdef(style.bg)) { bg = computeColorX(bgOrig); style.bg = bg; }
	for (let i = 0; i < s.length; i++) {
		let d1 = mCreate('div');
		mAppend(d, d1);
		d1.innerHTML = s[i];
		let white = isWhiteSpace2(s[i]);
		if (white) {
			if (isVariableColor(fgOrig) && isdef(style.fg)) { fg = computeColorX(fgOrig); style.fg = fg; }
			if (isVariableColor(bgOrig) && isdef(style.bg)) { bg = computeColorX(bgOrig); style.bg = bg; }
		}
		mStyleX(d1, white ? whiteStyle : style);
	}
	return d;
}
function createLetterInputsX(s, dParent, style, idForContainerDiv) {
	let d = mDiv(dParent);
	if (isdef(idForContainerDiv)) d.id = idForContainerDiv;
	inputs = [];
	for (let i = 0; i < s.length; i++) {
		let d1 = mDiv(d);
		d1.innerHTML = s[i];
		mStyle(d1, style);
	}
	return d;
}
function createLoginContent(userdata) {
	return `
  <div id="dAccount" style="max-width=500px; margin-top:10px; display:flex; animation: appear1 1s ease;justify-content:center; align-content:center">
    <div id="error">some text</div>
    <div style='text-align:center'>
      <form id="myform" autocomplete="off" style='text-align:center;background:${userdata.color}'>
        <img id="imgPreview" src='${get_image_path(userdata)}' style="height:200px;margin:10px;" />
        <input id='iUsername' type="text" name="username" placeholder='username' value="${userdata.name}" autofocus
          onkeydown="if (event.keyCode === 13){event.preventDefault();console.log('WTF!!!!!!!!!!!!!!!!!!!!!!!!!!!!');collect_data(event);}" />
        <br />
        <input id='save_settings_button' type="button" value="Submit" onclick="collect_data(event)" ><br>
      </form>
  </div></div>
  `;
}
function createLoginNewContent(myusers, msgs) {
	let mydata = uiGetLoginNewStylesAndStart();
	mydata += uiGetLoginNewList(myusers, msgs);
	return mydata;
}
function createMarker(markerId) {
	let divs = document.getElementsByClassName('feedbackMarker');
	let d;
	d = mCreate('div');
	d.innerHTML = MarkerText[markerId];
	mClass(d, 'feedbackMarker');
	document.body.appendChild(d);
	Markers.push(d);
	return d;
}
function createMarker_orig(markerId) {
	let divs = document.getElementsByClassName('feedbackMarker');
	let d;
	d = mCreate('div');
	d.innerHTML = MarkerText[markerId];
	mClass(d, 'feedbackMarker');
	document.body.appendChild(d);
	Markers.push(d);
	return d;
}
function createMenuUi(dParent) {
	clearElement(dParent);
	mCenterFlex(dParent);
	mAppend(dParent, createElementFromHTML(`<h1>Choose Game:</h1>`));
	mLinebreak(dParent);
	let dMenuItems = mDiv(dParent, { w: '90%', h: 600 });
	let games = jsCopy(U.avGames); if (!navigator.onLine) { removeInPlace(games, 'gSayPic'); }
	let items = [];
	let outerStyles = {
		display: 'inline-flex', 'flex-direction': 'column',
		'justify-content': 'center', 'align-items': 'center', 'vertical-align': 'top',
		wmin: 140, hmin: 110, margin: 8, rounding: 6
	};
	for (const g of games) {
		let item = { o: DB.games[g], id: g }; iRegister(item, g);
		item.bg = getColorDictColor(item.o.color);
		item.label = capitalize(item.o.friendly);
		item.info = Syms[item.o.logo];
		let d = makeItemDiv(item, {
			outerStyles: outerStyles, ifs: { bg: true },
			picStyles: { fz: 60 },
			showPic: true, showLabels: true, labelBottom: true, handler: onClickMenuItem
		});
		iAdd(item, { div: d });
		mAppend(dMenuItems, d);
		items.push(item);
	}
	if (nundef(G)) return;
	SelectedMenuKey = G.id;
	let selItem = Items[SelectedMenuKey];
	toggleItemSelection(selItem);
}
function createMenuUiNew(dParent, keys, clickMenuHandler, outerStyles = {}, picStyles = {}, labelStyles = {}, hTotal = 600) {
	clearElement(dParent);
	mCenterFlex(dParent);
	mAppend(dParent, createElementFromHTML(`<h1>Choose Game:</h1>`));
	mLinebreak(dParent);
	let dMenuItems = mDiv(dParent, { w: '90%', h: hTotal });
	let games = keys;
	if (!navigator.onLine) { removeInPlace(games, 'gSayPic'); }
	let items = [];
	let defaultOuterStyles = {
		display: 'inline-flex', 'flex-direction': 'column',
		'justify-content': 'center', 'align-items': 'center', 'vertical-align': 'top',
		wmin: hTotal / 4, hmin: hTotal / 6, margin: 8, rounding: 6
	};
	addKeys(defaultOuterStyles, outerStyles);
	let defaultPicStyles = { fz: hTotal / 10, 'line-height': hTotal / 10 + 'px' };
	addKeys(defaultPicStyles, picStyles);
	for (const g of games) {
		let item = { o: DB.games[g], id: g }; iRegister(item, g);
		item.bg = getColorDictColor(item.o.color);
		item.label = capitalize(item.o.friendly);
		item.info = Syms[item.o.logo];
		let d = makeItemDiv(item, {
			outerStyles: outerStyles, ifs: { bg: true },
			picStyles: picStyles,
			labelStyles: labelStyles,
			showPic: true, showLabels: true, labelBottom: true, handler: clickMenuHandler
		});
		iAdd(item, { div: d });
		mAppend(dMenuItems, d);
		items.push(item);
	}
	if (nundef(G)) return;
	SelectedMenuKey = G.id;
	let selItem = Items[SelectedMenuKey];
	toggleItemSelection(selItem);
}
function createMessageContent(messages, me, other) {
	let result = `<div id='messages_holder_parent' onclick='set_seen(event)' style='background:silver;height:680px;'>
  <div id='messages_holder' style='box-sizing:border-box;height:580px;padding:10px;margin-bottom:10px;overflow-y:auto;'>`;
	result += `start of chat with ${other.username} <img src="${other.imagePath}" style="margin-left:10px;display:inline;height:30px;"/><br><br>`;
	for (const m of messages) {
		if (m.sender == me.username) { result += message_right(m, me); } else { result += message_left(m, other); }
	}
	result += message_controls();
	return result;
}
function createMessageHTML() {
	if (isString(message)) {
		return `
      <p class="secondary-text text-center mb-2">${message}</p>
    `;
	} else if (isString(message)) {
		return `
    <div>
      <p style="color:red" class="message-content">${message}</p>
    </div>
    `;
	}
	return `
  <div class="message ${message.type === messageTypes.LEFT ? 'message-left' : 'message-right'
		}">
    <div class="message-details flex">
      <p class="flex-grow-1 message-author">${message.author}</p>
      <p class="message-date">${message.date}</p>
    </div>
    <p class="message-content">${message.content}</p>
  </div>
  `;
}
function createMSTree(mobj) {
	let areas = mobj.elem.children;
	for (const ch of [...areas]) {
		if (!ch.id) { continue; }
		let msChild = makeDomArea(ch);
		if (ch.id == 'a_d_settings' || ch.id == 'a_d_main_menu') continue;
		createMSTree(msChild);
	}
}
function createMultiplayerGame() {
	_sendRoute('/restart', d1 => _newGame(game));
}
function createMultipleChoiceElements(correctAnswer, wrongAnswers, dParent, dFeedbackUI, styles) {
	if (nundef(Goal)) Goal = {};
	let choices = wrongAnswers; choices.push(correctAnswer);
	Goal.correctChoice = correctAnswer;
	if (isYesNo(choices)) {
		sortByDescending(choices, 'text');
	} else {
		shuffle(choices);
		if (coin()) shuffle(choices);
	}
	Goal.choices = choices;
	Goal.feedbackUI = dFeedbackUI;
	let idx = 0;
	for (const ch of choices) {
		let dButton = mButton(ch.text, onClickChoice, dParent, { wmin: 100, fz: 36, margin: 20, rounding: 4, vpadding: 4, hpadding: 10 }, ['toggleButtonClass']);
		dButton.id = 'bChoice_' + idx; idx += 1;
		if (ch.text == correctAnswer.text) {
			Goal.choice = ch.toString();
			Goal.buttonCorrect = dButton;
		}
	}
}
function createNode(sp, idParent, R) {
	let n = jsCopy(sp);
	n.idParent = idParent;
	let id = n.nid = getUid();
	n.fullPath = R.NODES[idParent].fullPath + '.' + id;
	return n;
}
function createNumberSequence(n, min, max, step, op = 'plus') {
	let fBuild = x => { return op == 'plus' ? (x + step) : op == 'minus' ? (x - step) : x; };
	if (op == 'minus') min += step * (n - 1);
	if (min >= (max - 10)) max = min + 10;
	let seq = getRandomNumberSequence(n, min, max, fBuild, lastPosition);
	lastPosition = seq[0];
	return seq;
}
function createPageDivsFullVisibleArea(above, tableStyles, below, defs = { bg: 'random', fg: 'contrast' }) {
	clearElement(dMain);
	let dRightSide = mDiv(dMain, { display: 'flex', 'flex-direction': 'column', 'flex-grow': 10 });
	let table = mDiv(dRightSide, {}, 'table');
	for (const k in above) {
		let name = 'd' + capitalize(k);
		let ltop = get3ColLine(table, name + 'Left', name, name + 'Right', mergeOverride(defs, above[k]));
	}
	let vals = Object.values(above);
	vals = vals.concat(Object.values(below));
	let sum = arrSum(vals, 'h');
	let sum1 = arrSum(vals, 'hmin');
	console.log('sum', sum, 'sum1', sum1);
	sum += sum1;
	let hTable = percentVh(100) - sum;
	let wTable = percentVw(100) - 20;
	if (nundef(tableStyles)) tableStyles = {};
	tableStyles = mergeOverride({ bg: 'dimgray', w: wTable, h: hTable, vpadding: 0, hpadding: 0 }, tableStyles);
	let ltable = get3ColLine(table, 'dTableLeft', 'dTable', 'dTableRight', tableStyles);
	ltable.id = 'lTable';
	mSize(dTable.parentNode, '100%', '100%');
	mSize(dTable, '100%', '100%');
	console.log('below', below);
	for (const k in below) {
		let name = 'd' + capitalize(k);
		let lbottom = get3ColLine(table, name + 'Left', name, name + 'Right', mergeOverride(defs, below[k]));
	}
	dFooter.innerHTML = 'HALLO';
	let rect = getRect(dTable);
	return rect;
}
function createPanelParentOfObjects(lst, n1, area, R) {
	if (nundef(n1.type)) n1.type = lst.length == 1 ? 'invisible' : 'panel';
	n1.content = null;
	n1.ui = createUi(n1, R, area);
}
function createPeeps() {
	const {
		rows,
		cols
	} = config
	const {
		naturalWidth: width,
		naturalHeight: height
	} = img
	const total = rows * cols
	const rectWidth = width / rows
	const rectHeight = height / cols
	for (let i = 0; i < total; i++) {
		allPeeps.push(new Peep({
			image: img,
			rect: [
				(i % rows) * rectWidth,
				(i / rows | 0) * rectHeight,
				rectWidth,
				rectHeight,
			]
		}))
	}
}
function createPerle(perle, dParent, sz = 64, wf = 1.3, hf = 0.4, useNewImage = false) {
	let d = makePerleDiv(perle,
		{ wmin: sz + 4, h: sz * (1 + hf) + 4 },
		{ w: sz, h: sz }, { wmax: sz * wf, hmax: sz * hf, fz: sz / 6 },
		'b', true, null, useNewImage);
	mAppend(dParent, d);
	if (perle.field != null) {
		perle.live.dLabel.remove();
		let img = perle.live.dImg;
		let d = iDiv(perle);
		let rect = getRect(img);
		let szField = G.settings.szField;
		let sz = G.settings.szPerle * szField / 100;
		if (isFarbPerle(perle)) mStyleX(img, { w: 1, h: 1 });
		else mStyleX(img, { w: sz, h: sz });
		mStyleX(d, { bg: 'transparent', w: sz, h: sz });
	} else {
		let d = iDiv(perle);
		mStyleX(d, { opacity: 1 - G.settings.dimming / 100 });
		let sz = G.settings.szPoolPerle;
		if (isdef(sz)) {
			mStyleX(d.firstChild, { w: sz, h: sz });
		}
	}
	return d;
}
function createPerleOverlap(perle, dParent, sz = 64, wf = 1.3, hf = 0.4) {
	let d = makePerleDiv(perle, { wmin: sz + 4, h: sz * hf + 4 }, { w: sz, h: sz }, { wmax: sz * wf, hmax: sz * hf, fz: sz / 6 }, 'b', true);
	mAppend(dParent, d);
	return d;
}
function createPicto({ key, w = 100, h = 100, unit = 'px', fg = 'blue', bg, padding = 10, cat, parent, border, rounding }) {
	if (nundef(key)) key = getRandomKey(iconChars);
	let ch = iconChars[key];
	let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';
	let text = String.fromCharCode('0x' + ch);
	cat = isdef(parent) ? getTypeOf(parent) == 'div' ? 'd' : 'g' : isdef(cat) ? cat : 'd';
	let domel;
	if (cat == 'd') {
		let d = document.createElement('div');
		d.style.textAlign = 'center';
		d.style.fontFamily = family;
		d.style.fontWeight = 900;
		d.style.fontSize = h + unit;
		if (isdef(bg)) d.style.backgroundColor = bg;
		if (isdef(fg)) d.style.color = fg;
		d.innerHTML = text;
		domel = d;
		if (isdef(padding)) d.style.padding = padding + unit;
		d.style.display = 'inline-block';
		d.style.height = h + 2 * padding + unit;
		d.style.width = d.style.height;
		console.log('padding', padding, 'unit', unit, 'w', d.style.width, 'h', d.style.height);
		if (isdef(border)) d.style.border = border;
		if (isdef(rounding)) d.style.borderRadius = rounding + unit;
	} else {
	}
	domel.key = key;
	if (parent) parent.appendChild(domel);
	return domel;
}
function createPictoSimple({ key, w, h, unit = 'px', fg, bg, padding, cat, parent, border, rounding }) {
	if (nundef(key)) key = getRandomKey(iconChars);
	let ch = iconChars[key];
	let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';
	let text = String.fromCharCode('0x' + ch);
	cat = isdef(cat) ? cat : isdef(parent) ? getTypeOf(parent) == 'div' ? 'd' : 'g' : isdef(cat) ? cat : 'd';
	if (nundef(w)) w = 25;
	if (nundef(h)) h = w;
	let domel;
	if (cat == 'd') {
		let d = document.createElement('div');
		d.style.textAlign = 'center';
		d.style.fontFamily = family;
		d.style.fontWeight = 900;
		d.style.fontSize = h + unit;
		if (isdef(bg)) d.style.backgroundColor = bg;
		if (isdef(fg)) d.style.color = fg;
		d.innerHTML = text;
		domel = d;
		if (isdef(padding)) d.style.padding = padding + unit;
		d.style.display = 'inline-block';
		d.style.height = h + 2 * padding + unit;
		d.style.width = d.style.height;
		if (isdef(border)) d.style.border = border;
		if (isdef(rounding)) d.style.borderRadius = rounding + unit;
	} else {
	}
	domel.key = key;
	if (parent) parent.appendChild(domel);
	return domel;
}
function createPictoX(parent, style, classes, titleOptions, pictoOptions, captionOptions) {
	let d = mDiv(parent);
	if (isdef(style)) mStyle(d, style);
	if (isdef(classes)) mClass(d, ...classes);
	if (isdef(titleOptions)) { titleOptions.parent = d; createText(titleOptions); }
	if (isdef(pictoOptions)) { pictoOptions.parent = d; createPicto(pictoOptions); }
	if (isdef(captionOptions)) { captionOptions.parent = d; createText(captionOptions); }
	return d;
}
function createPlayerZone(pl, namePos = 'top', showColor = false) {
	let id = pl.id;
	let z = createCardZone(id, id, namePos);
	if (showColor) mStyleX(z.div, { bg: pl.color });
	pl.zone = z;
	return z;
}
function createProtoForOidAndKey(oid, o, k, R) {
	let n = R.getSpec(k);
	let n1 = { key: k, oid: oid, uid: getUID() };
	return n1;
}
function createPrototypesForOid(oid, o, R) {
	if (isdef(R.oidNodes[oid])) {
		return;
	}
	let klist = R.getR(oid);
	let nlist = {};
	for (const k of klist) {
		let n1 = createProtoForOidAndKey(oid, o, k, R);
		nlist[k] = n1;
	}
	R.oidNodes[oid] = nlist;
}
function createSampleHex1(rows = 5, topcols = 3, w = 50, h = 50) {
	initTable();
	let styles = {
		outer: { bg: 'pink', padding: 25 },
		inner: { w: 500, h: 400 },
		node: { bg: 'pink', shape: 'hex', w: w, h: h },
		edge: { bg: 'white' }
	};
	let g = hex1Board(dTable, rows, topcols, styles);
	g.addLayoutControls();
	return g;
}
function createServerBoard(layout, filename, rows, cols) {
	let sz = 100;
	return { filename: 'brett10', layout: 'hex', cells: { w: 100, h: 120, wgap: 10, hgap: 10 } };
}
function createServerPoolKeys(perlenDict, settings = {}) { return getRandomPerlenKeys(perlenDict, valf(settings.numPool, 20)); }
function createSettingsUi(dParent) {
	clearElement(dParent);
	let ttag = 'h2';
	mAppend(dParent, createElementFromHTML(`<${ttag}>Common Settings for ${Username}:</${ttag}>`));
	let nGroupNumCommonAllGames = mInputGroup(dParent);
	setzeEineZahl(nGroupNumCommonAllGames, 'samples', 25, ['samplesPerGame']);
	setzeEineZahl(nGroupNumCommonAllGames, 'minutes', 1, ['minutesPerUnit']);
	setzeEineZahl(nGroupNumCommonAllGames, 'correct streak', 5, ['incrementLevelOnPositiveStreak']);
	setzeEineZahl(nGroupNumCommonAllGames, 'fail streak', 2, ['decrementLevelOnNegativeStreak']);
	setzeEinOptions(nGroupNumCommonAllGames, 'show labels', ['toggle', 'always', 'never'], ['toggle', 'always', 'never'], 'toggle', ['showLabels']);
	setzeEinOptions(nGroupNumCommonAllGames, 'language', ['E', 'D', 'S', 'F', 'C'], ['English', 'German', 'Spanish', 'French', 'Chinese'], 'E', ['language']);
	setzeEinOptions(nGroupNumCommonAllGames, 'vocabulary', Object.keys(KeySets), Object.keys(KeySets), 'best25', ['vocab']);
	setzeEineCheckbox(nGroupNumCommonAllGames, 'show time', false, ['showTime']);
	setzeEineCheckbox(nGroupNumCommonAllGames, 'spoken feedback', true, ['spokenFeedback']);
	setzeEineCheckbox(nGroupNumCommonAllGames, 'silent', false, ['silentMode']);
	setzeEineCheckbox(nGroupNumCommonAllGames, 'switch game after level', false, ['switchGame']);
	mLinebreak(dParent);
	let g = DB.games[G.id];
	if (nundef(g)) return;
	mAppend(dParent, createElementFromHTML(`<${ttag}>Settings for <span style='color:${g.color}'>${g.friendly}</span></${ttag}>`));
	let nGroupSpecific = mInputGroup(dParent);
	setzeEineZahl(nGroupSpecific, 'trials', 3, ['trials']);
	setzeEineCheckbox(nGroupSpecific, 'show hint', true, ['showHint']);
}
function createStandardDeck() { return _createDeck(); }
function createStandardItems(onClickPictureHandler, ifs = {}, options = {}, keys, labels) {
	if (nundef(Settings)) Settings = {};
	let infos = keys.map(k => (isdef(Settings.language) ? getRandomSetItem(Settings.language, k) : symbolDict[k]));
	let bg = isdef(options.colorKeys) ? 'white' : (i) => options.sameBackground ? computeColor('random') : 'random';
	let fg = (i, info, item) => colorIdealText(item.bg);
	let defIfs = { bg: bg, fg: fg, label: isdef(labels) ? labels : (i, info) => info.best, contrast: .32, fz: 20, padding: 3 };
	let defOptions = {
		showLabels: Settings.labels == true, shufflePositions: true, sameBackground: true,
		showRepeat: false, repeat: 1, onclick: onClickPictureHandler, iStart: 0
	};
	ifs = deepmergeOverride(defIfs, ifs);
	options = deepmergeOverride(defOptions, options);
	let items = zItems(infos, ifs, options);
	if (options.repeat > 1) items = zRepeatEachItem(items, options.repeat, options.shufflePositions);
	if (isdef(options.colorKeys)) items = zRepeatInColorEachItem(items, options.colorKeys);
	items.map(x => x.label = x.label.toUpperCase());
	return [items, ifs, options];
}
function createStandardItemsS(onClickPictureHandler, ifs = {}, options = {}, keys, labels) {
	if (nundef(Settings)) Settings = {};
	let lang = isdef(Settings.language) ? Settings.language : 'E';
	let defShowLabels = isdef(Settings.labels) && Settings.labels == true;
	let infos = keys.map(k => Syms[k]);
	infos.map(x => x.best = x['best' + lang]);
	console.log(infos.map(x => x.best));
	let bg = isdef(options.colorKeys) ? 'white' : (i) => options.sameBackground ? computeColor('random') : 'random';
	let fg = (i, info, item) => colorIdealText(item.bg);
	let defIfs = { bg: bg, fg: fg, label: isdef(labels) ? labels : (i, info) => info.best, contrast: .32, fz: 20, padding: 10 };
	let defOptions = { showLabels: defShowLabels, shufflePositions: true, sameBackground: true, showRepeat: false, repeat: 1, onclick: onClickPictureHandler, iStart: 0 };
	ifs = deepmergeOverride(defIfs, ifs);
	options = deepmergeOverride(defOptions, options);
	let items = zItems(infos, ifs, options);
	if (options.repeat > 1) items = zRepeatEachItem(items, options.repeat, options.shufflePositions);
	if (isdef(options.colorKeys)) items = zRepeatInColorEachItem(items, options.colorKeys);
	items.map(x => x.label = x.label.toUpperCase());
	return [items, ifs, options];
}
function createStaticUi(area, R) {
	ensureUiNodes(R);
	let n = R.tree;
	recUi(n, R, area);
}
function createSTree(n, idParent, R) {
	n = createNode(n, idParent, R);
	if (isContainerType(n.type)) {
		let prop = RCONTAINERPROP[n.type];
	}
}
function createSubtitledPage(bg = 'silver', title = 'Aristocracy', subtitle = '', footer = 'a game by F. Ludos') {
	setPageBackground(bg);
	createPageDivsFullVisibleArea({
		title: { h: 42, family: 'AlgerianRegular', fz: 36 },
		subtitle: { h: 30, fz: 16 },
		titleLine: { h: 5, bg: '#00000080' },
	}, { bg: '#00000050' }, { footer: { h: 30, fz: 16 } }, {});
	dTitle.innerHTML = title;
	dSubtitle.innerHTML = subtitle;
	dFooter.innerHTML = footer;
	addDummy();
}
function createSuccessMarker(sz) {
	let d = mCreate('div');
	d.innerHTML = 'J';
	mClass(d, 'feedbackMarker');
	document.body.appendChild(d);
	Markers.push(d);
	return d;
}
function createTable() {
	let numPlayers = G.numPlayers;
	if (isdef(numPlayers)) {
		idTable = getNextTableId();
		T = { id: idTable, game: G.id };
		getPlayersIncludingU();
		lookupSet(DB, ['tables', idTable], T);
		return idTable;
	}
	return null;
}
function createTableZone(showColor = false) {
	let z = createCardZone('table');
	if (showColor) mStyleX(z.div, { bg: 'white' });
	return z;
}
function createText({ s, parent, style, classes }) {
	let d = mText(s, parent);
	if (isdef(style)) mStyle(d, style);
	if (isdef(classes)) mClass(d, ...classes);
}
function createTooltip(oid) {
	$('#' + oid).unbind('mouseover mouseout');
	$('#' + oid).mouseover(function (e) {
		e.stopPropagation();
		let id = evToId(e);
		if (TT_JUST_UPDATED != id) {
			TT_JUST_UPDATED = id;
			updateTooltipContent(id);
			$('div#tooltip').css({
				display: 'inline-block',
				top: e.pageY,
				left: e.pageX,
			});
		}
	});
	$('#' + oid).mouseout(function (e) {
		if (TT_JUST_UPDATED == oid) TT_JUST_UPDATED = -1;
		e.stopPropagation();
		$('div#tooltip').css({
			top: 0,
			left: 0,
			display: 'none'
		});
	});
}
function createTooltip_hallo(oid) {
	let id = getMainId(oid);
	let ms = getVisual(oid);
	if (!ms) return;
	let ground = ms.ground;
	if (!ground) return;
	let domel = ground;
	console.log('creating tt', domel)
	$(domel).off('mouseover mouseout');
	$(domel).mouseover(function (e) {
		console.log('mouseover', e, evToId(e));
		return;
		let mainId = evToId(e);
		console.log(ev, 'should show tt for', mainId)
		if (TT_JUST_UPDATED != oid) {
			TT_JUST_UPDATED = oid;
			updateTooltipContent(mainId);
			$('div#tooltip').css({
				display: 'inline-block',
				top: e.pageY,
				left: e.pageX,
			});
		}
	});
	$(domel).mouseout(function (e) {
		if (TT_JUST_UPDATED == oid) TT_JUST_UPDATED = -1;
		e.stopPropagation();
		$('div#tooltip').css({
			top: 0,
			left: 0,
			display: 'none'
		});
	});
}
function createUi(n, R, area) {
	if (nundef(n.type)) { n.type = inferType(n); }
	R.registerNode(n);
	decodeParams(n, R, {});
	calcIdUiParent(n, R, area);
	let ui;
	if (nundef(RCREATE[n.type])) ui = mDefault(n, area, R);
	else ui = RCREATE[n.type](n, R, area);
	if (nundef(n.uiType)) n.uiType = 'd';
	if (n.uiType == 'NONE') return ui;
	if (n.uiType != 'childOfBoardElement') {
		if (isBoard(n.uid, R)) { delete n.cssParams.padding; }
		applyCssStyles(n.uiType == 'h' ? mBy(n.uidStyle) : ui, n.cssParams);
	}
	if (!isEmpty(n.stdParams)) {
		switch (n.stdParams.show) {
			case 'if_content': if (!n.content) hide(ui); break;
			case 'hidden': hide(ui); break;
			default: break;
		}
	}
	R.setUid(n, ui);
	return ui;
}
function createUiTestX(n, R, area) {
	if (nundef(n.type)) { n.type = inferType(n); }
	decodeParams(n, R, {});
	calcIdUiParent(n, R, area);
	let ui;
	if (isdef(RCREATE[n.type])) ui = RCREATE[n.type](n, R, area);
	else ui = mDefault(n, R, area);
	if (nundef(n.uiType)) n.uiType = 'd';
	if (n.uiType == 'NONE') return ui;
	if (n.uiType != 'childOfBoardElement') {
		if (isBoard(n.uid, R)) { delete n.cssParams.padding; }
		applyCssStyles(n.uiType == 'h' ? mBy(n.uidStyle) : ui, n.cssParams);
	}
	if (!isEmpty(n.stdParams)) {
		switch (n.stdParams.show) {
			case 'if_content': if (!n.content) hide(ui); break;
			case 'hidden': hide(ui); break;
			default: break;
		}
	}
	ui.id = n.uid;
	return ui;
}
async function createVault() {
	let sIndex = await fetchFileAsText('/RSG/index.html');
	let lines = sIndex.split('\n');
	let res = skipToLine(lines, 0, '#region loading:');
	let resend = skipToLine(lines, res.index, '#endregion');
	let listOfFiles = lines.slice(res.index, resend.index);
	listOfFiles = listOfFiles.map(x => stringBetween(x, '"'));
	listOfFiles = listOfFiles.filter(x => !isEmpty(x.trim()));
	listOfFiles.sort();
	listOfFiles = Array.from(listOfFiles);
	let files = ['assetHelpers', 'assets', 'helpers', 'helpersX'];
	listOfFiles = files.map(x => '/C/' + x + '.js');
	let vault = await documentVault(listOfFiles);
	return vault;
}
function createVisual(id, areaName, { rings = 3, bg = 'darkslategray', fg = 'lime', label, shape = 'circle', iPalette, ipal, fill, x = 0, y = 0, w = 25, h = 25, sPoints, border = 'green', thickness = 1, rounding, path, txt, fz = 12, sz, overlay = true, draw = true } = {}) {
	let parent = getVisual(areaName);
	if (parent.cat == 'd') {
		if (parent.ids.length != 1) {
			error('DIV cannot have more than 1 G child!!!');
		} else {
			parent = getVisual(parent.ids[0]);
			areaName = parent.id;
		}
	}
	let ms = new __O(id, areaName, 'G');
	let options = {};
	let labelOptions = {};
	if (iPalette && ipal) fill = S.pals[iPalette][ipal];
	if (bg) ms.setBg(bg);
	if (fg) { ms.setFg(fg); }
	if (fill) options.fill = fill;
	if (x) options.x = x;
	if (y) options.y = y;
	if (h) { options.h = h; options.sz = h; }
	if (w) { options.w = w; options.sz = w; }
	if (sz) options.sz = sz;
	if (txt) { options.txt = txt; labelOptions.txt = txt; }
	if (label) { labelOptions.txt = label; }
	if (fz) { options.fz = fz; labelOptions.fz = fz; }
	if (sPoints) options.sPoints = sPoints;
	if (border) options.border = border;
	if (thickness) options.thickness = thickness;
	if (rounding) options.rounding = rounding;
	if (path) options.path = './assets/images/transpng/' + path + '.png';
	if (rings) {
	} else rings = 1;
	dSize = Math.max(w / 6, 5);
	for (let i = 0; i < rings; i++) {
		switch (shape) {
			case 'circle':
				ms.circle(options);
				break;
			case 'hex':
				ms.hex(options);
				break;
			case 'rect':
				ms.rect(options);
				break;
			case 'poly':
				ms.poly(options);
				break;
			case 'image':
				ms.image(options);
				break;
			case 'text':
				ms.text(options);
				break;
			default:
				return null;
		}
		options.w -= dSize;
		options.sz -= dSize;
		options.h -= dSize;
	}
	if (label) {
		ms.text(labelOptions);
	}
	if (h) { options.h = h; options.sz = h; }
	if (w) { options.w = w; options.sz = w; }
	if (sz) options.sz = sz;
	if (overlay) {
		overlayOptions = jsCopy(options);
		overlayOptions.className = 'overlay';
		delete overlayOptions.fill;
		delete overlayOptions.path;
		switch (shape) {
			case 'circle':
				ms.circle(overlayOptions);
				break;
			case 'hex':
				ms.hex(overlayOptions);
				break;
			case 'rect':
				ms.rect(overlayOptions);
				break;
			case 'poly':
				ms.poly(overlayOptions);
				break;
			case 'image':
				ms.rect(overlayOptions);
				break;
			case 'text':
				ms.text(overlayOptions);
				break;
			default:
				return null;
		}
	}
	if (draw) ms.attach();
	return ms;
}
function createWordInputs(words, dParent, idForContainerDiv = 'seqContainer', sep = null, styleContainer = {}, styleWord = {}, styleLetter = {}, styleSep = {}, colorWhiteSpaceChars = true, preserveColorsBetweenWhiteSpace = true) {
	if (isEmpty(styleWord)) {
		let sz = 80;
		styleWord = {
			margin: 10, padding: 4, rounding: '50%', w: sz, h: sz, display: 'flex', fg: 'lime', bg: 'yellow', 'align-items': 'center',
			border: 'transparent', outline: 'none', fz: sz - 25, 'justify-content': 'center',
		};
	}
	let dContainer = mDiv(dParent);
	if (!isEmpty(styleContainer)) mStyleX(dContainer, styleContainer); else mClass(dContainer, 'flexWrap');
	dContainer.id = idForContainerDiv;
	let inputGroups = [];
	let charInputs = [];
	let iWord = 0;
	let idx = 0;
	let numWords = words.length;
	let wheel = getHueWheel(G.color, 40, numWords <= 4 ? 60 : numWords <= 10 ? 30 : 15, 0);
	wheel = wheel.map(x => colorHSLBuild(x, 100, 50));
	wheel = shuffle(wheel);
	let wheel1 = colorPalShadeX(colorFrom(wheel[0]), numWords);
	wheel = jsCopy(wheel1);
	if (G.op == 'plus') wheel.reverse();
	for (const w of words) {
		let dGroup = mDiv(dContainer);
		mStyleX(dGroup, styleWord);
		let bg = wheel[iWord];
		dGroup.style.backgroundColor = bg;
		dGroup.style.color = colorIdealText(bg);
		dGroup.id = idForContainerDiv + '_' + iWord;
		let g = { dParent: dContainer, word: w, iWord: iWord, div: dGroup, oStyle: styleWord, ofg: dGroup.style.color, obg: dGroup.style.backgroundColor };
		inputGroups.push(g);
		let inputs = [];
		let iLetter = 0;
		let wString = w.toString();
		for (const l of wString) {
			let dLetter = mDiv(dGroup);
			if (!isEmpty(styleLetter)) mStyleX(dLetter, styleLetter);
			dLetter.innerHTML = l;
			let inp = { group: g, div: dLetter, letter: l, iLetter: iLetter, index: idx, oStyle: styleLetter, ofg: dLetter.style.color, obg: dLetter.style.backgroundColor };
			charInputs.push(inp);
			inputs.push(inp);
			iLetter += 1; idx += 1;
		}
		g.charInputs = inputs;
		if (iWord < words.length - 1 && isdef(sep)) {
			let dSep = mDiv(dContainer);
			dSep.innerHTML = sep;
			if (isdef(styleSep)) mStyleX(dSep, styleSep);
		}
		iWord += 1;
	}
	return { words: inputGroups, letters: charInputs };
}
function cRect(x, y, w, h, styles = null, ctx = null) {
	if (nundef(ctx)) { ctx = CX; if (!ctx) return; }
	if (styles) cStyle(styles, ctx);
	if (isdef(styles.bg) || nundef(styles.fg)) ctx.fillRect(x, y, w, h);
	if (isdef(styles.fg)) ctx.strokeRect(x, y, w, h);
}
function cropImageCorrectly(img, mindCorners = false) {
	let sz = SZ_UPLOAD_CANVAS;
	let canvas = mBy('canvas1');
	let cw, ch, iw, ih, fw, fh, f, padw, padh, padmin = mindCorners ? sz * .1 : 0;
	cw = ch = sz;
	iw = img.naturalWidth;
	ih = img.naturalHeight;
	fw = cw / iw;
	fh = ch / ih;
	f = Math.min(fw, fh);
	iw *= f;
	ih *= f;
	padw = (cw - iw) / 2;
	padh = (ch - ih) / 2;
	let dx, dy, cwNet, chNet;
	if (padw < padmin && padh < padmin) {
		padw = padh = padmin;
		cwNet = cw - 2 * padmin;
		chNet = ch - 2 * padmin;
		iw = img.naturalWidth;
		ih = img.naturalHeight;
		fw = cwNet / iw;
		fh = chNet / ih;
		f = Math.min(fw, fh);
		iw *= f;
		ih *= f;
	}
	let ctx = canvas.getContext("2d");
	let color = getBackgroundColor(img, ctx);
	ctx.clearRect(0, 0, sz, sz);
	drawColoredCircle(canvas, sz, color, color);
	ctx.drawImage(img, padw, padh, iw, ih);
	ctx.globalCompositeOperation = 'destination-in';
	ctx.beginPath();
	ctx.arc(cw / 2, ch / 2, ch / 2, 0, Math.PI * 2);
	ctx.closePath();
	ctx.fill();
}
function cRound(dParent, styles = {}, id) {
	styles.w = valf(styles.w, Card.sz);
	styles.h = valf(styles.h, Card.sz);
	styles.rounding = '50%';
	return cBlank(dParent, styles, id);
}
function cSetOrigin(ctx, x, y) {
	ctx.translate(x, y);
}
function cShadow(ctx, color, offx, offy, blur) {
	ctx.shadowColor = color;
	ctx.shadowOffsetX = offx;
	ctx.shadowOffsetY = offy;
	ctx.shadowBlur = blur;
}
function cssCleanupClause(t, kw) {
	let lines = t.split('\n');
	let comment = false;
	let state = 'copy';
	let res = '';
	for (const line of lines) {
		let lt = line.trim();
		let [cstart, cend, mstart] = [lt.startsWith('/*'), lt.endsWith('*/'), line.includes('/*')];
		if (state == 'skip') {
			if (cend) state = 'copy';
			continue;
		} else if (state == 'copy') {
			if (cstart && cend) { continue; }
			else if (cstart) { state = 'skip'; continue; }
			else if (mstart) {
				res += stringBefore(line, '/*') + '\n';
				if (!cend) state = 'skip';
			} else {
				res += line + '\n';
			}
		}
	}
	if (kw == 'bAdd') console.log(res);
	return res;
}
async function cssExtendFromProject(project) {
	let htmlFile = `../${project}/index.html`;
	let html = await route_path_text(htmlFile);
	cssfiles = extractFilesFromHtml(html, htmlFile, 'css');
	console.log('cssfiles', cssfiles);
	cssfiles.unshift('../allcss.css');
	let csstext = await cssFromFiles(cssfiles);
	downloadAsText(csstext, 'allcss', 'css');
	return csstext;
}
async function cssFromFiles(files, dir = '', types = ['root', 'tag', 'class', 'id', 'keyframes']) {
	let tcss = '';
	if (!isEmpty(dir) && !dir.endsWith('/')) dir += '/';
	for (const file of files) {
		let path = dir + file + (file.endsWith('.css') ? '' : '.css');
		tcss += await route_path_text(path) + '\r\n';
	}
	let t = replaceAllSpecialChars(tcss, '\t', '  ');
	let lines = t.split('\r\n');
	if (lines.length <= 2) lines = t.split('\n');
	console.log('lines', lines)
	let allkeys = [], newlines = [];
	let di = {};
	let testresult = '';
	for (const line of lines) {
		let type = cssKeywordType(line);
		if (type) {
			testresult += line[0] + '=';//addIf(testresult,line[0]); 
			let newline = isLetter(line[0]) || line[0] == '*' ? line : line[0] == '@' ? stringAfter(line, ' ') : line.substring(1);
			let key = line.includes('{') ? stringBefore(newline, '{') : stringBefore(newline, ','); //firstWordIncluding(newline, '_-: >').trim();
			key = key.trim();
			if (isdef(di[key]) && type != di[key].type) {
				console.log('duplicate key', key, type, di[key].type);
			}
			di[key] = { type: type, key: key }
			newline = key + stringAfter(newline, key);
			if (key == '*') console.log('***', stringAfter(newline, key));
			addIf(allkeys, key);
			newlines.push(newline)
			di[key] = { type: type, key: key }
		} else {
			newlines.push(line);
		}
	}
	console.log('di', di)
	let neededkeys = allkeys;
	let clause = '';
	let state = 'search_kw';
	for (const kw of neededkeys) {
		let i = 0;
		for (const line of newlines) {
			if (line.startsWith(kw)) {
				let w1 = line.includes('{') ? stringBefore(line, '{') : stringBefore(line, ',');
				if (w1.trim() != kw) continue;
				assertion(line.includes('{') || line.includes(','), `WEIRED LINE: ${kw} ${line}`);
				if (line.includes('{')) {
					clause = '{\n'; state = 'search_clause_end';
				} else if (line.includes(',')) {
					state = 'search_clause_start';
				}
			} else if (state == 'search_clause_start' && line.includes('{')) {
				clause = '{\n'; state = 'search_clause_end';
			} else if (state == 'search_clause_end') {
				if (line[0] == '}') {
					clause += line;
					let cleanclause = cssCleanupClause(clause, kw);
					lookupAddIfToList(di, [kw, 'clauses'], cleanclause);
					lookupAddIfToList(di, [kw, 'fullclauses'], clause);
					state = 'search_kw';
				} else {
					clause += line + '\n';
				}
			}
		}
	}
	let dis = {};
	for (const o of get_values(di)) {
		if (nundef(o.clauses)) continue;
		let x = lookup(dis, [o.type, o.key]); if (x) console.log('DUPL:', o.key, o.type)
		lookupSet(dis, [o.type, o.key], o);
	}
	let text = '';
	let ditypes = { root: 58, tag: 't', class: 46, id: 35, keyframes: 64 }; // : tags . # @
	if (types.includes('root')) types = ['root'].concat(arrMinus(types, ['root']));
	console.log('types', types);
	types = types.map(x => ditypes[x]);
	for (const type of types) {
		if (nundef(dis[type])) continue;
		let ksorted = sortCaseInsensitive(get_keys(dis[type]));
		let prefix = type == 't' ? '' : String.fromCharCode(type);
		if (prefix == '@') prefix += 'keyframes ';
		console.log('type', type, prefix, ksorted)
		for (const kw of ksorted) {
			let startfix = prefix + kw;
			for (const clause of dis[type][kw].clauses) {
				text += startfix + clause;
			}
		}
	}
	return text;
}
async function cssGenerateFrom(cssfile, codefile, htmlfile) {
	if (!isList(cssfile)) cssfile = [cssfile];
	let tcss = '';
	for (const f of cssfile) { tcss += await route_path_text(f); }
	let code = codefile.endsWith('.js') ? await route_path_text(codefile) : codefile;
	let html = htmlfile.endsWith('.html') ? await route_path_text(htmlfile) : htmlfile;
	return cssNormalize(tcss, code, html);
}
function cssIsKeywordLine(line) { return line.startsWith(':') || line.startsWith('.') || line.startsWith('#') || line.startsWith('@keyframes') || isLetter(line[0]); }
function cssKeysNeeded(tcss, code, html) {
	let t = replaceAllSpecialChars(tcss, '\t', '  ');
	let lines = t.split('\r\n');
	let allkeys = [], newlines = [];
	let di = {};
	for (const line of lines) {
		if (cssIsKeywordLine(line)) {
			let newline = line.startsWith('@') ? stringAfter(line, ' ') : line.startsWith(':') ? stringAfter(line, ':') : line;
			let word = firstWordIncluding(newline, '_-: ').trim();
			newline = word + stringAfter(newline, word);
			addIf(allkeys, word);
			newlines.push(newline)
			let ch = line[0];
			let type = isLetter(ch) ? 't' : ch == '.' ? 'c' : ch == '@' ? 'k' : ch == ':' ? 'r' : 'i';
			di[word] = { type: type, key: word }
		} else {
			newlines.push(line);
		}
	}
	let neededkeys = [];
	for (const k of allkeys) {
		if (['rubberBand'].includes(k)) continue;
		let ktest = k.includes(' ') ? stringBefore(k, ' ') : k.includes(':') ? stringBefore(k, ':') : k;
		if (['root'].some(x => x == k)) addIf(neededkeys, k);
		else if (code.includes(`${ktest}`) || code.includes(`'${ktest}'`) || code.includes(`"${ktest}"`)) addIf(neededkeys, k);
		else if (html.includes(`${ktest}`)) addIf(neededkeys, k);
	}
	return [di, neededkeys, newlines];
}
function cssKeywordType(line) {
	if (isLetter(line[0]) || line[0] == '*' && line[1] != '/') return 't';
	else if (toLetters(':.#').some(x => line[0] == x)) return (line.charCodeAt(0)); //[0].charkey());
	else if (line.startsWith('@keyframes')) return (line.charCodeAt(0));
	else return null;
}
function cssNormalize(tcss, code, html) {
	[di, neededkeys, newlines] = cssKeysNeeded(tcss, code, html);
	console.log('needed', sortCaseInsensitive(neededkeys))
	let clause = '';
	let state = 'search_kw'; // search_kw search_clause_start search_clause_end
	for (const kw of neededkeys) {
		let i = 0;
		for (const line of newlines) {
			let lt = line.trim();
			if (line.startsWith(kw) && firstWordIncluding(line, '_-: ').trim() == kw) { //firstWordIncluding(line, '_- ').trim() == kw)  {
				assertion(line.includes('{') || line.includes(','), `WEIRED LINE: ${line}`)
				if (line.includes('{')) {
					clause = '{\n'; state = 'search_clause_end';
				} else if (line.includes(',')) {
					state = 'search_clause_start';
				}
			} else if (state == 'search_clause_start' && line.includes('{')) {
				clause = '{\n'; state = 'search_clause_end';
			} else if (state == 'search_clause_end') {
				if (line[0] == '}') {
					clause += line;
					let cleanclause = cssCleanupClause(clause, kw);
					lookupAddIfToList(di, [kw, 'clauses'], cleanclause);
					lookupAddIfToList(di, [kw, 'fullclauses'], clause);
					state = 'search_kw';
				} else {
					clause += line + '\n';
				}
			}
		}
	}
	let dis = {};
	for (const o of get_values(di)) {
		if (nundef(o.clauses)) continue;
		let x = lookup(dis, [o.type, o.key]); if (x) console.log('DUPL:', o.key, o.type)
		lookupSet(dis, [o.type, o.key], o);
	}
	let text = '';
	for (const type in dis) {
		let ksorted = sortCaseInsensitive(get_keys(dis[type]));
		let prefix = type == 't' ? '' : type == 'k' ? '@keyframes ' : type == 'c' ? '.' : type == 'r' ? ':' : '#';
		for (const kw of ksorted) {
			let startfix = prefix + kw;
			for (const clause of dis[type][kw].clauses) {
				text += startfix + clause;
			}
		}
	}
	return text;
}
async function cssSelectFromFile(cssfile, types) {
	let csstext = await cssFromFiles([cssfile], '', types);
	downloadAsText(csstext, 'selectioncss', 'css');
	return csstext;
}
function cStyle(styles, ctx) {
	if (nundef(ctx)) { ctx = CX; if (nundef(ctx)) { console.log('ctx undefined!!!!!!!'); return; } }
	const di = { bg: 'fillStyle', fill: 'fillStyle', stroke: 'strokeStyle', fg: 'strokeStyle', thickness: 'lineWidth', thick: 'lineWidth', cap: 'lineCap', ending: 'lineCap' };
	if (isdef(styles)) {
		for (const k in styles) { ctx[isdef(di[k]) ? di[k] : k] = styles[k]; }
	}
}
function cStyle_dep(cvx, fill, stroke, wline, cap) {
	cvx.fillStyle = fill;
	if (isdef(stroke)) cvx.strokeStyle = stroke;
	if (isdef(wline)) cvx.lineWidth = wline;
	if (isdef(cap)) cvx.lineCap = cap;
}
function csv_table_example(dParent) {
	mystring = get_csv_example();
	present_table_from_csv(mystring, dParent);
}
function csv2list(allText, hasHeadings = true) {
	var numHeadings = 11;
	var allTextLines = allText.split(/\r\n|\n/);
	var headings = allTextLines[0].split(',');
	numHeadings = headings.length;
	let entries = allTextLines.splice(1);
	var records = [];
	for (const e of entries) {
		let o = {};
		let values = e.split(',');
		for (let i = 0; i < numHeadings; i++) {
			let k = headings[i];
			o[k] = values[i];
		}
		records.push(o);
	}
	return records;
}
function cTest03_2Hands_transfer() {
	let deck1 = DA.h1.deck;
	let deck2 = DA.h2.deck;
	let item = DA.item;
	deck1.addTop(item.val);
	deck2.remove(item.val);
	iPresentHand_test(dTable, DA.h1);
	iPresentHand_test(dTable, DA.h2);
	iSortHand_test(dTable, DA.h1)
}
function cTest03_2Hands_transferStarts() {
	let h1 = DA.h1.iHand;
	let n1 = h1.items.length;
	let h2 = DA.h2.iHand;
	let n2 = h2.items.length;
	let c = chooseRandom(h2.items);
	DA.item = c;
	let w = c.w;
	let ov = w / 4;
	let xOffset = n1 * ov;
	console.log('w', w, 'ov', ov, 'xOffset', xOffset)
	iMoveFromTo(c, h2.div, h1.div, cTest03_2Hands_transfer, { x: xOffset, y: 0 });
}
function cTest03_2HandsRandom() {
	let h1 = iMakeHand_test(dTable, [33, 7, 1, 2, 3, 4], 'h1');
	let h2 = iMakeHand_test(dTable, [13, 14, 15, 16, 17], 'h2');
	setTimeout(cTest03_2Hands_transferStarts, 1000);
}
function cTest04_2HandsRandom() {
	let iarr = [33, 7, 1, 2, 3, 4], dParent = dTable, id = 'h1';
	let data = DA[id] = {};
	let h = data.deck = new DeckClass();
	h.init(iarr);
	let redo = true;
	h = data;
	if (nundef(h.zone)) {
		let nmax = 10, padding = 10;
		let sz = netHandSize(nmax);
		h.zone = mZone(dParent, { w: sz.w, h: sz.h, bg: 'random', padding: padding, rounding: 10 });
	} else {
		clearElement(h.zone);
	}
	if (nundef(h.iHand)) {
		let items = i52(h.deck.cards());
		h.iHand = iSplay(items, h.zone);
	} else if (redo) {
		clearElement(h.zone);
		let items = i52(h.deck.cards());
		h.iHand = iSplay(items, h.zone);
	}
	let h2 = iMakeHand([13, 14, 15, 16, 17], dParent, {}, 'h2');
	setTimeout(cTest03_2Hands_transferStarts, 1000);
}
function cTest05() {
	setBackgroundColor(null, 'random')
	mStyle(dTable, { h: 400, bg: 'black', padding: 10 });
	let SPEC = { layout: ['T T', 'H A'], showAreaNames: true };
	let s = '';
	let m = [];
	for (const line of SPEC.layout) {
		s += '"' + line + '" ';
		let letters = line.split(' ');
		let arr = [];
		for (const l of letters) { if (!isEmpty(l)) arr.push(l); }
		m.push(arr);
	}
	console.log('m', m, '\ns', s); return;
	let rows = SPEC.layout.length;
	let hCard = 110;
	let hTitle = 20;
	let gap = 4;
	let hGrid = rows * (hCard + hTitle) + gap * (rows + 1);
	let wGrid = '80%';
	let dGrid = mDiv(dTable, { h: hGrid, w: wGrid, 'grid-template-areas': s, bg: 'yellow' });
}
function cTest05B() {
	let dGridContainer = mDiv100(dTable, { bg: 'yellow' });
	let areas = mAreas(dGridContainer);
	areas.map(x => mCenterCenterFlex(x.div));
	let dGrid = dGridContainer.children[0];
	mStyle(dGrid, { gap: 5, bg: 'blue', box: true, padding: 5 })
	console.log(dTrick, dGridContainer.children[0]);
	areas.map(x => mStyle(x.div, { h: 110 }));
}
function cTest10() {
	let layout = ['T', 'H A'];
	let x = createGridLayout(dTable, layout);
	console.log('x', x);
}
function cTitleArea(card, h, styles, classes) {
	let dCard = iDiv(card);
	let dTitle = mDiv(dCard, { w: '100%', h: h, overflow: 'hidden', upperRounding: card.rounding });
	let dMain = mDiv(dCard, { w: '100%', h: card.h - h, lowerRounding: card.rounding });
	iAdd(card, { dTitle: dTitle, dMain: dMain });
	if (isdef(styles)) mStyle(dTitle, styles);
	return [dTitle, dMain];
}
function cumulative_distribution(from, to, mean, stdev, n = 0) {
	function cdfNormal(x, mean = 100, standardDeviation = 15) {
		return (1 - math.erf((mean - x) / (Math.sqrt(2) * standardDeviation))) / 2;
	}
	let res;
	if (to < from) { let h = from; from = to; to = h; }
	assertion(from <= to, 'MATH!!!!!!!!!!!!!!!??????????????????????')
	if (from <= mean && to >= mean) {
		let kleiner_als_from = cdfNormal(from, mean, stdev); console.log(kleiner_als_from)
		let kleiner_als_mean = cdfNormal(mean, mean, stdev); console.log(kleiner_als_mean)
		let res1 = kleiner_als_mean - kleiner_als_from; console.log('res1', res1);
		let kleiner_als_to = cdfNormal(to, mean, stdev); console.log(kleiner_als_to)
		let res2 = kleiner_als_to - kleiner_als_mean; console.log('res2', res2);
		console.log(res1 + res2); res = res1 + res2;
	} else {
		let kleiner_als_to = cdfNormal(to, mean, stdev); console.log(kleiner_als_to)
		let kleiner_als_from = cdfNormal(from, mean, stdev); console.log(kleiner_als_from)
		res = kleiner_als_to - kleiner_als_from; console.log('res', res);
	}
	return 100 * res.toFixed(n);
}
function cv_init_origin(canvas, origin) {
	let cv = canvas.cv;
	if (nundef(origin)) origin = 'cc';
	let pt = origin;
	if (isString(origin)) {
		let v = origin[0], h = origin[1];
		let y = v == 't' ? 0 : v == 'c' ? cv.height / 2 : cv.height;
		let x = h == 'l' ? 0 : h == 'c' ? cv.width / 2 : cv.width;
		pt = { x: x, y: y };
	}
	return pt;
}
function cycle(x, min, max) { let d = max - min; return (x - min) % d + min; }

//#endregion

//#region D
function dachain(ms = 0) {
	console.log('TestInfo', TestInfo)
	if (!isEmpty(DA.chain) && !(DA.test.running && DA.test.step == true)) {
		dachainext(ms);
	} else if (isEmpty(DA.chain)) console.log('DA.chain EMPTY ' + DA.test.iter)
}
function dachain_orig(ms = 0) {
	if (!isEmpty(DA.chain)) {
		dachainext(ms);
	} else console.log('DA.chain EMPTY ' + ITER)
}
function dachainext(ms = 0) {
	let f = DA.chain.shift();
	if (ms > 0) TOMan.TO[getUID('f')] = setTimeout(f, ms);
	else f();
}
function danext() { if (isdef(DA.next)) { let f = DA.next; DA.next = null; f(); } }
function darkerColor(r, g, b) {
	let hsv = rgbToHsv(r, g, b);
	testHelpers(hsv);
	let h = hsv.h;
	let s = hsv.s;
	let v = hsv.v / 2;
	let hsl = hsvToHsl(h, s, v);
	h = hsl.h;
	s = hsl.s * 100;
	let l = hsl.l * 100;
	testHelpers('hsl:', h, s, l);
	return hslToHslaString(h, s, l);
}
function dastaged(r, uname, ms = 0) {
	if (!isEmpty(DA.staged_moves)) {
		let action = DA.staged_moves.shift();
		if (action == 'meld') {
			let a = firstCond(r.actions, x => startsWith(x, `${uname}.hand.`));
			if (!a) { console.log('staged action', action, 'cannot be completed', r.actions); return; } else action = a;
		}
		if (action == 'draw') {
			let a = firstCond(r.actions, x => startsWith(x, `draw.decks.`));
			if (!a) { console.log('staged action', action, 'cannot be completed', r.actions); return; } else action = a;
		}
		if (ms > 0) TOMan.TO[getUID('f')] = setTimeout(() => autoselect_action(r, action, uname), ms);
		else autoselect_action(r, action, uname);
	}
}
function data_from_client(raw) {
	assertion(is_stringified(raw), 'data should be stringified json!!!!!!!!!!!!!!!', raw);
	let js = JSON.parse(raw);
	return js;
}
function date2locale(date) { return date.toLocaleDateString(); }
function db_add_code() {
	let kw = prompt('Enter Keywords');
	let text = dCode.value;
	console.log('saving', kw, text);
	let code = { kw: kw, c: text };
	let data = { table: 'code', item: code };
	lookupAddToList(DB, ['code'], code);
	post_json('http://localhost:3000/db/add/code', code, r => console.log('resp', r));
}
function db_clear_players(friendly) {
	assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);
	let t = GT[friendly];
	for (const pldata of t.playerdata) { pldata.state = null; pldata.player_status = null; }
	return t.playerdata;
}
function db_create(table, rec, db) {
	if (!db) { db = DB; }
	lookupAddToList(db, ['appdata', table], rec);
	return db;
}
function db_delete(table, i, db) {
	if (!db) { db = DB; }
	if (nundef(i)) delete db.appdata[table]; else arrRemovip(lookup(db, ['appdata', table])[i]);
	return db;
}
function db_init(db) { DB = db; return db; }
function db_init_code() {
	let code = [
		{ kw: 'post route', c: `post_json('http://localhost:3000/post/json',o,r=>console.log('resp',r));` },
		{ kw: 'get yaml route', c: `await route_path_yaml_dict('http://localhost:3000/route')` },
		{ kw: 'get json route', c: `await route_path_json('http://localhost:3000/route')` },
	];
	DB.code = code;
	post_json('http://localhost:3000/db/init/code', code, r => console.log('resp', r));
}
function db_list_code() {
	for (const code of DB.code) {
	}
}
function db_new_table(friendly, game, host, players, fen, options) {
	let table = { friendly, game, host, players, fen, options };
	table.modified = Date.now();
	let playerdata = [];
	for (const plname of players) {
		playerdata.push({ name: `${plname}`, state: null, player_status: null });
	}
	let res = { table, playerdata };
	GT[friendly] = res;
	return res;
}
function db_read_playerdata(friendly) {
	assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);
	return GT[friendly].playerdata;
}
function db_read_table(friendly) {
	assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);
	return GT[friendly].table;
}
function db_readall(db) {
	if (!db) { db = DB; }
	return db;
}
function db_save() {
	if (!is_online()) { console.log('not saving! (no internet)'); return; }
	let txt = jsyaml.dump(DB);
	to_server({ db: txt }, 'dbsave');
}
function db_table_exists(friendly) { return isdef(GT[friendly]); }
function db_update(table, i, rec, save = false) {
	if (isdef(DB)) { let list = lookup(DB, ['appdata', table]); list[i] = rec; }
	if (NODEJS) post_json(SERVERURL + `/update`, { table: table, i: i, rec: rec, save: save }, () => console.log('updated db'));
}
function db_write_fen(friendly, fen, scoring = null) {
	assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);
	let t = GT[friendly];
	let table = t.table;
	table.fen = fen; table.scoring = scoring; table.phase = isdef(scoring) ? 'over' : '';
	table.modified = Date.now();
	return table;
}
function db_write_player(friendly, uname, state, player_status) {
	assertion(isdef(GT[friendly]), `table ${friendly} does NOT exist!!!!`);
	let t = GT[friendly];
	let pldata = firstCond(t.playerdata, x => x.name == uname);
	pldata.state = state;
	pldata.player_status = player_status;
	pldata.checked = Date.now();
	return t.playerdata;
}
async function dbInit(appName, dir = '../DATA/') {
	let users = await route_path_yaml_dict(dir + 'users.yaml');
	let settings = await route_path_yaml_dict(dir + 'settings.yaml');
	let addons = await route_path_yaml_dict(dir + 'addons.yaml');
	let games = await route_path_yaml_dict(dir + 'games.yaml');
	let tables = await route_path_yaml_dict(dir + 'tables.yaml');
	DB = {
		id: appName,
		users: users,
		settings: settings,
		games: games,
		tables: tables,
		addons: addons,
	};
	dbSave(appName);
}
async function dbLoad(appName, callback) {
	let url = SERVERURL;
	fetch(url, {
		method: 'GET',
		headers: {
			'Accept': 'application/json',
			'Content-Type': 'application/json'
		},
	}).then(async data => {
		let sData = await data.json();
		DB = firstCond(sData, x => x.id == appName);
		if (isdef(callback)) callback();
	});
}
async function dbLoadX() { DB = await route_path_yaml_dict('./DB.yaml'); }
function dbSave() {
	if (NODEJS) {
		let route = `/post/json`;
		let o = { filename: 'db', data: DB }
		let callback = () => console.log('saved db');
		post_json(route, o, callback);
		console.log('full route', route);
	} else console.log('not saved - no app running!')
}
async function dbSaveX(callback) {
	if (USELIVESERVER) {
		return;
	}
	if (BlockServerSend1) { setTimeout(() => dbSaveX(callback), 1000); }
	else {
		let path = './MZZ/DB.yaml';
		let resp = await postData('http://localhost:3000/db', { obj: DB, path: path });
		BlockServerSend1 = false;
		if (callback) callback();
	}
}
function ddStart(ev, source, isCopy = true, clearTarget = false) {
	if (!canAct() || isdef(DDInfo.dragStartHandler) && !DDInfo.dragStartHandler(source)) return;
	ev.preventDefault();
	ev.stopPropagation();
	DDInfo.source = source;
	let d = iDiv(source);
	var clone = DragElem = DDInfo.clone = d.cloneNode(true);
	clone.isCopy = isCopy;
	clone.clearTarget = clearTarget;
	mAppend(document.body, clone);
	mClass(clone, 'dragelem');
	mStyle(clone, { left: ev.clientX - ev.offsetX, top: ev.clientY - ev.offsetY });
	DDInfo.dragOffset = clone.drag = { offsetX: ev.offsetX, offsetY: ev.offsetY };
	document.body.onmousemove = onMovingCloneAround;
	document.body.onmouseup = onReleaseClone;
}
function deactivate_ui() { uiActivated = false; DA.ai_is_moving = true; }
function deactivateChat(key) {
	console.log('deactivate chat', key, ActiveChats[key]);
	mClassRemove(ActiveChats[key].div, 'activeChat'); clearChatWindow();
}
function deactivateFocusGroup() {
	if (Goal.iFocus === null) {
		return;
	}
	let g = Goal.words[Goal.iFocus];
	g.div.style.backgroundColor = g.obg;
	Goal.iFocus = null;
}
function deactivateTooltips() {
	for (const oid in G.table) {
		$('#' + oid).unbind('mouseover mouseout');
	}
	for (const oid in G.players) {
		$('#' + oid).unbind('mouseover mouseout');
	}
}
function deactivateTooltips_hallo() {
	for (const oid in G.table) {
		$('#' + oid).unbind('mouseover mouseout');
	}
	for (const oid in G.players) {
		$('#' + oid).unbind('mouseover mouseout');
	}
}
function deactivateUis(R) {
	for (const uid in R.uiNodes) {
		let n = R.uiNodes[uid];
		if (n.oid && n.ui) {
			n.act.deactivate();
		}
	}
	R.isUiActive = false;
}
function deal1(deck, w, h) {
	deck.cards.forEach(function (card, i) {
		card.setSide('front')
		card.animateTo({
			delay: 1000 + i * 2,
			duration: 500,
			ease: 'quartOut',
			x: Math.random() * w - w / 2,
			y: Math.random() * h - h / 2
		})
	});
}
function dec_g_index(i) { set_g_index(G.i - 1); }
function dec_level_on_losestreak() {
	let players = get_values(Session.cur_players);
	let scores = players.map(x => x.score);
	let min = arrMin(scores);
	let losers = players.filter(x => x.score == min).map(x => x.name);
	let game = Session.cur_game;
	for (const w of losers) {
		let o = lookup(DB.users, [w, 'games', game]);
		o.losestreak = DB.users[w].games[game].losestreak = isdef(o.losestreak) ? o.losestreak + 1 : 1;
		if (o.losestreak >= 1) {
			let currentlevel = get_startlevel(w, game);
			lookupSetOverride(DB.users, [w, 'games', game, 'startlevel'], Math.max(currentlevel - 1, 0));
			delete o.losestreak;
		}
	}
}
function Deck() {
	this.cardWidth = 55;
	this.cardHeight = 80;
	this.cardSuit = 13;
	this.cardTotal = 52;
	this.cardURL = "../images/cards2/";
	this.cardReverse = "reverse";
	this.cardName = "";
	this.cardExtension = ".png";
	this.throwed = new Array(this.cardTotal);
	this.throwCard = function () {
		var id = Math.floor(Math.random() * this.throwed.length);
		while (this.throwed[id])
			if (++id == this.throwed.length)
				id = 0;
		this.throwed[id] = true;
		return (id)
	}
	this.cardSrc = function (id, reverse) {
		var srcname = (reverse) ? this.cardReverse : (this.cardName + String(id));
		return (this.cardURL + srcname + this.cardExtension);
	}
}
function deck_add(deck, n, arr) { let els = deck_deal(deck, n); els.map(x => arr.push(x)); return arr; }
function deck_deal(deck, n) { return deck.splice(0, n); }
function deck_deal_safe_ferro(fen, plname, n) {
	if (fen.deck.length < n) {
		fen.deck = fen.deck.concat(fen.deck_discard.reverse());
		fen.deck_discard = [];
	}
	let new_cards = deck_deal(fen.deck, n);
	fen.players[plname].hand.push(...new_cards);
	new_cards.map(x => lookupAddToList(fen.players[plname], ['newcards'], x));
	return new_cards;
}
function deck_deal_safe_fritz(fen, plname, n = 1) {
	if (fen.deck.length < n) {
		fen.deck = create_fen_deck('n', fen.num_decks, 0);
		fen.loosecards.push('*Hn');
	}
	let new_cards = deck_deal(fen.deck, n);
	fen.players[plname].hand.push(...new_cards);
	new_cards.map(x => lookupAddToList(fen.players[plname], ['newcards'], x));
	return new_cards;
}
function deck52Back(card) {
	card.elem.setAttribute('class', 'card');
}
function deck52Prep(card) {
	let elem = card.elem;
	var suitName = iToSuit52_G(card.suit);
	if (card.suitName == 'joker' && card.rank > 3)
		elem.setAttribute('class', 'card joker');
	else elem.setAttribute('class', 'card ' + suitName + ' rank' + card.rank);
}
function deck52Update(card) { deck52Prep(card); }
function deckAPrep(card) {
	let elem = card.elem;
	let i = card.i;
	elem.setAttribute('class', 'card joker');
}
function deckEmptyBack(card) {
	card.elem.setAttribute('class', 'card');
}
function deckEmptyPrep(card) {
	let elem = card.elem;
	elem.setAttribute('class', 'card joker');
}
function deckEmptyUpdate(card) { deckEmptyPrep(card); }
function deckWiseBack(card) {
	card.elem.setAttribute('class', 'card');
}
function deckWiseUpdate(card) { deckEmptyPrep(card); }
function decodeColor(c) {
	let parts = c.split(' ');
	if (parts.length == 1) return c;
	else if (parts.length == 2 && (parts[1][0] == '.' || parts[1][0] == '0')) {
		return colorFrom(parts[0], Number(parts[1]));
	} else {
		let n = Number(parts[1]);
		let lumParam = n / 50 - 1.0;
		let cAltered = colorShade(lumParam, parts[0]);
		if (parts.length > 2) { cAltered = colorFrom(cAltered, Number(parts[2])); }
		return cAltered;
	}
}
function decodeParams(n, R, defParams) {
	if (isdef(n.params) && isdef(n.params._NODE)) {
		let spk = n.params._NODE;
		let oParams = R.getSpec()[spk];
		for (const k in oParams) {
			n.params[k] = oParams[k];
		}
		delete n.params._NODE;
		let r = R.rNodes[n.uid];
		r.params = jsCopy(n.params);
	}
	if (nundef(n.params)) n.params = lookup(R.defs, [n.type, 'params']);
	if (!n.params) n.params = {};
	let inherited = lookup(defParams, [n.type, 'params']);
	let defaults = lookup(R.defs, [n.type, 'params']);
	let defs = n.params.inherit ? inherited : defaults ? defaults : {};
	if (n.type != 'grid') n.params = mergeOverrideArrays(defs, n.params);
	let o = isdef(n.oid) ? R.getO(n.oid) : null;
	let pNew = {};
	if (o) {
		pNew = mapValues(o, n.params, defs, R.getSpec());
		for (const k in pNew) { pNew[k] = calcContentFromData(n.oid, o, pNew[k], R); }
	} else pNew = n.params;
	if (isdef(pNew.bg) || isdef(pNew.fg)) {
		[pNew.bg, pNew.fg] = getExtendedColors(pNew.bg, pNew.fg);
	}
	let pNew1 = {};
	for (const k in pNew) { if (nundef(pNew[k])) continue; pNew1[k] = pNew[k]; }
	pNew = pNew1;
	for (const k in pNew) { if (COLORPARAMNAMES[k]) pNew[k] = decodeColor(pNew[k]); }
	let params = paramsToCss(pNew);
	n.params = pNew;
	n.typParams = params.typ;
	n.cssParams = params.css;
	n.stdParams = params.std;
}
function decodePropertyPath(o, path) {
	if (isString(path) && path[0] == '.') {
		let props = path.split('.').slice(1);
		return lookup(o, props);
	}
}
function decompose_2d_matrix(mat) {
	var a = mat[0];
	var b = mat[1];
	var c = mat[2];
	var d = mat[3];
	var e = mat[4];
	var f = mat[5];
	var delta = a * d - b * c;
	let result = {
		translation: [e, f],
		rotation: 0,
		scale: [0, 0],
		skew: [0, 0],
	};
	if (a != 0 || b != 0) {
		var r = Math.sqrt(a * a + b * b);
		result.rotation = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);
		result.scale = [r, delta / r];
		result.skew = [Math.atan((a * c + b * d) / (r * r)), 0];
	} else if (c != 0 || d != 0) {
		var s = Math.sqrt(c * c + d * d);
		result.rotation =
			Math.PI / 2 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));
		result.scale = [delta / s, s];
		result.skew = [0, Math.atan((a * c + b * d) / (s * s))];
	} else {
	}
	return result;
}
function decomposeMatrix(matrix) {
	var px = deltaTransformPoint(matrix, { x: 0, y: 1 });
	var py = deltaTransformPoint(matrix, { x: 1, y: 0 });
	var skewX = (180 / Math.PI) * Math.atan2(px.y, px.x) - 90;
	var skewY = (180 / Math.PI) * Math.atan2(py.y, py.x);
	return {
		translateX: matrix.e,
		translateY: matrix.f,
		scaleX: Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b),
		scaleY: Math.sqrt(matrix.c * matrix.c + matrix.d * matrix.d),
		scale: Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b),
		skewX: skewX,
		skewY: skewY,
		rotation: skewX
	};
}
function decorateVisual(ms, { draw = true, rings = 3, bg = 'darkslategray', fg = 'lime', label, shape = 'circle', palette, ipal, fill, x = 0, y = 0, w = 25, h = 25, sPoints, border = 'green', thickness = 1, rounding, path, txt, fz = 12, sz, overlay = true } = {}) {
	console.log('decorate', ms)
	let options = {};
	let labelOptions = {};
	if (palette && ipal) fill = palette[ipal];
	else if (ipal) fill = S.pal[ipal];
	if (bg) ms.setBg(bg);
	if (fg) { ms.setFg(fg); }
	if (fill) options.fill = fill;
	if (x) options.x = x;
	if (y) options.y = y;
	if (h) { options.h = h; options.sz = h; }
	if (w) { options.w = w; options.sz = w; }
	if (sz) options.sz = sz;
	if (txt) { options.txt = txt; labelOptions.txt = txt; }
	if (label) { labelOptions.txt = label; }
	if (fz) { options.fz = fz; labelOptions.fz = fz; }
	if (sPoints) options.sPoints = sPoints;
	if (border) options.border = border;
	if (thickness) options.thickness = thickness;
	if (rounding) options.rounding = rounding;
	if (path) options.path = './assets/images/transpng/' + path + '.png';
	if (rings) {
	} else rings = 1;
	dSize = Math.max(w / 6, 5);
	for (let i = 0; i < rings; i++) {
		switch (shape) {
			case 'circle':
				ms.circle(options);
				break;
			case 'hex':
				ms.hex(options);
				break;
			case 'rect':
				ms.rect(options);
				break;
			case 'poly':
				ms.poly(options);
				break;
			case 'image':
				ms.image(options);
				break;
			case 'text':
				ms.text(options);
				break;
			default:
				return null;
		}
		options.w -= dSize;
		options.sz -= dSize;
		options.h -= dSize;
	}
	if (label) {
		ms.text(labelOptions);
	}
	if (h) { options.h = h; options.sz = h; }
	if (w) { options.w = w; options.sz = w; }
	if (sz) options.sz = sz;
	if (overlay) {
		overlayOptions = jsCopy(options);
		overlayOptions.className = 'overlay';
		delete overlayOptions.fill;
		delete overlayOptions.path;
		switch (shape) {
			case 'circle':
				ms.circle(overlayOptions);
				break;
			case 'hex':
				ms.hex(overlayOptions);
				break;
			case 'rect':
				ms.rect(overlayOptions);
				break;
			case 'poly':
				ms.poly(overlayOptions);
				break;
			case 'image':
				ms.rect(overlayOptions);
				break;
			case 'text':
				ms.text(overlayOptions);
				break;
			default:
				return null;
		}
	}
	if (draw) ms.attach();
	return ms;
}
function decrease_handicap_if_winstreak(winners, game) {
	for (const w of winners) {
		let o = lookupSet(DB.users, [w, 'games', game], {});
		o.winstreak = DB.users[w].games[game].winstreak = isdef(o.winstreak) ? o.winstreak + 1 : 1;
		if (o.winstreak >= 3) {
			lookupSetOverride(DB.users, [w, 'games', game, 'startlevel'], Math.min(o.startlevel + 1, Session.maxlevel));
			delete o.winstreak;
			console.log('...startlevel of', w, 'is increased to', get_startlevel(w, game));
		}
		console.log('user', w, 'db entry', o);
	}
}
function deepmerge(target, source, optionsArgument) {
	var array = Array.isArray(source);
	var options = optionsArgument || { arrayMerge: defaultArrayMerge }
	var arrayMerge = options.arrayMerge || defaultArrayMerge
	if (array) {
		return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument)
	} else {
		return mergeObject(target, source, optionsArgument)
	}
}
function deepmergeOverride(base, drueber) { return mergeOverrideArrays(base, drueber); }
function deepmergeTest() {
	let o1 = { a: 1, c: 1 };
	let o2 = { a: 2, b: 2 };
	let o3 = deepmerge(o1, o2);
	logVals('___\no1', o1); logVals('o2', o2); logVals('o3', o3);
	o1.a = 11;
	logVals('___\no1', o1); logVals('o2', o2); logVals('o3', o3);
	o2.a = 22;
	logVals('___\no1', o1); logVals('o2', o2); logVals('o3', o3);
	o3.a = 33;
	logVals('___\no1', o1); logVals('o2', o2); logVals('o3', o3);
}
function deepmergeTestArray() {
	let o1 = { a: 1, b: [1, 2, 3], c: 1 };
	let o2 = { a: 2, b: [2, 3, 4, 5] };
	let o3 = deepmerge(o1, o2);
	logVals('___\no1', o1); logVals('o2', o2); logVals('o3', o3);
	o3 = mergeOverrideArrays(o1, o2);
	logVals('___\no1', o1); logVals('o2', o2); logVals('o3', o3);
	o3 = safeMerge(o1, o2);
	logVals('___\no1', o1); logVals('o2', o2); logVals('o3', o3);
}
function default_allowDrop(ev) { ev.preventDefault(); }
function default_item_serializer(o) { return copyKeys(o, {}, { live: true }); }
function defaultArrayMerge(target, source, optionsArgument) {
	var destination = target.slice()
	source.forEach(function (e, i) {
		if (typeof destination[i] === 'undefined') {
			destination[i] = cloneIfNecessary(e, optionsArgument)
		} else if (isMergeableObject(e)) {
			destination[i] = deepmerge(target[i], e, optionsArgument)
		} else if (target.indexOf(e) === -1) {
			destination.push(cloneIfNecessary(e, optionsArgument))
		}
	})
	return destination
}
function defaultPresentationNode(oid, o, R) {
	let nrep = {};
	let objLists = getElementLists(o);
	if (isEmpty(objLists)) {
		let litProp = firstCondDictKV(o, (k, v) => k != 'obj_type' && isLiteral(v));
		let content = litProp ? o[litProp] : o.obj_type + ' ' + oid;
		nrep = { type: 'info', data: content };
	} else {
		let key1 = Object.keys(objLists)[0];
		let list1 = Object.values(objLists)[0];
		console.log('defaultPresentationNode1: first list is:', key1, list1);
		nrep = { type: 'list', pool: list1, elm: '.' + key1 };
	}
	return nrep;
}
function defaultUIFunc(mk) {
	let el = mk.elem = mCreate('div');
	el.style.backgroundColor = randomColor();
	el.innerHTML = formatJson(mk.o);
	el.style.textAlign = 'left';
}
function defaultVisualExists(oid) { return firstCond(oid2ids[oid], x => x[0] == 'd'); }
function degrade_bars(dec) {
	let res = {};
	for (const color in DA.bars) {
		let bar = DA.bars[color];
		let val = Math.max(0, bar.w - dec);
		set_new_goal(color, val, 1);
		res[color] = val;
	}
	return res
}
function delete_current_table() {
	if (nundef(Session.cur_tid)) return;
	to_server(Session.cur_tid, 'delete_table');
	Session.cur_tid = null;
	Session.cur_table = null;
}
function delete_message(e) {
	if (confirm("Are you sure you want to delete this message??")) {
		var msgid = e.target.getAttribute("msgid");
		get_data({
			rowid: msgid
		}, "delete_message");
		get_data({
			username: CURRENT_CHAT_USER,
			seen: SEEN_STATUS
		}, "chats_refresh");
	}
}
function delete_table(friendly) { stop_game(); phpPost({ friendly: friendly }, 'delete_table'); }
function delete_thread(e) {
	if (confirm("Are you sure you want to delete this whole thread??")) {
		get_data({
			username: CURRENT_CHAT_USER
		}, "delete_thread");
		get_data({
			username: CURRENT_CHAT_USER,
			seen: SEEN_STATUS
		}, "chats_refresh");
	}
}
function deleteActions() { deleteAll('d', 'a'); }
function deleteAll(rsgType, idoType) {
	let ids = IdOwner[idoType];
	ids = isdef(IdOwner[idoType]) ? IdOwner[idoType].filter(x => x[0] == rsgType) : []; for (const id of ids) deleteRSG(id);
}
function deleteDefaultObjects() { deleteAll('d', 't'); }
function deleteDefaultPlayers() { deleteAll('d', 'p'); }
function deleteOid(oid) {
	let uids = jsCopy(oid2ids[oid]);
	for (const uid of uids) {
		if (uid[2] == 'r' || uid[2] == 'l') continue;
		if (UIS[uid]) deleteRSG(uid);
	}
}
function deleteRSG(id) {
	let mobj = UIS[id];
	if (nundef(mobj)) {
		error('object that should be deleted does NOT exist!!!! ' + id);
	}
	unhighlightMsAndRelatives(null, mobj)
	unlink(id);
	_deleteFromOwnerList(id);
	mobj.destroy();
	DELETED_IDS.push(id);
	DELETED_THIS_ROUND.push(id);
	delete UIS[id];
}
function deltaTransformPoint(matrix, point) {
	var dx = point.x * matrix.a + point.y * matrix.c + 0;
	var dy = point.x * matrix.b + point.y * matrix.d + 0;
	return { x: dx, y: dy };
}
function describe(d) {
	console.log('_________________');
	console.log('innerHTML', d.innerHTML);
	console.log('firstChild', d.firstChild);
	console.log('d', d)
}
function DeSelectSq(sq) {
	$('.Square').each(function (index) {
		if (PieceIsOnSq(sq, $(this).position().top, $(this).position().left) == BOOL.TRUE) {
			$(this).removeClass('SqSelected');
		}
	});
}
function DeselectSq(sq) {
	if (GameController.BoardFlipped == BOOL.TRUE) {
		sq = MIRROR120(sq);
	}
	$(".Square").each(function (index) {
		if ((RanksBrd[sq] == 7 - Math.round($(this).position().top / 60)) && (FilesBrd[sq] == Math.round($(this).position().left / 60))) {
			$(this).removeClass('SqSelected');
		}
	});
}
function destroyInfoboxFor(oid) { let id = makeIdInfobox(oid); if (UIS[id]) deleteRSG(id); }
function destroySudokuRule(pattern, rows, cols) {
	let sz = Math.min(rows, cols);
	let [r1, r2] = choose(range(0, sz - 1), 2);
	let c = chooseRandom(range(0, sz - 1));
	if (coin(50)) { arrSwap2d(pattern, r1, c, r2, c); }
	else if (coin(50)) { arrSwap2d(pattern, c, r1, c, r2); }
}
function detect_size_from_styles(st = {}, defsize = 50) {
	return [valf(st.w, st.sz, defsize), valf(st.w, st.sz, defsize)];
}
function detectArea(dParent, w, h) {
	let rect = isdef(dParent) ? getRect(dParent) : null;
	if (nundef(w)) { w = rect ? rect.w : window.innerWidth; }
	if (nundef(h)) { h = rect ? rect.h : window.innerHeight; }
	return [w, h];
}
function detectBoard(soDict, loc) {
	timit.showTime('*** board start ***')
	let idBoard = firstCondDict(soDict, x => isBoardObject(x));
	if (isdef(idBoard)) {
		let sBoard = soDict[idBoard];
		let idField0 = sBoard.fields._set[0]._obj;
		let f0 = soDict[idField0];
		let numNei = f0.neighbors.length;
		if (numNei == 6) return _hexGrid(loc, idBoard, sBoard, soDict); else return _quadGrid(loc, idBoard, sBoard, soDict);
	}
	return null;
}
function detectBoardOidAndType(oid, boardType, R) {
	if (!oid) oid = detectFirstBoardObject(R);
	let oBoard = R.getO(oid);
	if (!boardType) boardType = detectBoardType(oBoard, R);
	let fids = getElements(oBoard.fields);
	let r0 = 1000; let c0 = 1000;
	for (const fid of fids) {
		let f = R.getO(fid);
		if (f.row < r0) r0 = f.row;
		if (f.col < c0) c0 = f.col;
	}
	return [oid, boardType, r0, c0];
}
function detectBoardParams(n, R) {
	let allParams = {};
	let boardDefs = R.defs.grid;
	if (isdef(boardDefs)) {
		let specific = R.defs[n.boardType];
		if (isdef(specific)) boardDefs = deepmerge(boardDefs, specific);
		if (isdef(boardDefs.params)) {
			if (isdef(n.params)) allParams = deepmerge(boardDefs.params, n.params);
			else allParams = boardDefs.params;
		}
	}
	n.bi.params = { fields: {}, corners: {}, edges: {} };
	let justBoardParams = jsCopy(allParams);
	for (const name of ['fields', 'corners', 'edges']) {
		n.bi.params[name] = justBoardParams[name];
		delete justBoardParams[name];
	}
	return justBoardParams;
}
function detectBoardType(oBoard, R) {
	let fid0 = getElements(oBoard.fields)[0];
	let nei = R.getO(fid0).neighbors;
	let len = nei.length;
	return len == 6 ? 'hexGrid' : 'quadGrid';
}
function detectDecks(tableObjects, areaName) {
	let deckKeys = allCondDict(tableObjects, x => isDeckObject(x)); if (isEmpty(deckKeys)) return null;
	S.settings.hasCards = true;
	let deckArea = makeDeckArea(areaName, deckKeys.length);
	let msDecks = deckKeys.map(x => makeDeckSuccess(x, tableObjects[x], deckArea.id));
	lineupDecks(msDecks, deckArea);
	return deckKeys;
}
function detectFirstBoardObject(R) {
	for (const oid in R._sd) {
		let o = R.getO(oid);
		if (isdef(o.map) && isdef(o.fields)) return oid;
	}
}
function detectItemInfoKey(itemInfoKey) {
	let item, info, key;
	if (isString(itemInfoKey)) { key = itemInfoKey; info = Syms[key]; item = { info: info, key: key }; }
	else if (isDict(itemInfoKey)) {
		if (isdef(itemInfoKey.info)) { item = itemInfoKey; info = item.info; key = item.info.key; }
		else { info = itemInfoKey; key = info.key; item = { info: info, key: key }; }
	}
	return [item, info, key];
}
function detectItems(n) {
	if (isNumber(n)) n = choose(SymKeys, n);
	if (isString(n[0])) n = n.map(x => Syms[x]);
	if (nundef(n[0].info)) n = n.map(x => infoToItem(x));
	return n;
}
function detectSilben(words) {
	const syllableRegex = /[^aeiouy]*[aeiouy]+(?:[^aeiouy]*$|[^aeiouy](?=[^aeiouy]))?/gi;
	return words.match(syllableRegex);
}
function detectSymbolKey(o) {
	if (isdef(o.name)) return o.name;
	let res = null;
	for (const k in o) {
		if (!isLiteral(o[k]) || k == 'obj_type') continue;
		if (k.toLowerCase().includes('name') && isString(o[k])) return o[k];
	}
	let k = firstCondDict(o, x => isLiteral(o[k]));
	if (isdef(k)) return o[k];
}
function detectType(id) {
	let el = document.getElementById(id);
	return getTypeOf(el);
}
function determine_church_turn_order() {
	let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];
	let initial = [];
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		pl.vps = ari_calc_fictive_vps(fen, plname);
		pl.max_journey_length = ari_get_max_journey_length(fen, plname);
		pl.score = pl.vps * 10000 + pl.max_journey_length * 100 + pl.coins;
		initial.push(pl);
	}
	let sorted = sortByDescending(initial, 'score');
	return sorted.map(x => x.name);
}
function diContent(item) { return isdef(item.live) ? item.live.dContent : null; }
function dict_augment(di, o) { addKeys(o, di); return di; }
function dict_remove(di, keys) { }
function dict2list(d, keyName = 'id') {
	let res = [];
	for (const key in d) {
		let val = d[key];
		let o;
		if (isDict(val)) { o = jsCopy(val); } else { o = { value: val }; }
		o[keyName] = key;
		res.push(o);
	}
	return res;
}
function dict2olist(d, keyName = 'id') {
	let res = [];
	for (const key in d) {
		let val = d[key];
		let o;
		if (isDict(val)) { o = jsCopy(val); }
		else {
			o = { value: val };
		}
		o[keyName] = key;
		res.push(o);
	}
	return res;
}
function dicti(areaName, oSpec, oid, o) {
	let [num, or, split, bg, fg, id, panels, parent] = getParams(areaName, oSpec, oid);
	parent.style.display = 'inline-grid';
	return parent;
}
function dictOrListToString(x, ifDict = 'keys') {
	let lst = x;
	if (isList(lst) && !isEmpty(lst)) { return lst.join(' '); }
	else if (isDict(lst)) {
		return ifDict == 'keys' ? Object.keys(lst).join(' ')
			: ifDict == 'values' ? Object.keys(lst).join(' ')
				: Object.entries(lst).join(' ');
	}
	else return null;
}
function dictToKeyList(x) { return Object.keys(lst).join(' '); }
function dictToKVList(x) { return Object.entries(lst).join(' '); }
function dictToValueList(x) { return Object.values(lst).join(' '); }
function differInAtMost(req, given, n = 1) {
	let diffs = levDist(req, given);
	return diffs <= n;
}
function diMessage(item) { return isdef(item.live) ? item.live.dMessage : null; }
function disable_bar_ui() {
	for (const k in DA.bars) {
		let bar = DA.bars[k];
		let b = bar.cont.getElementsByTagName('button')[0];
		b.disabled = true;
	}
}
function disable_sidebar() { close_sidebar(); }
function disableButton(id) { disableStyle(id); }
function disableButtonsForMultiplayerGame() {
	if (isReallyMultiplayer) {
		if (iAmStarter()) enableButton('c_b_Restart'); else disableButton('c_b_Restart');
		disableButton('c_b_Step');
		disableButton('c_b_RunToEnd');
	}
}
function disableClick(el) {
	let mobj = 'mobj' in el ? el.mobj : el;
	mobj.clickHandler = null;
	mobj.disable();
}
function disableCreateButton() { disableButton('bCreateGame'); }
function disableHover(el) {
	let mobj = 'mobj' in el ? el.mobj : el;
	mobj.mouseEnterHandler = null;
	mobj.mouseLeaveHandler = null;
	mobj.disable();
}
function disableJoinButton() { disableButton('bJoinGame'); }
function disableResumeButton() {
	disableButton('bResumeGame');
}
function disableStyle(id) {
	if (isString(id)) id = document.getElementById(id);
	id.style.pointerEvents = 'none';
	id.style.opacity = .5;
	id.style.cursor = 'none';
}
function disappear(elem, msDuration = 1000, msStartAfter = 0) {
	if (isString(elem)) elem = mBy(elem);
	if (nundef(elem)) return;
	mStyle(elem, { overflow: 'hidden', animation: `disappear ${msDuration}ms ease` });
	setTimeout(() => { hide(elem); mStyle(elem, { animation: 'unset' }); }, msDuration);
}
function disconnectSocket() {
	if (Socket) { Socket.disconnect(); Socket = null; }
}
function displayMessages() {
	const messagesHTML = messages
		.map(message => createMessageHTML(message))
		.join('');
	messagesList.innerHTML = messagesHTML;
}
function displayWindowSize() {
	var w = document.documentElement.clientWidth;
	var h = document.documentElement.clientHeight;
	for (const msId in elements) {
		elements[msId].center();
	}
}
function distance(x1, y1, x2, y2) { return Math.sqrt(dSquare({ x: x1, y: y1 }, { x: x2, y: y2 })); }
function distribute_innerHTML(arr, s, sep = '') {
	let letters = s.split(sep);
	for (let i = 0; i < letters.length; i++) {
		let d = iDiv(arr[i]);
		let l = letters[i];
		if (l.length > 1) {
			l = '&#x' + l.substring(3) + ';';
		}
		d.innerHTML = l;
	}
	return;
	let i = 0; arr.map(x => { iDiv(x).innerHTML = s[i]; if (i < s.length - 1) i++; });
}
function diTitle(item) { return isdef(item.live) ? item.live.dTitle : null; }
function divInt(a, b) { return Math.trunc(a / b); }
function divKeyFromEv(ev) {
	let id = evToClosestId(ev);
	let div = mBy(id);
	return div.key;
}
function divscrolldown(id) {
	id = '#' + id;
	setTimeout(function () {
		$(id).animate(
			{
				scrollTop: $(id).offset().top
			},
			500
		);
	}, 200);
}
function dixit_activate(fen, plname) {
	console.log('activating for', plname)
}
function dixit_get_card(ckey, index, h = 200) {
	let filename = `${Basepath}assets/games/dixit/img${ckey}.jpg`;
	let clip = 50;
	let html = `<img src='${filename}' height='${h + clip}' style='clip-path:inset(0px 0px ${clip}px 0px)'></img>`;
	let d = mDiv(null, { rounding: 8, bg: 'blue', margin: 10, h: h, w: h * 141 / 200, overflow: 'hidden' }, null, html, 'card');
	mMagnifyOnHoverControl(d)
	let item = { key: ckey, index: index, div: d, html: html, h: h, faceUp: true };
	d.onclick = () => { face_up(item); };
	return item;
}
function dixit_present(fen, dParent, plname) {
	F = {};
	if (isdef(fen.story)) {
		F.story = ui_message(dParent, fen.story);
	}
	if (isdef(fen.instruction) && isdef(plname) && fen.plturn == plname) {
		let dTemp = mBy('dTemp');
		dTemp.style.display = 'block';
		mAppend(dParent, dTemp);
		dTempTitle.innerHTML = 'Write a story';
		dTempForm.onsubmit = ev => dixit_submit_story(mBy('dTempInput').value, ev);
	}
	if (isdef(fen.tablecards)) {
		let d = mDiv(dParent, { fg: 'white', bg: user.color, w: '100%' }, null, 'table'); mFlexWrap(d);
		pl.div = d;
		mLinebreak(d)
		let i = 0; let items = F.tablecards = fen.tablecards.map(x => { i++; return dixit_get_card(x, i) });
		for (const item of items) mAppend(d, iDiv(item));
	}
	let pls = F.players = {};
	for (const uname in fen.players) {
		let pl = pls[uname] = {};
		let fpl = fen.players[uname];
		console.log('dixit_present', user);
		let user = firstCond(Users, x => x.name == uname);
		copyKeys(user, pl)
		console.log('pl', uname, pl);
		if (isdef(plname) && uname != plname) continue;
		let d = mDiv(dParent, { fg: 'white', bg: user.color, w: '100%' }, null, uname); mFlexWrap(d);
		pl.div = d;
		mLinebreak(d)
		let i = 0; let items = pl.hand = fpl.hand.map(x => { i++; return dixit_get_card(x, i) });
		for (const item of items) mAppend(d, iDiv(item));
	}
}
function dixit_setup(players) {
	let fen = {};
	let deck = fen.deck = shuffle(range(0, 435));
	let pls = fen.players = {};
	for (const uname of players) {
		let pl = pls[uname] = {};
		pl.hand = deck_deal(deck, 7);
	}
	fen.plorder = rPlayerOrder(players);
	fen.turn = [fen.plorder[0]];
	fen.round = [];
	fen.iturn = 0;
	fen.phase = 'create';
	fen.instruction = 'write your story';
	return fen;
}
function dixit_submit_story(x, ev) {
	console.log('x', x, 'ev', ev)
}
function dlColor(factor, r, g, b) {
	testHelpers(r, g, b);
	let hsl = rgbToHsl(r, g, b);
	let hsv = hsl2hsv(...hsl);
	let h = hsv[0];
	let s = hsv[1];
	let v = hsv[2];
	v *= factor;
	hsl = hsv2hsl(h, s, v);
	let l = hsl[2];
	let sperc = s * 100;
	let lperc = l * 100;
	testHelpers('h,s,l,v:', h, s, l, v);
	return hslToHslaString(h, sperc, lperc);
}
function dm1(a, b, opt) {
	if (nundef(a)) return b;
	else if (nundef(b)) return a;
	else if (isLiteral(a)) return b;
	else if (isLiteral(b)) return a;
	else if (Array.isArray(b)) {
		return Array.isArray(a) ? mergeArr(a, b, opt) : cloneIfNecessary(b, opt);
	} else {
		return mergeObj(a, b, opt);
	}
}
async function DOCStart() {
	await loadAssets();
	createDocs();
}
async function documentFile(url) {
	let res = await fetchFileAsText(url);
	let regex = new RegExp('\nasync function|\nfunction|\nvar|\nconst|\nclass', 'g');
	let fcode = res.split(regex);
	let code = {};
	for (const w of fcode) {
		let trimmed = w.trim();
		let name = firstWord(trimmed);
		if (!isEmpty(name)) code[name] = trimmed;
	}
	let lines = res.split('\n');
	let i = 0;
	let iFunc = 0;
	let akku = {};
	let lastKey;
	let topComment = '';
	while (i < lines.length) {
		let result = skipToLine(lines, i, ['function', '/' + '/#r' + 'egion doc ']);
		if (nundef(result.option)) {
			break;
		} else if (result.option == 'function') {
			let line = lines[result.index];
			let lineTrimmed = line.trim();
			if (startsWith(lineTrimmed, 'function') || startsWith(lineTrimmed, 'async')) {
				let line1 = stringAfter(line, 'function ');
				if (line1.includes(')')) line1 = stringBefore(line1, ')').trim() + ')';
				let entry = akku[line1] = { name: firstWord(line1), index: iFunc, comments: '', path: url };
				if (isdef(code[entry.name])) entry.code = code[entry.name];
				iFunc += 1;
				lastKey = line1;
			}
		} else {
			let iStart = result.index + 1;
			let resend = skipToLine(lines, iStart, ['//#endregion']);
			let iEnd = resend.index;
			let block = copyLinesFromTo(lines, iStart, iEnd, '/*', '*/');
			if (lastKey) akku[lastKey].comments = block;
			else topComment = block;
			lastKey = null;
		}
		i = result.index + 1;
	}
	return { funcDict: akku, topComment: topComment };
}
async function documentVault(pathlist) {
	let res = {};
	for (const p of pathlist) {
		let fileInfo = await documentFile(p);
		res[p] = { filename: stringAfterLast(p, '/'), funcDict: fileInfo.funcDict, topComment: fileInfo.topComment };
	}
	return res;
}
function doit(secs, f, interval) {
	if (get_now() - DA.start < secs * 1000) setTimeout(() => { f(); doit(secs, f, interval); }, interval);
	else console.log('DONE!!!');
}
function dom(o, { loc, pool, params }) {
	console.log(o, loc, pool, params);
	let res = mCreate(params.tag ? params.tag : 'div');
	let sep = params.separator ? params.separator : ',';
	if (params.optin) res.innerHTML = params.optin.map(x => o.o[x]).join(sep);
	console.log('content:', res.innerHTML);
	return res;
}
function domId(id) { return document.getElementById(id) }
async function doNext(series, index, mexIndex) {
	recVerify(series, index + 1, maxIndex);
}
function doPerlenPoolChanges() {
	let s = G.perlenOptions;
	console.log('options:', s);
	Socket.emit('perlenOptions', s);
}
function dots(ms, n, { UL = false, UR = true, sz = 10, pos, dir, colors } = {}) {
	let dim = ms.bounds;
	let x, y, dx, dy;
	if (UR) {
		if (nundef(sz)) sz = dim.h / (2 * n);
		x = dim.w / 2 + -2 * sz;
		y = -dim.h / 2 + 2 * sz;
		dx = 0;
		dy = 2 * sz;
	} else if (UL) {
		return;
	}
	for (let i = 0; i < n; i++) {
		let color = isdef(colors) ? colors[i] : ms.fg;
		ms.circle({ sz: sz, x: x, y: y, fill: color });
		x += dx;
		y += dy;
	}
}
function download(jsonObject, fname) {
	json_str = JSON.stringify(jsonObject);
	saveFile(fname + '.json', 'data:application/json', new Blob([json_str], { type: '' }));
}
function download_all_functions() { downloadAsText(CODE.text, 'hallo', 'js'); }
function downloadAsText(s, filename, ext = 'txt') {
	saveFileAtClient(
		filename + "." + ext,
		"data:application/text",
		new Blob([s], { type: "" }));
}
function downloadAsYaml(o, filename) {
	let y = jsyaml.dump(o);
	downloadAsText(y, filename, 'yaml');
}
function downloadCodebase(superdi) {
	let text = '';
	for (const type of ['var', 'const', 'cla', 'func']) {
		let keys = get_keys(superdi[type]);
		if (type != 'const') sortCaseInsensitive(keys);
		for (const k of keys) {
			let code = superdi[type][k].code;
			if (!isEmptyOrWhiteSpace(code)) {
				text += code;
				if (code.trim() == '}') text += '\r\n';
			}
		}
	}
	downloadAsText(text, 'hallo', 'js');
	downloadAsYaml(superdi, 'hallo');
}
function downloadFile(jsonObject, filenameNoExt) {
	json_str = JSON.stringify(jsonObject);
	saveFileAtClient(
		filenameNoExt + ".json",
		"data:application/json",
		new Blob([json_str], { type: "" }));
}
function downloadHtmlFile(html, filenameNoExt) {
	saveFileAtClient(
		filenameNoExt + ".html",
		"data:application/html",
		new Blob([html], { type: "" }));
}
function downloadJson(o, filename) {
	if (filename.indexOf('.') < 0) filename = filename.json;
	let txt = (typeof o == 'object') ? encodeURIComponent(JSON.stringify(o)) : o;
	let dl = document.getElementById('downloadAnchorElement');
	if (nundef(dl)) dl = mCreateFrom(`<a id="downloadAnchorElem" style="display:none"></a>`);
	var dataStr = "data:text/json;charset=utf-8," + txt;
	dl.setAttribute("href", dataStr);
	dl.setAttribute("download", "_aaa\\scene.json");
	dl.click();
}
function downloadKeySet() {
	let keys = Pictures.filter(x => x.isSelected).map(x => x.info.key);
	downloadAsYaml(keys, 'keyset');
}
function downloadTextFile(s, filenameNoExt, ext = 'txt') {
	saveFileAtClient(
		filenameNoExt + "." + ext,
		"data:application/text",
		new Blob([s], { type: "" }));
}
function dPP(o, plist, R) {
	if (isEmpty(plist)) return o;
	if (isList(o) && isNumber(plist[0])) {
		let i = Number(plist[0]);
		return dPP(o[i], plist.slice(1), R);
	}
	if (!isDict(o)) {
		let o1 = R.getO(o);
		if (isdef(o1)) return dPP(o1, plist, R);
		console.log('dPP ERROR!!! o', o, 'plist', plist, '\no1', o1);
		return null;
	}
	let k1 = plist[0];
	let o1 = o[k1];
	if (nundef(o1)) return null;
	let plist1 = plist.slice(1);
	if (o1._set) {
		o1 = o1._set;
		if (plist1.length > 0 && isNumber(plist1[0])) {
			let i = Number(plist1[0]);
			return dPP(o1[i], plist1.slice(1), R);
		} else {
			return o1.map(x => dPP(x, plist1, R));
		}
	}
	if (o1._player) { o1 = R.getO(o1._player); }
	else if (o1._obj) { o1 = R.getO(o1._obj); }
	return dPP(o1, plist1, R);
}
function dPP1(o, plist, R) {
	if (isEmpty(plist)) {
		let res = isdef(o._player) ? [o._player] : isdef(o._obj) ? [o._obj] : o;
		return res;
	}
	if (isList(o) && isNumber(plist[0])) {
		let i = Number(plist[0]);
		return dPP1(o[i], plist.slice(1), R);
	}
	if (!isDict(o)) {
		let o1 = R.getO(o);
		if (isdef(o1)) return dPP1(o1, plist, R);
		console.log('dPP1 ERROR!!! o', o, 'plist', plist, '\no1', o1);
		return null;
	}
	let k1 = plist[0];
	let o1 = isdef(o._player) ? R.getO(o._player)[k1]
		: isdef(o._obj) ? R.getO(o._obj)[k1]
			: o[k1];
	if (nundef(o1)) return null;
	let plist1 = plist.slice(1);
	if (o1._set) {
		o1 = o1._set;
		if (plist1.length > 0 && !isNumber(plist1[0])) {
			return o1.map(x => dPP1(x, plist1, R));
		}
	}
	return dPP1(o1, plist1, R);
}
function drag(ev) {
	let elem = ev.target;
	dragStartOffset = getRelCoords(ev, $(elem));
	draggedElement = elem;
}
function dragKey(ev) {
	ev.dataTransfer.setData("text", ev.target.id);
	dragStartOffset = getRelCoords(ev, $(this));
}
function dragover_fritz(ev) {
	ev.preventDefault();
	ev.dataTransfer.dropEffect = "move";
	let target_id = evToClosestId(ev);
	let d = mBy(target_id);
	mStyle(d, { bg: 'red' });
	if (target_id == 'dOpenTable') {
	} else if (isdef(Items[target_id])) {
		let targetcard = Items[target_id];
		let targetgroup = Items[targetcard.groupid];
	} else {
	}
}
function dragStartPreventionOnSidebarOpen() {
	if (isdef(mBy('drop-region'))) {
		alert('please close sidebar (by DOUBLECLICK on it) before proceeding!');
		return false;
	}
	return true;
}
function dragX(ev) {
	let elem = ev.target;
	dragStartOffset = getRelCoordsX(ev, elem);
	draggedElement = elem;
}
function dragX2(ev) {
	let elem = ev.target;
	dragStartOffset = getRelCoordsX(ev, elem);
	draggedElement = elem;
}
function draw() {
	background(51);
	for (let i = 0; i < tree.length; i++) {
		tree[i].show();
		if (jittering) tree[i].jitter();
	}
	for (let i = 0; i < leaves.length; i++) {
		let l = leaves[i].current;
		noStroke();
		fill(0, 255, 100, 100);
		ellipse(l.x, l.y, 8, 8);
		if (jittering) leaves[i].current.y += random(0, 2);
	}
}
function draw_canvas(item) {
	let r = getRect(dTable);
	let c = mCanvas(d, { w: r.w, h: r.h, rounding: 0, bg: 'white' }); let [cv, cx] = [c.cv, c.cx];
	for (const item of items) {
		let d1 = item.div = cRect(item.x, item.y, item.w, item.h, { bg: item.bg }, cx);
	}
}
function draw_car(canvas, item) {
	let cx = canvas.cx;
	cRect(0 - item.w / 2, 0 - item.h / 2, item.w, item.h, { bg: item.color }, cx);
	cRect(item.w - item.w / 2, 0 - item.h / 2, 10, item.h, { bg: 'yellow' }, cx);
}
function draw_dom(item) {
	if (item.init) { item.init = false; iAdd(item, { div: mDiv(valf(dParent, item.container, dTable)) }); }
	if (item.refresh) { item.refresh = false; mStyle(iDiv(item.id), item.styles); }
}
function draw_from_deck_to(deck, arr) { top_elem_from_to(deck, arr); }
function draw_from_deck_to_board(deck, arr) { top_elem_from_to_top(deck, arr); }
function draw_gaussian(canvas, mean, stdev, color, thick, legendcolor, legend) {
	canvas.draw_axes();
	canvas.scale = 40;
	let f = gaussian_amp(canvas, 1)
	canvas.plot(f, color, thick);
	draw_ticks_gaussian(canvas, f, mean, stdev, legendcolor);
	draw_text(canvas, legend, { fg: legendcolor, pos: 'tr', hmargin: 25, vmargin: 12 });
}
function draw_label(canvas, item) {
	let cx = canvas.cx;
	cx.textAlign = 'center';
	cx.font = `${valf(item.fz, 16)}px Arial`;
	cx.fillStyle = item.color;
	cx.fillText(`  ${item.label}`, 0, 0);
}
function draw_on_canvas(cx, item) {
	if (isdef(item.draw)) { item.draw(cx, item); }
	else {
		cx.save();
		let st = item.styles;
		let [x, y, w, h, a, color] = [valf(st.x, 0), valf(st.y, 0), valf(st.w, 30), valf(st.h, 30), valf(st.a, 0), valf(st.bg, RED)];
		cx.translate(x, y);
		cx.rotate(toRadian(a));
		cEllipse(0, 0, w, h, { bg: colorFrom(color) }, 0, cx);
		cx.restore();
	}
}
function draw_on_div(dParent, item) {
	if (isdef(item.draw)) { item.draw(dParent, item); }
	else {
		let d = mDiv(dParent, item.styles);
		iAdd(item, { div: d });
	}
}
function draw_perlin_x(item) {
	let [cv, cx] = [item.live.cv, item.live.cx];
	cClear(cv, cx);
	let r = rPerlin(item.x);
	item.r = map_range(r, 0, 1, -item.w / 2, item.w / 2);
	cEllipse(item.r, 0, 25, 25, { bg: 'white' }, 0, cx);
	item.x += .02;
}
function draw_perlin_xy(item) {
	let [cv, cx] = [item.live.cv, item.live.cx];
	cClear(cv, cx);
	item.randx = valf(item.randx, 0) + .01;
	item.randy = valf(item.randy, 10000) + .02;
	item.x = map_range(rPerlin(item.randx), 0, 1, -item.w / 2, item.w / 2);
	item.y = map_range(rPerlin(item.randy), 0, 1, -item.h / 2, item.h / 2);
	cEllipse(item.x, item.y, 25, 25, { bg: 'white' }, 0, cx);
}
function draw_point(canvas, item) {
	let cx = canvas.cx;
	cx.font = `${valf(item.fz, 16)}px Arial`;
	cx.fillStyle = item.color;
	if (isdef(item.label)) cx.fillText(`  ${item.label}`, 0, 0);
	cEllipse(0, 0, item.w, item.h, { bg: item.color }, 0, cx);
}
function draw_random_walk(item) {
	let [cv, cx] = [item.live.cv, item.live.cx];
	cClear(cv, cx);
	cEllipse(rInc(item, 'x', -2, 2), rInc(item, 'y', -2, 2), 30, 20, { bg: 'blue', fg: 'green' }, 0, cx);
}
function draw_rect(canvas, item) {
	let cx = canvas.cx;
	cRect(0 - item.w / 2, 0 - item.h / 2, item.w, item.h, { bg: item.color }, cx);
}
function draw_set_card(dParent, info, card_styles) {
	let card = cLandscape(dParent, card_styles);
	card.info = info;
	let d = iDiv(card);
	mCenterCenterFlex(d);
	let sz = card.sz / 2.8;
	let bg, shape = info.shape, text;
	switch (info.shading) {
		case 'solid': bg = info.color; break;
		case 'gradient': bg = `linear-gradient(${info.color}, silver)`; break;
		case 'empty': bg = `repeating-linear-gradient(
      45deg,
      ${info.color},
      ${info.color} 10px,
      silver 10px,
      silver 20px
    )`; break;
	}
	mStyle(d, { bg: info.background });
	switch (info.text) {
		case 'none': text = null; break;
		case 'letter': text = randomLetter(); break;
		case 'number': text = '' + randomDigit(); break;
	}
	let styles = { w: sz, h: sz, margin: sz / 10 };
	for (let i = 0; i < info.num; i++) {
		let d1 = drawShape(shape, d, styles);
		if (info.shading == 'gradient') { d1.style.backgroundColor = info.color; mClass(d1, 'polka-dot'); } else mStyle(d1, { bg: bg });
		if (shape == 'circle') console.log('circle', d1);
		if (isdef(text)) { mCenterCenterFlex(d1); mText(text, d1, { fz: sz / 1.75, fg: 'black', family: 'impact' }); }
	}
	return card;
}
function draw_set_card_test(dParent) {
	let card = cLandscape(dParent, { w: 120 });
	let d = iDiv(card, { h: '100%' });
	mCenterCenterFlex(d);
	let sz = card.sz / 4;
	let styles = { w: sz, h: sz, bg: `linear-gradient(${RED},black`, margin: sz / 10, border: `solid 3px ${GREEN}` };
	let d1 = drawShape('circle', d, styles); mCenterCenterFlex(d1); mText('A', d1, { fz: sz / 4, fg: 'white' });
	drawShape('circle', d, styles);
	drawShape('circle', d, styles);
}
function draw_text(canvas, text, styles = {}) {
	let cx = canvas.cx;
	addKeys({ x: 0, y: 0, family: 'opensans', fz: 36 }, styles);
	styles.bg = styles.fg;
	styles.font = `${styles.fz}px ${styles.family}`;
	cStyle(styles, cx);
	let [x, y, offx, offy] = [styles.x, styles.y, valf(styles.hmargin, styles.margin, 4), valf(styles.vmargin, styles.margin, 4)];
	if (isdef(styles.pos)) {
		let pos = styles.pos;
		if (pos[0] == 't') {
			y += canvas.miny + offy;
			cx.textBaseline = 'hanging';
		} else if (pos[0] == 'c') {
			y += offy;
			cx.textBaseline = 'middle';
		} else {
			y += canvas.maxy - offy;
			cx.textBaseline = 'top';
		}
		if (pos[1] == 'l') {
			x += canvas.minx + offx;
			cx.textAlign = 'start';
		} else if (pos[1] == 'c') {
			x += offx;
			cx.textAlign = 'center';
		} else {
			x += canvas.maxx - offx;
			cx.textAlign = 'end';
		}
	} else {
		cx.textAlign = 'center';
		cx.textBaseline = 'middle';
	}
	if (isdef(styles.al)) {
		let a = ' ' + styles.al;
		console.log('a', a);
		cx.textAlign = a.includes(' s') ? 'start' : a.includes(' e') ? 'end' : a.includes(' r') ? 'right' : a.includes(' l') ? 'left' : 'center';
		cx.textBaseline = a.includes(' b') ? 'bottom' : a.includes(' t') ? 'top' : a.includes(' h') ? 'hanging' : a.includes(' a') ? 'alpjabetic' : a.includes(' i') ? 'ideographic' : 'middle';
	}
	if (isdef(styles.offy)) {
		if (isNumber(styles.offy)) y += styles.offy;
		else {
			let ws = toWords(styles.offy);
			let di = { below: 'hanging', above: 'bottom', ontop: 'bottom', onbottom: 'hanging', unterhalb: 'hanging', oberhalb: 'bottom', unten: 'hanging', oben: 'bottom' };
			for (const w of ws) {
				if (isNumber(w)) y += Number(w);
				else if (isdef(di[w])) cx.textBaseline = di[w];
				else if (w.length == 1) {
					cx.textBaseline = w == 'b' ? 'bottom' : w == 't' ? 'top' : w == 'a' ? 'alphabetic' : w == 'i' ? 'ideographic' : w == 'm' ? 'middle' : 'hanging';
				} else cx.textBaseline = w;
			}
		}
	}
	if (isdef(styles.offx)) {
		if (isNumber(styles.offx)) y += styles.offx;
		else {
			let ws = toWords(styles.offx);
			for (const w of ws) {
				if (isNumber(w)) x += Number(w);
				else if (w.length == 1) {
					cx.textAlign = w == 's' ? 'start' : w == 'e' ? 'end' : w == 'l' ? 'left' : w == 'r' ? 'right' : 'center';
				} else cx.textAlign = w;
			}
		}
	}
	console.log('x', x, 'y', y, 'elign', cx.textAlign, 'baseline', cx.textBaseline)
	cx.fillText(text, x, y);
}
function draw_ticks(canvas, f) {
	let sc = canvas.scale;
	let x_end = search_end_point(f, 0, canvas.maxx, 0.02);
	let y_end = f(x_end);
	canvas.pp(x_end * sc, -y_end * sc, `${Math.round(x_end * sc)}`, 'red', 'tc');
	console.log('endpoint x', x_end, 'y', y_end, canvas.minx, canvas.maxx);
	console.log('stdev', x_end / 3);
	let label = 100, dx = x_end / 3, x = 0;
	for (let i = 0; i <= 3; i++) {
		let x1 = Math.round(convert_to_range(x, -x_end, x_end, 50, 150));
		let x2 = Math.round(convert_to_range(-x, -x_end, x_end, 50, 150));
		canvas.pp(x * sc, 0, `${label + i * 15}`);
		if (x) canvas.pp(-x * sc, 0, `${label - i * 15}`);
		x += dx;
	}
}
function draw_ticks_gaussian(canvas, f, mean, dev, color) {
	let sc = canvas.scale;
	let x_end = search_end_point(f, 0, canvas.maxx, .005, .02);
	let dx = x_end / 3, x = 0;
	for (let i = 0; i <= 3; i++) {
		canvas.pp(x * sc, 0, `${mean + i * dev}`, { bg: color });
		if (x) canvas.pp(-x * sc, 0, `${mean - i * dev}`, { bg: color });
		x += dx;
	}
}
function drawBee(c) { return drawSym('bee', c); }
function drawBox() {
	c.lineWidth = 1;
	c.strokeRect(0.5, 0.5, canvas.width - 1, canvas.height - 1);
}
function drawcard(key, dParent, sz) {
	let d1;
	let card = ari_get_card(key, sz);
	mAppend(dParent, iDiv(card));
	let d = iDiv(card); mStyle(d, { position: 'relative', margin: 20 });
	let h = sz * .6;
	let w = h / 6.5;
	let left = sz >= 300 ? 7 : sz >= 200 ? 5 : sz >= 100 ? 3 : 3;
	let bottom = sz >= 300 ? 0 : sz >= 200 ? -1 : sz >= 100 ? -2 : -3;
	let matop = (sz - h) / 2;
	let html = `<img height=${sz / 3} src="./base/assets/images/icons/deco0.svg" style="transform:scaleX(-1);">`;
	d1 = mDiv(d, { position: 'absolute', bottom: bottom, left: left, opacity: .5 }, null, html);
	let dt = mDiv(d, { family: 'Algerian' }, null, 'luxury');
	mPlace(dt, 'tc', 0, '50%')
}
function drawCenteredBee(c) { return drawCenteredSym('bee', c); }
function drawCenteredPlainCircle(c) {
	let item = iContainer(dMain, { fz: 8, fg: 'black', bg: 'grey', padding: 1 });
	let d = iDiv(item);
	let rect = getRect(d);
	console.log('rect', rect)
	mPos(d, c.x - rect.w / 2, c.y - rect.h / 2);
	return item;
}
function drawCenteredSym(sym, c) {
	let item = mPic(sym, dMain, { w: 80, h: 80, box: true, fz: 25, rounding: '50%', vpadding: 14, hpadding: 4 });
	let d = iDiv(item);
	let rect = getRect(d);
	console.log('rect', rect)
	mPos(d, c.x - rect.w / 2, c.y - rect.h / 2);
	return item;
}
function drawCircle() {
	c.beginPath();
	c.arc(circle.x, circle.y, radius - lineWidth / 2, 0, 2 * Math.PI, false);
	c.fillStyle = '00F0FF';
	c.fill();
	c.lineWidth = 4;
	c.strokeStyle = 'black';
	c.stroke();
}
function drawColoredCircle(canvas, sz, color, stroke = 'black') {
	var context = canvas.getContext('2d');
	var centerX = canvas.width / 2;
	var centerY = canvas.height / 2;
	var radius = sz / 2;
	context.beginPath();
	context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
	context.fillStyle = color;
	context.fill();
}
function drawElems(idlist) {
	for (const id of idlist) {
		EID[id].ms.draw();
	}
}
function drawFlatHex(dParent, styles, classes, sizing) {
	if (nundef(styles)) styles = { w: 100, h: 100, bg: 'blue' };
	if (nundef(classes)) classes = ['frameOnHover'];
	if (nundef(sizing)) sizing = { hgrow: true, wgrow: true };
	let d = mDiv(dParent, styles, null, null, classes, sizing);
	mStyle(d, { 'clip-path': 'polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)' });
	return d;
}
function drawHex(dParent, styles, classes, sizing) {
	if (nundef(styles)) styles = { w: 100, h: 100, bg: 'blue' };
	if (nundef(classes)) classes = ['frameOnHover'];
	if (nundef(sizing)) sizing = { hgrow: true, wgrow: true };
	let d = mDiv(dParent, styles, null, null, classes, sizing);
	mStyle(d, { 'clip-path': 'polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%)' });
	return d;
}
function drawLineToMouse() {
	c.lineWidth = 2;
	c.moveTo(circle.x, circle.y);
	c.lineTo(mouse.x, mouse.y);
	c.stroke();
}
function drawloop() { G.items.map(x => { if (isdef(x.draw)) x.draw(x); }); }
function DrawMaterial() {
	if (brd_pceNum[PIECES.wP] != 0 || brd_pceNum[PIECES.bP] != 0) return BOOL.FALSE;
	if (brd_pceNum[PIECES.wQ] != 0 || brd_pceNum[PIECES.bQ] != 0 || brd_pceNum[PIECES.wR] != 0 || brd_pceNum[PIECES.bR] != 0) return BOOL.FALSE;
	if (brd_pceNum[PIECES.wB] > 1 || brd_pceNum[PIECES.bB] > 1) { return BOOL.FALSE; }
	if (brd_pceNum[PIECES.wN] > 1 || brd_pceNum[PIECES.bN] > 1) { return BOOL.FALSE; }
	if (brd_pceNum[PIECES.wN] != 0 && brd_pceNum[PIECES.wB] != 0) { return BOOL.FALSE; }
	if (brd_pceNum[PIECES.bN] != 0 && brd_pceNum[PIECES.bB] != 0) { return BOOL.FALSE; }
	return BOOL.TRUE;
}
function drawPlainCircle(c) {
	let item = mPic('heart', dMain, { fz: 8, bg: 'red', rounding: '50%', padding: 1 });
	mPos(iDiv(item), c.x, c.y);
	return item;
}
function drawShape(key, dParent, styles, classes, sizing) {
	if (nundef(styles)) styles = { w: 96, h: 96, bg: 'random' };
	if (nundef(sizing)) sizing = { hgrow: true, wgrow: true };
	let d = mDiv(dParent, styles, null, null, classes, sizing);
	if (key == 'circle' || key == 'ellipse') mStyle(d, { rounding: '50%' });
	else mStyle(d, { 'clip-path': PolyClips[key] });
	return d;
}
function drawSym(sym, c) {
	let item = mPic(sym, dMain, { fz: 25, bg: 'skyblue', rounding: '50%', padding: 4 });
	mPos(iDiv(item), c.x, c.y);
	return item;
}
function drawTest(board, num) {
	clearElement(board.elem);
	let d = 10;
	let coll = [];
	for (let row = 0; row < board.h; row += d) {
		for (let col = 0; col < board.w; col += d) {
			let y = row - board.h / 2 + d / 2;
			let x = col - board.w / 2 + d / 2;
			let mobj = makeDrawingElement('el1', 'board');
			mobj.x = x; mobj.y = y;
			coll.push(mobj);
		}
	}
	timit.showTime('nach compute: number of elements=' + coll.length);
	const colors = ['red', 'green', 'yellow', 'blue', 'orange', 'violet', 'skyblue', 'sienna'];
	let keys = Object.keys(iconChars);
	let numPictos = Math.min(coll.length, keys.length);
	for (let i = 0; i < numPictos; i++) {
		let mobj = coll[i];
		let c = chooseRandom(colors);
		let key = keys[i];
		mobj._picto(key, mobj.x, mobj.y, d, d, c);
	}
	timit.showTime('nach shape');
	for (const mobj of coll) {
		mobj.attach();
	}
	timit.showTime('nach attach');
	if (num > 0) setTimeout(() => drawTest(board, num - 1), 0);
	else return coll;
}
function drawText(text, c) {
	let item = mText(text, dMain, { fz: 16, bg: 'skyblue', rounding: '50%', padding: 4 });
	mPos(iDiv(item), c.x, c.y);
	return item;
}
function drawTriangle(dParent, styles, classes, sizing) {
	if (nundef(styles)) styles = { w: 100, h: 100, bg: 'blue' };
	if (nundef(classes)) classes = ['frameOnHover'];
	if (nundef(sizing)) sizing = { hgrow: true, wgrow: true };
	let d = mDiv(dParent, styles, null, null, classes, sizing);
	mStyle(d, { 'clip-path': 'polygon(50% 0%, 100% 100%, 0% 100%)' });
	return d;
}
function drop(ev) {
	ev.preventDefault();
	let targetElem = findDragTarget(ev);
	targetElem.appendChild(draggedElement);
	setDropPosition(ev, draggedElement, targetElem, isdef(draggedElement.dropPosition) ? draggedElement.dropPosition : dropPosition);
}
function drop_card_fritz(ev) {
	ev.preventDefault();
	evNoBubble(ev);
	if (isdef(mBy('ddhint'))) mRemove(mBy('ddhint'));
	var data = ev.dataTransfer.getData("text");
	let card = Items[data];
	let target_id = evToClosestId(ev);
	if (card.source == 'discard') {
		let [discard, loose] = arrSplitAtIndex(UI.deck_discard.items, card.index);
		c = loose[0];
		loose = loose.slice(1);
		assertion(c == card, 'NEEEEEEEE');
		for (const c of loose) {
			console.log('card', c.key, 'source', c.source)
			if (c.source == 'discard') frnew(c, { target: 'dummy' });
		}
	}
	if (target_id == 'dOpenTable') {
		frnew(card, ev);
	} else if (isdef(Items[target_id])) {
		let targetcard = Items[target_id];
		let targetgroup = Items[targetcard.groupid];
		fradd(card, targetgroup, targetcard);
	} else {
	}
}
function drop_old(ev) {
	if (ev.cancel) return;
	ev.preventDefault();
	var data = ev.dataTransfer.getData("text");
	let dElem = document.getElementById(data);
	let dTarget1 = ev.target;
	let targetElem = dTarget1;
	while (!targetElem.ondragover) targetElem = targetElem.parentNode;
	targetElem.appendChild(dElem);
	console.log('dropping', dElem.id, 'onto', targetElem.id);
	var elm = $(targetElem);
	x = ev.pageX - elm.offset().left - dragStartOffset.x;
	y = ev.pageY - elm.offset().top - dragStartOffset.y;
	posXY(dElem, targetElem, x, y);
	ev.cancel = true;
}
function dropAndEval(ev) {
	cancelBubble = true;
	let els = allElementsFromPoint(ev.clientX, ev.clientY);
	if (nundef(DragElem)) return;
	let targetItem = DropZoneItem = firstCond(DropZoneItems, x => els.includes(iDiv(x)));
	if (nundef(targetItem)) { cancelDD(); return; }
	let droppedItem = DragSourceItem;
	addLabel1(targetItem, droppedItem.label);
	cancelDD();
}
function dropDD(ev) {
	ev.stopPropagation();
	ev.preventDefault();
	var data = ev.dataTransfer.getData("text");
	let dElem = document.getElementById(data);
	let targetElem = ev.target;
	while (!targetElem.ondragover) targetElem = targetElem.parentNode;
	if (isdef(dElem.dd) && dElem.dd != targetElem.dd) {
		console.log('wrong association dd', dElem.dd, targetElem.dd);
		return;
	}
	targetElem.appendChild(dElem);
	console.log('dropping', dElem.id, 'onto', targetElem.id);
	var elm = $(targetElem);
	x = ev.pageX - elm.offset().left - dragStartOffset.x;
	y = ev.pageY - elm.offset().top - dragStartOffset.y;
	posXY(dElem, targetElem, x, y);
	ev.cancel = true;
}
function dropKey(ev) {
	ev.stopPropagation();
	ev.preventDefault();
	var data = ev.dataTransfer.getData("text");
	let dElem = document.getElementById(data);
	let targetElem = ev.target;
	while (!targetElem.ondragover) targetElem = targetElem.parentNode;
	if (isdef(dElem.dd) && dElem.dd != targetElem.dd) {
		console.log('wrong association dd', dElem.dd, targetElem.dd);
		return;
	}
	targetElem.appendChild(dElem);
	console.log('dropping', dElem.id, 'onto', targetElem.id);
	var elm = $(targetElem);
	x = ev.pageX - elm.offset().left - dragStartOffset.x;
	y = ev.pageY - elm.offset().top - dragStartOffset.y;
	posXY(dElem, targetElem, x, y);
	ev.cancel = true;
}
function dropLast(s) { return s.substring(0, s.length - 1); }
function dropX(ev) {
	ev.preventDefault();
	let targetElem = findDragTarget(ev);
	if (nundef(draggedElement.dropPosition) || typeof (draggedElement.dropPosition) != 'function') targetElem.appendChild(draggedElement);
	setDropPosition(ev, draggedElement, targetElem, isdef(draggedElement.dropPosition) ? draggedElement.dropPosition : dropPosition);
}
function dropX2(ev) {
	ev.preventDefault();
	let targetElem = findDragTarget(ev);
	if (nundef(draggedElement.dropPosition) || typeof (draggedElement.dropPosition) != 'function') targetElem.appendChild(draggedElement);
	setDropPosition(ev, draggedElement, targetElem, isdef(draggedElement.dropPosition) ? draggedElement.dropPosition : dropPosition);
}
function dSquare(pos1, pos2) {
	let dx = pos1.x - pos2.x;
	dx *= dx;
	let dy = pos1.y - pos2.y;
	dy *= dy;
	return dx + dy;
}
function dummy_reaction(ev) { console.log('clicked', ev.target) }
function dump(...arr) {
	for (const a of arr) {
	}
}
function dynamicArea(areaName, oSpec, oid, o) {
	func = correctFuncName(oSpec.type);
	oSpec.ui = window[func](areaName, oSpec, oid, o);
}
//#endregion

//#region E

function each_hand_of_one(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		pl.hand = [rChoose(['4Hn', '5Hn', 'QHn', 'KHn', 'AHn'])];
		pl.goals['33'] = true; pl.roundgoal = '33';
		pl.journeys.push(['4Hn', '4Sn', '*Hn'], ['5Hn', '5Sn', '*Hn'], ['QHn', 'QSn', '*Hn']);
	}
	fen.players[uplayer].hand = ['4Cn'];
}
function editableUsernameUi(dParent) {
	let inp = mEditableInput(dParent, 'user: ', Username);
	inp.id = 'spUser';
	inp.addEventListener('focusout', () => { changeUserTo(inp.innerHTML.toLowerCase()); });
	return inp;
}
async function editLayoutTests() {
	DB = await route_path_yaml_dict('./PERLENDATA/data.yaml');
	lastState = await route_path_yaml_dict('./PERLENDATA/lastState.yaml');
	G = { settings: lastState.settings, dParent: dTable, clientBoard: {} };
	applyStandard(G.dParent, G.settings);
	onClickEditLayout();
}
function einhaengen(oid, o, R) {
	let topUids;
	let success = false;
	let successKeys = [];
	for (const key of R.getR(oid)) {
		let specNode = R.getSpec(key);
		if (o.loc && nundef(R.Locations[key]) && nundef(specNode._ref)) {
			if (nundef(R.Locations[key])) {
				topUids = addOidByLocProperty(oid, key, R);
			} else {
				console.log('impossible to add!!! key bound to location', R.locations[key]);
			}
		} else if (isdef(R.Locations[key])) {
			topUids = addOidByParentKeyLocation(oid, key, R);
		} else {
			topUids = [];
		}
		if (isEmpty(topUids)) { continue; }
		else { successKeys.push(key); success = true; }
		for (const top of topUids) {
			let uiParent = R.uiNodes[top.uidParent];
			let rParent = R.rNodes[top.uidParent];
			if (isdef(uiParent)) {
				uiParent.adirty = true;
				uiParent.children = rParent.children.map(x => x);
			}
			recUi(R.rNodes[top.uid], R, top.uidParent, oid, key);
		}
	}
	return success ? successKeys : false;
}
function elem_from_to(el, arr1, arr2) { removeInPlace(arr1, el); arr2.push(el); }
function elem_from_to_top(el, arr1, arr2) { removeInPlace(arr1, el); arr2.unshift(el); }
function ellipsis(text, font, width, padding) {
	let textLength = getTextWidth(text, font);
	let ellipsisLength = 0;
	ellipsisLength = getTextWidth('...', font);
	let maxw = width - 2 * padding;
	while (textLength + ellipsisLength > maxw && text.length > 0) {
		text = text.slice(0, -1).trim();
		textLength = getTextWidth(text, font);
	}
	return ellipsisLength > 0 ? text + '...' : text;
}
function empty(arr) {
	let result = arr === undefined || !arr || (isString(arr) && (arr == 'undefined' || arr == '')) || (Array.isArray(arr) && arr.length == 0) || emptyDict(arr);
	testHelpers(typeof arr, result ? 'EMPTY' : arr);
	return result;
}
function empty_func(x) { nundef(x) || x == ' '; }
function emptyCard() {
	return cardFace({ key: 'empty' });
}
function emptyDict(obj) {
	let test = Object.entries(obj).length === 0 && obj.constructor === Object;
	return test;
}
function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}
function enableButton(id) { enableStyle(id) }
function enableClick(el, handler) {
	let mobj = 'mobj' in el ? el.mobj : el;
	mobj.clickHandler = handler;
	mobj.enable();
}
function enableCreateButton() { enableButton('bCreateGame'); }
function enableDD(sources, targets, dropHandler, isCopy, clearTarget, dragStartHandler) {
	DDInfo = { sources: sources, targets: targets, dropHandler: dropHandler, dragStartHandler };
	let sourceDivs = sources.map(x => iDiv(x));
	for (let i = 0; i < sources.length; i++) {
		let source = sources[i];
		let d = sourceDivs[i];
		d.onmousedown = (ev) => ddStart(ev, source, isCopy, clearTarget);
	}
}
function enableDragForDeck(d) {
	d.cards.forEach(function (card, i) {
		card.enableDragging();
	});
}
function enableFlipForDeck(d) {
	d.cards.forEach(function (card, i) {
		card.enableFlipping();
	});
}
function enableHover(el, enterHandler, leaveHandler) {
	let mobj = 'mobj' in el ? el.mobj : el;
	mobj.mouseEnterHandler = enterHandler;
	mobj.mouseLeaveHandler = leaveHandler;
	mobj.enable();
}
function enableJoinButton() { enableButton('bJoinGame'); }
function enableResumeButton() {
	enableButton('bResumeGame');
}
function enableStyle(id) {
	if (isString(id)) id = document.getElementById(id);
	id.style.pointerEvents = null;
	id.style.opacity = 1;
	id.style.cursor = 'pointer';
}
function end_of_round_ferro() {
	let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer];
	calc_ferro_score(uplayer);
	if (Z.options.phase_order == 'anti') {
		for (const plname of plorder) {
			let pl = fen.players[plname];
			if (!pl.roundgoal) pl.goals[get_round_goal()] = true;
		}
	}
	ari_history_list([`${uplayer} wins the round`], 'round');
	fen.round_winner = uplayer;
	[Z.stage, Z.turn] = ['round_end', [Z.host]];
	take_turn_fen();
}
function end_of_round_fritz(plname) {
	let [A, fen, uplayer, plorder] = [Z.A, Z.fen, Z.uplayer, Z.plorder];
	let pl = fen.players[uplayer];
	calc_fritz_score();
	ari_history_list([`${plname} wins the round`], 'round over');
	fen.round_winner = plname;
	plorder = fen.plorder = jsCopy(fen.roundorder);
	if (Z.round >= fen.maxrounds) {
		fen.winners = find_players_with_min_score();
		ari_history_list([`game over: ${fen.winners.join(', ')} win${fen.winners.length == 1 ? 's' : ''}`], 'game over');
		Z.stage = 'game_over';
		console.log('end of game: stage', Z.stage, '\nplorder', fen.plorder, '\nturn', Z.turn);
	} else {
		let starter = fen.starter = get_next_in_list(fen.starter, plorder);
		console.log('starter', starter);
		Z.turn = [starter];
		Z.round += 1;
		fritz_new_table(fen, Z.options);
		fritz_new_player_hands(fen, Z.turn[0], Z.options);
	}
}
function end_of_turn_fritz() {
	let [A, fen, uplayer, plorder] = [Z.A, Z.fen, Z.uplayer, Z.plorder];
	let pl = fen.players[uplayer];
	clear_quick_buttons();
	let ms = fen.players[uplayer].time_left = stop_timer();
	let ploose = {};
	fen.journeys = [];
	fen.loosecards = [];
	for (const plname in fen.players) { fen.players[plname].loosecards = []; }
	for (const group of DA.TJ) {
		let ch = arrChildren(iDiv(group));
		let cards = ch.map(x => Items[x.id]);
		let set = Z.options.overlapping == 'yes' ? is_overlapping_set(cards, Z.options.jokers_per_group, 3, false)
			: ferro_is_set(cards, Z.options.jokers_per_group, 3, false);
		if (!set) {
			for (const card of cards) {
				if (is_joker(card)) {
					fen.loosecards.push(card.key);
					continue;
				}
				let owner = valf(card.owner, uplayer);
				lookupAddToList(ploose, [owner], card.key);
			}
		} else {
			let j = set;
			fen.journeys.push(j);
		}
	}
	for (const plname in ploose) {
		fen.players[plname].loosecards = ploose[plname];
	}
	let discard = UI.deck_discard.items.filter(x => x.source == 'discard');
	fen.deck_discard = discard.map(x => x.key);
	if (!isEmpty(A.selected)) {
		let ui_discarded_card = A.selected.map(x => A.items[x].o)[0];
		removeInPlace(UI.players[uplayer].hand.items, ui_discarded_card);
		ckey = ui_discarded_card.key;
		elem_from_to(ckey, fen.players[uplayer].hand, fen.deck_discard);
		ari_history_list([`${uplayer} discards ${ckey}`], 'discard');
	}
	let uihand = UI.players[uplayer].hand.items;
	let fenhand_vorher = fen.players[uplayer].hand;
	let fenhand = fen.players[uplayer].hand = uihand.filter(x => x.source == 'hand').map(x => x.key);
	if (isEmpty(fenhand) && isEmpty(fen.players[uplayer].loosecards)) {
		end_of_round_fritz(uplayer);
	} else if (ms <= 100) {
		console.log(`time is up for ${uplayer}!!!`);
		ari_history_list([`${uplayer} runs out of time`], 'timeout');
		if (fen.plorder.length <= 1) { end_of_round_fritz(uplayer); }
		else { Z.turn = [get_next_player(Z, uplayer)]; deck_deal_safe_fritz(fen, Z.turn[0]); removeInPlace(fen.plorder, uplayer); }
	} else { Z.turn = [get_next_player(Z, uplayer)]; deck_deal_safe_fritz(fen, Z.turn[0]); }
	take_turn_fen();
}
function endit() { throw new Error("*** THE END ***"); }
function endsWith(s, sSub) { let i = s.indexOf(sSub); return i >= 0 && i == s.length - sSub.length; }
function endTurn() {
	present();
	let el = T.trick[0].div;
	let res = indexOfMax(T.trick, 'rank');
	let winnerOfTrick = T.players[res.i];
	winnerOfTrick.hand.add(T.trick);
	let pos = actualCenter(el);
	let targetPos = actualCenter(Zones[winnerOfTrick.id].div);
	console.log('from', pos, 'to', targetPos);
	el.style.position = 'fixed';
	el.style.left = pos.x + 'px';
	el.style.top = pos.y + 'px';
	setTimeout(() => { el.style.left = targetPos.x + 'px'; el.style.top = targetPos.y + 'px' }, 2000);
	showHands();
	return;
	let losers = [], winners = [];
	for (const pl of T.players) {
		if (pl.hand.count() == 0) { losers.push(pl); } else { winners.push(pl); }
	}
	if (winners.length == 1) {
		console.log('*** game over *** winner', winners[0]); return;
	} else {
		console.log('game goes on');
		showHands();
	}
	setTimeout(startRound, 2000);
}
function engine_go(e) {
	const matrix = {
		a: {
			click: () => add_agent_at(M.map, [e.latlng.lat, e.latlng.lng]),
			route: () => { M.event = 'route', M.state = 'r'; engine_go() }
		},
		r: {
		},
	}
	switch (M.state) {
		case 'a':
			switch (event) {
				case 'click': break;
				case 'route': M.state = 'r'; break;
				case 'clear': break;
			}
			break;
		case 'r':
			break;
		default:
			break;
	}
}
function enQ(f, parr = null, msBefore = null, msAfter = null, callback = null) {
	if (nundef(Q)) restartQ();
	Q.push({ f: f, parr: parr, msBefore: msBefore, msAfter: msAfter, callback: callback });
}
function ensure_actions(fen) { fen.actionsCompleted = []; }
function ensure_assets(obj) {
	if (nundef(DB)) {
		DB = jsyaml.load(obj.db);
		symbolDict = Syms = jsyaml.load(obj.syms);
		SymKeys = Object.keys(Syms);
		ByGroupSubgroup = jsyaml.load(obj.symGSG);
		WordP = jsyaml.load(obj.allWP);
		C52 = jsyaml.load(obj.c52);
		Cinno = jsyaml.load(obj.cinno);
		FenPositionList = csv2list(obj.fens);
		KeySets = getKeySets();
	}
	console.assert(isdef(DB), 'NO DB!!!!!!!!!!!!!!!!!!!!!!!!!!!');
}
function ensure_assets_old(obj) {
	DB = jsyaml.load(obj.db);
	symbolDict = Syms = jsyaml.load(obj.syms);
	SymKeys = Object.keys(Syms);
	ByGroupSubgroup = jsyaml.load(obj.symGSG);
	WordP = jsyaml.load(obj.allWP);
	C52 = jsyaml.load(obj.c52);
	Cinno = jsyaml.load(obj.cinno);
	inno_create_card_assets();
	ari_create_card_assets('rbgyop');
	FenPositionList = csv2list(obj.fens);
	KeySets = getKeySets();
	if (isdef(obj.edict)) { Dictionary = { E: to_words(obj.edict), S: to_words(obj.sdict), F: to_words(obj.fdict), D: to_words(obj.ddict) } };
	console.assert(isdef(DB), 'NO DB!!!!!!!!!!!!!!!!!!!!!!!!!!!');
}
function ensure_buttons_visible_ferro() {
	let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];
	if (fen.players[uplayer].hand.length <= 1) return;
	let dbPlayer = mBy('dbPlayer');
	if (nundef(dbPlayer)) {
		let d = iDiv(UI.players[uplayer]);
		mStyle(d, { position: 'relative' })
		dbPlayer = mDiv(d, { position: 'absolute', bottom: 2, left: 100, height: 25 }, 'dbPlayer');
	}
	let styles = { rounding: 6, bg: 'silver', fg: 'black', border: 0, maleft: 10 };
	if (Z.game == 'ferro') {
		let b = mButton('clear selection', onclick_clear_selection_ferro, dbPlayer, styles, 'enabled', 'bClearSelection');
		if (isEmpty(A.selected)) hide(b);
	}
}
function ensure_buttons_visible_for(plname) {
	if (Z.role == 'spectator' || isdef(mBy('dbPlayer'))) return;
	let fen = Z.fen;
	let pl = fen.players[plname];
	let plui = UI.players[plname];
	if (pl.hand.length <= 1) return;
	let d = iDiv(plui);
	mStyle(d, { position: 'relative' })
	let dbPlayer = mDiv(d, { position: 'absolute', bottom: 2, left: 100, height: 25 }, 'dbPlayer');
	let styles = { rounding: 6, bg: 'silver', fg: 'black', border: 0, maleft: 10 };
	let bByRank = mButton('by rank', onclick_by_rank_ferro, dbPlayer, styles, 'enabled');
	let bBySuit = mButton('by suit', onclick_by_suit_ferro, dbPlayer, styles, 'enabled');
}
function ensure_clientstate() {
	if (nundef(Clientdata.state)) {
		Clientdata.state = {};
		for (const k in DA.bars) Clientdata.state[k] = 0;
	}
}
function ensure_market(fen, n) { fen.stallSelected = []; deck_add(fen.deck, n - fen.market.length, fen.market); }
function ensure_player_id_name_index_type_color(pls) {
	let i = 0;
	pls.map(x => {
		x.id = getUID();
		x.name = (i == 0 ? Username : randomBotName()).toLowerCase();
		x.index = i;
		x.type = (i == 0 ? 'human' : 'ai');
		x.colorName = (i == 0 ? U.settings.userColor : Object.values(PlayerColors)[i]);
		x.color = (i == 0 ? U.settings.userColor : Object.keys(PlayerColors)[i]);
		i++;
	});
}
function ensure_polling() { }
function ensure_score(plname) {
	let sc = 0;
	if (isdef(Z.playerdata)) {
		let pldata = valf(firstCond(Z.playerdata, x => x.name == plname), { name: plname, state: { score: 0 } });
		sc = isdef(pldata.state) ? pldata.state.score : 0;
	} else Z.playerdata = Z.plorder.map(x => [{ name: x, state: { score: 0 } }]);
	lookupSet(Z.fen, ['players', plname, 'score'], sc);
}
function ensure_stall(fen, uplayer, n) { let pl = fen.players[uplayer]; deck_add(fen.deck, n - pl.stall.length, pl.stall); }
function ensure_stallSelected(fen) { if (nundef(fen.stallSelected)) fen.stallSelected = []; }
function ensure_winnerlist(game) { return lookupSet(DB.games, [game, 'winnerlist'], []); }
function ensure_Z() {
	if (nundef(Z)) Z = {};
	copyKeys(Serverdata, Z);
	if (isdef(Serverdata.table)) { copyKeys(Serverdata.table, Z); copyKeys(Serverdata.table.fen, Z); }
}
async function ensureAllAssets() { ensureAllAssets(true, true, true, true); }
function ensureAllGames(callbacks = []) {
	if (allGames == null) {
		sendGetAllGames(d => {
			allGames = d;
			console.log('allGames', allGames);
			if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));
		});
	} else if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));
}
async function ensureAssets() {
	if (nundef(Syms)) {
		Syms = await route_path_yaml_dict(`${Basepath}assets/allSyms.yaml`);
		SymKeys = get_keys(Syms);
		ByGroupSubgroup = await route_path_yaml_dict(`${Basepath}assets/symGSG.yaml`);
		KeySets = getKeySets();
		C52 = await route_path_yaml_dict(`${Basepath}assets/c52.yaml`);
		ari_create_card_assets('rb');
	}
}
function ensureColorDict() {
	if (isdef(ColorDi)) return;
	ColorDi = {};
	let names = getColorNames();
	let hexes = getColorHexes();
	for (let i = 0; i < names.length; i++) {
		ColorDi[names[i].toLowerCase()] = { c: '#' + hexes[i] };
	}
	const newcolors = {
		black: { c: '#000000', D: 'schwarz' },
		blue: { c: '#0000ff', D: 'blau' },
		BLUE: { c: '#4363d8', E: 'blue', D: 'blau' },
		BLUEGREEN: { c: '#004054', E: 'bluegreen', D: 'blaugrün' },
		BROWN: { c: '#96613d', E: 'brown', D: 'braun' },
		deepyellow: { c: '#ffed01', E: 'yellow', D: 'gelb' },
		FIREBRICK: { c: '#800000', E: 'darkred', D: 'rotbraun' },
		gold: { c: 'gold', D: 'golden' },
		green: { c: 'green', D: 'grün' },
		GREEN: { c: '#3cb44b', E: 'green', D: 'grün' },
		grey: { c: 'grey', D: 'grau' },
		lightblue: { c: 'lightblue', D: 'hellblau' },
		LIGHTBLUE: { c: '#42d4f4', E: 'lightblue', D: 'hellblau' },
		lightgreen: { c: 'lightgreen', D: 'hellgrün' },
		LIGHTGREEN: { c: '#afff45', E: 'lightgreen', D: 'hellgrün' },
		lightyellow: { c: '#fff620', E: 'lightyellow', D: 'gelb' },
		NEONORANGE: { c: '#ff6700', E: 'neonorange', D: 'neonorange' },
		NEONYELLOW: { c: '#efff04', E: 'neonyellow', D: 'neongelb' },
		olive: { c: 'olive', D: 'oliv' },
		OLIVE: { c: '#808000', E: 'olive', D: 'oliv' },
		orange: { c: 'orange', D: 'orange' },
		ORANGE: { c: '#f58231', E: 'orange', D: 'orange' },
		PINK: { c: 'deeppink', D: 'rosa' },
		pink: { c: 'pink', D: 'rosa' },
		purple: { c: 'purple', D: 'lila' },
		PURPLE: { c: '#911eb4', E: 'purple', D: 'lila' },
		red: { c: 'red', D: 'rot' },
		RED: { c: '#e6194B', E: 'red', D: 'rot' },
		skyblue: { c: 'skyblue', D: 'himmelblau' },
		SKYBLUE: { c: 'deepskyblue', D: 'himmelblau' },
		teal: { c: '#469990', D: 'blaugrün' },
		TEAL: { c: '#469990', E: 'teal', D: 'blaugrün' },
		transparent: { c: '#00000000', E: 'transparent', D: 'transparent' },
		violet: { c: 'violet', E: 'violet', D: 'violett' },
		VIOLET: { c: 'indigo', E: 'violet', D: 'violett' },
		white: { c: 'white', D: 'weiss' },
		yellow: { c: 'yellow', D: 'gelb' },
		yelloworange: { c: '#ffc300', E: 'yellow', D: 'gelb' },
		YELLOW: { c: '#ffe119', E: 'yellow', D: 'gelb' },
	};
	for (const k in newcolors) {
		let cnew = newcolors[k];
		if (cnew.c[0] != '#' && isdef(ColorDi[cnew.c])) cnew.c = ColorDi[cnew.c].c;
		ColorDi[k] = cnew;
	}
}
function ensureColorNames() {
	if (isdef(ColorNames)) return;
	ColorNames = {};
	let names = getColorNames();
	let hexes = getColorHexes();
	for (let i = 0; i < names.length; i++) {
		ColorNames[names[i].toLowerCase()] = '#' + hexes[i];
	}
}
function ensureDictionary() {
	if (nundef(Dictionary)) { Dictionary = { E: {}, S: {}, F: {}, C: {}, D: {} } };
	for (const k in Syms) {
		for (const lang of ['E', 'D', 'F', 'C', 'S']) {
			let w = Syms[k][lang];
			if (nundef(w)) continue;
			Dictionary[lang][w.toLowerCase()] = Dictionary[lang][w.toUpperCase()] = k;
		}
	}
}
function ensureInView(container, element) {
	let cTop = container.scrollTop;
	let cBottom = cTop + container.clientHeight;
	let eTop = element.offsetTop;
	let eBottom = eTop + element.clientHeight;
	if (eTop < cTop) {
		container.scrollTop -= cTop - eTop;
	} else if (eBottom > cBottom) {
		container.scrollTop += eBottom - cBottom;
	}
}
function ensureKeys(o, def) {
	addKeys(def, o);
}
function ensureRtree(R) {
	if (nundef(R.tree) || isEmpty(R.tree)) {
		if (isdef(R.lastSpec.ROOT.cond)) {
			R.tree = { uid: getUID(), uidParent: null, here: 'ROOT', type: 'invisible' };
			if (R.lastSpec.ROOT.chanav) R.tree.chanav = R.lastSpec.ROOT.chanav;
			R.rNodes[R.tree.uid] = R.tree;
			R.Locations.ROOT = [R.tree.uid];
		} else {
			R.tree = recTree(R.lastSpec.ROOT, null, R);
			R.rNodes[R.tree.uid] = R.tree;
		}
	} else {
		console.log('(tree present!)');
	}
}
async function ensureSvgDict() {
	if (nundef(svgDict)) {
		svgDictC = await vidCache.load('svgDict', route_svgDict, true, false);
		svgDict = vidCache.asDict('svgDict');
		svgKeys = Object.keys(svgDict);
		svgList = dict2list(svgDict);
	}
}
function ensureSymByHex() {
	if (nundef(symByHex)) {
		symByHex = {};
		symKeysByHex = [];
		for (const k in symbolDict) {
			let info = symbolDict[k];
			symByHex[info.hexcode] = info;
		}
		symKeysByHex = Object.keys(symByHex);
	}
}
function ensureSymBySet() { if (nundef(symBySet)) { makeEmoSetIndex(); } }
function ensureSymByType() {
	if (nundef(symByType)) {
		symByType = { emo: {}, eduplo: {}, icon: {}, iduplo: {} };
		symKeysByType = { emo: [], eduplo: [], icon: [], iduplo: [] };
		symListByType = { emo: [], eduplo: [], icon: [], iduplo: [] };
		for (const k in symbolDict) {
			let info = symbolDict[k];
			if (info.type == 'emo' && info.isDuplicate) { symByType.eduplo[k] = info; symListByType.eduplo.push(info); symKeysByType.eduplo.push(k); }
			else if (info.type == 'icon' && info.isDuplicate) { symByType.iduplo[k] = info; symListByType.iduplo.push(info); symKeysByType.iduplo.push(k); }
			else if (info.type == 'emo') { symByType.emo[k] = info; symListByType.emo.push(info); symKeysByType.emo.push(k); }
			else if (info.type == 'icon') { symByType.icon[k] = info; symListByType.icon.push(info); symKeysByType.icon.push(k); }
		}
	}
}
function ensureUiNodes(R) { if (nundef(R.uiNodes)) R.uiNodes = {}; }
function ensureUIS() { if (nundef(UIS)) { UIS = {}; IdOwner = {}; id2oids = {}; oid2ids = {}; id2uids = {}; path2mainIds = {}; } }
function enter_pressed(e) { if (e.keyCode == 13) { send_message(e); } set_seen(); }
function enterInterruptState() {
	clearTimeouts();
	if (isdef(G.instance)) G.instance.clear();
	auxOpen = true;
}
function enterLobby() {
	console.assert(isdef(DB) && isdef(U), 'ENTERLOBBY DB U NOT CORRECT!!!')
	if (JUST_PERLEN_GAME) { simplestPerlenGame(); }
}
function enterOnlineIDFormSubmit() {
	var form = document.getElementById("EnterOnlineIDForm");
	let userid = mBy("enterID-input");
	let pwd = mBy('tlpvt-passcode-input');
	onclick_submit_boa_login();
}
function enterWaitingLoop() {
	setStatus('waiting for more players!!!');
}
function eraseSpaces(s) {
	let i = 0;
	while (s.includes('  ')) {
		s = s.replace('  ', ' ');
		s = s.replace(' {', '{');
		s = s.replace(' (', '(');
		s = s.replace('\n ', ' ');
		s = s.replace('\n{', '{');
		s = s.replace('\n}', '}');
	}
	return s;
}
function errlog() { console.log('ERROR!', ...arguments); }
function error(msg) {
	let fname = getFunctionsNameThatCalledThisFunction();
	console.log(fname, 'ERROR!!!!! ', msg);
}
function errormsg(ms) { $('#msg').innerHTML = ms; }
function establishUsername(username) {
	hide(dLogin);
	Username = username;
	initSocket();
}
function ev_to_gname(ev) { evNoBubble(ev); return evToTargetAttribute(ev, 'gamename'); }
function eval_approx_derivative(f, xfrom, xto, dx) { }
function eval_approx_integral(f, xfrom, xto, dx) { }
function eval_normal_cdf(x, mean, stdev) { let f = get_normal_cdf(mean, stdev); return f(x); }
function eval_normal_pdf(x, mean, stdev) { let f = get_normal_pdf(mean, stdev); return f(x); }
function evalCond(o, condKey, condVal) {
	let func = FUNCTIONS[condKey];
	if (isString(func)) func = window[func];
	if (nundef(func)) {
		if (nundef(o[condKey])) return null;
		if (isList(condVal)) {
			for (const v of condVal) if (o[condKey] == v) return true;
			return null;
		} else {
			return isdef(o[condKey]) ? o[condKey] == condVal : null;
		}
	}
	return func(o, condVal);
}
function evalConds(o, conds) {
	for (const [f, v] of Object.entries(conds)) {
		if (!evalCond(o, f, v)) return false;
	}
	return true;
}
function evalExp() { }
function EvalInit() {
	var index = 0;
	for (index = 0; index < 10; ++index) {
		PawnRanksWhite[index] = 0;
		PawnRanksBlack[index] = 0;
	}
}
function evalML(word) {
	let answer = normalize(word, currentLanguage);
	let reqAnswer = normalize(bestWord, currentLanguage);
	if (answer == reqAnswer) return true;
	else if (currentLanguage == 'D' && isEnglishKeyboardGermanEquivalent(reqAnswer, answer)) {
		return true;
	} else {
		return false;
	}
}
function EvalPosition() {
	var pce;
	var pceNum;
	var sq;
	var score = brd_material[COLOURS.WHITE] - brd_material[COLOURS.BLACK];
	var file;
	var rank;
	if (0 == brd_pceNum[PIECES.wP] && 0 == brd_pceNum[PIECES.bP] && MaterialDraw() == BOOL.TRUE) {
		return 0;
	}
	PawnsInit();
	pce = PIECES.wP;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score += PawnTable[SQ64(sq)];
		file = FilesBrd[sq] + 1;
		rank = RanksBrd[sq];
		if (PawnRanksWhite[file - 1] == RANKS.RANK_8 && PawnRanksWhite[file + 1] == RANKS.RANK_8) {
			score += PawnIsolated;
		}
		if (PawnRanksBlack[file - 1] <= rank && PawnRanksBlack[file] <= rank && PawnRanksBlack[file + 1] <= rank) {
			score += PawnPassed[rank];
		}
	}
	pce = PIECES.bP;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score -= PawnTable[MIRROR64(SQ64(sq))];
		file = FilesBrd[sq] + 1;
		rank = RanksBrd[sq];
		if (PawnRanksBlack[file - 1] == RANKS.RANK_1 && PawnRanksBlack[file + 1] == RANKS.RANK_1) {
			score -= PawnIsolated;
		}
		if (PawnRanksWhite[file - 1] >= rank && PawnRanksWhite[file] >= rank && PawnRanksWhite[file + 1] >= rank) {
			score -= PawnPassed[7 - rank];
		}
	}
	pce = PIECES.wN;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score += KnightTable[SQ64(sq)];
	}
	pce = PIECES.bN;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score -= KnightTable[MIRROR64(SQ64(sq))];
	}
	pce = PIECES.wB;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score += BishopTable[SQ64(sq)];
	}
	pce = PIECES.bB;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score -= BishopTable[MIRROR64(SQ64(sq))];
	}
	pce = PIECES.wR;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score += RookTable[SQ64(sq)];
		file = FilesBrd[sq] + 1;
		if (PawnRanksWhite[file] == RANKS.RANK_8) {
			if (PawnRanksBlack[file] == RANKS.RANK_1) {
				score += RookOpenFile;
			} else {
				score += RookSemiOpenFile;
			}
		}
	}
	pce = PIECES.bR;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score -= RookTable[MIRROR64(SQ64(sq))];
		file = FilesBrd[sq] + 1;
		if (PawnRanksBlack[file] == RANKS.RANK_1) {
			if (PawnRanksWhite[file] == RANKS.RANK_8) {
				score -= RookOpenFile;
			} else {
				score -= RookSemiOpenFile;
			}
		}
	}
	pce = PIECES.wQ;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score += RookTable[SQ64(sq)];
		file = FilesBrd[sq] + 1;
		if (PawnRanksWhite[file] == RANKS.RANK_8) {
			if (PawnRanksBlack[file] == RANKS.RANK_1) {
				score += QueenOpenFile;
			} else {
				score += QueenSemiOpenFile;
			}
		}
	}
	pce = PIECES.bQ;
	for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
		sq = brd_pList[PCEINDEX(pce, pceNum)];
		score -= RookTable[MIRROR64(SQ64(sq))];
		file = FilesBrd[sq] + 1;
		if (PawnRanksBlack[file] == RANKS.RANK_1) {
			if (PawnRanksWhite[file] == RANKS.RANK_8) {
				score -= QueenOpenFile;
			} else {
				score -= QueenSemiOpenFile;
			}
		}
	}
	pce = PIECES.wK;
	sq = brd_pList[PCEINDEX(pce, 0)];
	if ((brd_material[COLOURS.BLACK] <= ENDGAME_MAT)) {
		score += KingE[SQ64(sq)];
	} else {
		score += KingO[SQ64(sq)];
	}
	pce = PIECES.bK;
	sq = brd_pList[PCEINDEX(pce, 0)];
	if ((brd_material[COLOURS.WHITE] <= ENDGAME_MAT)) {
		score -= KingE[MIRROR64(SQ64(sq))];
	} else {
		score -= KingO[MIRROR64(SQ64(sq))];
	}
	if (brd_pceNum[PIECES.wB] >= 2) score += BishopPair;
	if (brd_pceNum[PIECES.bB] >= 2) score -= BishopPair;
	if (brd_side == COLOURS.WHITE) {
		return score;
	} else {
		return -score;
	}
}
function evalSP(speechResult) {
	if (isEmpty(speechResult)) {
		return false;
	}
	Selected = {}
	let answer = Goal.answer = Selected.answer = normalize(speechResult, currentLanguage);
	let reqAnswer = Goal.reqAnswer = normalize(bestWord, currentLanguage);
	if (answer == reqAnswer) return true;
	else if (matchesAnyWordOrSound(Goal.info, answer)) return true;
	else if (matchingNumberOrTime(Goal.info, answer)) {
		return true;
	} else if (isAcceptableAnswerButNewSound(Goal.info, reqAnswer, answer)) {
		addAsSoundToDatabase(Goal.info, answer);
		return true;
	} else {
		return false;
	}
}
function evalSPA(speechResult) {
	if (isEmpty(speechResult)) {
		console.log('empty speechResult')
		return false;
	}
	Selected = {}
	let answer = Goal.answer = Selected.answer = normalize(speechResult, currentLanguage);
	let reqAnswer = Goal.reqAnswer = normalize(bestWord, currentLanguage);
	if (answer == reqAnswer) return true;
	else if (matchesAnyWordOrSound(Goal.info, answer)) return true;
	else if (matchingNumberOrTime(Goal.info, answer)) {
		return true;
	} else if (isAcceptableAnswerButNewSound(Goal.info, reqAnswer, answer)) {
		addAsSoundToDatabase(Goal.info, answer);
		return true;
	} else {
		return false;
	}
}
function evalSpecPath(n, relpath, R) {
	if (isEmpty(relpath)) return null;
	if (relpath == '.') return n;
	let iNext = firstNumber(relpath);
	nNext = n.sub[iNext];
	let newPath = stringAfter(relpath, '.' + iNext);
	if (isEmpty(newPath)) return nNext;
	else return evalSpecPath(nNext, newPath, R);
}
function evalTC(ev) {
	let id = evToClosestId(ev);
	ev.cancelBubble = true;
	let i = firstNumber(id);
	let item = Pictures[i];
	Selected = { pic: item, feedbackUI: item.div };
	if (item == Goal) { return true; } else { return false; }
}
function evalTP(ev) {
	let id = evToClosestId(ev);
	ev.cancelBubble = true;
	let i = firstNumber(id);
	let item = Pictures[i];
	Selected = { pic: item, feedbackUI: item.div, sz: getBounds(item.div).height };
	if (item.label == bestWord) { return true; } else { return false; }
}
function evaluate() {
	if (!canAct()) return;
	uiActivated = false; clearTimeouts();
	IsAnswerCorrect = G.instance.eval(...arguments);
	if (IsAnswerCorrect === undefined) { promptNextTrial(); return; }
	G.trialNumber += 1;
	if (!IsAnswerCorrect && G.trialNumber < G.trials && !calibrating()) { promptNextTrial(); return; }
	if (calibrating()) { DELAY = 300; if (IsAnswerCorrect) G.successFunc(false); else G.failFunc(); }
	else if (IsAnswerCorrect) { DELAY = Settings.spokenFeedback ? 1500 : 300; G.successFunc(); }
	else { DELAY = G.correctionFunc(); G.failFunc(); }
	setTimeout(removeMarkers, 1500);
	let nextLevel = scoring(IsAnswerCorrect);
	if (Score.gameChange) {
		setNextGame();
		if (unitTimeUp()) {
			setTimeout(() => gameOver('Great job! Time for a break!'), DELAY);
		} else {
			TOMain = setTimeout(startGame, DELAY);
		}
	} else if (Score.levelChange && nextLevel <= G.maxLevel) {
		G.level = nextLevel;
		setBadgeLevel(G.level);
		TOMain = setTimeout(startLevel, DELAY);
	} else {
		TOMain = setTimeout(startRound, DELAY);
	}
}
function evaluateBoard(move, prevSum, color) {
	var from = [8 - parseInt(move.from[1]), move.from.charCodeAt(0) - 'a'.charCodeAt(0)];
	var to = [8 - parseInt(move.to[1]), move.to.charCodeAt(0) - 'a'.charCodeAt(0)];
	if (prevSum < -1500) {
		if (move.piece === 'k') { move.piece = 'k_e' }
		else if (move.captured === 'k') { move.captured = 'k_e' }
	}
	if ('captured' in move) {
		if (move.color === color) {
			prevSum += (weights[move.captured] + pstOpponent[move.color][move.captured][to[0]][to[1]]);
		}
		else {
			prevSum -= (weights[move.captured] + pstSelf[move.color][move.captured][to[0]][to[1]]);
		}
	}
	if (move.flags.includes('p')) {
		move.promotion = 'q';
		if (move.color === color) {
			prevSum -= (weights[move.piece] + pstSelf[move.color][move.piece][from[0]][from[1]]);
			prevSum += (weights[move.promotion] + pstSelf[move.color][move.promotion][to[0]][to[1]]);
		}
		else {
			prevSum += (weights[move.piece] + pstSelf[move.color][move.piece][from[0]][from[1]]);
			prevSum -= (weights[move.promotion] + pstSelf[move.color][move.promotion][to[0]][to[1]]);
		}
	}
	else {
		if (move.color !== color) {
			prevSum += pstSelf[move.color][move.piece][from[0]][from[1]];
			prevSum -= pstSelf[move.color][move.piece][to[0]][to[1]];
		}
		else {
			prevSum -= pstSelf[move.color][move.piece][from[0]][from[1]];
			prevSum += pstSelf[move.color][move.piece][to[0]][to[1]];
		}
	}
	return prevSum;
}
function evalWP(wp) {
	let title = wp.title;
	if (title.includes('Adding') && !titla.includes('Fractions')) {
	}
}
function evenFloor(x) { let n = Math.floor(x); return n % 2 ? n - 1 : n; }
function everyinterval(n) {
	if ((myGameArea.frameNo / n) % 1 == 0) {
		return true;
	}
	return false;
}
function evNoBubble(ev) { ev.preventDefault(); ev.cancelBubble = true; }
function evStop(ev) {
	ev.preventDefault();
	ev.stopPropagation();
	ev.stopImmediatePropagation();
	ev.cancelBubble = true;
}
function evToClass(ev, className) {
	let elem = findParentWithClass(className);
	return elem;
}
function evToClosestId(ev) {
	let elem = findParentWithId(ev.target);
	return elem.id;
}
function evToId(ev) {
	let elem = findParentWithId(ev.target);
	return elem.id;
}
function evToId_g_(ev) {
	let elem = findParentWithId(ev.target);
	let s = elem.id;
	return s[0] == 'g' && s[1] == '_' ? stringAfter(s, '_') : s;
}
function evToIdParent(ev) {
	let elem = findParentWithId(ev.target);
	return elem;
}
function evToIdTNT(ev) {
	let elem = findParentWithId(ev.target);
	return elem.id;
}
function evToItem(ev) {
	let id = evToId(ev);
	let item = Items[id];
	return item;
}
function evToItemC(ev) { ev.cancelBubble = true; return evToItem(ev); }
function evToO(ev) {
	return getVisual(evToId(ev));
}
function evToProp(ev, prop) {
	let x = ev.target;
	while (isdef(x) && nundef(x.getAttribute(prop))) x = x.parentNode;
	return isdef(x) ? x.getAttribute(prop) : null;
}
function evToTargetAttribute(ev, attr) {
	let val = ev.target.getAttribute(attr);
	if (nundef(val)) { val = ev.target.parentNode.getAttribute(attr); }
	return val;
}
function ex00_sidebar(sidebar) {
	let styles = { hpadding: 12, vpadding: 4, fz: 20 };
	for (const link of ['short', 'link3super superlang dasdasdas', 'short']) {
		sidebar.addContent(`<a href='#'>${link}</a>`, styles);
	}
	sidebar.open(null, false);
}
function ex01_table(dContent) {
	console.log('dContent', dContent);
	mStyle(dContent, { bg: wyellow, position: 'relative' });
	let dTable = mDiv100(dContent);
	let d3 = mDiv(dTable, { position: 'absolute', left: 40, top: 4, bg: 'pink', w: 300, h: 300 });
}
function ex02_table(dContent) {
	console.log('dContent', dContent);
	mStyle(dContent, { bg: wyellow, position: 'relative', hmin: 1600 });
	let dTable = mDiv100(dContent);
}
function exchange_by_index(arr1, i1, arr2, i2) {
	let temp = arr1[i1];
	arr1[i1] = arr2[i2];
	arr2[i2] = temp;
}
function exchange_items_in_fen(fen, o0, o1) {
	let p0 = o0.path.split('.'); if (isdef(fen.players[p0[0]])) p0.unshift('players');
	let p1 = o1.path.split('.'); if (isdef(fen.players[p1[0]])) p1.unshift('players');
	let list0 = lookup(fen, p0);
	let list1 = lookup(fen, p1);
	if (isDict(list0) && isdef(list0.list)) list0 = list0.list;
	if (isDict(list1) && isdef(list1.list)) list1 = list1.list;
	elem_from_to(o0.key, list0, list1);
	elem_from_to(o1.key, list1, list0);
}
function executeFrame() {
	if (animate)
		requestAnimFrame(executeFrame);
	incrementSimulation();
	c.clearRect(0, 0, canvas.width, canvas.height);
	drawBox();
	drawCircle();
	if (mouse.down)
		drawLineToMouse();
}
function executeFunctionByName(functionName, context) {
	var args = Array.prototype.slice.call(arguments, 2);
	var namespaces = functionName.split('.');
	var func = namespaces.pop();
	for (var i = 0; i < namespaces.length; i++) {
		context = context[namespaces[i]];
	}
	return context[func].apply(context, args);
}
function executeMapping(mapping, otype, oid, o) {
	let mKey = mapping.id;
	let path = stringAfter(mKey, '.');
	let omap = parsePropertyPath(o, stringAfter(mKey, '.'));
	if (nundef(omap)) return;
	let func = mapping.type;
	let loc = mapping.loc;
	if (stringBefore(loc, '.') == 'this') {
		loc = parsePropertyPath(o, stringAfter(loc, '.'));
	}
	let mkLoc = UIS[loc];
	if (mkLoc && mkLoc.maxHeightFunc) {
		let hMax = mkLoc.maxHeightFunc();
		mkLoc.elem.style.setProperty('height', hMax + 'px');
	}
	let structObject = window[func](serverData.table, loc, o, oid, path, omap);
}
function existingPlayers(callback) { callback({ response: 'hallo' }); }
function exitToAddon(callback) {
	AD.callback = callback;
	enterInterruptState(); auxOpen = false;
	AD.run();
}
function exp_church(options) { return options.church == 'yes'; }
function exp_commissions(options) { return options.commission == 'yes'; }
function exp_dep(data) {
	if (isDict(data) && 'type' in data) {
		return [data];
	}
	if (is_Set(data) && data._set.length == 1) {
		return exp(data._set[0]);
	}
	if (is_Set(data) && data._set.length > 1) {
		return data._set.map(exp);
	}
	if (is_Tuple(data) && data._tuple.length == 1) {
		return exp(data._tuple[0]);
	}
	if (is_Tuple(data) && data._tuple.length > 1) data = data._tuple;
	if (isList(data) && empty(data)) return [];
	if (isList(data) && data.length == 1) return exp(data[0])
	if (isList(data)) {
		let a = exp(data[0]);
		let rest = data.slice(1);
		let tlist = exp(rest);
		return carteset(a, tlist);
	}
}
function exp_journeys(options) { return options.journey == 'yes'; }
function exp_rumors(options) { return options.rumors == 'yes'; }
function expand(e) {
	console.log('e', e)
	let res = [];
	let e2 = expand1(e);
	console.log('e2', e2)
	for (const el of e2) {
		if (isll(el)) el.map(x => res.push(x));
		else res.push(el);
	}
	return res;
}
function expand1(x) {
	if (isEmpty(x)) return [];
	if (isLiteral(x)) return [x.toString()];
	if (isActionElement(x)) return [x];
	if (isSingleton(x)) return expand1(firstElement(x));
	if (is_Set(x)) return x._set.map(el => expand1(el));
	if (isSet(x)) return x.set.map(el => expand1(el));
	if (is_Tuple(x)) {
		x = x._tuple;
		let a = expand1(firstElement(x));
		let b = x.slice(1);
		let c = expand1(x.slice(1));
		let d = extractActionLists(c);
		return carteset(a, d);
	}
	if (isTuple(x)) {
		let a = expand1(firstElement(x));
		let b = x.slice(1);
		let c = expand1(x.slice(1));
		let d = extractStringLists(c);
		testHelpers('a=', fj(a), 'b=', fj(b), 'c=', fj(c));
		testHelpers('d=', fj(d));
		return carteset(a, d);
	}
}
function expand1_99(x) {
	if (isList(x)) {
	}
	if (isDict(x)) {
		if ('_set' in x) {
			return handleSet(x._set);
		} else if ('_tuple' in x) {
			return handleTuple(x._tuple);
		} else if ('type' in x) {
			return handleAction(x);
		} else { error('IMPOSSIBLE OBJECT', x); return null; }
	} else { error('IMPOSSIBLE TYPE', x); return null; }
}
function expand99(e) {
	let res = [];
	e = expand1_99(e);
	for (const el of e) {
		if (isll(el)) el.map(x => res.push(x));
		else res.push(el);
	}
	return res;
}
function expandBoard(board, rNew, cNew, iInsert) {
	let [boardArrOld, rOld, cOld] = [board.fields.map(x => isdef(x.item) ? x.item.index : null), board.rows, board.cols];
	let boardArrNew = new Array(rNew * cNew);
	for (let r = 0; r < rNew; r++) {
		for (let c = 0; c < cNew; c++) {
			let i = iFromRowCol(r, c, rNew, cNew);
			let x = (rOld != rNew) ? r : c;
			if (x < iInsert) {
				let iOld = iFromRowCol(r, c, rOld, cOld);
				boardArrNew[i] = boardArrOld[iOld];
			}
			else if (x == iInsert) boardArrNew[i] = null;
			else {
				let [ir, ic] = (rOld != rNew) ? [r - 1, c] : [r, c - 1];
				let iOld = iFromRowCol(ir, ic, rOld, cOld);
				boardArrNew[i] = boardArrOld[iOld];
			}
		}
	}
	return { rows: rNew, cols: cNew, boardArr: boardArrNew, extras: [] };
}
function expandX(e) {
	console.log('e', e)
	let res = [];
	let e2 = expandX1(e);
	console.log('e2', e2)
	for (const el of e2) {
		if (isll(el)) el.map(x => res.push(x));
		else res.push(el);
	}
	return res;
}
function expandX1(x) {
	console.log('expand1', cnt, x); cnt += 1;
	if (is_Set(x) && x._set.length == 1) return x._set.map(el => expandX1(el));
	if (isDict(x) || isActionElement(x) || isLiteral(x)) return [x];
	if (is_Tuple(x)) x = x._tuple;
	if (Array.isArray(x)) {
		if (isEmpty(x)) return [];
		let a = expandX1(firstElement(x));
		let b = x.slice(1);
		let c = expandX1(b);
		console.log(c);
		let d = extractActionLists(c);
		console.log('a=', fj(a));
		console.log('b=', fj(b));
		console.log('c=', fj(c));
		console.log('d=', fj(d));
		return flat(cartesi(a, d));
	}
}
function explode(deck, w, h) {
	deck.cards.forEach(function (card, i) {
		card.setSide('front')
		card.animateTo({
			delay: 1000 + i * 2,
			duration: 500,
			ease: 'quartOut',
			x: Math.random() * w - w / 2,
			y: Math.random() * h - h / 2
		})
	});
}
function extendedObjectString(o, indent, simple, lstShow, lstOmit) {
	let s = ' '.repeat(indent) + (o.id ? o.id + ': ' : ' _ : ');
	for (const k in o) {
		if (k == 'id') continue;
		if (lstShow && lstShow.includes(k)
			|| lstOmit && !lstOmit.includes(k)
			|| simple && isSimple(o[k]) && !isComplexColor(o[k])) {
			if (isDict(o[k])) {
				s += '(' + extendedObjectString(o[k], indent, simple, lstShow, lstOmit) + ') ';
			} else s += k + ':' + o[k] + ' ';
		}
	}
	return s;
}
function extendPath(path, postfix) { return path + (endsWith(path, '.') ? '' : '.') + postfix; }
function extendRect(r4) { r4.l = r4.x; r4.t = r4.y; r4.r = r4.x + r4.w; r4.b = r4.t + r4.h; }
function extendWidth(w) { return replaceEvery(w, 'w', 2); }
function extract_game_options() {
	let opt = Session.game_options;
	return Session.game_options;
}
function extract_polygon(f) {
	var polygon = L.polygon(f.geometry.coordinates);
	if (f.geometry.type == 'MultiPolygon') {
		let max_area_polygon;
		let max_area = 0;
		for (poly in (f.geometry.coordinates)) {
			let polygon1 = turf.polygon((f.geometry.coordinates)[poly])
			area = turf.area(polygon1);
			if (area > max_area) {
				max_area = area
				max_area_polygon = polygon1;
			}
		}
		console.log('turf', turf)
		console.log('polymax', max_area_polygon)
		polygon = L.polygon(max_area_polygon.geometry.coordinates);
	}
	return polygon;
}
function extractActionLists(lst) {
	let res = [];
	for (const l of lst) {
		if (isListOfActionElements(l)) res.push(l);
		else if (isActionElement(l)) res.push([l]);
		else {
			let r2 = extractStringLists(l);
			r2.map(x => res.push(x));
		}
	}
	return res;
}
function extractActions(lst) {
	let res = [];
	for (const l of lst) {
		if (isListOfActionElements(l)) res.push(l);
		else if (isActionElement(l)) res.push([l]);
		else {
			let r2 = extractStringLists(l);
			r2.map(x => res.push(x));
		}
	}
	return res;
}
function extractColorsFromCss() {
	let arr = collectPropFromCss('background-color');
	var di = {};
	for (const o of arr) {
		let sarr = splitAtAnyOf(o.class, ' .-:,');
		let sColor = null;
		for (const w of sarr) {
			if (['w3', 'text', 'hover', 'border'].includes(w)) continue;
			sColor = w;
			break;
		}
		if (sColor && o.color) {
			di[sColor] = o.color;
		}
	}
	return di;
}
function extractFilesFromHtml(html, htmlfile, ext = 'js') {
	let prefix = ext == 'js' ? 'script src="' : 'link rel="stylesheet" href="';
	let dirhtml = stringBeforeLast(htmlfile, '/');
	let project = stringAfter(dirhtml, '/'); if (project.includes('/')) project = stringBefore(project, '/');
	let parts = html.split(prefix);
	parts.shift();
	let files = parts.map(x => stringBefore(x, '"'));
	files = files.filter(x => !x.includes('alibs/') && !x.includes('assets/')); //console.log('files', jsCopy(files))
	let files2 = [];
	for (const f of files) {
		if (f.startsWith(dirhtml)) { files2.push(f); continue; }
		if (f.startsWith('./')) { files2.push(dirhtml + f.substring(1)); continue; }
		if (f.startsWith('../') && stringCount(dirhtml, '../') == 1) {
			files2.push(f); continue;
		}
		if (!f.includes('/')) { files2.push(dirhtml + '/' + f); continue; }
		if (isLetter(f[0])) { files2.push(dirhtml + '/' + f); continue; }
		console.log('PROBLEM!', f)
	}
	files = files2;
	return files;
}
async function extractKeywords(path, trimmedlines = false) {
	let text = await route_path_text(path);
	let lines = text.split('\r\n');
	let kws = [];
	for (const line of lines) {
		let l = trimmedlines ? line.trim() : line;
		if (l.startsWith('function')) kws.push(ithWord(l, 1, true));
		if (l.startsWith('async')) kws.push(ithWord(l, 2, true));
		if (l.startsWith('const')) kws.push(ithWord(l, 1, true));
	}
	return kws;
}
function extractOnclickFromHtml(html) {
	let symlist = [];
	let onclicks = html.split('onclick="'); //.shift();
	onclicks.shift();
	for (const oncl of onclicks) {
		let code = stringBefore(oncl, '(');
		symlist.push(code);
	}
	return symlist;
}
function extractPixel(str) {
	if (isNumber(str)) return str;
	else return firstNumber(str);
}
function extractStringLists(lst) {
	console.log(lst);
	let res = [];
	for (const l of lst) {
		if (isListOfLiterals(l)) res.push(l);
		else if (isLiteral(l)) res.push([l]);
		else {
			let r2 = extractStringLists(l);
			r2.map(x => res.push(x));
		}
	}
	return res;
}
function extractTuples(x) {
	if (isList(x))
		if (isListOfListOfActions(x)) return x;
	return isList(x) && x.length > 0 ? stripSet(x[0]) : x;
}
function extractUniqueStrings(tupleList) {
	let idlist = [];
	tupleList.map(x => x.map(y => addIf_dep(y, idlist)));
	return idlist;
}
//#endregion

//#region F
function face_down(item, color, texture) {
	if (!item.faceUp) return;
	if (isdef(texture) || lookup(item, ['live', 'dCover'])) {
		face_down_alt(item, color, texture);
	} else {
		let svgCode = C52.card_2B;
		item.div.innerHTML = svgCode;
		if (nundef(color)) color = item.color;
		if (isdef(item.color)) item.div.children[0].children[1].setAttribute('fill', item.color);
	}
	item.faceUp = false;
}
function face_down_alt(item, bg, texture_name) {
	let dCover = item.live.dCover;
	if (nundef(dCover)) {
		let d = iDiv(item);
		dCover = item.live.dCover = mDiv(d, { background: bg, rounding: mGetStyle(d, 'rounding'), position: 'absolute', width: '100%', height: '100%', left: 0, top: 0 });
		let t = get_texture(texture_name);
		dCover.style.backgroundImage = t;
		dCover.style.backgroundRepeat = 'repeat';
	} else mStyle(dCover, { display: 'block' });
}
function face_up(item) {
	if (item.faceUp) return;
	if (lookup(item, ['live', 'dCover'])) mStyle(item.live.dCover, { display: 'none' });
	else item.div.innerHTML = isdef(item.c52key) ? C52[item.c52key] : item.html;
	item.faceUp = true;
}
function faChar(key) {
	return String.fromCharCode('0x' + faChars[key]); //'f520');
}
function fadder(f, g) { return x => f(x) - g(x); }
async function faicon_list() {
	let txt = await route_path_text('../base/alibs/fa/fa.min.css');
	txt = '.fa-0' + stringAfter(txt, '.fa-0');
	txt = stringBefore(txt, 'sr-only');
	let parts = txt.split(':before');
	console.log('parts', parts.length);
	let list = [];
	for (const p of parts) {
		let word = stringAfter(p, '.fa-').trim();
		list.push(word);
	}
	arrRemoveLast(list);
	list.sort();
	console.log('list', list);
	downloadJson({ l: list }, 'liste');
}
async function fail_yt() {
	let url = `http://gdata.youtube.com/feeds/api/videos`; //blocked by CORS
	let result = await route_path_text(url);
	console.log('result', result);
	let res = `
    http://gdata.youtube.com/feeds/api/videos
    ?v=2
    &author=SesameStreet
    &q=rubber+ducky
    &orderby=viewCount
    &start-index=1
    &max-results=10
    &alt=json-in-script
    &callback=myCallbackFunction
    &prettyprint=true
  `;
}
function failPictureGoal(withComment = false) {
	if (withComment && G.spokenFeedback) {
		const comments = (G.language == 'E' ? ['too bad'] : ["aber geh'"]);
		sayRandomVoice(chooseRandom(comments));
	}
	if (isdef(Selected) && isdef(Selected.feedbackUI)) {
		let uilist = isList(Selected.feedbackUI) ? Selected.feedbackUI : [Selected.feedbackUI];
		let sz = getRect(uilist[0]).h;
		for (const ui of uilist) {
			mpOver(markerFail(), ui, sz * (1 / 2), 'red', 'openMojiTextBlack');
		}
	}
}
function failSomePictures(withComment = false) {
	if (withComment && G.spokenFeedback) {
		const comments = (G.language == 'E' ? ['too bad'] : ["aber geh'"]);
		sayRandomVoice(chooseRandom(comments));
	}
	for (const p of Pictures) {
		let ui = iDiv(p);
		let sz = getRect(ui).h;
		if (p.isCorrect == false) mpOver(markerFail(), ui, sz * (1 / 2), 'red', 'openMojiTextBlack');
		else mpOver(markerSuccess(), ui, sz * (4 / 5), 'limegreen', 'segoeBlack');
	}
}
function failThumbsDown(withComment = false) {
	if (withComment && G.spokenFeedback) {
		const comments = (G.language == 'E' ? ['too bad'] : ["aber geh'"]);
		sayRandomVoice(chooseRandom(comments));
	}
	let p1 = firstCond(Pictures, x => x.key == 'thumbs down');
	iDiv(p1).style.opacity = 1;
	let p2 = firstCond(Pictures, x => x.key == 'thumbs up');
	iDiv(p2).style.display = 'none';
}
function failThumbsDownPlus(withComment = false) {
	if (withComment && G.spokenFeedback) {
		const comments = (G.language == 'E' ? ['too bad'] : ["aber geh'"]);
		sayRandomVoice(chooseRandom(comments));
	}
	let p1 = firstCond(Pictures, x => x.key == 'thumbs down');
	iDiv(p1).style.opacity = 1;
	let p2 = firstCond(Pictures, x => x.key == 'thumbs up');
	iDiv(p2).style.display = 'none';
	if (isdef(Selected) && isdef(Selected.feedbackUI)) {
		let uilist = isList(Selected.feedbackUI) ? Selected.feedbackUI : [Selected.feedbackUI];
		let sz = getRect(uilist[0]).h;
		for (const ui of uilist) mpOver(markerFail(), ui, sz * (1 / 2), 'red', 'openMojiTextBlack');
	}
}
function fakeInitSocket() { ClientId = '12345'; fakeLogin(Username); }
async function fakeLogin(username) {
	DB = await route_path_yaml_dict('./data.yaml');
	PerlenDict = await route_path_yaml_dict('./perlenDict.yaml');
	initSocket();
	setUserData(username);
	enterLobby();
}
function fcomposer(f, g) { return x => f(g(x)); }
function fderivative(exp) {
	return nerdamer(`diff(${exp},x)`).buildFunction();
}
function feedback() { }
function feedback_disable_ui() {
	for (const k in DA.bars) {
		let bar = DA.bars[k];
		let b = bar.cont.getElementsByTagName('button')[0];
		b.disabled = true;
	}
}
function feedback_present() {
	dTable = mBy('dTable'); mStyle(dTable, { padding: 20 });
	DA.no_shield = true;
	feedback_stats(dTable);
	let dgreen = get_plus_progressbar(dTable, 'green');
	mLinebreak(dTable);
	let dred = get_plus_progressbar(dTable, 'red');
	mLinebreak(dTable);
	DA.bars = {
		green: dgreen,
		red: dred,
	};
	set_bar('green'); set_bar('red');
	if (Z.role == 'spectator') {
		feedback_disable_ui();
		mButton('JOIN AS PLAYER', onclick_join_as_player, dTable, { h: 40, w: 200 });
	} else if (i_am_host()) {
		let [uname, fen, options, uplayer] = [Z.uname, Z.fen, Z.options, Z.uplayer];
		mButton('reset', onclick_reset_progressbars, dTable, { h: 30, w: 100 });
		feedback_disable_ui();
		let playerlist = Z.playerlist;
		let pldatalist = Z.playerdata.map(x => x.name);
		console.log('playerlist', playerlist, 'pldatalist', pldatalist);
		for (const plname of pldatalist) {
			if (!playerlist.includes(plname)) {
				console.log('plname', plname, 'not in playerlist', playerlist);
				fen.players[plname] = { score: 0, name: plname, color: get_user_color(plname) };
			}
		}
		if (playerlist.length != pldatalist.length) {
			phpPost({ friendly: Z.friendly, uname: Z.uplayer, players: pldatalist, fen: fen }, 'add_players');
		}
		fen.decrement = 0;
		start_downgrade_ticker();
	} else {
		assertion(Z.playerlist.includes(Z.uname), `${Z.uname} not in playerlist ${Z.playerlist} and not spectator`);
	}
}
function feedback_stats(d) {
	let players = Z.fen.players;
	let d1 = mDiv(d, { display: 'flex', 'justify-content': 'center', 'align-items': 'space-evenly' });
	for (const plname in players) {
		let pl = players[plname];
		let sz = 50;
		let bcolor = 'silver';
		let border = pl.playmode == 'bot' ? `double 5px ${bcolor}` : `solid 5px ${bcolor}`;
		let rounding = pl.playmode == 'bot' ? '0px' : '50%';
		let d2 = mDiv(d1, { margin: 4, align: 'center' }, null, `<img src='../base/assets/images/${plname}.jpg' style="border-radius:${rounding};display:block;border:${border};box-sizing:border-box" class='img_person' width=${sz} height=${sz}>`);
	}
}
function feedback_update_fen() {
	let fen = Z.fen;
	fen.barvalues = {};
	for (const pldata of Z.playerdata) {
		if (isdef(pldata.state)) {
			for (const color in pldata.state) {
				let value = pldata.state[color];
				if (isdef(fen.barvalues[color])) {
					fen.barvalues[color] += value;
				} else {
					fen.barvalues[color] = value;
				}
			}
		}
	}
	for (const k in fen.barvalues) {
		let val = fen.barvalues[k] - fen.decrement;
		if (val < 0) val = 0;
		fen.barvalues[k] = val;
	}
}
function felix_sends_timed_move_at_mimi_slot() {
	let [fen, pl] = [Z.fen, Z.pl];
	let slot = fen.players.mimi.slot;
	slot = busy_wait_until_slot(slot);
}
function fen_from_info(info) {
	let all_attrs = gSet_attributes();
	let keys = get_keys(all_attrs);
	let fen = '';
	for (const prop of keys) {
		let val = info[prop];
		let i = all_attrs[prop].indexOf(val);
		fen += '' + i;
	}
	return fen;
}
function fentest_wise() {
	TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
	DA.test.end = () => { };
	DA.auto_moves = [];
	let playernames = [U.name, 'felix'];
	startgame('wise', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function fentest0_min_items() {
	let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];
	let pl = fen.players[uplayer];
	[pl.hand, pl.stall, Z.stage, Z.phase] = [['JSn', '2Hn', '3Hn', '3Dn', '3Cn', '4Hn'], ['QSn', 'KHn'], 5, 'king'];
	ensure_actions(fen);
	take_turn_fen();
}
function fentest1_auction() {
	Z.stage = 12;
	Z.phase = 'jack';
	ensure_market(Z.fen, 3);
	take_turn_fen();
}
function fentest10_ferro_end_of_round_goals() {
	let [game, A, fen, uplayer, plorder] = [Z.game, Z.A, Z.fen, Z.uplayer, Z.plorder];
	let pl = fen.players[plorder[0]];
	pl.hand = ['3Hn', '3Hn', '3Hn', '3Hn'];
	pl = fen.players[plorder[1]];
	pl.journeys = [['3Cn', '3Hn', '3Hn', '3Hn']];
	pl.goals['4'] = true;
	pl.hand = ['3Hn', 'KSn'];
	take_turn_fen();
}
function fentest2_build() {
	Z.stage = 5;
	Z.phase = 'king';
	ensure_stall(Z.fen, Z.uplayer, 4);
	ensure_actions(Z.fen);
	take_turn_fen();
}
function fentest4_visit() {
	let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];
	fen.actionsCompleted = [];
	for (const plname of fen.plorder) {
		add_a_schwein(fen, plname);
	}
	Z.stage = 5;
	Z.phase = 'queen';
	take_turn_fen();
}
function fentest5_market_opens() {
	Z.stage = 3;
	Z.phase = 'king';
	take_turn_fen();
}
function fentest6_endgame() {
	let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];
	fen.actionsCompleted = [];
	for (const plname of fen.plorder) {
		add_a_correct_building_to(fen, plname, 'chateau');
		add_a_correct_building_to(fen, plname, rChoose(['farm', 'estate', 'chateau']));
		if (coin()) add_a_correct_building_to(fen, plname, rChoose(['farm', 'estate', 'chateau']));
		fen.actionsCompleted.push(plname);
	}
	fen.pl_gameover = [];
	for (const plname of fen.plorder) {
		let bcorrect = ari_get_correct_buildings(fen.players[plname].buildings);
		let can_end = ari_check_end_condition(bcorrect);
		if (can_end) fen.pl_gameover.push(plname);
	}
	if (isEmpty(fen.pl_gameover)) { console.log('try again!!!!!!!!!!!'); return; }
	Z.stage = 10;
	Z.phase = 'king';
	take_turn_fen(true);
}
function fentest7_gameover() {
	let [game, A, fen, uplayer] = [Z.game, Z.A, Z.fen, Z.uplayer];
	if (game == 'aristo') fentest6_endgame();
	else if (game == 'spotit') {
		for (const plname in fen.players) { fen.players[plname].score = Z.options.winning_score - 1; }
		take_turn_fen();
	} else if (game == 'bluff') {
		let pl = fen.players[uplayer];
		while (pl.handsize < Z.options.max_handsize) inc_handsize(fen, uplayer);
		deck_add(fen.deck, 1, pl.hand);
		take_turn_fen();
	}
}
function fentest8_ferro_transation_error() {
	let [game, A, fen, uplayer] = [Z.game, Z.A, Z.fen, 'mimi'];
	let pl = fen.players[uplayer];
	pl.goals['3'] = true;
	pl.hand.push('3Hn', '3Hn', '3Hn');
	Z.turn = ['mimi'];
	take_turn_fen();
}
function fentest9_ferro_transation_error() {
	let [game, A, fen, uplayer] = [Z.game, Z.A, Z.fen, 'mimi'];
	let pl = fen.players[uplayer];
	pl.goals['3'] = true;
	pl.goals['4'] = true;
	pl.goals['5'] = true;
	pl.hand = ['3Hn', '3Hn', '3Hn', '2Cn', '2Cn', '2Cn', '*Cn', 'ACn', '*Cn'];
	Z.turn = ['mimi'];
	let other = firstCond(Z.playerlist, x => x != uplayer);
	pl = fen.players[other];
	pl.goals['4'] = true;
	pl.journeys = [['3Hn', '3Hn', '3Hn'], ['AHn', 'ACn', 'ACn', '*Cn']];
	take_turn_fen();
}
function ferro() {
	const rankstr = '23456789TJQKA*';
	function setup(players, options) {
		let fen = { players: {}, plorder: jsCopy(players), history: [] };
		options.jokers_per_group = 1;
		fen.allGoals = ['7R', '55', '5', '44', '4', '33', '3'];
		fen.availableGoals = options.maxrounds == 1 ? [rChoose(fen.allGoals)] : options.maxrounds < 7 ? rChoose(fen.allGoals, options.maxrounds) : fen.allGoals;
		fen.availableGoals.sort((a, b) => fen.allGoals.indexOf(a) - fen.allGoals.indexOf(b));
		fen.roundGoals = arrReverse(fen.availableGoals);
		let n = players.length;
		let num_decks = fen.num_decks = 2 + (n >= 9 ? 2 : n >= 7 ? 1 : 0);
		let deck = fen.deck = create_fen_deck('n', num_decks, 4 * num_decks);
		let deck_discard = fen.deck_discard = [];
		shuffle(deck);
		if (DA.TESTING != true) { shuffle(fen.plorder); shuffle(fen.plorder); }
		let starter = fen.plorder[0];
		let handsize = valf(Number(options.handsize), 11);
		for (const plname of players) {
			let pl = fen.players[plname] = {
				hand: deck_deal(deck, plname == starter ? handsize + 1 : handsize),
				journeys: [],
				roundgoal: false,
				coins: options.coins,
				vps: 0,
				score: 0,
				name: plname,
				color: get_user_color(plname),
			};
			pl.goals = {};
			for (const g of fen.availableGoals) { pl.goals[g] = 0; }
		}
		fen.phase = '';
		[fen.stage, fen.turn] = ['card_selection', [starter]];
		return fen;
	}
	function activate_ui() { ferro_activate_ui(); }
	function check_gameover() { return isdef(Z.fen.winners) ? Z.fen.winners : false; }
	function clear_ack() {
		if (Z.stage == 'round_end') { start_new_round_ferro(); take_turn_fen(); }
		else if (Z.stage != 'card_selection') {
			for (const plname of Z.fen.canbuy) {
				let pldata = firstCond(Z.playerdata, x => x.name == plname);
				if (isdef(pldata) && lookup(pldata, ['state', 'buy']) == true) {
					Z.fen.buyer = plname;
					break;
				}
			}
			Z.stage = 'can_resolve';
			ferro_change_to_card_selection();
		}
	}
	function present(dParent) { ferro_present(dParent); }
	function stats(dParent) { ferro_stats(dParent); }
	function state_info(dParent) { ferro_state(dParent); }
	return { rankstr, setup, activate_ui, check_gameover, clear_ack, present, state_info, stats };
}
function ferro_ack_uplayer() { if (Z.mode == 'multi') { ferro_ack_uplayer_multi(); } else { ferro_ack_uplayer_hotseat(); } }
function ferro_ack_uplayer_hotseat() {
	let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];
	let buy = !isEmpty(A.selected) && A.selected[0] == 0;
	if (buy || uplayer == fen.lastplayer) { fen.buyer = uplayer;[Z.turn, Z.stage] = [[get_multi_trigger()], 'can_resolve']; }
	else { Z.turn = [get_next_in_list(uplayer, fen.canbuy)]; }
	take_turn_fen();
}
function ferro_ack_uplayer_multi() {
	let [A, uplayer] = [Z.A, Z.uplayer];
	stopPolling();
	let o_pldata = Z.playerdata.find(x => x.name == uplayer);
	Z.state = o_pldata.state = { buy: !isEmpty(A.selected) && A.selected[0] == 0 };
	let can_resolve = ferro_check_resolve();
	if (can_resolve) {
		assertion(Z.stage == 'buy_or_pass', 'stage is not buy_or_pass when checking can_resolve!');
		Z.stage = 'can_resolve';
		[Z.turn, Z.stage] = [[get_multi_trigger()], 'can_resolve'];
		take_turn_fen_write();
	} else { take_turn_multi(); }
}
function ferro_activate_ui() { ferro_pre_action(); }
function ferro_change_to_ack_round() {
	let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer];
	let nextplayer = get_next_player(Z, uplayer);
	let newturn = jsCopy(plorder); while (newturn[0] != nextplayer) { newturn = arrCycle(newturn, 1); }
	let buyerlist = fen.canbuy = [];
	for (const plname of newturn) {
		let pl = fen.players[plname];
		if (plname == uplayer) { pl.buy = false; continue; }
		else if (pl.coins > 0) { pl.buy = false; buyerlist.push(plname); }
	}
	start_simple_ack_round('buy_or_pass', buyerlist, nextplayer, 'ferro_change_to_turn_round');
}
function ferro_change_to_buy_pass() {
	let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer];
	let nextplayer = get_next_player(Z, uplayer);
	let newturn = jsCopy(plorder); while (newturn[0] != nextplayer) { newturn = arrCycle(newturn, 1); }
	fen.canbuy = newturn.filter(x => x != uplayer && fen.players[x].coins > 0);
	fen.trigger = uplayer;
	fen.buyer = null;
	fen.nextturn = [nextplayer];
	if (isEmpty(fen.canbuy)) { Z.stage = 'can_resolve'; ferro_change_to_card_selection(); return; }
	else if (Z.mode == 'multi') { [Z.stage, Z.turn] = ['buy_or_pass', fen.canbuy]; fen.keeppolling = true; take_turn_fen_clear(); }
	else {
		fen.canbuy.map(x => fen.players[x].buy = 'unset');
		fen.lastplayer = arrLast(fen.canbuy);
		[Z.stage, Z.turn] = ['buy_or_pass', [fen.canbuy[0]]];
		take_turn_fen();
	}
}
function ferro_change_to_card_selection() {
	let [fen, stage] = [Z.fen, Z.stage];
	assertion(stage != 'card_selection', "ALREADY IN TURN ROUND!!!!!!!!!!!!!!!!!!!!!!");
	assertion(stage == 'can_resolve', "change to card_selection: NOT IN can_resolve stage!!!!!!!!!!!!!!!!!!!!!!");
	assertion(Z.uplayer == 'mimi' || Z.uplayer == fen.trigger, "mixup uplayer in change_to_card_selection!!!!!!!!!!!!!!!!!!!!!!");
	if (isdef(fen.buyer)) {
		let plname = fen.buyer;
		let pl = fen.players[plname];
		let card = fen.deck_discard.shift();
		pl.hand.push(card);
		lookupAddToList(pl, ['newcards'], card);
		deck_deal_safe_ferro(fen, plname, 1);
		pl.coins -= 1;
		ari_history_list([`${plname} bought ${card}`], 'buy');
	}
	let nextplayer = fen.nextturn[0];
	deck_deal_safe_ferro(fen, nextplayer, 1);
	Z.turn = fen.nextturn;
	Z.stage = 'card_selection';
	for (const k of ['buyer', 'canbuy', 'nextturn', 'trigger', 'lastplayer']) delete fen[k];
	delete fen.keeppolling;
	clear_transaction();
	take_turn_fen();
}
function ferro_change_to_turn_round() {
	let [z, A, fen, stage, uplayer, ui] = [Z, Z.A, Z.fen, Z.stage, Z.uplayer, UI];
	assertion(stage == 'buy_or_pass', "ALREADY IN TURN ROUND!!!!!!!!!!!!!!!!!!!!!!");
	for (const plname of fen.canbuy) {
		let pl = fen.players[plname];
		if (pl.buy == true) {
			let card = fen.deck_discard.shift();
			pl.hand.push(card);
			deck_deal_safe_ferro(fen, plname, 1);
			pl.coins -= 1;
			ari_history_list([`${plname} bought ${card}`], 'buy');
			break;
		}
	}
	deck_deal_safe_ferro(fen, fen.nextplayer, 1);
	Z.turn = fen.turn_after_ack;
	Z.stage = 'card_selection';
	clear_ack_variables();
	for (const k of ['canbuy']) delete fen[k];
	for (const plname of fen.plorder) { delete fen.players[plname].buy; }
	clear_transaction();
}
function ferro_check_resolve() {
	let [pldata, stage, A, fen, plorder, uplayer, deck, turn] = [Z.playerdata, Z.stage, Z.A, Z.fen, Z.plorder, Z.uplayer, Z.deck, Z.turn];
	let pl = fen.players[uplayer];
	assertion(stage == 'buy_or_pass', "check_resolve NOT IN buy_or_pass stage!!!!!!!!!");
	assertion(isdef(pldata), "no playerdata in buy_or_pass stage!!!!!!!!!!!!!!!!!!!!!!!");
	let done = true;
	for (const plname of turn) {
		let data = firstCond(pldata, x => x.name == plname);
		assertion(isdef(data), 'no pldata for', plname);
		let state = data.state;
		if (isEmpty(state)) done = false;
		else if (state.buy == true) fen.buyer = plname;
		else continue;
		break;
	}
	return done;
}
function ferro_get_card(ckey, h, w, ov = .25) {
	let type = ckey[2];
	let info = ckey[0] == '*' ? get_joker_info() : jsCopy(C52Cards[ckey.substring(0, 2)]);
	info.key = ckey;
	info.cardtype = ckey[2];
	let [r, s] = [info.rank, info.suit];
	info.val = r == '*' ? 50 : r == 'A' ? 20 : 'TJQK'.includes(r) ? 10 : Number(r);
	info.color = RED;
	info.sz = info.h = valf(h, Config.ui.card.h);
	info.w = valf(w, info.sz * .7);
	info.irank = '23456789TJQKA*'.indexOf(r);
	info.isuit = 'SHCDJ'.indexOf(s);
	info.isort = info.isuit * 14 + info.irank;
	let card = cardFromInfo(info, h, w, ov);
	return card;
}
function ferro_is_set(cards, max_jollies_allowed = 1, seqlen = 7, group_same_suit_allowed = true) {
	if (cards.length < 3) return false;
	let num_jollies_in_cards = cards.filter(x => is_joker(x)).length;
	if (num_jollies_in_cards > max_jollies_allowed) return false;
	cards = sortCardItemsByRank(cards.map(x => x), rankstr = '23456789TJQKA*');
	let rank = cards[0].rank;
	let isgroup = cards.every(x => x.rank == rank || is_joker(x));
	let suits = cards.filter(x => !is_joker(x)).map(x => x.suit);
	let num_duplicate_suits = suits.filter(x => suits.filter(y => y == x).length > 1).length;
	if (isgroup && !group_same_suit_allowed && num_duplicate_suits > 0) return false;
	else if (isgroup) return cards.map(x => x.key);
	let suit = cards[0].suit;
	if (!cards.every(x => is_jolly(x.key) || x.suit == suit)) return false;
	let keys = cards.map(x => x.key);
	if (keys.length != new Set(keys).size) return false;
	let at_most_jollies = Math.min(num_jollies_in_cards, max_jollies_allowed);
	let num_jolly = sortCardItemsToSequence(cards, rankstr = '23456789TJQKA', at_most_jollies);
	let cond1 = num_jolly <= at_most_jollies;
	let cond2 = cards.length >= seqlen;
	if (cond1 && cond2) return cards.map(x => x.key); else return false;
}
function ferro_pre_action() {
	let [stage, A, fen, plorder, uplayer, deck] = [Z.stage, Z.A, Z.fen, Z.plorder, Z.uplayer, Z.deck];
	switch (stage) {
		case 'can_resolve': if (Z.options.auto_weiter) ferro_change_to_card_selection(); else { select_add_items(ui_get_string_items(['weiter']), ferro_change_to_card_selection, 'may click to continue', 1, 1, Z.mode == 'multi'); select_timer(2000, ferro_change_to_card_selection); } break;
		case 'buy_or_pass': if (!is_playerdata_set(uplayer)) { select_add_items(ui_get_buy_or_pass_items(), ferro_ack_uplayer, 'may click discard pile to buy or pass', 1, 1); if (uplayer != 'nasi') select_timer(Z.options.thinking_time * 1000, ferro_ack_uplayer); } break;
		case 'card_selection': select_add_items(ui_get_ferro_items(uplayer), fp_card_selection, 'must select one or more cards', 1, 100); break;
		default: console.log('stage is', stage); break;
	}
}
function ferro_present(dParent) {
	if (DA.simulate == true) show('bRestartMove'); else hide('bRestartMove');
	let [fen, ui, uplayer, stage, pl] = [Z.fen, UI, Z.uplayer, Z.stage, Z.pl];
	let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent);
	ferro_stats(dRechts);
	show_history(fen, dRechts);
	let deck = ui.deck = ui_type_deck(fen.deck, dOpenTable, { maleft: 12 }, 'deck', 'deck', ferro_get_card);
	let deck_discard = ui.deck_discard = ui_type_deck(fen.deck_discard, dOpenTable, { maleft: 12 }, 'deck_discard', '', ferro_get_card);
	if (!isEmpty(deck_discard.items)) face_up(deck_discard.get_topcard());
	order = get_present_order();
	for (const plname of order) {
		let pl = fen.players[plname];
		let playerstyles = { w: '100%', bg: '#ffffff80', fg: 'black', padding: 4, margin: 4, rounding: 10, border: `2px ${get_user_color(plname)} solid` };
		let d = mDiv(dMiddle, playerstyles, null, get_user_pic_html(plname, 25));
		mFlexWrap(d);
		mLinebreak(d, 10);
		let hidden = compute_hidden(plname);
		ferro_present_player(plname, d, hidden);
	}
	Z.isWaiting = false;
	if (Z.stage == 'round_end') {
		show_waiting_for_ack_message();
		if (Z.role == 'active' || i_am_host()) {
			show('bClearAck');
		}
	} else if (Z.stage == 'buy_or_pass' && uplayer == fen.trigger && ferro_check_resolve()) {
		assertion(Z.stage == 'buy_or_pass', 'stage is not buy_or_pass when checking can_resolve!');
		Z.stage = 'can_resolve';
		[Z.turn, Z.stage] = [[get_multi_trigger()], 'can_resolve'];
		take_turn_fen(); return;
	} else if (Z.stage == 'buy_or_pass' && (Z.role != 'active' || is_playerdata_set(uplayer))) {
		assertion(isdef(Z.playerdata), 'playerdata is not defined in buy_or_pass (present ferro)');
		let pl_not_done = Z.playerdata.filter(x => Z.turn.includes(x.name) && isEmpty(x.state)).map(x => x.name);
		show_waiting_message(`waiting for possible buy decision...`);
		Z.isWaiting = true;
	}
	show_handsorting_buttons_for(Z.mode == 'hotseat' ? Z.uplayer : Z.uname, { bottom: -2 });
	new_cards_animation();
}
function ferro_present_new(z, dParent, uplayer) {
	let [fen, ui, stage] = [z.fen, UI, z.stage];
	let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent);
	ferro_stats_new(z, dRechts);
	show_history(fen, dRechts);
	let deck = ui.deck = ui_type_deck(fen.deck, dOpenTable, { maleft: 12 }, 'deck', 'deck', ferro_get_card);
	let deck_discard = ui.deck_discard = ui_type_deck(fen.deck_discard, dOpenTable, { maleft: 12 }, 'deck_discard', '', ferro_get_card);
	if (!isEmpty(deck_discard.items)) face_up(deck_discard.get_topcard());
	let uname_plays = fen.plorder.includes(Z.uname);
	let show_first = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;
	order = arrCycle(fen.plorder, fen.plorder.indexOf(show_first));
	for (const plname of order) {
		let pl = fen.players[plname];
		let playerstyles = { w: '100%', bg: '#ffffff80', fg: 'black', padding: 4, margin: 4, rounding: 10, border: `2px ${get_user_color(plname)} solid` };
		let d = mDiv(dMiddle, playerstyles, null, get_user_pic_html(plname, 25));
		mFlexWrap(d);
		mLinebreak(d, 10);
		let hidden = compute_hidden(plname);
		ferro_present_player_new(z, plname, d, hidden);
	}
}
function ferro_present_player(plname, d, ishidden = false) {
	let fen = Z.fen;
	let pl = fen.players[plname];
	let ui = UI.players[plname] = { div: d };
	Config.ui.card.h = ishidden ? 100 : 150;
	Config.ui.container.h = Config.ui.card.h + 30;
	if (!ishidden) pl.hand = correct_handsorting(pl.hand, plname);
	let hand = ui.hand = ui_type_hand(pl.hand, d, {}, `players.${plname}.hand`, 'hand', ferro_get_card);
	if (ishidden) { hand.items.map(x => face_down(x)); }
	ui.journeys = [];
	let i = 0;
	for (const j of pl.journeys) {
		let jui = ui_type_lead_hand(j, d, { maleft: 12, h: 130 }, `players.${plname}.journeys.${i}`, '', ferro_get_card);
		i += 1;
		ui.journeys.push(jui);
	}
}
function ferro_present_player_new(g, plname, d, ishidden = false) {
	let fen = g.fen;
	let pl = fen.players[plname];
	let ui = UI.players[plname] = { div: d };
	Config.ui.card.h = ishidden ? 100 : 150;
	Config.ui.container.h = Config.ui.card.h + 30;
	if (isdef(pl.handsorting)) {
		let bysuit = pl.handsorting.by == 'suit';
		let [arr1, arr2] = arrSplitAtIndex(pl.hand, pl.handsorting.n - 1);
		pl.hand = sort_cards(arr1, bysuit, 'CDSH', true, '23456789TJQKA*').concat(arr2);
	}
	let hand = ui.hand = ui_type_hand(pl.hand, d, {}, `players.${plname}.hand`, 'hand', ferro_get_card);
	if (ishidden) { hand.items.map(x => face_down(x)); }
	else {
		ensure_buttons_visible_for(Z.mode == 'hotseat' ? Z.uplayer : Z.uname);
	}
	ui.journeys = [];
	let i = 0;
	for (const j of pl.journeys) {
		let jui = ui_type_lead_hand(j, d, { maleft: 12, h: 130 }, `players.${plname}.journeys.${i}`, '', ferro_get_card);
		i += 1;
		ui.journeys.push(jui);
	}
}
function ferro_process_discard() {
	let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer];
	let pl = fen.players[uplayer];
	if (!isEmpty(pl.journeys) && !pl.roundgoal) {
		let goal = is_fixed_goal() ? get_round_goal() : calc_ferro_highest_goal_achieved(pl);
		pl.roundgoal = goal;
		pl.goals[goal] = true;
		ari_history_list([`${pl.name} achieved goal ${pl.roundgoal}`], 'achieve');
	}
	let c = A.selectedCards[0].key;
	elem_from_to_top(c, fen.players[uplayer].hand, fen.deck_discard);
	ari_history_list([`${uplayer} discards ${c}`], 'discard');
	if (fen.players[uplayer].hand.length == 0) { end_of_round_ferro(); } else ferro_change_to_buy_pass();
}
function ferro_process_jolly(key, j) {
	let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer];
	let a = key;
	let b = j.find(x => x[0] == '*');
	arrReplace1(fen.players[uplayer].hand, a, b);
	replace_jolly(key, j);
	ari_history_list([`${uplayer} replaces for jolly`], 'jolly');
	Z.stage = 'card_selection';
}
function ferro_process_set(keys) {
	let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];
	if (is_group(keys)) {
		keys = sort_cards(keys, true, 'CDSH', true, '23456789TJQKA*');
	}
	let j = [];
	keys.map(x => elem_from_to(x, fen.players[uplayer].hand, j));
	fen.players[uplayer].journeys.push(j);
	ari_history_list([`${uplayer} reveals ${j.join(', ')}`], 'auflegen');
	Z.stage = 'card_selection';
}
function ferro_state(dParent) {
	if (DA.TEST0 == true) {
		let html = `${Z.stage}`;
		if (isdef(Z.playerdata)) {
			let trigger = get_multi_trigger();
			if (trigger) html += ` trigger:${trigger}`;
			for (const data of Z.playerdata) {
				if (data.name == trigger) continue;
				let name = data.name;
				let state = data.state;
				let s_state = object2string(state);
				html += ` ${name}:'${s_state}'`;
			}
			dParent.innerHTML += ` ${Z.playerdata.map(x => x.name)}`;
		}
		dParent.innerHTML = html;
		return;
	}
	if (Z.stage == 'round_end') {
		dParent.innerHTML = `Round ${Z.round} ended by &nbsp;${get_user_pic_html(Z.fen.round_winner, 30)}`;
	} else if (is_fixed_goal()) {
		let goal = get_round_goal();
		console.log('goal', goal);
		let goal_html = `<div style="font-weight:bold;border-radius:50%;background:white;color:red;line-height:100%;padding:4px 8px">${goal}</div>`;
		dParent.innerHTML = `Round ${Z.round}:&nbsp;&nbsp;minimum:&nbsp;${goal_html}`;
	} else {
		let user_html = get_user_pic_html(Z.stage == 'buy_or_pass' ? Z.fen.nextturn[0] : Z.turn[0], 30);
		dParent.innerHTML = `Round ${Z.round}:&nbsp;${Z.stage == 'buy_or_pass' ? 'next ' : ''}turn: ${user_html} `;
	}
}
function ferro_state_new(dParent) {
	if (is_fixed_goal()) {
		let goal = get_round_goal();
		let goal_html = `<div style="font-weight:bold;border-radius:50%;background:white;color:red;line-height:100%;padding:4px 8px">${goal}</div>`;
		dParent.innerHTML = `Round ${Z.round}:&nbsp;&nbsp;minimum:&nbsp;${goal_html}`;
	} else {
		let user_html = get_user_pic_html(Z.stage == 'buy_or_pass' ? Z.fen.turn_after_ack[0] : Z.turn[0], 30);
		dParent.innerHTML = `Round ${Z.round}:&nbsp;${Z.stage == 'buy_or_pass' ? 'next ' : ''}turn: ${user_html} `;
	}
}
function ferro_stats(dParent) {
	let player_stat_items = UI.player_stat_items = ui_player_info(dParent);
	let fen = Z.fen;
	for (const plname in fen.players) {
		let pl = fen.players[plname];
		let item = player_stat_items[plname];
		let d = iDiv(item); mCenterFlex(d); mStyle(d, { wmin: 150 }); mLinebreak(d);
		player_stat_count('coin', pl.coins, d);
		player_stat_count('pinching hand', pl.hand.length, d);
		if (!compute_hidden(plname)) player_stat_count('hand with fingers splayed', calc_hand_value(pl.hand), d);
		player_stat_count('star', pl.score, d);
		mLinebreak(d, 4);
		if (!is_fixed_goal()) {
			let d2 = mDiv(d, { padding: 4, display: 'flex' }, `d_${plname}_goals`);
			if (fen.availableGoals.length < 4) { mStyle(d2, { wmin: 120 }); mCenterFlex(d2); }
			let sz = 16;
			let styles_done = { h: sz, fz: sz, maleft: 6, fg: 'grey', 'text-decoration': 'line-through green', weight: 'bold' };
			let styles_todo = { h: sz, fz: sz, maleft: 6, border: 'red', weight: 'bold', padding: 4, 'line-height': sz };
			for (const k of fen.roundGoals) {
				mText(k, d2, pl.goals[k] ? styles_done : styles_todo);
			}
		}
		if (fen.turn.includes(plname)) { show_hourglass(plname, d, 30, { left: -3, top: 0 }); }
	}
}
function ferro_stats_new(z, dParent) {
	let player_stat_items = UI.player_stat_items = ui_player_info(z, dParent);
	let fen = z.fen;
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		let item = player_stat_items[plname];
		let d = iDiv(item); mCenterFlex(d); mLinebreak(d);
		player_stat_count('coin', pl.coins, d);
		player_stat_count('pinching hand', pl.hand.length, d);
		if (!compute_hidden(plname)) player_stat_count('hand with fingers splayed', calc_hand_value(pl.hand), d);
		player_stat_count('star', pl.score, d);
		mLinebreak(d, 4);
		if (!is_fixed_goal()) {
			let d2 = mDiv(d, { padding: 4, display: 'flex' }, `d_${plname}_goals`);
			let sz = 16;
			let styles_done = { h: sz, fz: sz, maleft: 6, fg: 'grey', 'text-decoration': 'line-through green', weight: 'bold' };
			let styles_todo = { h: sz, fz: sz, maleft: 6, border: 'red', weight: 'bold', padding: 4, 'line-height': sz };
			for (const k in pl.goals) {
				mText(k, d2, pl.goals[k] ? styles_done : styles_todo);
			}
		}
		if (fen.turn.includes(plname)) { show_hourglass(plname, d, 30, { left: -3, top: 0 }); }
	}
}
function ferro_transaction_error() {
	let d = mDiv(dError, { padding: 10, align: 'center' }, null, `Illegal turn sequence - transaction cannot be completed!!!<br>press reload and try again!<br>`);
	mButton('RELOAD', onclick_reload, d, { margin: 10 });
	clear_transaction();
}
function ferro_ut0_create_staged() {
	console.log('*** test ferro 0: buy_or_pass with no coins ***');
	DA.test.number = 0;
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);
	let pl = fen.players[otherplayer];
	pl.coins = 0;
	DA.fen0 = fen;
	DA.auto_moves = [[],
	[['visit'], ['last'], [0]],
	[['visit'], ['last'], [1]],
	[['pass']],
	];
	return [fen, player_names];
}
async function fetch_wrapper(url) { return await fetch(url); }
async function fetch_wrapper_NO(url) {
	route_counter += 1;
	if (SHOW_SERVER_ROUTE) consOutput(route_counter + ': route:' + url);
	let res = await fetch(url).then((response) => {
		if (response.status === 200) {
			if (SHOW_SERVER_RETURN) consOutput(route_counter + ': return:', response);
		} else {
			throw new Error('Something went wrong');
		}
	}).catch((error) => {
		console.log(error)
	});
	return res;
}
async function fetchFileAsText(url) {
	let f = await fetch(url);
	let txt = await f.text();
	return txt;
}
function fiddleAdd(dParent, content, idx) {
	let ta = AU.ta = mTextarea(3, null, dParent, { fz: 16, padding: 10, family: 'tahoma', w: '100%', box: true });
	ta.addEventListener('keydown', fiddleControlHandler);
	ta.addEventListener('keydown', fiddleEnterResize);
	DA.tribute.attach(ta);
	DA.tas.push(ta);
	ta.addEventListener('tribute-replaced', fiddleMessageHandler);
	if (isdef(content)) ta.value = content;
	if (isdef(idx)) mInsertAt(dParent, ta, idx);
	ta.focus();
}
function fiddleControlHandler(ev) {
	if (ev.ctrlKey) {
		let instance = DA.tribute;
		instance.isActive = false;
		instance.hideMenu();
		if (ev.key == 'Enter') {
			runcode(ev.target.value);
		} else if (ev.key == '+' || ev.key == '=') {
			evStop(ev);
			fiddleAdd(dFiddle);
		} else if (ev.key == '-' || ev.key == '_') {
			evStop(ev);
			let empty = DA.tas.filter(x => isEmptyOrWhiteSpace(x.value));
			let elfocus = document.activeElement;
			let nofocus = false;
			for (const ta of empty) { if (ta == elfocus) nofocus = true; ta.remove(); }
			DA.tas = arrMinus(DA.tas, empty);
			if (isEmpty(DA.tas)) fiddleAdd(dFiddle);
			else if (nofocus) { AU.ta = DA.tas[0]; AU.ta.focus(); }
		} else if (ev.key == 'ArrowDown') {
			let ta = AU.ta = arrNext(DA.tas, AU.ta);
			ta.focus();
		} else if (ev.key == 'ArrowUp') {
			let ta = AU.ta = arrPrev(DA.tas, AU.ta);
			ta.focus();
		}
	}
}
function fiddleEnterResize(ev) {
	if (ev.key == 'Enter') {
		console.log('hallo!');
		let ta = ev.target;
		let x = ta.value;
		let lines = x.split('\n');
		let min = lines.length + 1;
		let coords = getCaretCoordinates(ta, ta.selectionEnd);
		console.log('coords', coords, 'window height', window.innerHeight)
		if (coords.top + 60 < window.innerHeight && (nundef(ta.rows) || ta.rows < min)) ta.rows = min;
	}
}
function fiddleInit(dParent, dParentConsole) {
	dFiddle = valf(dParent, dTable);
	dMessage = mDiv(dFiddle, { w: '100%', bg: 'dimgray', fg: 'yellow', box: true, hpadding: 10 }, 'dMessage', 'enter code:');
	getGlobals();
	let list = Globals.function.map(x => ({ key: x.key, value: x.key + '(' }));
	DA.tas = [];
	var tributeAttributes = {
		autocompleteMode: true,
		noMatchTemplate: () => {
			return '<span style:"visibility: hidden;"></span>';
		},
		values: fiddleSearch,
		selectTemplate: function (item) {
			if (typeof item === 'undefined') return null;
			if (this.range.isContentEditable(this.current.element)) {
				return '<span contenteditable="false"><a>' + item.original.key + '</a></span>';
			}
			return item.original.value;
		},
		menuItemTemplate: function (item) {
			return item.string;
		},
		replaceTextSuffix: '(',
		menuShowMinLength: 1,
	};
	var trib = DA.tribute = new Tribute(Object.assign({ menuContainer: dParent, }, tributeAttributes));
	let saved = localStorage.getItem('codelist');
	let codelist = saved ? JSON.parse(saved) : [];
	if (codelist.length == 0) codelist = [`console.log('hallo');`];
	for (const code of codelist) {
		fiddleAdd(dFiddle, code);
	}
	setTimeout(() => dFiddle.children[0].focus(), 100);
}
function fiddleMessageHandler(ev) {
	let key = ev.detail.item.original.key;
	let item = window[key];
	if (typeof item == 'function') {
		let d = mBy('dMessage');
		d.innerHTML = stringBefore(item.toString(), ') {') + ')';
	}
}
function fiddleSave() {
	if (isdef(dFiddle)) {
		let codelist = arrChildren(dFiddle).slice(1).filter(x => !isEmptyOrWhiteSpace(x.value)).map(x => x.value);
		localStorage.setItem('codelist', JSON.stringify(codelist));
		lookupSetOverride(DB, ['env', 'fiddle'], codelist);
	} else console.log('fiddle closed - not saved')
}
function fiddleSearch(text, callback) {
	console.log('text', text)
	let list = Globals.function;
	let list1 = list.filter(x => startsWith(x.key, text));
	callback(list1);
}
function fieldSorter() {
	return (a, b) => fields
		.map(o => {
			let dir = 1;
			if (o[0] === '-') {
				dir = -1;
				o = o.substring(1);
			}
			return a[o] > b[o] ? dir : a[o] < b[o] ? -dir : 0;
		})
		.reduce((p, n) => (p ? p : n), 0);
}
function fillCharInput(inp, ch) {
	let d = iDiv(inp);
	d.innerHTML = ch;
	mRemoveClass(d, 'blink');
}
function fillColarr(colarr, items) {
	let i = 0;
	let result = [];
	for (const r of colarr) {
		let arr = [];
		for (let c = 0; c < r; c++) {
			arr.push(items[i]); i++;
		}
		result.push(arr);
	}
	return result;
}
function fillout_boa_login() {
	let data = DIBOA.bw_info.boa;
	let elem_userid = get_boa_userid_input();
	let elem_pwd = get_boa_pwd_input();
	elem_userid.value = data.userid;
	elem_pwd.value = data.pwd;
}
function filter_codebase() {
	let words = toWords(mBy('iKeywords').value);
	console.log('filter_codebase: keywords are', words);
	let di = CODE.funcs;
	let di_values = get_values(di);
	let records = di_values.filter(x => x.body.includes(words[0]));
	console.log('records', records)
	AU.ta.value = '';
	for (const r of records) {
		let k = r.name;
		AU.ta.value += di[k].body + '\n';
	}
}
function filter_list() {
	let words = toWords(mBy('iKeywords').value);
	console.log('filter_list: keywords are', words);
	let di = CODE.funcs;
	let di_values = get_values(di);
	let records = di_values.filter(x => x.body.includes(words[0]));
	console.log('records', records)
	mClear(dSidebar)
	for (const rec of records) {
		let key = rec.name;
		let d = mDiv(dSidebar, { cursor: 'pointer', wmin: 100 }, null, key, 'hop1')
		let info = rec.body;
		d.onclick = () => AU.ta.value = info;
	}
}
function filter_sig() {
	let words = toWords(mBy('iKeywords').value);
	console.log('filter_sig: keywords are', words);
	let di = CODE.funcs;
	let di_values = get_values(di);
	let records = di_values.filter(x => x.body.includes(words[0]));
	console.log('records', records)
	AU.ta.value = '';
	for (const r of records) {
		let k = r.name;
		AU.ta.value += di[k].sig + '\n';
	}
}
function filterByKey(o, desiredKeys) {
	let o1 = {};
	for (const k of desiredKeys) {
		if (isdef(o[k])) {
			o1[k] = o[k];
		}
	}
	return o1;
}
function filterByLength(w, min, max, allowSpaces = false) { return w.length <= max && w.length >= min && (allowSpaces || !w.includes(' ')); }
function filterByNoKey(o, undesiredKeys) {
	let o1 = {};
	for (const k in o) {
		if (undesiredKeys.includes(k)) continue;
		o1[k] = o[k];
	}
	return o1;
}
function filterDistinctLetters(s) {
	let arr = [];
	for (let i = 0; i < s.length; i++) {
		let ch = s[i];
		if (isLetter(ch) && !arr.includes(ch)) arr.push(ch);
	}
	return arr;
}
function filterStringFromTuples(strings, tuples) {
	let result = [];
	for (const t of tuples) {
		for (const s of t) {
			if (strings.includes(s)) {
				result.push(s);
			}
		}
	}
	return result;
}
function filterWordByLengthG(g, k, w, allowSpaces = false) {
	if (nundef(g.minWordLength)) g.minWordLength = 0;
	if (nundef(g.maxWordLength)) g.maxWordLength = 50;
	return filterByLength(w, g.minWordLength, g.maxWordLength, allowSpaces);
}
function find_card(index, ui_item) { return ui_item.items[index]; }
function find_common_ancestor(d1, d2) { return dTable; }
function find_index_of_jolly(j) { return j.findIndex(x => is_jolly(x)); }
function find_jolly_rank(j, rankstr = 'A23456789TJQKA') {
	let jolly_idx = find_index_of_jolly(j);
	if (jolly_idx == -1) return false;
	if (jolly_idx > 0) {
		let rank_before_index = j[jolly_idx - 1][0];
		let rank_needed = rankstr[rankstr.indexOf(rank_before_index) + 1];
		return rank_needed;
	} else {
		let rank_after_index = j[jolly_idx + 1][0];
		let rank_needed = rank_after_index == 'A' ? 'K' : rankstr[rankstr.indexOf(rank_after_index) - 1];
		return rank_needed;
	}
}
function find_journeys(fen, uplayer) {
	let h = fen.players[uplayer].hand;
	let seqs = find_sequences(h, 2, 'A23456789TJQK');
	if (!isEmpty(seqs)) return seqs;
	let existing_journeys = aggregate_player(fen, 'journeys');
	for (const j of existing_journeys) {
		let h1 = j.concat(h);
		let seqs1 = find_sequences(h1, j.length + 1, 'A23456789TJQK');
		if (!isEmpty(seqs1)) return seqs1;
	}
	return seqs;
}
function find_minimum(array) {
	let min = array[0];
	for (let i = 1; i < array.length; i++) {
		if (array[i] < min) min = array[i];
	}
	return min;
}
function find_minimum_by_function(array, func) {
	let min = func(array[0]);
	for (let i = 1; i < array.length; i++) {
		if (func(array[i]) < func(min)) min = array[i];
	}
	return min;
}
function find_next_loc_oid_with_existing_parent(locOids, sdata, R) {
	for (const oid of locOids) {
		let o = sdata[oid];
		let loc = o.loc;
		let parentID = loc;
		if (!isEmpty(R.rNodesOidKey[parentID])) return oid;
	}
	return null;
}
function find_players_with_max_score() {
	let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer];
	let maxscore = -Infinity;
	let maxscorepls = [];
	for (const plname of plorder) {
		let pl = fen.players[plname];
		if (pl.score > maxscore) { maxscore = pl.score; maxscorepls = [plname]; }
		else if (pl.score == maxscore) maxscorepls.push(plname);
	}
	return maxscorepls;
}
function find_players_with_min_score() {
	let [plorder, stage, A, fen, uplayer] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer];
	let minscore = Infinity;
	let minscorepls = [];
	for (const plname of plorder) {
		let pl = fen.players[plname];
		if (pl.score < minscore) { minscore = pl.score; minscorepls = [plname]; }
		else if (pl.score == minscore) minscorepls.push(plname);
	}
	return minscorepls;
}
function find_players_with_potential_journey(fen) {
	let res = [];
	for (const uplayer of fen.plorder) {
		if (isdef(fen.passed) && fen.passed.includes(uplayer)) continue;
		let j = find_journeys(fen, uplayer);
		if (!isEmpty(j)) res.push(uplayer);
	}
	return res;
}
function find_sequences(blatt, n = 2, rankstr = '23456789TJQKA', allow_cycle = false) {
	let suitlists = get_suitlists_sorted_by_rank(blatt, rankstr, true);
	let seqs = [];
	for (const lst of get_values(suitlists)) {
		let len = lst.length;
		if (len < n) continue;
		let l = allow_cycle ? lst.concat(lst) : lst;
		for (let istart = 0; istart < len; istart++) {
			let seq = [l[istart]];
			let i = istart;
			while (i + 1 < l.length && follows_in_rank(l[i], l[i + 1], rankstr)) {
				seq.push(l[i + 1]);
				i++;
			}
			if (seq.length >= n) seqs.push(seq);
		}
	}
	return seqs;
}
function find_shared_keys(keylist, keylists) {
	let shared = [];
	for (const keylist2 of keylists) {
		for (const key of keylist) {
			if (keylist2.includes(key)) {
				shared.push(key);
			}
		}
	}
	return shared;
}
function findAddress(kSelf, x, path) {
	let path1 = stringAfter(path, 'self');
	path1 = kSelf + path1;
	if (path1[0] != '.') path1 = '.' + path1;
	let x1 = calcAddressWithin(x, path1);
	return [x1.key, x1.obj];
}
function findAncestorElemOfType(el, type) {
	while (el) {
		let t = getTypeOf(el);
		if (t == type) break;
		el = el.parentNode;
	}
	return el;
}
function findAncestorElemWithParentOfType(el, type) {
	while (el && el.parentNode) {
		let t = getTypeOf(el);
		let tParent = getTypeOf(el.parentNode);
		if (tParent == type) break;
		el = el.parentNode;
	}
	return el;
}
function findAttributeInAncestors(elem, attr) {
	let val;
	while (elem && nundef(val = elem.getAttribute(attr))) { elem = elem.parentNode; }
	return val;
}
function findBiggestColorRange(rgbValues) {
	let rMin = Number.MAX_VALUE;
	let gMin = Number.MAX_VALUE;
	let bMin = Number.MAX_VALUE;
	let rMax = Number.MIN_VALUE;
	let gMax = Number.MIN_VALUE;
	let bMax = Number.MIN_VALUE;
	rgbValues.forEach((pixel) => {
		rMin = Math.min(rMin, pixel.r);
		gMin = Math.min(gMin, pixel.g);
		bMin = Math.min(bMin, pixel.b);
		rMax = Math.max(rMax, pixel.r);
		gMax = Math.max(gMax, pixel.g);
		bMax = Math.max(bMax, pixel.b);
	});
	const rRange = rMax - rMin;
	const gRange = gMax - gMin;
	const bRange = bMax - bMin;
	const biggestRange = Math.max(rRange, gRange, bRange);
	if (biggestRange === rRange) {
		return "r";
	} else if (biggestRange === gRange) {
		return "g";
	} else {
		return "b";
	}
}
function findChildOfType(type, parentElem) {
	let children = arrChildren(parentElem);
	for (const ch of children) {
		if (getTypeOf(ch) == type) return ch;
	}
	return null;
}
function findChildrenOfType(type, parentElem) {
	let children = arrChildren(parentElem);
	let res = [];
	for (const ch of children) {
		if (getTypeOf(ch) == type) res.push(ch);
	}
	return res;
}
function findChildWithClass(className, parentElem) {
	testHelpers(parentElem);
	let children = arrChildren(parentElem);
	for (const ch of children) {
		if (ch.classList.includes(className)) return ch;
	}
	return null;
}
function findChildWithId(id, parentElem) {
	testHelpers(parentElem);
	let children = arrChildren(parentElem);
	for (const ch of children) {
		if (ch.id == id) return ch;
	}
	return null;
}
function findClosestTile(fMetric, goalTile, tilenames) {
	let distances = tilenames.map(x => fMetric(x, goalTile));
	const indexOfMin = distances.indexOf(Math.min(...distances));
	let best = tilenames[indexOfMin];
	return best;
}
function findClosestTupleForItem(tuples, item, assets) {
	tuples = tuples.filter(x => x[0] == item.id);
	if (tuples.length == 0) return null;
	let tilenames = tuples.map(x => x[1]);
	let closestTile = findClosestTile((a, b) => assets.distanceBetweenTiles(a, b), item.goalTile, tilenames);
	let dCurrent = assets.distanceBetweenTiles(item.tile, item.goalTile);
	let dNew = assets.distanceBetweenTiles(closestTile, item.goalTile);
	if (dNew > dCurrent) {
		return null;
	}
	return firstCond(tuples, x => x[1] == closestTile);
}
function findClosestUnit(fMetric, goalTile, units) {
	let distances = units.map(x => fMetric(x.tile, goalTile));
	const indexOfMin = distances.indexOf(Math.min(...distances));
	let best = units[indexOfMin];
	return best;
}
function findCommonPrefix(s1, s2) {
	let i = 0;
	let res = '';
	while (i < s1.length && i < s2.length) {
		if (s1[i] != s2[i]) break; else res += s1[i];
		i += 1;
	}
	return res;
}
function findDescendantOfType(type, parent) {
	if (getTypeOf(parent) == type) return parent;
	let children = arrChildren(parent);
	if (isEmpty(children)) return null;
	for (const ch of children) {
		let res = findDescendantOfType(type, ch);
		if (res) return res;
	}
	return null;
}
function findDescendantWithId(id, parent) {
	if (parent.id == id) return parent;
	let children = arrChildren(parent);
	if (isEmpty(children)) return null;
	for (const ch of children) {
		let res = findDescendantWithId(id, ch);
		if (res) return res;
	}
	return null;
}
function findDOMAncestorOfType(elem, t = 'div') {
	let anc = elem.parentNode;
	while (MSCATS[getTypeOf(anc)] != t) { anc = anc.parentNode; }
	return anc;
}
function findDragTarget(ev) {
	let targetElem = ev.target;
	while (!targetElem.ondragover) targetElem = targetElem.parentNode;
	return targetElem;
}
function findFirst(arr, attr, val) {
	let matches = arr.filter(x => attr in x && x[attr] == val);
	return empty(matches) ? null : matches[0];
}
function findFirstListKey(o, childrenKeys) {
	for (const k in o) {
		let val = o[k];
		if (childrenKeys && childrenKeys.includes(k) || isList(val)) {
			return k;
		}
	}
	return null;
}
function findFreeWall(r1, walls) {
	r1 = isString(r1) ? Items[r1] : r1;
	if (nundef(walls)) {
		walls = [];
		for (const dir in r1.walls) {
			walls = walls.concat(r1.walls[dir]);
		}
	}
	walls = walls.filter(x => !x.door);
	return isEmpty(walls) ? null : chooseRandom(walls);
}
function findItemFromElem(items, elem) { let item = firstCond(items, x => iDiv(x) == elem); return item; }
function findItemFromEvent(items, ev) { return evToItemC(ev); }
function findItemFromKey(items, key) { return firstCond(items, x => x.key == key); }
function findKey(dict, val) { for (const k in dict) { if (dict[k] == val) return k; } }
function findKeys(s) { return SymKeys.filter(x => contains(x, s) || contains(Syms[x].E, s) || isdef(Syms[x].D) && contains(Syms[x].D, s)); }
function findLongestWord(arr) { return arr[arrMinMax(arr, x => x.length).imax]; }
function findMatch(odict, condList) {
	if (isListOfLiterals(condList)) condList = [condList];
	let Board = lastCondDictPlusKey(odict, x => {
		for (const tuple of condList) {
			if (x[tuple[0]] != tuple[1]) return false;
		}
		return true;
	});
	return Board;
}
function findOrCreateKeysForObjTypes(oids, R) {
	let keysForOids = {};
	for (const oid of oids) {
		let key = R.getR(oid);
		if (!isEmpty(key)) {
			keysForOids[oid] = key[0];
		} else {
			key = getUID();
			let o = R.getO(oid);
			let nSpec = R.lastSpec[key] = { cond: { obj_type: o.obj_type }, type: 'info' };
			R.addR(oid, key);
			let otype = o.obj_type;
			let sameTypeOids = oids.filter(x => R.getO(x).obj_type == otype);
			let oSuper = {};
			for (const oid1 of sameTypeOids) {
				let o1 = R.getO(oid1);
				for (const k1 in o1) {
					if (k1 == 'obj_type' || k1 == 'oid' || !isLiteral(o1[k1])) continue;
					if (isdef(oSuper[k1])) continue;
					oSuper[k1] = '.' + k1;
				}
			}
			let dataKeys = Object.keys(oSuper);
			if (dataKeys.length == 0) oSuper = 'X';
			else if (dataKeys.length == 1) oSuper = '.' + dataKeys[0];
			nSpec.data = oSuper;
			keysForOids[oid] = key;
			R.updateR(key);
		}
	}
	return keysForOids;
}
function findParentWithClass(elem, className) { while (elem && !mHasClass(elem, className)) { elem = elem.parentNode; } return elem; }
function findParentWithId(elem) { while (elem && !(elem.id)) { elem = elem.parentNode; } return elem; }
function findPool(id) {
	if (G.players[id]) return G.playersAugmented;
	else if (G.table[id]) return G.table;
}
function findSameSet(llst, lst) {
	for (const l of llst) {
		if (sameList(l, lst)) return l;
	}
	return null;
}
function findSuitableVoice(text, voiceDesc) {
	let voiceKey = 'david';
	if (currentLanguage == 'D') {
		voiceKey = 'deutsch';
	} else if (text.includes('bad')) {
		voiceKey = 'zira';
	} else if (voiceDesc == 'random') {
		voiceKey = chooseRandom(['david', 'zira', 'us', 'ukFemale', 'ukMale']);
	} else if (isdef(voiceNames[voiceDesc])) {
		voiceKey = voiceDesc;
	} else if (isdef(voiceDesc)) {
		let tryVoiceKey = firstCondDict(voiceNames, x => startWith(x, voiceDesc));
		if (tryVoiceKey) voiceKey = tryVoiceKey;
	}
	let voiceName = voiceNames[voiceKey];
	let voice = firstCond(voices, x => startsWith(x.name, voiceName));
	return [voiceKey, voice];
}
function findTable(createNew = false) {
	let idTables = U.tables;
	if (isdef(idTables)) {
		for (const id of idTables) {
			let t = DB.tables[id];
			if (t.game == Gamename) return id;
		}
	}
	return createNew ? createTable() : null;
}
function findWall(r1, r2) {
	for (const dir in r1.walls) {
		let walls = r1.walls[dir];
		for (const wall of walls) {
			if (wall.r2 == r2.id) return wall;
		}
	}
	return null;
}
function fintegral(exp) {
	return nerdamer(`integrate(${exp},x)`).buildFunction();
}
function fireClick(elem) {
	const evt = new Event("click", { "bubbles": true, "cancelable": false });
	elem.dispatchEvent(evt);
}
function fireKey(k, { control, alt, shift } = {}) {
	console.log('fireKey called!' + document.createEvent)
	if (document.createEvent) {
		console.log('fireKey: createEvent and node.dispatchEvent exist!!!', k, control, alt, shift);
		window.dispatchEvent(new KeyboardEvent('keypress', { key: '+', ctrlKey: true }));
	} else if (document.createEventObject) {
		console.log('fireClick: createEventObject and node.fireEvent exist!!!', node)
		node.fireEvent('onclick');
	} else if (typeof node.onclick == 'function') {
		console.log('fireClick: node.onclick exists!!!', node)
		node.onclick();
	}
}
function fireWheel(node) {
	if (document.createEvent) {
		var evt = document.createEvent('MouseEvents');
		evt.initEvent('wheel', true, false);
		console.log('fireClick: createEvent and node.dispatchEvent exist!!!', node)
		node.dispatchEvent(evt);
	} else if (document.createEventObject) {
		console.log('fireClick: createEventObject and node.fireEvent exist!!!', node)
		node.fireEvent('onclick');
	} else if (typeof node.onclick == 'function') {
		console.log('fireClick: node.onclick exists!!!', node)
		node.onclick();
	}
}
function first(arr) {
	return arr.length > 0 ? arr[0] : null;
}
function firstCond(arr, func) {
	if (nundef(arr)) return null;
	for (const a of arr) {
		if (func(a)) return a;
	}
	return null;
}
function firstCond_super_inefficient(arr, func) {
	let res = arr.filter(x => func(x));
	return res.length > 0 ? res[0] : null;
}
function firstCondDict(dict, func) {
	for (const k in dict) { if (func(dict[k])) return k; }
	return null;
}
function firstCondDictKey() { return firstCondDictKeys(...arguments); }
function firstCondDictKeys(dict, func) {
	for (const k in dict) { if (func(k)) return k; }
	return null;
}
function firstCondDictKV(dict, func) {
	for (const k in dict) { if (func(k, dict[k])) return k; }
	return null;
}
function firstCondDictReturnVal(dict, func) {
	for (const k in dict) { if (func(dict[k])) return dict[k]; }
	return null;
}
function firstCondX(ad, func, keysSorted) {
	if (nundef(ad)) return null;
	else if (isDict(ad)) {
		if (isdef(keysSorted)) {
			for (const k of keysSorted) {
				let v = ad[k];
				if (func(v)) { if (nundef(v.key)) v.key = k; return v; }
			}
		} else {
			for (const k in ad) {
				let v = ad[k];
				if (func(v)) { if (nundef(v.key)) v.key = k; return v; }
			}
		}
	} else {
		for (const a of ad) { if (func(a)) return a; }
	}
	return null;
}
function firstElement(x) {
	if (isSet(x)) return x.set[0];
	else if (isTuple(x)) return x[0];
	else return null;
}
function firstFloat(s) {
	if (s) {
		let m = s.match(/-?.?\d+/);
		if (m) {
			let sh = m.shift();
			if (sh) { return Number(sh); }
		}
	}
	return null;
}
function firstNCond(n, arr, func) {
	if (nundef(arr)) return [];
	let result = [];
	let cnt = 0;
	for (const a of arr) {
		cnt += 1; if (cnt > n) break;
		if (func(a)) result.push(a);
	}
	return result;
}
function firstNumber(s) {
	if (s) {
		let m = s.match(/-?\d+/);
		if (m) {
			let sh = m.shift();
			if (sh) { return Number(sh); }
		}
	}
	return null;
}
function firstPositiveNumber(s) {
	return s ? Number(s.match(/\d+/).shift()) : -1;
}
function firstWord(s, allow_ = false) { return toWords(s, allow_)[0]; }
function firstWordAfter(s, sub, allow_ = false) {
	let s1 = stringAfter(s, sub);
	let s2 = toWords(s1, allow_)[0]
	return s2;
}
function firstWordIncluding(s, allowed = '_-') {
	let res = '', i = 0;
	while (!isLetter(s[i]) && !isDigit(s[i]) && !allowed.includes(s[i])) i++;
	while (isLetter(s[i]) || isDigit(s[i]) || allowed.includes(s[i])) { res += s[i]; i++; }
	return res;
}
function fisherYates(arr) {
	if (arr.length == 2 && coin()) { return arr; }
	var rnd, temp;
	let last = arr[0];
	for (var i = arr.length - 1; i; i--) {
		rnd = Math.random() * i | 0;
		temp = arr[i];
		arr[i] = arr[rnd];
		arr[rnd] = temp;
	}
	return arr;
}
function fit_points(map, pts, padding = true) {
	let latlngs = to_lat_lng(pts);
	let o = L.latLngBounds(latlngs);
	map.fitBounds(o, { padding: padding ? [25, 25] : [0, 0] });
}
function fitbit_open(item) {
	console.log('FITBIT OPEN!!!!!!!!!!!!!!!')
	let d = iDiv(item);
	let d2 = mGrid(2, 1, d, { gap: 3, matop: 22 });
	let arr = DB.appdata.fitbit;
	let days = arr.length;
	let sum = arrSum(arr, 'steps');
	let opt = DB.apps.fitbit.options;
	let min_per_day = opt.min;
	let avg_per_day = opt.avg;
	let req_sum = avg_per_day * (days + 1);
	let req_today = Math.max(req_sum - sum, opt.min);
	let avg = sum / days;
	let davg = mDiv(d2, {}, null, `avg: ${avg.toFixed(1)}K`);
	let dtoday = mDiv(d2, {}, null, `req: ${Math.ceil(req_today)}K`);
}
function fitFont(text, fz = 20, w2 = 200, h2 = 100) {
	let e1, e2, r1, r2;
	e1 = mDiv(dTable, { w: w2, h: h2, display: 'inline-block' });
	do {
		e2 = mDiv(e1, { fz: fz, display: 'inline-block' }, null, text);
		r1 = getRect(e1);
		r2 = getRect(e2);
		e2.remove();
		fz -= 1;
	} while (r1.w * r1.h < r2.w * r2.h);
	e1.remove();
	return [fz + 1, r2.w, r2.h];
}
function fitSvg(el) {
	const box = el.querySelector('text').getBBox();
	el.style.width = `${box.width}px`;
	el.style.height = `${box.height}px`;
}
function fitText(text, rect, dParent, styles, classes) {
	let l = rect.cx - (rect.w / 2);
	let t = rect.cy - (rect.h / 2);
	if (dParent.style.position != 'absolute') dParent.style.position = 'relative';
	let d = mDivPosAbs(l, t, dParent);
	styles.display = 'inline-block';
	styles.w = rect.w;
	let fz = 20; if (isdef(styles.fz)) fz = styles.fz;
	let over = textCorrectionFactor(text, styles, rect.w, rect.h, fz); let MAX = 20; let cnt = 0;
	let oldFz = 0; let oldOldFz = 0;
	while (over > 0 && fz >= 8) {
		cnt += 1; if (cnt > MAX) { console.log('MAX reached!!!'); break; }
		if (over == 0) break;
		oldOldFz = oldFz;
		oldFz = fz;
		fz = Math.round(fontTransition(fz, over));
		if (oldFz == fz || oldOldFz == fz) break;
		let newOver = textCorrectionFactor(text, styles, rect.w, rect.h, fz);
		over = newOver;
	}
	d.innerHTML = text;
	mStyleX(d, styles);
	return d;
}
function fitWord(text, rect, dParent, styles, classes) {
	let d = mDiv(dParent)
	styles.display = 'inline-block';
	let fz = rect.h;
	let over = wordCorrectionFactor(text, styles, rect.w, rect.h, fz); let MAX = 20; let cnt = 0;
	let oldFz = 0; let oldOldFz = 0;
	while (over > 0 && fz >= 8) {
		cnt += 1; if (cnt > MAX) { console.log('MAX reached!!!'); break; }
		if (over == 0) break;
		oldOldFz = oldFz;
		oldFz = fz;
		fz = Math.round(fontTransition(fz, over));
		if (oldFz == fz || oldOldFz == fz) break;
		let newOver = wordCorrectionFactor(text, styles, rect.w, rect.h, fz);
		over = newOver;
	}
	d.innerHTML = text;
	mStyleX(d, styles);
	return d;
}
function fixedSizeGrid(m, d) {
	let rows = m.length;
	let cols = m[0].length;
	d.style.gridTemplateColumns = 'repeat(' + cols + ',1fr)'; // gtc.join(' '); //'min-content 1fr 1fr min-content';// 'min-content'.repeat(rows);
	d.style.gridTemplateRows = 'repeat(' + rows + ',1fr)'; // //'min-content 1fr 1fr min-content';// 'min-content'.repeat(rows);
}
function fj(x) {
	return formatjson(x);
}
function flag_reset(prop) { G[prop] = false; }
function flag_set(prop) { G[prop] = true; }
function flag_toggle(name) { if (G[name]) flag_reset(name); else flag_set(name); }
function fleetingMessage(msg, d, styles, ms, fade) {
	if (isString(msg)) {
		dFleetingMessage.innerHTML = msg;
		mStyle(dFleetingMessage, styles);
	} else {
		mAppend(dFleetingMessage, msg);
	}
	if (fade) Animation1 = mAnimate(dFleetingMessage, 'opacity', [1, .4, 0], null, ms, 'ease-in', 0, 'both');
	return dFleetingMessage;
}
function flower_draw(x, y, color, angle = 0, petalCount = 1, lineWidth = 3, sz = 10) {
	function createPetal(length, width) {
		const path = new Path2D();
		path.moveTo(0, 0);
		path.lineTo(length * 0.3, -width);
		path.lineTo(length * 0.8, -width);
		path.lineTo(length, 0);
		path.lineTo(length * 0.8, width);
		path.lineTo(length * 0.3, width);
		path.closePath();
		path.moveTo(0, 0);
		path.lineTo(length, 0);
		return path;
	}
	function drawPetals(x, y, count, startAt, petal) {
		const step = (Math.PI * 2) / count;
		CX.setTransform(1, 0, 0, 1, x, y);
		CX.rotate(startAt);
		for (var i = 0; i < count; i += 1) {
			CX.stroke(petal);
			CX.rotate(step);
		}
		CX.setTransform(1, 0, 0, 1, 0, 0);
	}
	CX.strokeStyle = color;
	CX.lineWidth = lineWidth;
	const size = 50;
	drawPetals(x, y, petalCount, angle, createPetal(sz, sz * .2));
	CX.beginPath();
	CX.arc(x, y, sz * .15, 0, Math.PI * 2);
	CX.fillStyle = color;
	CX.fill();
}
function fmultiplier(f, g) { return x => f(x) * g(x); }
function focusNextSiblingOrSubmitOnEnter(ev, id) {
	if (ev.key === 'Enter') {
		ev.preventDefault();
		let el = mBy(id); let tag = el.tagName.toLowerCase();
		if (tag == 'input') el.focus();
		else if (tag == 'form') {
			el.submit();
		}
	}
}
function follows_in_rank(c1, c2, rankstr) {
	return get_rank_index(c2, rankstr) - get_rank_index(c1, rankstr) == 1;
	let i1 = rankstr.indexOf(c1[0]);
	let i2 = rankstr.indexOf(c2[0]);
	console.log('follows?', c1, i1, c2, i2, i2 - i1)
	return rankstr.indexOf(c2[0]) - rankstr.indexOf(c1[0]) == 1;
}
function forAll(arr, func) { for (const a of arr) if (!func(a)) return false; return true; }
function format_currency(num) {
	return '$' + num.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
function format_date(date) {
	let d = new Date(date);
	let month = '' + (d.getMonth() + 1);
	let day = '' + d.getDate();
	let year = d.getFullYear();
	if (month.length < 2) month = '0' + month;
	if (day.length < 2) day = '0' + day;
	return [month, day, year].join('/');
}
function format_datetime(timestamp, str = 'y-m-d_h:i:s.r') {
	if (isString(timestamp)) timestamp = Number(timestamp);
	const plus0 = num => `0${num.toString()}`.slice(-2)
	const d = new Date(timestamp)
	const year = d.getFullYear()
	const monthTmp = d.getMonth() + 1
	const month = plus0(monthTmp)
	const date = plus0(d.getDate())
	const hour = plus0(d.getHours())
	const minute = plus0(d.getMinutes())
	const second = plus0(d.getSeconds())
	const rest = timestamp.toString().slice(-5)
	let res = '';
	str = str.toLowerCase();
	for (let i = 0; i < str.length; i++) {
		let ch = str[i];
		res += (ch == 'y' ? year : ch == 'm' ? month : ch == 'd' ? date : ch == 'h' ? hour : ch == 'i' ? minute : ch == 's' ? second : ch == 'r' ? rest : ch);
	}
	return res;
}
function format2Digits(i) { return (i < 10) ? "0" + i : i; }
function formatDate(d) {
	const date = isdef(d) ? d : new Date();
	const month = ('0' + date.getMonth()).slice(0, 2);
	const day = date.getDate();
	const year = date.getFullYear();
	const dateString = `${month}/${day}/${year}`;
	return dateString;
}
function formatDate1(d) {
	if (nundef(d)) d = Date.now();
	let ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);
	let mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);
	let da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);
	return `${da}-${mo}-${ye}`;
}
function formatDate2(d) { if (nundef(d)) d = new Date(); return d.toISOString().slice(0, 19).replace("T", " "); }
function formatDate3(d) { if (nundef(d)) d = new Date(); return d.toISOString().slice(0, 19).replace(/-/g, "/").replace("T", " "); }
function formatJson(o) {
	let s = '';
	for (const k in o) {
		if (isSimple(o[k])) s += k + ':' + o[k] + ' ';
	}
	return s;
}
function formatjson(j) {
	let s = JSON.stringify(j);
	s = s.replace(/\s/g, '');
	return s;
}
function formatll(ll) {
	if (!isll(ll)) return 'NOT list of lists!';
	let s = '[';
	for (const l of ll) {
		let content = isllPlus(l) ? formatll(l) : l.toString();
		s += '[' + content + ']';
	}
	s += ']';
	testHelpers(s);
}
function formatNow() { return new Date().toISOString().slice(0, 19).replace("T", " "); }
function formula0(x, mean, stdev) {
	let v = stdev * stdev;
	let t = Math.sqrt(Math.PI * 2) * stdev;
	let t1 = 1 / t;
	let t2 = (x - mean) ** 2;
	let t3 = 2 * v;
	let t4 = -t2 / t3;
	let t5 = Math.E ** t4;
	return t1 * t5;
}
function formula1(x) {
	return formula0(x, 100, 15);
}
function foscillator(exp, vars) {
	for (const v of vars) {
		[v.val, v.step] = oscillate_between(v.val, v.min, v.max, vstep);
		exp = replaceAll(exp, v.name, v.val);
	}
	return nerdamer('exp').buildFunction();
}
function fp_card_selection() {
	let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];
	let selitems = A.selectedCards = A.selected.map(x => A.items[x]);
	let cards = selitems.map(x => x.o);
	let cmd = A.last_selected.key;
	if (cmd == 'discard') {
		if (selitems.length != 1) { select_error('select exactly 1 hand card to discard!'); return; }
		let item = selitems[0];
		if (!item.path.includes(`${uplayer}.hand`)) { select_error('select a hand card to discard!', () => { ari_make_unselected(item); A.selected = []; }); return; }
		assertion(DA.transactionlist.length == 0 || DA.simulate, '!!!!!!!!!!!!!!!!transactionlist is not empty!');
		if (DA.transactionlist.length > 0) {
			console.log('VERIFYING TRANSACTION............')
			let legal = verify_min_req();
			clear_transaction();
			if (legal) {
				ferro_process_discard();
			} else {
				ferro_transaction_error();
			}
		} else {
			ferro_process_discard();
		}
	} else if (cmd == 'jolly') {
		if (selitems.length != 2) { select_error('select a hand card and the jolly you want!'); return; }
		let handcard = selitems.find(x => !is_joker(x.o) && x.path.includes(`${uplayer}.hand`));
		let jolly = selitems.find(x => is_joker(x.o) && !x.path.includes(`${uplayer}.hand`));
		if (!isdef(handcard) || !isdef(jolly)) { select_error('select a hand card and the jolly you want!'); return; }
		let key = handcard.key;
		let j = path2fen(fen, jolly.path);
		if (!jolly_matches(key, j)) { select_error('your card does not match jolly!'); return; }
		if (pl.journeys.length == 0) { add_transaction(cmd); }
		ferro_process_jolly(key, j);
		take_turn_fen();
	} else if (cmd == 'auflegen') {
		if (selitems.length < 3) { select_error('select cards to form a group!'); return; }
		else if (pl.hand.length == selitems.length) { select_error('you need to keep a card for discard!!', clear_selection); return; }
		let newset = ferro_is_set(cards, Z.options.jokers_per_group);
		if (!newset) { select_error('this is NOT a valid set!'); return; }
		let is_illegal = is_correct_group_illegal(cards);
		if (is_illegal) { select_error(is_illegal); return; }
		if (pl.journeys.length == 0) { add_transaction(cmd); }
		let keys = newset;
		ferro_process_set(keys);
		take_turn_fen();
	} else if (cmd == 'anlegen') {
		if (selitems.length < 1) { select_error('select at least 1 hand card and the first card of a group!'); return; }
		else if (pl.hand.length == selitems.length - 1) { select_error('you need to keep a card for discard!!', clear_selection); return; }
		let handcards = selitems.filter(x => !is_joker(x.o) && x.path.includes(`${uplayer}.hand`));
		let groupcard = selitems.find(x => !is_joker(x.o) && !x.path.includes(`${uplayer}.hand`));
		if (isEmpty(handcards) || !isdef(groupcard)) { select_error('select 1 or more hand cards and the first card of a group!'); return; }
		let hand_rank = handcards[0].key[0];
		let handcards_same_rank = handcards.every(x => x.key[0] == hand_rank);
		let j = path2fen(fen, groupcard.path);
		if (is_group(j)) {
			if (!handcards_same_rank) { select_error('all hand cards must have the same rank!'); return; }
			let group_rank = groupcard.key[0];
			if (group_rank == hand_rank) {
				for (const h of handcards) {
					elem_from_to(h.key, fen.players[uplayer].hand, j);
				}
				if (pl.journeys.length == 0) { add_transaction(cmd); }
				take_turn_fen();
				return;
			} else {
				select_error('hand cards do not match the group!');
				return;
			}
		} else {
			let suit = get_sequence_suit(j);
			let handkeys = handcards.map(x => x.key);
			if (firstCond(handkeys, x => x[1] != suit)) { select_error('hand card suit does not match the group!'); return; }
			let ij = j.findIndex(x => is_jolly(x));
			let j_has_jolly = ij > -1;
			let rank_to_be_relaced_by_jolly = j_has_jolly ? find_jolly_rank(j) : null;
			let r = rank_to_be_relaced_by_jolly;
			if (r) {
				j[ij] = r + suit + 'n';
			}
			keys = handkeys.concat(j);
			let allcards = keys.map(x => ferro_get_card(x));
			let jneeded = sortCardItemsToSequence(allcards, undefined, 0);
			if (jneeded == 0) {
				let seq = allcards.map(x => x.key);
				if (r) { arrReplace1(seq, r + suit + 'n', '*Hn'); }
				j.length = 0;
				j.push(...seq);
				for (const k of handkeys) { removeInPlace(fen.players[uplayer].hand, k); }
				if (pl.journeys.length == 0) { add_transaction(cmd); }
				take_turn_fen();
			} else {
				if (r != null) { j[ij] = '*Hn'; }
				select_error('hand cards cannot be added to sequence!');
				return;
			}
		}
	}
}
function fpowerer(f, g) { return x => Math.pow(f(x), g(x)); }
function fprime(exp) {
	return x => math.derivative(exp, 'x').evaluate({ x: x });
}
function FR2SQ(f, r) { return ((21 + (f)) + ((r) * 10)); }
function fractionConvert(wp, diop) {
	let n = wp.result.number;
	let t = typeof n;
	if (isFractionType(n)) {
		wp.isFractionResult = true;
		wp.result.text = getTextForFraction(n.n, n.d);
	}
}
function fractionsUnder1ByDenominator() {
	let fr = {
		2: [1],
		3: [1, 2],
		4: [1, 3],
		5: [1, 2, 3, 4],
		6: [1, 5],
		7: [1, 2, 3, 4, 5, 6],
		8: [1, 3, 5, 7],
		9: [1, 2, 4, 5, 7, 8],
	};
	return fr;
}
function fradd(card, targetgroup, targetcard) {
	let [oldgroup, oldindex] = untie_card(card);
	assertion(isdef(targetgroup.id), 'NO ID IN fradd!!!!!!!', targetgroup);
	add_card_to_group(card, oldgroup, oldindex, targetcard, targetgroup);
	if (targetgroup != oldgroup) cleanup_or_resplay(oldgroup);
}
function freezeUI() {
	if (frozen) return;
	frozen = true;
	show('tempFreezer');
}
function fritz() {
	const rankstr = 'A23456789TJQK*';
	function setup(players, options) {
		let fen = { players: {}, plorder: jsCopy(players), history: [], maxrounds: options.cycles * players.length };
		let n = players.length;
		fen.num_decks = 2 + (n >= 9 ? 2 : n >= 7 ? 1 : 0);
		fritz_new_table(fen, options);
		let deck = fen.deck;
		shuffle(fen.plorder);
		let starter = fen.starter = fen.plorder[0];
		fen.roundorder = jsCopy(fen.plorder);
		let handsize = valf(Number(options.handsize), 11);
		for (const plname of players) {
			let pl = fen.players[plname] = {
				hand: deck_deal(deck, plname == starter ? handsize + 1 : handsize),
				loosecards: [],
				time_left: options.seconds_per_game * 1000,
				score: 0,
				name: plname,
				color: get_user_color(plname),
			};
		}
		[fen.phase, fen.stage, fen.turn] = ['', 'card_selection', [starter]];
		return fen;
	}
	function activate_ui() { fritz_activate_ui(); }
	function check_gameover() { return isdef(Z.fen.winners) ? Z.fen.winners : false; }
	function present(dParent) { fritz_present(dParent); }
	function stats(dParent) { fritz_stats(dParent); }
	function state_info(dParent) { fritz_state_info(dParent); }
	return { rankstr, setup, activate_ui, check_gameover, present, state_info, stats };
}
function fritz_activate_ui() {
	let [plorder, stage, A, fen, uplayer, pl] = [Z.plorder, Z.stage, Z.A, Z.fen, Z.uplayer, Z.fen.players[Z.uplayer]];
	A.autosubmit = false;
	new_cards_animation(1);
	round_change_animation(1);
	select_add_items(ui_get_hand_items(uplayer), end_of_turn_fritz, 'must drag drop cards to assemble groups, then discard 1 hand card', 0, 1);
	A.items.map(x => iDiv(x).onclick = ev => {
		let card = Items[x.id];
		let item = x;
		clear_quick_buttons();
		select_last(item, select_toggle, ev);
		if (item.index == A.selected[0]) {
			let pos = get_mouse_pos(ev);
			let b = DA.bQuick = mButton('discard', ev => {
				b.remove();
				end_of_turn_fritz();
			}, document.body, { position: 'absolute', left: pos.x - 40, top: pos.y - 10 }, 'selectbutton');
		}
	});
	UI.timer = select_timer(fen.players[uplayer].time_left + Z.options.seconds_per_move * 1000, end_of_turn_fritz);
}
function fritz_card(ckey, h, w, ov, draggable) {
	let type = ckey[2];
	let info = ckey[0] == '*' ? get_joker_info() : jsCopy(C52Cards[ckey.substring(0, 2)]);
	info.key = ckey;
	info.cardtype = ckey[2];
	let [r, s] = [info.rank, info.suit];
	info.val = r == '*' ? 25 : r == 'A' ? 1 : 'TJQK'.includes(r) ? 10 : Number(r);
	info.color = RED;
	info.sz = info.h = valf(h, Config.ui.card.h);
	info.w = valf(w, info.sz * .7);
	info.irank = '23456789TJQKA*'.indexOf(r);
	info.isuit = 'SHCDJ'.indexOf(s);
	info.isort = info.isuit * 14 + info.irank;
	let card = cardFromInfo(info, h, w, ov);
	card.id = iDiv(card).id = getUID('c');
	Items[card.id] = card;
	if (draggable && Z.role == 'active') mDraggable(card);
	return card;
}
function fritz_get_card(ckey, h, w, ov = .25) { return fritz_card(ckey, h, w, ov, true); }
function fritz_get_hint_card(ckey) { return fritz_card(ckey, 50, 30, .25, false); }
function fritz_new_player_hands(fen, starter, options) {
	let handsize = options.handsize;
	let deck = fen.deck;
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		pl.hand = deck_deal(deck, plname == starter ? handsize + 1 : handsize);
		pl.loosecards = [];
		pl.time_left = options.seconds_per_game * 1000;
		pl.roundchange = true;
		delete pl.handsorting;
		delete pl.newcards;
	}
}
function fritz_new_table(fen, options) {
	fen.deck = create_fen_deck('n', fen.num_decks, 0);
	fen.deck_discard = [];
	fen.journeys = [];
	fen.loosecards = arrRepeat(options.jokers, '*Hn');
	shuffle(fen.deck);
}
function fritz_present(dParent) {
	DA.hovergroup = null;
	let [fen, ui, uplayer, stage, pl] = [Z.fen, UI, Z.uplayer, Z.stage, Z.pl];
	let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent); mFlexWrap(dOpenTable)
	Config.ui.card.h = 130;
	Config.ui.container.h = Config.ui.card.h + 30;
	if (isEmpty(fen.deck_discard)) {
		mText('discard pile is empty!', dOpenTable);
		ui.deck_discard = { items: [] }
	} else {
		mText('discard pile:', dOpenTable); mLinebreak(dOpenTable);
		let deck_discard = ui.deck_discard = ui_type_hand(fen.deck_discard, dOpenTable, { maright: 25 }, 'deck_discard', null, fritz_get_card, true);
		let i = 0; deck_discard.items.map(x => { x.source = 'discard'; x.index = i++ });
	}
	mLinebreak(dOpenTable);
	mDiv(dOpenTable, { box: true, w: '100%' }, null, '<hr>');
	let ddarea = UI.ddarea = mDiv(dOpenTable, { border: 'dashed 1px black', bg: '#eeeeee80', box: true, hmin: 162, wmin: 245, padding: '5px 50px 5px 5px', margin: 5 });
	mDroppable(ddarea, drop_card_fritz, dragover_fritz); ddarea.id = 'dOpenTable'; Items[ddarea.id] = ddarea;
	mFlexWrap(ddarea)
	fritz_stats(dRechts);
	show_history(fen, dRechts);
	DA.TJ = [];
	for (const j of fen.journeys) {
		let cards = j.map(x => fritz_get_card(x));
		frnew(cards[0], { target: 'hallo' });
		for (let i = 1; i < cards.length; i++) { fradd(cards[i], Items[cards[0].groupid]); }
	}
	let loosecards = ui.loosecards = jsCopy(fen.loosecards).map(c => fritz_get_card(c));
	for (const plname of fen.plorder) {
		let cards = fen.players[plname].loosecards.map(c => fritz_get_card(c));
		cards.map(x => x.owner = plname);
		loosecards = loosecards.concat(cards);
	}
	for (const looseui of loosecards) {
		let card = looseui;
		frnew(card, { target: 'hallo' });
	}
	for (const group of DA.TJ) {
		assertion(isdef(group.id), 'no group id', group);
		let d = iDiv(group);
		let ch = arrChildren(iDiv(group));
		let cards = ch.map(x => Items[x.id]);
		cards.map(x => mDroppable(x, drop_card_fritz, dragover_fritz));
	}
	if (arrChildren(ddarea).length == 0) {
		let d = mDiv(ddarea, { 'pointer-events': 'none', maleft: 45, align: 'center', hmin: 40, w: '100%', fz: 12, fg: 'dimgray' }, 'ddhint', 'drag and drop cards here');
	}
	ui.players = {};
	let uname_plays = fen.plorder.includes(Z.uname);
	let plmain = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;
	fritz_present_player(plmain, dMiddle);
	if (TESTING) {
		for (const plname of arrMinus(fen.plorder, plmain)) {
			fritz_present_player(plname, dMiddle);
		}
	}
	show_handsorting_buttons_for(Z.mode == 'hotseat' ? Z.uplayer : Z.uname, { left: 58, bottom: -1 });
}
function fritz_present_new(z, dParent, uplayer) {
	DA.hovergroup = null;
	let [fen, ui, stage] = [z.fen, UI, z.stage];
	console.log('role', Z.role)
	let [dOben, dOpenTable, dMiddle, dRechts] = tableLayoutMR(dParent); mFlexWrap(dOpenTable)
	Config.ui.card.h = 130;
	Config.ui.container.h = Config.ui.card.h + 30;
	if (isEmpty(fen.deck_discard)) {
		mText('discard empty', dOpenTable);
		ui.deck_discard = { items: [] }
	} else {
		let deck_discard = ui.deck_discard = ui_type_hand(fen.deck_discard, dOpenTable, { maright: 25 }, 'deck_discard', 'discard', fritz_get_card, true);
		let i = 0; deck_discard.items.map(x => { x.source = 'discard'; x.index = i++ });
	}
	mLinebreak(dOpenTable);
	let ddarea = UI.ddarea = mDiv(dOpenTable, { border: 'dashed 1px black', bg: '#eeeeee80', box: true, hmin: 162, wmin: 245, padding: '5px 50px 5px 5px', margin: 5 });
	mDroppable(ddarea, drop_card_fritz); ddarea.id = 'dOpenTable'; Items[ddarea.id] = ddarea;
	mFlexWrap(ddarea)
	fritz_stats_new(z, dRechts);
	show_history(fen, dRechts);
	DA.TJ = [];
	for (const j of fen.journeys) {
		let cards = j.map(x => fritz_get_card(x));
		frnew(cards[0], { target: 'hallo' });
		for (let i = 1; i < cards.length; i++) { fradd(cards[i], Items[cards[0].groupid]); }
	}
	let loosecards = ui.loosecards = jsCopy(fen.loosecards).map(c => fritz_get_card(c));
	for (const plname of fen.plorder) {
		let cards = fen.players[plname].loosecards.map(c => fritz_get_card(c));
		cards.map(x => x.owner = plname);
		loosecards = loosecards.concat(cards);
	}
	for (const looseui of loosecards) {
		let card = looseui;
		frnew(card, { target: 'hallo' });
	}
	for (const group of DA.TJ) {
		assertion(isdef(group.id), 'no group id', group);
		let d = iDiv(group);
		let ch = arrChildren(iDiv(group));
		let cards = ch.map(x => Items[x.id]);
		cards.map(x => mDroppable(x, drop_card_fritz));
	}
	if (arrChildren(ddarea).length == 0) {
		let d = mDiv(ddarea, { 'pointer-events': 'none', maleft: 45, align: 'center', hmin: 40, w: '100%', fz: 12, fg: 'dimgray' }, 'ddhint', 'drag and drop cards here');
	}
	ui.players = {};
	let uname_plays = fen.plorder.includes(Z.uname);
	let plmain = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;
	fritz_present_player(plmain, dMiddle);
	if (TESTING) {
		for (const plname of arrMinus(fen.plorder, plmain)) {
			fritz_present_player(plname, dMiddle);
		}
	}
}
function fritz_present_player(playername, dMiddle) {
	let [fen, ui, stage] = [Z.fen, UI, Z.stage];
	let pl = fen.players[playername];
	let playerstyles = { w: '100%', bg: '#ffffff80', fg: 'black', padding: 4, margin: 4, rounding: 10, border: `2px ${get_user_color(playername)} solid` };
	let d = mDiv(dMiddle, playerstyles, null, get_user_pic_html(playername, 25)); mFlexWrap(d); mLinebreak(d, 10);
	pl.hand = correct_handsorting(pl.hand, playername);
	let upl = ui.players[playername] = { div: d };
	upl.hand = ui_type_hand(pl.hand, d, {}, `players.${playername}.hand`, 'hand', fritz_get_card);
	upl.hand.items.map(x => x.source = 'hand');
	let ploose = pl.loosecards;
	if (!isEmpty(ploose)) {
		upl.loose = ui_type_market(ploose, d, {}, `players.${playername}.loose`, 'untouchables', fritz_get_hint_card);
		upl.loose.items.map(x => x.source = 'loose');
	} else {
	}
}
function fritz_state_info(dParent) {
	let user_html = get_user_pic_html(Z.uplayer, 30);
	dParent.innerHTML = `Round ${Z.round}:&nbsp;player: ${user_html} `;
}
function fritz_stats(dParent) {
	let player_stat_items = UI.player_stat_items = ui_player_info(dParent);
	let fen = Z.fen;
	console.log('players', get_keys(fen.players));
	for (const plname in fen.players) {
		let pl = fen.players[plname];
		console.log('uname', plname);
		let item = player_stat_items[plname];
		let d = iDiv(item); mCenterFlex(d); mLinebreak(d);
		player_stat_count('hand with fingers splayed', calc_hand_value(pl.hand.concat(pl.loosecards), fritz_get_card), d);
		player_stat_count('star', pl.score, d);
		if (fen.turn.includes(plname)) { show_hourglass(plname, d, 30, { left: -3, top: 0 }); }
		else if (!fen.plorder.includes(plname)) mStyle(d, { opacity: 0.5 });
	}
}
function fritz_stats_new(z, dParent) {
	let player_stat_items = UI.player_stat_items = ui_player_info(z, dParent);
	let fen = z.fen;
	for (const uname in fen.players) {
		let pl = fen.players[uname];
		let item = player_stat_items[uname];
		let d = iDiv(item); mCenterFlex(d); mLinebreak(d);
		player_stat_count('hand with fingers splayed', calc_hand_value(pl.hand.concat(pl.loosecards), fritz_get_card), d);
		player_stat_count('star', pl.score, d);
		if (fen.turn.includes(uname)) { show_hourglass(uname, d, 30, { left: -3, top: 0 }); }
		else if (!fen.plorder.includes(uname)) mStyle(d, { opacity: 0.5 });
	}
}
function frnew(card, ev) {
	let [oldgroup, oldindex] = untie_card(card);
	let id = getUID('g');
	let d = mDiv(Items.dOpenTable, { display: 'grid', margin: 10 }, id);
	let targetgroup = { div: d, id: id, ids: [], ov: .5222 };
	assertion(isdef(DA.TJ), 'DA.TJ undefined in frnew!!!');
	DA.TJ.push(targetgroup);
	Items[id] = targetgroup;
	assertion(isdef(targetgroup.id), 'NO ID IN frnew!!!!!!!', targetgroup);
	add_card_to_group(card, oldgroup, oldindex, null, targetgroup);
	if (targetgroup != oldgroup) cleanup_or_resplay(oldgroup);
}
function from_lat_lng(p) { return [p.lat, p.lng]; }
function from_lat_long(p) { return from_lat_lng(p); }
function from_server(result, type) {
	if (type == "modify_table") { console.log('______from server:', type, '\nresult:', result); }
	if (result.trim() == "") return;
	var obj = JSON.parse(result);
	convert_from_server(obj);
	switch (type) {
		case "intro": got_intro(obj); break;
		case 'non_admin_reload': got_non_admin_reload(obj); break;
		case "games": got_games(obj); break;
		case "play_start": got_play_start(obj); break;
		case "play": got_play(obj); break;
		case 'modify_table': got_modify_table(obj); break;
		case 'create_table_and_start': got_create_table(obj); break;
		case 'send_move': got_send_move(obj); break;
		case 'seen': poll_for_table_seen_or_deleted(); break;
		case 'standard_assets':
		case 'assets': assets_parse(obj.response); break;
		case 'dictionary': got_dictionary(obj); break;
		case "get_tables": got_tables(obj); break;
		case "get_user_game_tables": got_user_game_tables(obj); break;
		case "poll_table_started": check_poll_table_started(obj); break;
		case "poll_table_show": check_poll_table_show(obj); break;
		case "poll_table_seen": check_poll_table_seen(obj); break;
		case "get_past_tables": test_user_endscreen(obj); break;
		case "contacts": present_contacts(obj); break;
		case "login": present_login(obj); break;
		case "dbsave": console.log('db has been saved to server:'); break;
		case 'delete_table': get_games(obj); break;
		case 'save_and_delete': alert(`${obj.message}, ranking:${obj.fen}`);
			console.assert(is_admin(), 'SAVE_AND_DELETE NOT SENT BEI ADMIN!!!!');
			get_games();
			break;
		case 'create_table':
			Session.cur_tid = obj.table.id;
			Session.cur_table = obj.table;
			break;
		case "join_table":
			status_message('You have joined the game! Wait for the host to start it!');
			update_cur_table(obj, 'red');
			break;
		case "toggle_join":
			let t = obj.table;
			let st = obj.player_status;
			update_cur_table(obj, st == 'joined' ? 'red' : 'orange');
			status_message(`You have ${st == 'joined' ? 'joined' : 'left'} the game! Wait for the host to start it!`);
			break;
		case "start_table":
			update_cur_table(obj, 'green');
			status_message('You have started the game! ', obj.table.status);
			break;
		default: break;
	}
	danext();
}
function fromArray(arr) {
	return colorArrToString(...arr);
}
function fromArrayDarker(arr) {
	let c = fromArray(arr);
	return pSBC(-0.4, c);
}
function fromArrayLighter(arr) {
	let c = fromArray(arr);
	return pSBC(0.4, c);
}
function fromLocalStorage(name = '_all') { return JSON.parse(localStorage.getItem(name)); }
function fromRCMxToNumArrSq(f, r) {
	return ((21 + (f)) + ((r) * 10));
}
function FROMSQ(m) { return (m & 0x7F); }
function fromUmlaut(w) {
	if (isList(w)) {
		let res = [];
		for (const w1 of w) res.push(fromUmlaut(w1));
		return res;
	} else {
		w = replaceAll(w, 'ü', 'ue');
		w = replaceAll(w, 'ä', 'ae');
		w = replaceAll(w, 'ö', 'oe');
		w = replaceAll(w, 'Ü', 'UE');
		w = replaceAll(w, 'Ä', 'AE');
		w = replaceAll(w, 'Ö', 'OE');
		return w;
	}
}
function fromYaml(x) { return jsyaml.load(x); }
function fsubtracter(f, g) { return x => f(x) - g(x); }
function fullViewObjects() { let ids = getDefaultObjectIds(); ids.map(x => UIS[x].maximize()); }
function fun1(x) { return Math.sin(x); }
function fun2(x) { return Math.cos(3 * x); }
function fundef(x) {
	return x === undefined || !x;
}
function funGraph(ctx, axes, func, color, thick) {
	var xx, yy, dx = 4, x0 = axes.x0, y0 = axes.y0, scale = axes.scale;
	var iMax = Math.round((ctx.canvas.width - x0) / dx);
	var iMin = axes.doNegativeX ? Math.round(-x0 / dx) : 0;
	ctx.beginPath();
	ctx.lineWidth = thick;
	ctx.strokeStyle = color;
	for (var i = iMin; i <= iMax; i++) {
		xx = dx * i; yy = scale * func(xx / scale);
		if (i == iMin) ctx.moveTo(x0 + xx, y0 - yy);
		else ctx.lineTo(x0 + xx, y0 - yy);
	}
	ctx.stroke();
}
//#endregion

//#region G
function G_clear() { gameloop_stop(); clear_timeouts(); mClear('dTable'); C = G = CV = CX = null; }
function G_init(name) {
	if (CV) G_clear();
	[dLeft, dCenter] = mColFlex(dTable, [0, 5]);
	let res = mCanvas(dCenter, { w: 500, h: 500, bg: '#222', rounding: 10 });
	[CV, CX] = [res.cv, res.cx];
	let bpp = _mPlayPause(dCenter, { fz: 28, fg: 'lightgreen', display: 'flex', ajcenter: true }, onclick_playpause);
	G = { running: false, bPP: bpp };
	C = { changed: true, name: name, items: {}, root: get_func(name, 'init')() };
}
function g4(x, mean, stdev) {
	let variance = stdev * stdev;
	var y = mean / Math.E ** (((x) ** 2) / (2 * variance)); return y;
}
function g5(x, mean, stdev) {
	x = (x - mean) / stdev;
	return Math.pow(Math.E, -Math.pow(x, 2) / 2) / Math.sqrt(2 * Math.PI);
}
function g6(x, mean, stdev) {
	x = (x - mean) / stdev;
	return Math.E ** (-(x ** 2) / 2) / Math.sqrt(2 * Math.PI);
}
function g7(x, mean, stdev) {
	x = (x - mean);
	let v = stdev * stdev;
	return Math.E ** (-(x ** 2) / (2 * v)) / Math.sqrt(v * 2 * Math.PI);
}
function g8(x, mean, stdev) {
	const dividend = Math.E ** -((x - mean) ** 2 / (2 * stdev ** 2));
	const divisor = stdev * Math.sqrt(2 * Math.PI); return dividend / divisor;
}
function g9(x, mean, stdev) {
	let f = new Gaussian(mean, stdev ** 2);
	console.log('f', f)
	return f.pdf(x);
}
function gaChar(key) {
	return String.fromCharCode('0x' + gaChars[key]); //'f520');
}
function game_add_default_item(ev) {
	evNoBubble(ev);
	let sz = 50;
	let [x, y] = [ev.clientX - sz / 2, ev.clientY - sz / 2];
	let item = { styles: { position: 'absolute', x: x, y: y, w: sz, h: sz, bg: 'random', fg: 'contrast' }, init: true, refresh: true, draw: draw_dom };
	game_add_item(item);
}
function game_add_item(item) {
	addKeys({ init: true, refresh: true, draw: draw_dom }, item);
	G.items.push(item);
}
function game_interrupt() {
	if (!mBy('radio_play').checked) return;
	interrupt();
	GAME_PLAY_UI = null;
}
function game_resume_or_start() {
	if (isdef(Session.game)) mBy("inner_left_panel").innerHTML = game.screen;
	else { game_start_new(); }
	game.run();
}
function game_start_new() {
	console.log('start a new game')
}
function GameButton(label) {
	this.clicked = false;
	this.button = document.createElement("button");
	this.button.setAttribute("type", "button");
	this.button.innerHTML = label;
	this.button.style.position = "absolute";
	this.button.style.left = "0px";
	this.button.style.top = "0px";
	this.button.onmousedown = function () {
		this.clicked = true;
	}
	this.button.ontouchstart = function () {
		this.clicked = true;
	}
	this.button.onmouseup = function () {
		this.clicked = false;
	}
	this.isClicked = function () {
		return this.button.clicked;
	}
	this.setPos = function (left, top) {
		this.button.style.left = left + "px";
		this.button.style.top = top + "px";
	}
	this.setPosition = function (left, top) {
		this.setPos(left, top);
	}
	this.setSize = function (width, height) {
		this.button.style.width = width + "px";
		this.button.style.height = height + "px";
	}
	document.body.appendChild(this.button);
}
function GameFunc() {
	this.panel = new Panel();
	this.run = function () {
		this.panel.start();
	}
}
function gameItem(name, color) { return mItem(name2id(name), null, { color: isdef(color) ? color : randomColor(), name: name }); }
function gameloop() {
	for (const item of G.items) {
		let changed = item.update();
		if (changed) item.draw();
	}
}
function gameloop_start() { TO.ivdraw = setInterval(gameloop, 1000 / FR); G.items.map(x => x.draw()); G.running = true; }
function gameloop_stop() { clear_timeouts(); if (G) G.running = false; }
function gameloop_toggle() { if (G.running === true) gameloop_stop(); else gameloop_start(); }
function gameOver(msg, silent = false) { TOMain = setTimeout(aniGameOver(msg, silent), DELAY); }
function gameStep(data) {
	DELETED_THIS_ROUND = [];
	processData(data);
	if (flags.specAndDOM) specAndDOM([gameStepII]); else gameStepII();
}
function gamestep() {
	show_admin_ui();
	DA.running = true; clear_screen(); dTable = mBy('dTable'); mClass('dTexture', 'wood');
	if (Z.game == 'aristo') { if (Z.role != Clientdata.role || Z.mode == 'multi' && Z.role != 'active') mFall(dTable); Clientdata.role = Z.role; }
	else mFall(dTable);
	shield_off();
	show_title();
	show_role();
	Z.func.present(dTable);
	if (isdef(Z.scoring.winners)) { show_winners(); animatedTitle('GAMEOVER!'); }
	else if (Z.func.check_gameover(Z)) {
		let winners = show_winners();
		Z.scoring = { winners: winners }
		sendgameover(winners[0], Z.friendly, Z.fen, Z.scoring);
	} else if (is_shield_mode()) {
		staticTitle();
		if (!DA.no_shield == true) { hide('bRestartMove'); shield_on(); }
		autopoll();
	} else {
		Z.A = { level: 0, di: {}, ll: [], items: [], selected: [], tree: null, breadcrumbs: [], sib: [], command: null, autosubmit: Config.autosubmit };
		copyKeys(jsCopy(Z.fen), Z);
		copyKeys(UI, Z);
		activate_ui(Z);
		Z.func.activate_ui();
		if (Z.isWaiting == true || Z.mode != 'multi') staticTitle(); else animatedTitle();
		if (Z.options.zen_mode != 'yes' && Z.mode != 'hotseat' && Z.fen.keeppolling && Z.uplayer_data.player_status != 'stop') {
			autopoll();
			console.log('gamestep autopoll');
		}
	}
	if (TESTING == true) landing();
}
function gameStep1(data) {
	G.serverData = data;
	DELETED_THIS_ROUND = [];
	processData(data);
	if (flags.specAndDOM) specAndDOM([gameStepII]); else gameStepII();
}
function gameStepII() {
	if (S_useSimpleCode) { presentTableSimple(); presentPlayersSimple(); }
	else { presentTable(); presentPlayers(); }
	presentStatus();
	presentLog();
	if (G.end) { presentEnd(); return; }
	if (G.tupleGroups) {
		presentActions();
		startInteraction();
	} else presentWaitingFor();
}
function gameView() {
	setIsReallyMultiplayer();
	if (!isReallyMultiplayer) {
		hide('c_b_PollStatus');
	}
	document.title = GAME + ' ' + USERNAME;
	view = 'game'; isPlaying = true;
	hideLobby(); hideLogin(); showGame();
	removeAllGlobalHandlers();
	addGameViewHandlers();
}
function gAnagram() {
	function anagram_fen() {
		return { key: Goal.key, lang: Goal.lang, inputs: collect_innerHTML(Goal.inputs, ':'), letters: collect_innerHTML(Goal.letters, ':') };
	}
	function anagram_prompt(g, fen) {
		let [vocab, lang, min, max] = [g.vocab, isdef(fen) ? fen.lang : g.lang, g.minWordLength, g.maxWordLength];
		let keypool = KeySets[vocab];
		keypool = keypool.filter(x => { let w = Syms[x][lang]; let l = w.length; return w.indexOf(' ') < 0 && l >= min && l <= max; });
		let key = isdef(fen) ? fen.key : chooseRandom(keypool); //'carpentry saw'; 
		let pic = mSym(key, dTable, { fz: 100, opacity: g.hidden ? 0 : 1 });
		if (g.hidden) {
			let d = pic;
			let r = getRect(d, dTable);
			let dHint = mDiv(dTable, { opacity: 0, position: 'absolute', align: 'center', left: 0, w: '100%', top: r.t + r.h / 2 }, null, 'category: ' + Syms[key].subgroup);
			animatePropertyX(dHint, 'opacity', [0, 0, 1], 2000, 'both', 'ease-in', 6000);
		}
		let word = Syms[key][lang].toUpperCase();
		Goal = { div: pic, key: key, word: word, lang: lang };
		mLinebreak(dTable, 12);
		let wTotal = getRect(mBy('table')).w;
		Goal.inputs = show_letter_inputs(word, dTable, wTotal);
		mLinebreak(dTable, 12);
		Goal.letters = show_dd_click_letters(word, dTable, wTotal);
		if (isdef(fen) && isdef(fen.inputs)) {
			distribute_innerHTML(Goal.inputs, fen.inputs, ':');
			distribute_innerHTML(Goal.letters, fen.letters, ':');
		} else {
			mLinebreak(dTable, 12);
			Goal.bDone = mButton('Done!', anagram_eval, dTable, { fz: 28, matop: 10, rounding: 10, hpadding: 16, border: 8 }, ['buttonClass']);
		}
	}
	function anagram_eval() {
		if (!canAct()) return;
		uiActivated = false; clear_timeouts();
		let answer = collect_innerHTML(Goal.inputs);
		let is_correct = answer == Goal.word;
		let is_word;
		if (!is_correct && answer.length == Goal.word.length && is_a_word(answer.toLowerCase(), Session.lang)) is_word = true;
		Selected = { answer: answer, reqAnswer: Goal.word, feedbackUI: Goal.inputs.map(x => iDiv(x)) };
		race_set_fen();
		race_update_my_score(is_correct ? 1 : is_word ? 0 : -1);
		let delay = anagram_feedback(is_correct, is_word);
		setTimeout(() => {
			in_game_open_prompt_off();
			clear_table_events();
			race_send_move();
		}, delay);
	}
	function anagram_feedback(is_correct, is_word, show_feedback = true) {
		let delay = !is_correct && show_feedback ? 1000 : 300;
		let d = iDiv(Goal);
		mStyle(d, { opacity: 1 });
		if (!is_correct) {
			for (let i = 0; i < Goal.word.length; i++) {
				let ch = Goal.word[i];
				let dl = iDiv(Goal.letters[i]);
				dl.innerHTML = ch;
				animate(dl, 'onPulse1', 600);
				if (!is_word) {
					let dwrong = iDiv(Goal.inputs[i]);
					if (dwrong.innerHTML != ch) { mXit(dwrong, 90); }
				}
			}
		} else {
			mCheckit(d, 100);
		}
		return delay;
	}
	return {
		prompt: anagram_prompt,
		fen: anagram_fen,
	}
}
function gatherItems(n, options) {
	let items = null;
	while (!items) { items = Pictures = pickSuitableItems(n, options); }
	let l = items[0].letter;
	for (let i = 0; i < n; i++) {
		let item1 = items[i];
		let item2 = items[(i + 1) % n];
		let label = item1.origLabel = item1.label;
		let idx = item1.iLetter;
		item1.label = replaceAtString(label, idx, item2.letter);
		if (isWord(item1.label)) {
			item2.iLetter = (item2.iLetter + 1) % item2.label.length;
			item2.letter = item2.label[item2.iLetter];
			item1.label = replaceAtString(label, idx, item2.letter);
			if (isWord(item1.label)) return gatherItems(n, options);
		}
		item1.swaps = {};
		item1.swaps[idx] = {
			swapped: { itemId: item2.id, index: item2.iLetter, l: item2.letter },
			correct: { itemId: item1.id, index: item1.iLetter, l: item1.letter },
			temp: null,
		};
	}
	return items;
}
function gauss(x, mean, standardDeviation) {
	return (1 / standardDeviation * Math.sqrt(2 * (3, 14))) * Math.pow(Math.E, -Math.pow(x - mean, 2) / (2 * (standardDeviation * standardDeviation)));
}
function gaussian_amp(canvas, stdev) {
	let v = stdev * stdev;
	function formula(x, v, amp) { return amp * Math.E ** (-(x ** 2) / (2 * v)) / Math.sqrt(v * 2 * Math.PI); }
	let y = 1 / Math.sqrt(v * 2 * Math.PI);
	let amp = .9 * (-canvas.miny) / (canvas.scale * y);
	let f = formula(2, amp);
	f = x => formula(x, v, amp);
	return f;
}
function gaussian1(x, m = 0, stdev = 2, amp = 1) {
	let v = stdev * stdev;
	return amp * Math.E ** (-((x - m) ** 2) / (2 * v)) / Math.sqrt(v * 2 * Math.PI);
}
function gaussianRand() {
	var rand = 0;
	for (var i = 0; i < 6; i += 1) { rand += Math.random(); }
	return rand / 6;
}
function gaussianRandom(start, end) { return Math.floor(start + gaussianRand() * (end - start + 1)); }
function gBg(g, color) { g.setAttribute('fill', color); }
function gCanvas(area, w, h, color, originInCenter = true) {
	let dParent = mBy(area);
	let div = stage3_prepContainer(dParent);
	div.style.width = w + 'px';
	div.style.height = h + 'px';
	let svg = gSvg();
	let style = `margin:0;padding:0;position:absolute;top:0px;left:0px;width:100%;height:100%;`
	svg.setAttribute('style', style);
	mColor(svg, color);
	div.appendChild(svg);
	let g = gG();
	if (originInCenter) g.style.transform = "translate(50%, 50%)";
	svg.appendChild(g);
	return g;
}
function gCreate(tag) { return document.createElementNS('http:/' + '/www.w3.org/2000/svg', tag); }
function gcsAuto() {
	gcs = {};
	for (const gName in allGames) {
		let info = allGames[gName]
		let nPlayers = info.num_players[0];
		let pls = [];
		for (let i = 0; i < nPlayers; i++) {
			let pl = { id: info.player_names[i], playerType: 'me', agentType: null, username: USERNAME + (i > 0 ? i : '') };
			pls.push(pl);
		}
		gcs[gName] = { numPlayers: nPlayers, players: pls };
	}
}
function geht(sp) {
	POOLS.augData = makeDefaultPool(sData);
	annotate(sp);
	dynSpec = sp;
	let pool = POOLS.augData;
	for (const oid in pool) {
		let o = pool[oid];
		if (nundef(o.RSG)) continue;
		let info = mergeIncludingPrototype(oid, o);
		INFO[oid] = info;
	}
}
function gEllipse(w, h) { let r = gCreate('ellipse'); r.setAttribute('rx', w / 2); r.setAttribute('ry', h / 2); return r; }
function gen_palette(hue = 0, nHues = 2, sat = 100, a = 1) {
	let hues = [];
	let hueDiff = 360 / nHues;
	for (let i = 0; i < nHues; i++) {
		hues.push(hue);
		hue += hueDiff;
	}
	let pal = [];
	for (l of [15, 25, 35, 50, 65, 75, 85]) {
		let palHues = [];
		for (const h of hues) {
			cb = `hsla(${h},${sat}%,${l}%,${a})`;
			hopp = (h + 180) % 360;
			cf = `hsla(${hopp},${sat}%,${l < 18 ? 100 : 0}%,${a})`;
			let hex = standardize_color(cb);
			let f5 = idealTextColor(hex);
			palHues.push({ b: cb, f: f5 });
		}
		pal.push(palHues);
	}
	testHelpers('pal.length:', pal.length, ', pal[0].length:', pal[0].length, ', pal:', pal);
	return pal;
}
function genCard() {
	let names = '23456789TJQKA';
	let s = chooseRandom(names);
	if (isNumber(s)) s = Number(s);
	return { obj_type: 'card', short_name: s, oid: getUID() };
}
function genCard52Key() {
	let rank = '23456789TJQKA';
	let suit = 'CDHS';
	let specialRank = '12';
	let specialSuit = 'BJ';
	let isSpecial = tossCoin(25);
	let s;
	if (isSpecial) {
		s = chooseRandom(specialRank) + chooseRandom(specialSuit);
	} else {
		s = chooseRandom(rank) + chooseRandom(suit);
	}
	return { obj_type: 'card', cardKey: s, oid: getUID() };
}
function genCats(n) {
	let di = {};
	let cats = Object.keys(Categories);
	for (let i = 0; i < n; i++) {
		let cat = chooseRandom(cats);
		let incompat = DA.incompatibleCats[cat];
		cats = arrMinus(cats, incompat);
		removeInPlace(cats, cat);
		di[cat] = Categories[cat];
	}
	return di;
}
function genCollapsible(path, info) {
	let caption = stringAfterLast(path, '/');
	let classes = ['collapsible'];
	let dParent = mBy('menu');
	let b = mButton(caption, null, dParent, {}, classes);
	b.id = info.idLink;
	let bView = maPicButton('search', e => showCollapsibleContent(e), b, { float: 'right', w: 25, padding: 2, margin: 2, rounding: 4 });
	bView.addEventListener('mouseenter', ev => {
		ev.stopPropagation = true;
	});
	bView.addEventListener('mouseleave', ev => {
		ev.stopPropagation = true;
	});
	b.style.padding = '4px';
	return b;
}
function generalGrid(nuiBoard, R, area) {
	let bParams = nuiBoard.params = detectBoardParams(nuiBoard, R);
	let ui = nuiBoard.ui = createUi(nuiBoard, R, area);
	let rtreeParent = R.rNodes[nuiBoard.uid];
	let uidBoard = nuiBoard.uid;
	nuiBoard.params.sizes = nuiBoard.bi.sizes = { f: 0, c: 0, e: 0 };
	for (const name of ['fields', 'edges', 'corners']) {
		let groupParams = lookup(DEFS, ['grid', 'params', name]); if (!groupParams) groupParams = {};
		groupParams = safeMerge(groupParams, nuiBoard.bi.params[name]);
		let group = nuiBoard.bi[name];
		let groupSize = nuiBoard.params.sizes[name[0]] = groupParams.size;
		for (const oid in group) {
			let n1 = group[oid];
			let o = n1.o;
			delete n1.o;
			let key = createArtificialSpecForBoardMemberIfNeeded(oid, o, R);
			let ntree, nui;
			ntree = instantOidKey(oid, key, uidBoard, R);
			ntree.params = isdef(ntree.params) ? safeMerge(groupParams, ntree.params) : groupParams;
			if (ntree.params.size != groupSize) groupSize = nuiBoard.params.sizes[name[0]] = ntree.params.size;
			n1.info.size = groupSize;
			ntree.info = n1.info;
			nui = recUi(ntree, R, uidBoard, oid, key);
		}
	}
	nuiBoard.children = rtreeParent.children;
	nuiBoard.adirty = true;
}
function generate() {
	numgen++; if (numgen > system.max) {
		clearInterval(interval_id);
		console.log('done!');
		return;
	}
	len *= factor;
	let nextSentence = '';
	for (let i = 0; i < sentence.length; i++) {
		let current = sentence.charAt(i);
		let done = false;
		for (const rule of rules) {
			if (current == rule.aus) {
				nextSentence += rule.mach;
				done = true;
				break;
			}
		}
		if (!done) nextSentence += current;
	}
	sentence = nextSentence;
	createP(sentence);
	turtle();
}
function generate_friendly_table_name(game, players) {
	const europe_capitals = 'Amsterdam,  Ankara,  Astana,  Athens,  Baku,  Belgrade,  Berlin,  Bern,  Bratislava,  Brussels,  Bucharest,  Budapest,  Chisinau,  Copenhagen,  Dublin,  Helsinki,  Kiev,  Lisbon,  Ljubljana,  London,  Luxembourg,  Madrid,  Minsk,  Monaco,  Moscow,  Nicosia,  Oslo,  Paris,  Podgorica,  Prague,  Reykjavík,  Riga,  Rome,  San Marino,  Sarajevo,  Skopje,  Sofia,  Stockholm,  Tallinn,  Tbilisi,  Tirana,  Vaduz,  Valletta,  Vatican City,  Vienna,  Vilnius,  Warsaw,  Yerevan,  Zagreb';
	const asia_capitals = 'Abu Dhabi,  Amman,  Ankara,  Ashgabat,  Astana,  Baghdad,  Baku,  Bangkok,  Beijing,  Beirut,  Bishkek,  Cairo,  Colombo,  Damascus,  Dhaka,  Dili,  Doha,  Dushanbe,  Hanoi,  Islamabad,  Jakarta,  Jerusalem,  Kabul,  Kathmandu,  Kuala Lumpur,  Kuwait City,  Malé,  Manama,  Manila,  Moscow,  Muscat,  Naypyidaw,  New Delhi,  Nicosia,  Phnom Penh,  Pyongyang,  Ramallah,  Riyadh,  Sana’a,  Seoul,  Singapore,  Taipei,  Tashkent,  Tbilisi,  Tehran,  Thimphu,  Tokyo,  Ulaanbaatar,  Vientiane,  Yerevan';
	return 'Battle of ' + chooseRandom(coin() ? europe_capitals.split(',\t') : asia_capitals.split(',\t'));
}
function generate_skype_contacts(n) {
	let date = new Date();
	let res = [{ num: `+${rNumber(11111, 99999)}`, date: date, color: rChoose([ORANGE, PURPLE, 'deepskyblue', 'hotpink']), msg: `<#>'BofA': DO NOT share this S...` }];
	for (let i = 1; i < n; i++) {
		date = rDate(date, new Date(2022, 1, 1));
		let istext = coin();
		let [num, msg] = istext ? [`+${rNumber(11111, 99999)}`, `<#>${rChoose(['BofA', 'Prudential'])}: DO NOT share this S...`]
			: [`+1425${rNumber(1111111, 9999999)}`, `Missed Call`];
		let c = { num: num, date: date, color: rChoose([ORANGE, PURPLE, 'deepskyblue', 'hotpink']), msg: msg };
		res.push(c);
	}
	return res;
}
function generate_statement(dParent, boacc, brand) {
	let brand_colors = {
		usbank: 'navy', prime: 'skyblue', citibank: 'silver', wellsfargo: RED, BofA_rgb: 'navy', chase_bank: BLUE,
		comcast: 'orange', oasis: GREEN, PSE: 'gold', redmond: 'grey'
	};
	let date = new Date();
	let acc = { index: boacc.index, creditline: rNumber(0, 10) * 100, holder: 'Gunter Yang Lee', num: 242948572348, due: rDate(addWeekToDate(date, 4), addWeekToDate(date, 2)) }
	let nums = { prevbalance: rNumber(0, 100), payments: rNumber(100, 1000) + rNumber(0, 100) / 100, fees: rNumber(0, 100) };
	nums.balance = nums.prevbalance + nums.payments + nums.fees;
	acc.cashadvance = acc.creditline / 4;
	acc.num = acc.num.toString();
	acc.num = acc.num.substring(0, acc.num.length - 4) + boacc.sub.substring(1);
	acc.num = parseInt(acc.num);
	let [color, fromdate, todate] = [valf(brand_colors[brand], 'random'), addWeekToDate(date, -5), addWeekToDate(date, -1)];
	let d;
	if (nundef(dParent)) {
		let dpop = mBy('dPopup'); show(dpop); mClear(dpop); mStyle(dpop, { top: 50, right: 10 });
		d = mDiv(dpop, { padding: 10, border: '1px solid #ddd', bg: 'white', fg: 'black' });
	} else {
		mStyle(dParent, { 'justify-content': 'start' });
		d = mDiv(dParent);
	}
	mStyle(d, { bg: 'white', position: 'fixed', top: 50, right: 0, padding: 10 });
	let d1 = mDiv(d, { bg: color, h: 5, w: '100%' });
	let dheader = mDiv(d, { fz: 12 });
	let [dl, dr] = mColFlex(dheader, [1, 3]);
	let logo = createImage(`${brand}.png`, { hmax: 90, wmax: 300 });
	let dl1 = mDiv(dl, { hmax: 90, wmax: 400 }); mAppend(dl1, logo);
	let dr1 = mDiv(dr, { align: 'right', paright: 10 });
	mDiv(dr1, {}, null, `Account Holder: ${acc.holder}`);
	mDiv(dr1, {}, null, `Account Number: ${acc.num}`);
	mDiv(dr1, {}, null, `Statement Period: ${date2locale(fromdate)} - ${date2locale(todate)}`);
	mDiv(dr1, {}, null, `Due Date: ${date2locale(acc.due)}`);
	mDiv(d, {}, null, '<br>');
	let dmain = mDiv(d, { wmax: 600 });
	let [dlm, drm] = mColFlex(dmain, [1, 1.25]);
	let dlm1 = mDiv(dlm, { hmargin: 10, }, null, `ACCOUNT SUMMARY`);
	let dsum = mDiv(dlm, { hmargin: 10, rounding: 12, padding: 10, border: '1px solid #ccc', bg: 'white', fg: 'black' });
	mDivLR(dsum, { w: '100%' }, null, [`Previous Balance:`, `${format_currency(nums.prevbalance)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`Payments and Credits:`, `${format_currency(nums.payments)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`Purchases:`, `${format_currency(nums.payments)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`Balance Transfers:`, `${format_currency(0)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`Cash Advances:`, `${format_currency(0)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`Fees Charged:`, `${format_currency(nums.fees)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`Interest Charged:`, `${format_currency(0)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`New Balance:`, `${format_currency(nums.balance)}`]);
	mDiv(dsum, { fz: 9, align: 'center' }, null, 'see interest charge calculation section following the Transactions section for detailed APR information');
	mLine(dsum, { fz: 10, align: 'center' });
	mDivLR(dsum, { w: '100%' }, null, [`Credit Line:`, `${format_currency(acc.creditline)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`Credit Line Available:`, `${format_currency(acc.creditline)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`Cash Advance Credit Line:`, `${format_currency(acc.cashadvance)}`]);
	mDivLR(dsum, { w: '100%' }, null, [`Cash Advance Credit Line Available:`, `${format_currency(acc.cashadvance)}`]);
	mDiv(dsum, {}, null, 'You may be able to avoid interest on purchases. See reverse for details');
	let drm1 = mDiv(drm, { hmargin: 10, }, null, `PAYMENT INFORMATION`);
	let dpay = mDiv(drm, { hmargin: 10, rounding: 12, padding: 10, border: '1px solid #ccc', bg: 'white', fg: 'black' });
	mDivLR(dpay, { w: '100%', weight: 'bold' }, null, [`New Balance:`, `${format_currency(nums.balance)}`]);
	mLine(dpay, { fz: 10, align: 'center' });
	mDivLR(dpay, { w: '100%' }, null, [`Minimum Payment Due:`, `${format_currency(nums.balance / 10)}`]);
	mDivLR(dpay, { w: '100%', weight: 'bold' }, null, [`Payment Due Date:`, `${date2locale(acc.due)}`]);
	mDiv(dpay, { fz: 9, matop: 10 }, null, '<b>Late Payment Warning:</b> If we do not receive your minimum payment by the date listed above, you may have to pay a fee of up to $10.00.');
	let drm2 = mDiv(drm, { matop: 10, hmargin: 10, }, null, `REWARDS`);
	let drewards = mDiv(drm, { hmargin: 10, rounding: 12, padding: 10, border: '1px solid #ccc', bg: 'white', fg: 'black' });
	mDivLR(drewards, { w: '100%', weight: 'bold' }, null, [`Cashback Bonus*:`, `Anniversary Month`]);
	mDivLR(drewards, { w: '100%' }, null, [`Opening Balance:`, `${format_currency(0)}`]);
	mDivLR(drewards, { w: '100%' }, null, [`New Cashback Bonus this Period:`, `${format_currency(4.98)}`]);
	mDivLR(drewards, { w: '100%' }, null, [`Redeemed this Period:`, `${format_currency(0)}`]);
	mLine(drewards, { fz: 10, align: 'center' });
	mDivLR(drewards, { w: '100%', weight: 'bold' }, null, [`Cashback Bonus Balance:`, `${format_currency(4.98)}`]);
	mDiv(drewards, { fz: 10 }, null, `<b>to learn more log in to www.${brand}.com</b>`);
	mDiv(d, { matop: 25, maleft: 6 }, null, img_html('statement2.jpg'));
	mDiv(d, {}, null, '<br>');
	let dbla1 = mDiv(d, { hmargin: 10, rounding: 12, padding: 10, border: '1px solid #ccc', bg: 'white', fg: 'black' });
	mAppend(dbla1, createImage('statement1.jpg', {}));
	mAppend(d, createImage('statementfooter.jpg', {}));
	return { div: d, nums: nums, acc: acc, topay: nums.balance, brand: brand, boacc: boacc };
}
function generate_table_id(gamename) {
	return gamename + '_' + get_timestamp();
}
function generate_table_name(n) {
	let existing = Serverdata.tables.map(x => x.friendly);
	while (true) {
		let cap = rChoose(Info.capital);
		let parts = cap.split(' ');
		if (parts.length == 2) cap = stringBefore(cap, ' '); else cap = stringBefore(cap, '-');
		cap = cap.trim();
		let s = (n == 2 ? 'duel of ' : rChoose(['battle of ', 'war of '])) + cap;
		if (!existing.includes(s)) return s;
	}
}
function GenerateCaptures() {
	brd_moveListStart[brd_ply + 1] = brd_moveListStart[brd_ply];
	var pceType;
	var pceNum;
	var pceIndex;
	var pce;
	var sq;
	var tsq;
	var index;
	if (brd_side == COLOURS.WHITE) {
		pceType = PIECES.wP;
		for (pceNum = 0; pceNum < brd_pceNum[pceType]; ++pceNum) {
			sq = brd_pList[PCEINDEX(pceType, pceNum)];
			if (SQOFFBOARD(sq + 9) == BOOL.FALSE && PieceCol[brd_pieces[sq + 9]] == COLOURS.BLACK) {
				AddWhitePawnCaptureMove(sq, sq + 9, brd_pieces[sq + 9]);
			}
			if (SQOFFBOARD(sq + 11) == BOOL.FALSE && PieceCol[brd_pieces[sq + 11]] == COLOURS.BLACK) {
				AddWhitePawnCaptureMove(sq, sq + 11, brd_pieces[sq + 11]);
			}
			if (brd_enPas != SQUARES.NO_SQ) {
				if (sq + 9 == brd_enPas) {
					AddEnPassantMove(MOVE(sq, sq + 9, PIECES.EMPTY, PIECES.EMPTY, MFLAGEP));
				}
				if (sq + 11 == brd_enPas) {
					AddEnPassantMove(MOVE(sq, sq + 11, PIECES.EMPTY, PIECES.EMPTY, MFLAGEP));
				}
			}
		}
		pceType = PIECES.wN;
	} else {
		pceType = PIECES.bP;
		for (pceNum = 0; pceNum < brd_pceNum[pceType]; ++pceNum) {
			sq = brd_pList[PCEINDEX(pceType, pceNum)];
			if (SQOFFBOARD(sq - 9) == BOOL.FALSE && PieceCol[brd_pieces[sq - 9]] == COLOURS.WHITE) {
				AddBlackPawnCaptureMove(sq, sq - 9, brd_pieces[sq - 9]);
			}
			if (SQOFFBOARD(sq - 11) == BOOL.FALSE && PieceCol[brd_pieces[sq - 11]] == COLOURS.WHITE) {
				AddBlackPawnCaptureMove(sq, sq - 11, brd_pieces[sq - 11]);
			}
			if (brd_enPas != SQUARES.NO_SQ) {
				if (sq - 9 == brd_enPas) {
					AddEnPassantMove(MOVE(sq, sq - 9, PIECES.EMPTY, PIECES.EMPTY, MFLAGEP));
				}
				if (sq - 11 == brd_enPas) {
					AddEnPassantMove(MOVE(sq, sq - 11, PIECES.EMPTY, PIECES.EMPTY, MFLAGEP));
				}
			}
		}
		pceType = PIECES.bN;
	}
	pceIndex = LoopSlideIndex[brd_side];
	pce = LoopSlidePce[pceIndex++];
	while (pce != 0) {
		for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
			sq = brd_pList[PCEINDEX(pce, pceNum)];
			for (index = 0; index < DirNum[pce]; ++index) {
				dir = PceDir[pce][index];
				t_sq = sq + dir;
				while (SQOFFBOARD(t_sq) == BOOL.FALSE) {
					if (brd_pieces[t_sq] != PIECES.EMPTY) {
						if (PieceCol[brd_pieces[t_sq]] == brd_side ^ 1) {
							AddCaptureMove(MOVE(sq, t_sq, brd_pieces[t_sq], PIECES.EMPTY, 0));
						}
						break;
					}
					t_sq += dir;
				}
			}
		}
		pce = LoopSlidePce[pceIndex++];
	}
	pceIndex = LoopNonSlideIndex[brd_side];
	pce = LoopNonSlidePce[pceIndex++];
	while (pce != 0) {
		for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
			sq = brd_pList[PCEINDEX(pce, pceNum)];
			for (index = 0; index < DirNum[pce]; ++index) {
				dir = PceDir[pce][index];
				t_sq = sq + dir;
				if (SQOFFBOARD(t_sq) == BOOL.TRUE) {
					continue;
				}
				if (brd_pieces[t_sq] != PIECES.EMPTY) {
					if (PieceCol[brd_pieces[t_sq]] == brd_side ^ 1) {
						AddCaptureMove(MOVE(sq, t_sq, brd_pieces[t_sq], PIECES.EMPTY, 0));
					}
					continue;
				}
			}
		}
		pce = LoopNonSlidePce[pceIndex++];
	}
}
function generateCard(hasOwner = true, hasContent = true, visibleToN = 1) {
	let id = "action_" + unitTestId;
	unitTestId += 1;
	let o = JSON.parse(`
  {
    "wildcard": "Isolationism",
    "season": "Fall",
    "priority": "H",
    "value": 8,
    "obj_type": "action_card",
    "visible": {
      "xset": [
        "Axis"
      ]
    },
    "owner": "Axis",
    "_id": "action_48"
  }
  `);
	if (!hasContent) {
		o = JSON.parse(`
    {
    "obj_type": "action_card",
    "visible": {
      "xset": [
        "Axis"
      ]
    },
    "owner": "Axis",
    "_id": "action_48"
  }
  `);
	}
	o._id = id;
	if (!hasOwner) {
		delete o.owner;
	}
	if (visibleToN == 0) {
		o.visible.xset = [];
	} else if (visibleToN == 2) {
		o.visible.xset.push("West");
	} else if (visibleToN == 3) {
		o.visible.xset = ["Axis", "West", "USSR"];
	}
	return { id: id, o: o };
}
function generateDocs(s = 'halo') {
	let output = `<html><body>${s}</body></html>`;
	downloadFile();
}
function generateExpAnswers() { }
function generateFontString(fz, family, weight = 900) {
	let s = '' + weight + ' ' + fz + 'px ' + family;
	return s.trim();
}
function GenerateMoves() {
	brd_moveListStart[brd_ply + 1] = brd_moveListStart[brd_ply];
	var pceType;
	var pceNum;
	var pceIndex;
	var pce;
	var sq;
	var tsq;
	var index;
	if (brd_side == COLOURS.WHITE) {
		pceType = PIECES.wP;
		for (pceNum = 0; pceNum < brd_pceNum[pceType]; ++pceNum) {
			sq = brd_pList[PCEINDEX(pceType, pceNum)];
			if (brd_pieces[sq + 10] == PIECES.EMPTY) {
				AddWhitePawnQuietMove(sq, sq + 10);
				if (RanksBrd[sq] == RANKS.RANK_2 && brd_pieces[sq + 20] == PIECES.EMPTY) {
					AddQuietMove(MOVE(sq, (sq + 20), PIECES.EMPTY, PIECES.EMPTY, MFLAGPS));
				}
			}
			if (SQOFFBOARD(sq + 9) == BOOL.FALSE && PieceCol[brd_pieces[sq + 9]] == COLOURS.BLACK) {
				AddWhitePawnCaptureMove(sq, sq + 9, brd_pieces[sq + 9]);
			}
			if (SQOFFBOARD(sq + 11) == BOOL.FALSE && PieceCol[brd_pieces[sq + 11]] == COLOURS.BLACK) {
				AddWhitePawnCaptureMove(sq, sq + 11, brd_pieces[sq + 11]);
			}
			if (brd_enPas != SQUARES.NO_SQ) {
				if (sq + 9 == brd_enPas) {
					AddEnPassantMove(MOVE(sq, sq + 9, PIECES.EMPTY, PIECES.EMPTY, MFLAGEP));
				}
				if (sq + 11 == brd_enPas) {
					AddEnPassantMove(MOVE(sq, sq + 11, PIECES.EMPTY, PIECES.EMPTY, MFLAGEP));
				}
			}
		}
		if (brd_castlePerm & CASTLEBIT.WKCA) {
			if (brd_pieces[SQUARES.F1] == PIECES.EMPTY && brd_pieces[SQUARES.G1] == PIECES.EMPTY) {
				if (SqAttacked(SQUARES.E1, COLOURS.BLACK) == BOOL.FALSE && SqAttacked(SQUARES.F1, COLOURS.BLACK) == BOOL.FALSE) {
					AddQuietMove(MOVE(SQUARES.E1, SQUARES.G1, PIECES.EMPTY, PIECES.EMPTY, MFLAGCA));
				}
			}
		}
		if (brd_castlePerm & CASTLEBIT.WQCA) {
			if (brd_pieces[SQUARES.D1] == PIECES.EMPTY && brd_pieces[SQUARES.C1] == PIECES.EMPTY && brd_pieces[SQUARES.B1] == PIECES.EMPTY) {
				if (SqAttacked(SQUARES.E1, COLOURS.BLACK) == BOOL.FALSE && SqAttacked(SQUARES.D1, COLOURS.BLACK) == BOOL.FALSE) {
					AddQuietMove(MOVE(SQUARES.E1, SQUARES.C1, PIECES.EMPTY, PIECES.EMPTY, MFLAGCA));
				}
			}
		}
		pceType = PIECES.wN;
	} else {
		pceType = PIECES.bP;
		for (pceNum = 0; pceNum < brd_pceNum[pceType]; ++pceNum) {
			sq = brd_pList[PCEINDEX(pceType, pceNum)];
			if (brd_pieces[sq - 10] == PIECES.EMPTY) {
				AddBlackPawnQuietMove(sq, sq - 10);
				if (RanksBrd[sq] == RANKS.RANK_7 && brd_pieces[sq - 20] == PIECES.EMPTY) {
					AddQuietMove(MOVE(sq, (sq - 20), PIECES.EMPTY, PIECES.EMPTY, MFLAGPS));
				}
			}
			if (SQOFFBOARD(sq - 9) == BOOL.FALSE && PieceCol[brd_pieces[sq - 9]] == COLOURS.WHITE) {
				AddBlackPawnCaptureMove(sq, sq - 9, brd_pieces[sq - 9]);
			}
			if (SQOFFBOARD(sq - 11) == BOOL.FALSE && PieceCol[brd_pieces[sq - 11]] == COLOURS.WHITE) {
				AddBlackPawnCaptureMove(sq, sq - 11, brd_pieces[sq - 11]);
			}
			if (brd_enPas != SQUARES.NO_SQ) {
				if (sq - 9 == brd_enPas) {
					AddEnPassantMove(MOVE(sq, sq - 9, PIECES.EMPTY, PIECES.EMPTY, MFLAGEP));
				}
				if (sq - 11 == brd_enPas) {
					AddEnPassantMove(MOVE(sq, sq - 11, PIECES.EMPTY, PIECES.EMPTY, MFLAGEP));
				}
			}
		}
		if (brd_castlePerm & CASTLEBIT.BKCA) {
			if (brd_pieces[SQUARES.F8] == PIECES.EMPTY && brd_pieces[SQUARES.G8] == PIECES.EMPTY) {
				if (SqAttacked(SQUARES.E8, COLOURS.WHITE) == BOOL.FALSE && SqAttacked(SQUARES.F8, COLOURS.WHITE) == BOOL.FALSE) {
					AddQuietMove(MOVE(SQUARES.E8, SQUARES.G8, PIECES.EMPTY, PIECES.EMPTY, MFLAGCA));
				}
			}
		}
		if (brd_castlePerm & CASTLEBIT.BQCA) {
			if (brd_pieces[SQUARES.D8] == PIECES.EMPTY && brd_pieces[SQUARES.C8] == PIECES.EMPTY && brd_pieces[SQUARES.B8] == PIECES.EMPTY) {
				if (SqAttacked(SQUARES.E8, COLOURS.WHITE) == BOOL.FALSE && SqAttacked(SQUARES.D8, COLOURS.WHITE) == BOOL.FALSE) {
					AddQuietMove(MOVE(SQUARES.E8, SQUARES.C8, PIECES.EMPTY, PIECES.EMPTY, MFLAGCA));
				}
			}
		}
		pceType = PIECES.bN;
	}
	pceIndex = LoopSlideIndex[brd_side];
	pce = LoopSlidePce[pceIndex++];
	while (pce != 0) {
		for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
			sq = brd_pList[PCEINDEX(pce, pceNum)];
			for (index = 0; index < DirNum[pce]; ++index) {
				dir = PceDir[pce][index];
				t_sq = sq + dir;
				while (SQOFFBOARD(t_sq) == BOOL.FALSE) {
					if (brd_pieces[t_sq] != PIECES.EMPTY) {
						if (PieceCol[brd_pieces[t_sq]] == brd_side ^ 1) {
							AddCaptureMove(MOVE(sq, t_sq, brd_pieces[t_sq], PIECES.EMPTY, 0));
						}
						break;
					}
					AddQuietMove(MOVE(sq, t_sq, PIECES.EMPTY, PIECES.EMPTY, 0));
					t_sq += dir;
				}
			}
		}
		pce = LoopSlidePce[pceIndex++];
	}
	pceIndex = LoopNonSlideIndex[brd_side];
	pce = LoopNonSlidePce[pceIndex++];
	while (pce != 0) {
		for (pceNum = 0; pceNum < brd_pceNum[pce]; ++pceNum) {
			sq = brd_pList[PCEINDEX(pce, pceNum)];
			for (index = 0; index < DirNum[pce]; ++index) {
				dir = PceDir[pce][index];
				t_sq = sq + dir;
				if (SQOFFBOARD(t_sq) == BOOL.TRUE) {
					continue;
				}
				if (brd_pieces[t_sq] != PIECES.EMPTY) {
					if (PieceCol[brd_pieces[t_sq]] == brd_side ^ 1) {
						AddCaptureMove(MOVE(sq, t_sq, brd_pieces[t_sq], PIECES.EMPTY, 0));
					}
					continue;
				}
				AddQuietMove(MOVE(sq, t_sq, PIECES.EMPTY, PIECES.EMPTY, 0));
			}
		}
		pce = LoopNonSlidePce[pceIndex++];
	}
}
function GeneratePosKey() {
	var sq = 0;
	var finalKey = 0;
	var piece = PIECES.EMPTY;
	for (sq = 0; sq < BRD_SQ_NUM; ++sq) {
		piece = brd_pieces[sq];
		if (piece != PIECES.EMPTY && piece != SQUARES.OFFBOARD) {
			finalKey ^= PieceKeys[(piece * 120) + sq];
		}
	}
	if (brd_side == COLOURS.WHITE) {
		finalKey ^= SideKey;
	}
	if (brd_enPas != SQUARES.NO_SQ) {
		finalKey ^= PieceKeys[brd_enPas];
	}
	finalKey ^= CastleKeys[brd_castlePerm];
	return finalKey;
}
async function generateTree(source, context) {
	if (source == 'test') {
		let fStruct = context.fStruct;
		let options = context.options;
		T = R = makeTableTreeX(fStruct, options);
	} else if (source == 'main' || source == 'direct') {
		T = R = new RSG(context.spec, context.defs);
		R.initialChannels = [];
		ensureRtree(R);
		R.baseArea = 'table';
		createStaticUi(R.baseArea, R);
		addNewlyCreatedServerObjects(context.sdata, R);
		R.presentationStrategy = context.defs.defaultPresentationStrategy;
	}
	let uidRoot = R.uidRoot = R.tree.uid;
	R.rRoot = R.rNodes[uidRoot];
	R.uiRoot = R.root = R.uiNodes[uidRoot];
	return R;
}
function generateUnitList() {
	data = {
		created: {
			"246": {
				nationality: "Britain",
				tile: "London",
				type: "Fleet",
				cv: 4,
				obj_type: "unit",
				visible: {
					xset: ["West"]
				},
				_id: 246
			},
			"246": {
				nationality: "Britain",
				tile: "London",
				type: "Fleet",
				cv: 4,
				obj_type: "unit",
				visible: {
					xset: ["West"]
				},
				_id: 246
			},
			"247": {
				nationality: "Britain",
				tile: "Gibraltar",
				type: "Fortress",
				cv: 1,
				obj_type: "unit",
				visible: {
					xset: ["West"]
				},
				_id: 247
			},
			"248": {
				nationality: "Britain",
				tile: "Karachi",
				type: "Fortress",
				cv: 1,
				obj_type: "unit",
				visible: {
					xset: ["West"]
				},
				_id: 248
			}
		}
	};
	return data;
}
function generateWordFiles() {
	let i = 0; let n = 13000; let len = symbolKeys.length;
	while (i < len) {
		wordsFromToText(i, n);
		i += n;
	}
}
function generic_present(d, g) {
	let ui = ui_type_tile(g, d); return;
}
function genG(area, R) {
	console.log('before gen10 habe', R.gens.G.length, R.getSpec());
	R.gen10();
	R.gen11();
	R.gen12();
	R.gen13();
	R.gen14();
	R.gen21(area);
	presentRoot_dep(R.getSpec().ROOT, 'tree');
}
function geniales_sin_ease(canvas, item) {
	let [cv, ctx, astep, a, bstep, b, func, axes] = [canvas.cv, canvas.cx, item.astep, item.a, item.bstep, item.b, item.func, item.axes];
	cClear(cv, ctx);
	showAxes(ctx, axes);
	[a, astep] = oscillate_between(a, 0, 5, astep);
	[b, bstep] = oscillate_between(b, 0, 5, bstep);
	[item.astep, item.a, item.bstep, item.b] = [astep, a, bstep, b];
	funGraph(ctx, axes, x => b * func(a * x), "rgb(11,153,11)", 1);
	return false;
}
function genItems(n, options) { let keys = genKeys(n, options); let items = genItemsFromKeys(keys, options); return items; }
function genItemsFromKeys(keys, options = {}) {
	let items = [];
	for (const k of keys) {
		console.assert(isdef(Syms[k]), 'key not found: ' + k);
		let info = Syms[k];
		let item = infoToItem(info);
		items.push(item);
	}
	addLabels(items, options.language, options.luc);
	items = _extendItemsAndOptions(items, options);
	return items;
}
function genItemsFromObjects(list, keyProp, labelProp, options) {
	let keys = [];
	for (const l of list) keys.push(l[keyProp]);
	let items = list.map(x => infoToItem(Syms[x[keyProp]]));
	let i = 0, luc = options.luc;
	for (const item of items) {
		let label = list[i][labelProp];
		item.o = list[i];
		item.label = luc == 'c' ? toNoun(label) : luc == 'l' ? label : label.toUpperCase();
		i += 1;
	}
	items = _extendItemsAndOptions(items, options);
	return items;
}
function genKeys(n, options) {
	let [maxlen, lang, keySet] = [options.maxlen, valf(options.language, 'E'), valf(options.keySet, 'all')];
	let cond = isdef(maxlen) ? ((x) => x[lang].length <= maxlen) : null;
	let keys = _getKeysCond(n, cond, keySet);
	return keys;
}
function genLink(fname, dParent) {
	let content = stringBefore(fname, '(');
	let b = mLink(content, '#' + content, dParent, { padding: '0px 2px' }, null);
	b.addEventListener('click', showSignatureContent);
	return b;
}
function genMapData(rows, cols, shape, letters = ['X']) {
	let res = []; let topcols = cols;
	if (shape == 'reghex') {
		imiddleRow = (rows - 1) / 2;
		let colarr = _calc_hex_col_array(rows, cols);
		let maxColIndex = 2 * colarr[imiddleRow] - 1;
		let cmiddle = Math.floor(maxColIndex / 2);
		let isMiddleEmpty = (cols % 2 == 0);
		let line = isMiddleEmpty ? ' ' : chooseRandom(letters);
		for (let r = 0; r < rows; r++) {
			let rest = '';
			let isLetter = (line == ' ');
			let numLetters = Math.floor(colarr[r] / 2);
			for (let c = cmiddle + 1; c < maxColIndex; c++) {
				if (isLetter && numLetters > 0) {
					rest += chooseRandom(letters);
					numLetters -= 1;
				}
				else { rest += ' '; }
				isLetter = (!isLetter);
			}
			let revrest = reverseString(rest);
			revrest = replaceNonEmptyByRandom(revrest, letters);
			res.push(revrest + line + rest);
			line = line == ' ' ? chooseRandom(letters) : ' ';
		}
		let line0 = res[0];
		topcols = 0; for (const letter of line0) { if (letter != ' ') cols += 1; }
	} else if (shape == 'regquad') {
		for (let r = 0; r < rows; r++) {
			let line = '';
			for (let c = 0; c < cols; c++) {
				line += chooseRandom(letters);
			}
			res.push(line);
		}
	}
	return [res, topcols];
}
function genPicto() {
	let key = chooseRandom(iconKeys);
	return { obj_type: 'picto', key: key, oid: getUID() };
}
function genServerDataCards(n = 3) {
	let sdata = {};
	for (let i = 0; i < n; i++) { let c = genCard(); sdata[c.oid] = c; }
	return sdata;
}
function genServerDataCards52(n = 3) {
	let sdata = {};
	for (let i = 0; i < n; i++) { let c = genCard52Key(); sdata[c.oid] = c; }
	return sdata;
}
function genServerDataCatan(rows = 3, cols = 1) {
	let resources = { W: 'wood', Y: 'wheat', B: 'brick', O: 'ore', S: 'sheep' };
	let [mapData, topcols] = genMapData(rows, cols, 'reghex', Object.keys(resources));
	cols = topcols;
	let shape = 'hex';
	let line0 = mapData[0];
	cols = 0; for (const letter of line0) { if (letter != ' ') cols += 1; }
	rows = mapData.length;
	let b1 = new SimpleGrid('b1', {
		mapData: mapData,
		shape: shape,
		rows: rows,
		cols: cols,
		hasEdges: true,
		hasNodes: true,
		randomizeIds: true,
		mapData: mapData,
	});
	let sdata = {};
	let oidBoard = getUID();
	let board = simpleGridToServerData(b1);
	sdata[oidBoard] = board;
	board.oid = oidBoard;
	let fields = Object.values(b1.objects).filter(x => x.obj_type == 'field');
	let numbers = arrRange(2, 12);
	for (const oid in b1.objects) {
		let o = jsCopy(b1.objects[oid]);
		o.oid = o.id; delete o.id;
		o.obj_type = capitalize(o.obj_type);
		if (o.obj_type == 'Field') {
			o.letter = b1.mapData[o.row][o.col];
			o.res = resources[o.letter];
			o.num = chooseRandom(numbers);
		} else { delete o.row; delete o.col; }
		if (isdef(o.neighbors)) o.neighbors = o.neighbors.map(x => (x ? { _obj: x } : null));
		if (isdef(o.edges)) o.edges = o.edges.map(x => (x ? { _obj: x } : null));
		if (isdef(o.corners)) o.corners = o.corners.map(x => (x ? { _obj: x } : null));
		if (isdef(o.fields)) o.fields = o.fields.map(x => (x ? { _obj: x } : null));
		sdata[o.oid] = o;
	}
	Object.values(sdata).map(x => stripObject(x, ['x', 'y', 'x1', 'x2', 'y1', 'y2', 'thickness', 'w', 'h', 'done', 'rightField', 'leftField', 'startNode', 'endNode', 'poly']))
	return sdata;
}
function genServerDataGeneralBoard(rows = 3, cols = 1, shape = 'quad', hasNodes = true, hasEdges = false, { mapVariant = 'reg', fieldContent = { A: 'hallo', B: 'heduda' }, nodeContent, edgeContent } = {}) {
	let mapSpec = isdef(mapVariant) ? mapVariant + shape : shape;
	let [mapData, topcols] = genMapData(rows, cols, mapSpec, Object.keys(fieldContent));
	rows = mapData.length;
	let b1 = new SimpleGrid('b1', {
		mapData: mapData,
		shape: shape,
		rows: rows,
		cols: topcols,
		hasEdges: hasEdges,
		hasNodes: hasNodes,
		randomizeIds: true,
		mapData: mapData,
	});
	let sdata = {};
	let oidBoard = getUID();
	let board = simpleGridToServerData(b1);
	sdata[oidBoard] = board;
	board.oid = oidBoard;
	let fields = Object.values(b1.objects).filter(x => x.obj_type == 'field');
	for (const oid in b1.objects) {
		let o = jsCopy(b1.objects[oid]);
		o.oid = o.id; delete o.id;
		o.obj_type = capitalize(o.obj_type);
		if (o.obj_type == 'Field' && isdef(fieldContent)) {
			o.mapKey = b1.mapData[o.row][o.col];
			o.content = fieldContent[o.mapKey];
		} else { delete o.row; delete o.col; }
		if (isdef(o.neighbors)) o.neighbors = o.neighbors.map(x => (x ? { _obj: x } : null));
		if (isdef(o.edges)) o.edges = o.edges.map(x => (x ? { _obj: x } : null));
		if (isdef(o.corners)) o.corners = o.corners.map(x => (x ? { _obj: x } : null));
		if (isdef(o.fields)) o.fields = o.fields.map(x => (x ? { _obj: x } : null));
		if (o.obj_type == 'Corner' && isdef(nodeContent)) {
			o.content = chooseRandom(Object.values(nodeContent));
		} else if (o.obj_type == 'Edge' && isdef(edgeContent)) {
			o.content = chooseRandom(Object.values(edgeContent));
			console.log('edge:', o)
		}
		sdata[o.oid] = o;
	}
	Object.values(sdata).map(x => stripObject(x, ['x', 'y', 'x1', 'x2', 'y1', 'y2', 'thickness', 'w', 'h', 'done', 'rightField', 'leftField', 'startNode', 'endNode', 'poly']))
	return sdata;
}
function genServerDataPicto(n = 3) {
	let sdata = {};
	for (let i = 0; i < n; i++) { let c = genPicto(); sdata[c.oid] = c; }
	return sdata;
}
function genServerDataTtt(rows = 3, cols = 3) {
	let [mapData, topcols] = genMapData(rows, cols, 'regquad', ['X']);
	let shape = 'quad';
	let b1 = new SimpleGrid('b1', {
		mapData: mapData,
		shape: shape,
		rows: rows,
		cols: cols,
		hasEdges: false,
		hasNodes: false,
		randomizeIds: true,
		mapData: mapData,
	});
	let sdata = {};
	let oidBoard = getUID();
	let board = simpleGridToServerData(b1);
	sdata[oidBoard] = board;
	board.oid = oidBoard;
	let fields = Object.values(b1.objects).filter(x => x.obj_type == 'field');
	let numbers = arrRange(2, 12);
	for (const oid in b1.objects) {
		let o = jsCopy(b1.objects[oid]);
		o.oid = o.id; delete o.id;
		o.obj_type = capitalize(o.obj_type);
		if (o.obj_type == 'Field') {
			o.letter = b1.mapData[o.row][o.col];
		} else { delete o.row; delete o.col; }
		if (isdef(o.neighbors)) o.neighbors = o.neighbors.map(x => (x ? { _obj: x } : null));
		if (isdef(o.edges)) o.edges = o.edges.map(x => (x ? { _obj: x } : null));
		if (isdef(o.corners)) o.corners = o.corners.map(x => (x ? { _obj: x } : null));
		if (isdef(o.fields)) o.fields = o.fields.map(x => (x ? { _obj: x } : null));
		sdata[o.oid] = o;
	}
	Object.values(sdata).map(x => stripObject(x, ['x', 'y', 'x1', 'x2', 'y1', 'y2', 'thickness', 'w', 'h', 'done', 'rightField', 'leftField', 'startNode', 'endNode', 'poly']))
	return sdata;
}
function germanize(s) { return toUmlaut(s); }
function get_account() {
	let udata = get_current_userdata();
	mBy("inner_left_panel").innerHTML = present_account(udata);
}
function get_account_dep() { get_data({}, "account"); }
function get_account_info() { get_data({}, "account"); }
function get_admin_player(list) {
	let res = valf(firstCond(list, x => x == 'mimi'), firstCond(list, x => ['felix', 'amanda', 'lauren'].includes(x)));
	return res ?? list[0];
}
function get_app_presenter(id) {
	let di = {};
	return di[id] || generic_present;
}
function get_approx_derivative(f, dx) { }
function get_approx_integral(f, dx) { }
function get_auction_history(fen) {
	let lines = [];
	let revorder = jsCopy(fen.plorder).reverse();
	for (const uplayer of revorder) {
		if (nundef(fen.buy[uplayer])) continue;
		lines.push(`${uplayer} buys ${fen.buy[uplayer].a} for ${fen.second_most}`);
	}
	lines.push(`auction winner(s)${fen.maxplayers.length > 1 ? 's' : ''}: ${fen.maxplayers.join(', ')}`);
	for (const uplayer of revorder) {
		lines.push(`${uplayer} bids ${fen.auction[uplayer]}`);
	}
	return lines;
}
function get_available_goals(plname) {
	return Z.fen.availableGoals.filter(x => !Z.fen.players[plname].goals[x]);
}
function get_bar_values() {
	let res = {};
	for (const color in DA.bars) {
		let bar = DA.bars[color];
		res[color] = bar.w;
	}
	return res;
}
function get_boa_footer1() {
	return mCreateFrom(img_html('boa_footer.jpg', fulldim = 'width'));
}
function get_boa_footer2() {
	let d = mDiv(null, { matop: 25, padding: 10, box: true });
	mAppend(d, mCreateFrom(img_html('boa_footer2.jpg', fulldim = 'width')));
	return d;
}
function get_boa_pwd_input() { return document.getElementById('tlpvt-passcode-input'); }
function get_boa_start_content() {
	let img = `<img src='../rechnung/images/boa_start_pic.JPG' width='100%'>`;
	return mCreateFrom(img);
}
function get_boa_userid_input() { return document.getElementById('enterID-input'); }
function get_boalogin_html() {
	let html = `
    <div id="dBoaLogin" class="fsd-layout fsd-2c-700lt-layout">
      <div class="fsd-border">
        <div class="center-content">
          <div class="columns">
            <div class="flex-col lt-col">
              <div class="online-id-vipaa-module">
                <div class="enter-skin phoenix">
                  <form
                    class="simple-form collector-form-marker"
                    name="enter-online-id-form"
                    id="EnterOnlineIDForm"
                    method=""
                    action="javascript:onclick_submit_boa_login();"
                    autocomplete="off"
                    novalidate="novalidate"
                  >
                    <div class="online-id-section">
                      <label for="enterID-input">
                        User ID
                        <span class="ada-hidden">Must be at least 6 characters long</span>
                      </label>
                      <input
                        type="text"
                        id="enterID-input"
                        name="dummy-onlineId"
                        maxlength="32"
                        value=""
                        autocomplete="off"
                        class="cs-enterID-input"
                        autocapitalize="none"
                        autocorrect="off"
                        spellcheck="false"
                      />
                      <div class="remember-info">
                        <input type="checkbox" id="remID" name="saveMyID" class="cs-remID" autocapitalize="none" autocorrect="off" spellcheck="false" />
                        <label for="remID">Save this User ID</label>
                        <a
                          class="boa-dialog force-xlarge info-layer-help-fsd dotted"
                          href="javascript:void(0);"
                          name="online-id-help"
                          rel="help-content"
                          title="Help"
                        >
                          <span class="ada-hidden">Online ID Help</span>
                          <span class="boa-ada-text ada-hidden">&nbsp;layer</span>
                        </a>
                        <div class="clearboth"></div>
                      </div>
                    </div>
                    <input
                      aria-hidden="true"
                      type="password"
                      class="tl-private cs-input"
                      name="new-passcode"
                      maxlength="20"
                      style="display: none"
                      value=""
                      autocapitalize="none"
                      autocorrect="off"
                      spellcheck="false"
                    />
                    <label for="tlpvt-passcode-input" class="mtop-15">
                      Password
                      <span class="ada-hidden">is unavailable. Please enter atleast 6 characters of online id to enable Passcode</span>
                    </label>
                    <div class="TL_NPI_Pass">
                      <input
                        type="password"
                        class="tl-private fl-lt cs-tlpvt-passcode-input"
                        id="tlpvt-passcode-input"
                        name="dummy-passcode"
                        maxlength="20"
                        value=""
                        autocomplete="off"
                        autocapitalize="none"
                        autocorrect="off"
                        spellcheck="false"
                      />
                    </div>
                    <a href="#" class="fl-lt forgot-passcode" name="forgot-your-passcode">Forgot your Password?</a>
                    <div class="clearboth"></div>
                    <a
                      href="javascript:void(0);"
                      onclick="enterOnlineIDFormSubmit();"
                      title="Log In"
                      class="btn-bofa btn-bofa-blue btn-bofa-small behbio btn-bofa-noRight"
                      name="enter-online-id-submit"
                    >
                      <span class="btn-bofa-blue-lock">Log In</span>
                    </a>
                    <a href="javascript:void(0);" id="signin-mobile-app" name="signin-mobile-app" class="displayNone">Log In with mobile app</a>
                    <a href="javascript:void(0);" id="signin-with-passcode" name="signin-with-passcode" class="hidden">Log In with Password</a>
                    <a href="javascript:void(0);" id="signin-with-windows-hello" name="signin-with-windows-hello" class="bold hidden">
                      Log in with Windows Hello
                    </a>
                    <div class="digital-id-notify phoenix hidden" id="digital-id-success-message">
                      <div class="digital-id-head">Check your mobile device</div>
                      <span class="circle-animation">
                        <div class="circle-inline">Loading</div>
                        <div class="loading-circle circle-inline">
                          <div class="circle-bounce1"></div>
                          <div class="circle-bounce2"></div>
                          <div class="circle-bounce3"></div>
                        </div>
                      </span>
                      <p class="digital-id-msg">
                        We sent a notification to your registered device. Verify your identity in the app now to log in to Online Banking.
                      </p>
                      <a href="javascript:void(0);" class="digital-id-link send-notification-again">Send notification again</a>
                      <a href="javascript:void(0);" class="digital-id-link sign-in-with-passcode-instead">Log In with Password instead</a>
                    </div>
                    <div class="digital-id-notify phoenix hidden" id="digital-id-general-error">
                      <div class="digital-id-head">Check your mobile device</div>
                      <p class="digital-id-msg">
                        If you're enrolled in this security feature, we sent a notification to your registered device. Verify your identity in the app now to
                        log in to Online Banking.
                      </p>
                      <a href="javascript:void(0);" class="digital-id-link send-notification-again">Send notification again</a>
                      <a href="javascript:void(0);" class="digital-id-link sign-in-with-passcode-instead">Log In with Password instead</a>
                    </div>
                    <div class="digital-id-notify phoenix hidden" id="digital-id-max-error">
                      <div class="digital-id-head">Check your mobile device</div>
                      <p class="digital-id-msg">We can't identify you at this time. Please use your User ID/Password to log in.</p>
                      <a href="javascript:void(0);" class="digital-id-link sign-in-with-passcode-instead">Log In with Password instead</a>
                    </div>
                    <div class="clearboth"></div>
                    <input type="hidden" name="_ia" id="_iaID" class="cs-_iaID" autocapitalize="none" autocorrect="off" spellcheck="false" />
                    <input
                      type="hidden"
                      name="_u2support"
                      id="u2supportID"
                      value="1"
                      class="cs-u2supportID"
                      autocapitalize="none"
                      autocorrect="off"
                      spellcheck="false"
                    />
                    <input
                      type="hidden"
                      name="webAuthAPI"
                      id="webAuthAPIID"
                      value="true"
                      class="cs-webAuthAPIID"
                      autocapitalize="none"
                      autocorrect="off"
                      spellcheck="false"
                    />
                  </form>
                  <!-- #region nach form -->
                  <div id="fpContainer" class="" style="width: 50%"></div>
                  <!-- Mobile CTA: Borneo version of 'Get the app' widget on the signOnV2 page -->
                  <!-- Normal Scenario -->
                  <div class="mobile-cta-section vertical-dotted-line fl-rt">
                    <p class="cnx-regular title enroll-color-gray mbtm-10">Stay connected with our app</p>
                    <img height="208" width="149" src="../rechnung/images/mobile_llama.png" alt="Mobile banking Llama" class="fl-lt" />
                    <div class="get-app-content-section">
                      <div class="cnx-regular title enroll-color-gray mcta-bubble">Secure, convenient banking anytime</div>
                      <a
                        id="choose-device-get-the-app"
                        name="choose-device-get-the-app"
                        class="choose-device-get-the-app-modal btn-bofa btn-bofa-red btn-bofa-noRight cnx-regular"
                        href="javascript:void(0);"
                        rel="mobile-app-download-choose-device"
                      >
                        <span>Get the app</span>
                        <span class="ada-hidden">&nbsp; link opens a new info modal layer</span>
                      </a>
                    </div>
                  </div>
                  <!-- #endregion -->
                </div>
              </div>
              <!-- #region body rest -->
              <div class="modal-mobile-module hide">
                <div class="get-app-skin aps-mobile-products">
                  <h3>{title}</h3>
                  <div class="content-wrapper three-col">
                    <div class="{storeLogo}">
                      <div class="column app-box">
                        <h4 class="sprite sprite-I5 sprited">
                          Download directly to your mobile device.
                          <div class="spr"></div>
                        </h4>
                        <a
                          class="sprite store-icon {storeLogo} sprited"
                          name="{storeName}"
                          href="#"
                          id="{storeId}"
                          target="_blank"
                        >
                          <span class="ada-hidden">{storeLinkText}</span>
                          <div class="spr"></div>
                        </a>
                        <p class="{notice}">{noticeText}</p>
                      </div>
                      <div class="column comm-box {text}{email}">
                        <h4 class="sprite sprite-J5 {text} sprited">
                          We'll text you a link to download the app.
                          <div class="spr"></div>
                        </h4>
                        <h4 class="sprite sprite-L5 row-2 {email} sprited">
                          We'll email you a link to download the app.
                          <div class="spr"></div>
                        </h4>
                        <form action="" id="mobile_app_download_url">
                          <div id="field-level-error" role="alert"><span class="ada-hidden"></span></div>
                          <div class="{text}">
                            <label
                              class="ada-hidden"
                              for="tlpvt-mob_app_download_phone_num"
                              name="mobile_app_download_phone_prompt"
                              id="mobile_app_download_phone_prompt"
                            >
                              {placeholderText}
                            </label>
                            <input
                              type="text"
                              name="mobile_app_download_phone_number"
                              id="tlpvt-mob_app_download_phone_num"
                              class="phone-input {text} tl-private cs-tlpvt-mob_app_download_phone_num"
                              placeholder="{placeholderText}"
                              autocapitalize="none"
                              autocorrect="off"
                              spellcheck="false"
                            />
                          </div>
                          <div class="{email}">
                            <label
                              class="ada-hidden"
                              for="tlpvt-mob_app_download_email_id"
                              name="mobile_app_download_email_prompt"
                              id="mobile_app_download_email_prompt"
                            >
                              {emailPlaceholderText}
                            </label>
                            <input
                              type="text"
                              name="mobile_app_download_email_id"
                              id="tlpvt-mob_app_download_email_id"
                              class="email-input {email} tl-private cs-tlpvt-mob_app_download_email_id"
                              placeholder="{emailPlaceholderText}"
                              autocapitalize="none"
                              autocorrect="off"
                              spellcheck="false"
                            />
                          </div>
                          <a
                            href="javascript:void(0);"
                            name="anc-send-email-button"
                            class="btn-bofa btn-bofa-small btn-bofa-noRight"
                            id="mobile_app_download_send_button"
                            onclick="onclick_button_line_844()"
                          >
                            Send
                          </a>
                          <div class="clearboth"></div>
                          <p class="{text}">
                            By providing your mobile number you are consenting to receive a text message. Text message fees may apply from your carrier. Text
                            messages may be transmitted automatically.
                          </p>
                        </form>
                      </div>
                      <div class="column info-box">
                        <h4 class="sprite sprite-K5 sprited">
                          Visit bankofamerica.com in your mobile web browser for a link to download the app.
                          <div class="spr"></div>
                        </h4>
                      </div>
                    </div>
                    <div class="other-device-info {deviceStatus}">
                      <div>
                        <p>Our mobile app is not available for all devices</p>
                        <a
                          href="#"
                          class="style-link guillemet-right"
                          name="anc_learn_more_about_phone_banking"
                        >
                          Learn about your Banking by Phone options&nbsp;
                          <span class="guillemet ls-n1 f-11 ls-n2 guillement-set">��</span>
                        </a>
                      </div>
                    </div>
                    <div class="confirmation-screen hide">
                      <div class="inline-ack-msg sprite sprite-D7 sprited">
                        <span class="ada-hidden"></span>
                        <span class="message"></span>
                        <span id="inputHolder" class="TL_NPI_L1"></span>
                        <div class="spr"></div>
                      </div>
                      <div class="button-wrapper">
                        <a href="javascript:;" class="btn-bofa btn-bofa-blue btn-bofa-small" name="anc-close-button" id="confirmModalCloseButton">Close</a>
                        <a href="javascript:;" class="btn-bofa btn-bofa-small btn-bofa-noRight" name="anc-send-another-link" id="confirmModalSendAnotherLink">
                          Send another link
                        </a>
                      </div>
                    </div>
                    <div class="processing hide">
                      <span class="ada-hidden">Please wait. Your request is being processed.</span>
                      <span class="modal-skin-processing-text">Please wait...</span>
                    </div>
                    <div class="clearboth"></div>
                  </div>
                </div>
              </div>
              <div id="mobile-app-download-flex-modal" class="aps-mobile-products"></div>
              <style type="text/css">
                .aps-mobile-products .sprite .spr {
                  background-image: url('/content/images/ContextualSiteGraphics/Instructional/en_US/aps-mobile-products-icon-sprite-dev.png');
                  background-size: 700px 550px;
                }
              </style>
              <div class="mobile-app-download-module hide" id="mobile-app-download-choose-device">
                <div class="choose-device-modal-skin">
                  <h3>Select your device</h3>
                  <div class="flex-modal-main-content">
                    <p>Please select your device to continue:</p>
                    <label for="device-pulldown" class="ada-hidden">Select your device. Press TAB to continue after making selection.</label>
                    <select id="device-pulldown" name="device-pulldown" class="select-bofa">
                      <option value="Select your device">Select your device</option>
                      <option value="iPhone">iPhone</option>
                      <option value="iPad">iPad</option>
                      <option value="Android">Android</option>
                      <option value="Other">Other</option>
                    </select>
                    <div class="clearboth"></div>
                    <a
                      href="javascript:void(0);"
                      id="choose-device"
                      class="btn-bofa btn-bofa-red btn-disabled get-app-modal-trigger btn-bofa-noRight"
                      name="choose-device"
                      rel="choose-device-modal"
                    >
                      Continue
                      <span class="ada-hidden">&nbsp; link opens a new info modal layer</span>
                    </a>
                  </div>
                </div>
              </div>
              <style type="text/css">
                .aps-mobile-products .sprite-D5 > .spr {
                  width: 50px !important;
                  left: 25px !important;
                  top: -5px !important;
                }
                .aps-mobile-products .sprite-J8 > .spr {
                  height: 51px;
                  width: 50px !important;
                  background-position: -522px -410px !important;
                  left: 30px !important;
                }
                .aps-mobile-products .sprite-F5 > .spr {
                  width: 50px !important;
                  left: 25px !important;
                  top: -5px !important;
                }
              </style>
              <!-- #endregion body rest -->
            </div>
            <div class="flex-col rt-col">
              <div class="side-well-vipaa-module">
                <div class="fsd-ll-skin">
                  <h2>Login help</h2>
                  <ul class="li-pbtm-15">
                    <li>
                      <a class="arrow" href="#" name="Forgot ID/Password?">Forgot ID/Password?</a>
                    </li>
                    <li>
                      <a class="arrow" href="#" name="Problem logging in?">Problem logging in?</a>
                    </li>
                  </ul>
                </div>
                <div class="fsd-ll-skin">
                  <h2>Not using Online Banking?</h2>
                  <ul class="li-pbtm-15">
                    <li>
                      <a class="arrow" href="#" name="Enroll_now">
                        Enroll now
                        <span class="ada-hidden">for online Banking</span>
                      </a>
                    </li>
                    <li>
                      <a class="arrow" href="#" name="Learn_more_about_Online_Banking_dotcom">
                        Learn more about Online Banking
                      </a>
                    </li>
                    <li>
                      <a class="arrow" href="#" name="Service_Agreement_dotcom">
                        Service Agreement
                      </a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            <div class="clearboth"></div>
          </div>
        </div>
      </div>
    </div>
  `;
	return mCreateFrom(html);
}
function get_bstp() {
	const actions = {
		obst: 'apfel orange assorted plum granat',
		veggie: 'karotte kartoffel purree kohlsprossen zwiebel knoblauch assorted',
		backen: 'almondhorn gugelhupf vanillekipferl striezelteig apfelmus marm',
		kochen: 'purree hameggs omelette soup mushroom pizza',
		spaz: 'femto micro macro standard 104 tennis HS safeway libTJ',
		klavier: 'op111 wald1 mond3 etude nocturne ballade ital mozartB mozartKKC kk3_3 kk5_2',
		putzen: 'herd counter kueche eingang guklo stiege loft/guzi wohnzi',
		erltm: 'post zahlen scan emailtm discordtm termin',
		deconstruction: 'video sleep walkthink libthink starbucksthink',
	};
	let time = rNumber(1, 5);
	let points = rNumber(1, 3);
	let key = rChoose(get_keys(actions));
	let val = rChoose(actions[key]);
	console.log('val', val);
}
function get_building_with_rumor(fen, plname) {
	let buildings = fen.players[plname].buildings;
	for (const type in buildings) {
		let i = 0;
		for (const b of buildings[type]) {
			if (isdef(b.rumors)) {
				b.type = type;
				b.path = `players.${plname}.buildings.${type}.${i}`;
				return b;
			}
			i++;
		}
	}
	return null;
}
function get_card_div(R1 = '1', SB = 'B') {
	let key52 = get_card_key52(R1, SB);
	let svgCode = C52['card_1B'];
	svgCode = '<div>' + svgCode + '</div>';
	let el = mCreateFrom(svgCode);
	[w, h] = [isdef(w) ? w : Card.w, isdef(h) ? h : Card.sz];
	mSize(el, w, h);
	return el;
}
function get_card_key52(R1 = '1', SB = 'B') {
	return `card_${Rank1}${SuitB}`;
}
function get_center(d) { let r = getRect(d); return [r.w / 2, r.h / 2]; }
function get_chat(e) { get_data({ username: CURRENT_CHAT_USER }, "chats"); }
function get_chats(e) { get_data({ username: CURRENT_CHAT_USER }, "chats"); }
function get_checked_radios(rg) {
	let inputs = rg.getElementsByTagName('INPUT');
	let list = [];
	for (const ch of inputs) {
		let checked = ch.getAttribute('checked');
		if (ch.checked) list.push(ch.value);
	}
	return list;
}
function get_circle(center, styles = {}) {
	addKeys({ opacity: isdef(styles.bg) ? 1 : 0, sz: 10, fg: 'black' }, styles)
	styles = styles_to_leaflet_options(styles);
	styles.x = center.lon; styles.y = center.lat; styles.center = center;
	return L.circle(center, styles);
}
async function get_cities_and_capitals() {
	let cities = await route_path_yaml_dict('../base/assets/cities.yaml');
	let cont_by_country = {};
	for (const continent in Geo.continents) {
		for (const country of Geo.continents[continent]) {
			cont_by_country[country] = continent;
		}
	}
	let res = {}; let capitals = [];
	for (const c in cities) {
		let s = cities[c];
		let ws = s.split(',').map(x => x.trim());
		let o = { name: c, lon: Number(ws[0]), lat: Number(ws[1]), country: ws[2], type: ws[3], pop: Number(ws[4]) };
		o.center = [o.lat, o.lon];
		if (o.type == 'capital') capitals.push(c);
		o.continent = cont_by_country[o.country];
		if (nundef(o.continent)) { console.log('no continent for', o.country); break; }
		res[c.toLowerCase()] = o;
	}
	Geo.cities = res;
	Geo.capitals = capitals;
}
function get_clicks_from_playerdata() {
	let clicks = { green: 0, red: 0 };
	for (const pl of Z.playerdata) {
		let state = pl.state;
		if (!isEmpty(state)) {
			for (const k of ['green', 'red']) {
				if (state[k] > 0) {
					clicks[k] += state[k];
				}
			}
		}
	}
	return clicks;
}
function get_column(board, column) {
	var col = []
	for (let row = 0; row < 9; row++) {
		col.push(board[row][column]);
	}
	return col
}
function get_contacts(e) { get_data({}, "contacts"); }
function get_contacts_dep(e) { get_data({}, "contacts"); }
function get_container_styles(styles = {}) { let defaults = valf(Config.ui.container, {}); defaults.position = 'relative'; addKeys(defaults, styles); return styles; }
function get_containertitle_styles(styles = {}) { let defaults = valf(Config.ui.containertitle, {}); defaults.position = 'absolute'; addKeys(defaults, styles); return styles; }
function get_create_staged(fen, options, player_names) {
	let t = create_table(options, player_names);
	t.fen = fen;
	to_server({ table: t }, 'delete_and_create_staged');
}
function get_create_table(user, game) {
	Session.cur_tid = Session.cur_table = null;
	Session.scoring_complete = false;
	let t = {};
	t.friendly = generate_friendly_table_name();
	t.game = Session.cur_game;
	t.host = Session.cur_user;
	t.players = valf(lookup(Session, ['game_options', 'players']), get_def_players_for_user(Session.cur_user));
	t.fen = 'noneed';
	t.options = valf(lookup(Session, ['game_options', 'game']), {});
	t.status = 'started';
	t.host_status = 'joined';
	t.player_status = 'joined';
	t.player_init = {};
	t.fen = get_start_data_fen(t.players, t.game);
	to_server(t, 'create_table_and_start');
}
function get_csv_example() {
	let csv = `"Model","mpg","cyl","disp","hp","drat","wt","qsec","vs","am","gear","carb"
  "Mazda RX4",21,6,160,110,3.9,2.62,16.46,0,1,4,4
  "Mazda RX4 Wag",21,6,160,110,3.9,2.875,17.02,0,1,4,4
  "Datsun 710",22.8,4,108,93,3.85,2.32,18.61,1,1,4,1
  "Hornet 4 Drive",21.4,6,258,110,3.08,3.215,19.44,1,0,3,1
  "Hornet Sportabout",18.7,8,360,175,3.15,3.44,17.02,0,0,3,2
  "Valiant",18.1,6,225,105,2.76,3.46,20.22,1,0,3,1
  "Duster 360",14.3,8,360,245,3.21,3.57,15.84,0,0,3,4
  "Merc 240D",24.4,4,146.7,62,3.69,3.19,20,1,0,4,2
  "Merc 230",22.8,4,140.8,95,3.92,3.15,22.9,1,0,4,2
  "Merc 280",19.2,6,167.6,123,3.92,3.44,18.3,1,0,4,4
  "Merc 280C",17.8,6,167.6,123,3.92,3.44,18.9,1,0,4,4
  "Merc 450SE",16.4,8,275.8,180,3.07,4.07,17.4,0,0,3,3
  "Merc 450SL",17.3,8,275.8,180,3.07,3.73,17.6,0,0,3,3
  "Merc 450SLC",15.2,8,275.8,180,3.07,3.78,18,0,0,3,3
  "Cadillac Fleetwood",10.4,8,472,205,2.93,5.25,17.98,0,0,3,4
  "Lincoln Continental",10.4,8,460,215,3,5.424,17.82,0,0,3,4
  "Chrysler Imperial",14.7,8,440,230,3.23,5.345,17.42,0,0,3,4
  "Fiat 128",32.4,4,78.7,66,4.08,2.2,19.47,1,1,4,1  `;
	return csv;
}
function get_cur_menu() { if (isdef(Session.cur_menu)) window['get_' + Session.cur_menu](); }
function get_current_superdi(dir) {
	let diall = fromYamlFile(dir + 'z_all.yaml'); // const var cla func
	let dicode = fromYamlFile(dir + 'z_allcode.yaml'); // names
	let dihistory = fromYamlFile(dir + 'z_allhistory.yaml'); // names
	let superdi = {};
	for (const type in diall) {
		for (const k in diall[type]) {
			let o = diall[type][k];
			o.code = dicode[k];
			o.history = dihistory[k];
			lookupSet(superdi, [type, k], o);
		}
	}
	return superdi;
}
function get_current_userdata() { return DB.users[Session.cur_user]; }
function get_data(find, type) {
	var xml = new XMLHttpRequest();
	var loader_holder = mBy("loader_holder");
	loader_holder.className = "loader_on";
	xml.onload = function () {
		if (xml.readyState == 4 || xml.status == 200) {
			loader_holder.className = "loader_off";
			handle_result(xml.responseText, type);
		}
	}
	var data = {};
	data.find = find;
	data.data_type = type;
	data = JSON.stringify(data);
	xml.open("POST", "test.php", true);
	xml.send(data);
}
function get_data_offline_orig(find, type) {
	let response = {};
	switch (type) {
		case 'user_info':
		case 'account':
			if (nundef(find.user)) find.user = Session.cur_user;
			let u = response.message = DB.users[find.user];
			response.name = u.username;
			break;
		case 'contacts':
			let usernames = Object.keys(DB.users).filter(x => x != Session.cur_user);
			response.myusers = usernames.map(x => DB.users[x]);
			break;
	}
	response.data_type = type;
	handle_result(JSON.stringify(response), type);
}
function get_data_online_orig(find, type) {
	var xml = new XMLHttpRequest();
	var loader_holder = mBy("loader_holder");
	loader_holder.className = "loader_on";
	xml.onload = function () {
		if (xml.readyState == 4 || xml.status == 200) {
			loader_holder.className = "loader_off";
			handle_result(xml.responseText, type);
		}
	}
	var data = {};
	data.find = find;
	data.data_type = type;
	data = JSON.stringify(data);
	xml.open("POST", "server/api.php", true);
	xml.send(data);
}
function get_data_orig(find, type) {
	if (is_online()) {
		get_data_online(find, type);
	} else {
		if (type == 'chat') {
			alert('no internet!');
			mClassReplace(mBy("label_chat"), 'enabled', 'disabled');
		}
		get_data_offline(find, type);
	}
}
function get_def_players_for_user(uname, list) {
	if (nundef(list)) list = Session.def_players;
	removeInPlace(list, uname);
	list.unshift(uname);
	Session.def_players = list;
	return list;
}
function get_default_options(gamename) {
	let options = {};
	for (const k in Config.games[gamename].options) options[k] = arrLast(Config.games[gamename].options[k]);
	return options;
}
function get_dictionary() {
	let u = DB.users[Session.cur_user];
	let lang = valf(u.lang, 'E');
	if (isdef(Dictionary) && isdef(Dictionary[lang])) return;
	to_server(lang, 'dictionary');
}
function get_distance(from, to) {
	var fromLatLng = L.latLng(from);
	var toLatLng = L.latLng(to);
	var dis = fromLatLng.distanceTo(toLatLng);
	console.log('distance in meters', dis);
	return dis;
}
function get_elo(user, game) { return lookup(DB.users, [user, 'games', game, 'elo']) ?? 100; }
function get_fake_boa_data() { if (nundef(DA.boadata)) DA.boadata = DIBOA.boa_data; return DA.boadata; }
function get_fake_boa_data_list() { if (nundef(DA.boadata)) DA.boadata = dict2list(DIBOA.boa_data, 'key'); return DA.boadata; }
function get_fake_bw_cards() {
	const cards = {
		'amazon': { sub: '*5555', logo: 'visa.png' },
		'amex': { sub: '*4554', logo: 'amex.png' },
		'becu': { sub: '*1331', logo: 'mastercard.png' },
		'becu other': { sub: '*7575', logo: 'mastercard.png' },
		'boa debit': { sub: '*8585', logo: 'visa.png' },
		'boa leprop': { sub: '*0898', logo: 'visa.png' },
		'costco': { sub: '*6565', logo: 'visa.png' },
		'disco': { sub: '*1324', logo: 'discover.png' },
		'fidel rewards': { sub: '*6456', logo: 'visa.png' },
		'flexper': { sub: '*9789', logo: 'visa.png' },
		'heritage': { sub: '*3131', logo: 'mastercard.png' },
		'premblue': { sub: '*0898', logo: 'visa.png' },
		'visa2': { sub: '*0797', logo: 'visa.png' },
		'zz credit': { sub: '*1432', logo: 'visa.png' },
	};
	return cards;
}
function get_fake_bw_logins() {
	const logins = {
		'bw': { link: '', sub: 'gilee144', p: '', acc: '*5555', logo: 'bw.png' },
		'boa': { link: '', sub: 'gilee144', p: 'boa.png', acc: '*5555', logo: 'boa.png' },
		'authy': { link: '', sub: 'agfil22', p: 'authy.png', acc: '*5555', logo: 'authy.png' },
		'authenticator': { link: '', sub: 'amf234', p: '', acc: '*5555', logo: 'authenticator.png' },
		'skype': { link: '', sub: 'agile34', p: '', acc: '*5555', logo: 'skype.png' },
		'onedrive': { link: '', sub: 'agand23', p: '', acc: '*5555', logo: 'onedrive.png' },
	}
	return logins;
}
function get_first_player(otree) { return otree.player_names[0]; }
function get_func(itemtype, cmd) { return window[`${itemtype}_${cmd}`]; }
function get_game_color(game) { return colorFrom(Config.games[game].color); }
function get_game_option(g, key) {
	let set_option = lookup(Session, ['cur_table', 'options', key]);
	if (set_option) return set_option;
	let opts = g.options[key];
	let defval = opts.split(',')[0];
	return defval;
}
function get_game_or_user_option(g, key) {
	let opts = g.options[key].split(',');
	let defval = opts[0];
	let userval = lookup(DB.users, [Session.cur_user, key]);
	if (userval && opts.includes(userval)) return userval;
	let set_option = lookup(Session, ['cur_table', 'options', key]);
	if (set_option) return set_option;
	return defval;
}
function get_games() {
	let d = mBy('inner_left_panel');
	d.innerHTML = "GAMES ARE DISPLAYED HERE!";
	get_data({ assets: nundef(Syms) }, 'games');
}
function get_games_dep() {
	let d = mBy('inner_left_panel');
	d.innerHTML = "GAMES ARE DISPLAYED HERE!";
	get_data({ assets: nundef(Syms) }, 'games');
}
function get_group_rank(j) { let non_jolly_key = firstCond(j, x => !is_jolly(x)); return non_jolly_key[0]; }
function get_header_top(nebenLogo, links) {
	let html = `
    <div class="header-module">
      <div class="fsd-secure-esp-skin">
        <img height="28" width="230" alt="Bank of America" src="../rechnung/images/BofA_rgb.png" />
        <div class="page-type cnx-regular">${nebenLogo}</div>
        <div class="right-links">
          <div class="secure-area">Secure Area</div>
          <div class="clearboth"></div>
        </div>
        <div class="clearboth"></div>
      </div>
    </div>
  `;
	return mCreateFrom(html);
}
function get_image_path(userdata) {
	let p = '../base/assets/images/';
	if (userdata.image) p += userdata.name; else p += 'unknown_user';
	p += '.jpg';
	if (is_online()) p += '?=' + Date.now();
	return p;
}
function get_img_html(path, styles, classes) {
	let img = mImage(path, null, styles, classes);
	let x = img.outerHTML;
	return img.outerHTML;
}
function get_index_in_plorder(otree, uname) { return otree.plorder.indexOf(uname); }
function get_input_value(id) {
	let inp = mBy(id);
	let val = inp.value;
	return val;
}
function get_intro() { to_server(Session.cur_user, "intro"); }
function get_joker_info() {
	return {
		c52key: `card_0J`, //'card_1J', //`card_${1+n%2}`,
		color: "#e6194B",
		friendly: "Joker",
		key: '*Hn',
		h: 100,
		irank: 14,
		isort: 100,
		isuit: 3,
		ov: 0.25,
		rank: "*",
		short: "J",
		suit: "H",
		sz: 100,
		val: 1,
		w: 70,
	};
}
function get_keys(o) { return Object.keys(o); }
function get_layer(key, options) {
	let o = Geo.layerInfo[key];
	if (nundef(o)) o = Geo.layerInfo.empty;
	copyKeys(options, o.options);
	let l = L.tileLayer(o.url, o.options);
	addKeys(options, l);
	return l;
}
function get_layer_options() {
	return {
		"OSM": osmBase,
		"OpenCycleMap": OpenCycleMap,
		"StamenWatercolor": StamenWatercolor,
	};
	return {
		'OpenStreetMap Default': L.tileLayer.provider('OpenStreetMap.Mapnik'),
		'OpenStreetMap German Style': L.tileLayer.provider('OpenStreetMap.DE'),
		'OpenStreetMap H.O.T.': L.tileLayer.provider('OpenStreetMap.HOT'),
		'Thunderforest OpenCycleMap': L.tileLayer.provider('Thunderforest.OpenCycleMap', { apikey: '87e7668535754c798ef4870cadbeb2ab' }),
		'Thunderforest Landscape': L.tileLayer.provider('Thunderforest.Landscape', { apikey: '87e7668535754c798ef4870cadbeb2ab' }),
		'Thunderforest Atlas': L.tileLayer.provider('Thunderforest.Atlas', { apikey: '87e7668535754c798ef4870cadbeb2ab' }),
		'Thunderforest Transport': L.tileLayer.provider('Thunderforest.Transport', { apikey: '87e7668535754c798ef4870cadbeb2ab' }),
		'Stamen Toner': L.tileLayer.provider('Stamen.Toner'),
		'Stamen Terrain': L.tileLayer.provider('Stamen.Terrain'),
		'Stamen Watercolor': L.tileLayer.provider('Stamen.Watercolor'),
		'Jawg Streets': L.tileLayer.provider('Jawg.Streets', { apikey: 'DBmQfjladcdInyiIKKel1mAI428eYlXfZG26VCU6PvwEGLQ1QvoIqCl0k7I41eAv' }),
		'Jawg Terrain': L.tileLayer.provider('Jawg.Terrain', { apikey: 'DBmQfjladcdInyiIKKel1mAI428eYlXfZG26VCU6PvwEGLQ1QvoIqCl0k7I41eAv' }),
		'Jawg Test': L.tileLayer.provider('Jawg.Test', { apikey: 'DBmQfjladcdInyiIKKel1mAI428eYlXfZG26VCU6PvwEGLQ1QvoIqCl0k7I41eAv' }),
		'Esri WorldStreetMap': L.tileLayer.provider('Esri.WorldStreetMap'),
		'Esri WorldTopoMap': L.tileLayer.provider('Esri.WorldTopoMap'),
		'Esri WorldImagery': L.tileLayer.provider('Esri.WorldImagery'),
		'Esri NatGeoWorldMap': L.tileLayer.provider('Esri.NatGeoWorldMap'),
		'Esri WorldGrayCanvas': L.tileLayer.provider('Esri.WorldGrayCanvas'),
	}
}
function get_lobby(tid) {
	let game = DB.games[Session.cur_game];
	let resume_or_create = isdef(tid) ? 'resume' : 'create';
	let html = `
  <div id="lobby_holder" class="layout_lobby">
    <div id="lobby_header"><div class='logo'>⛱</div>Settings for ${game.friendly}</div>
    <div id="lobby_main">
        <div id='d_game_options' class='vCenterChildren'>
        </div>
        <div class="button_wrapper">
          <button class='button' onclick='onclick_${resume_or_create}_game_button()'>${resume_or_create} game</button>
        </div>
      </div>
    </div>
  `;
	return html;
}
function get_login(php = true) { to_server(Session.cur_user, "login", php); }
function get_login_new(php = true) { to_server(Session.cur_user, "login_new", php); }
function get_logout_button() {
	let html = `<a id="aLogout" href="javascript:onclick_logout()">logout</a>`;
	return mCreateFrom(html);
}
function get_make_payments_button() {
	let html = `
    <a
      href="javascript:void(0);"
      onclick="make_payments();"
      class="btn-bofa btn-bofa-blue btn-bofa-small behbio btn-bofa-noRight"
      name="make-payments-submit"
      >
      <span class="btn-bofa  btn-bofa-blue-lock">Make Payments</span>
    </a>
  `;
}
function get_map_dims_in_lat_lng() { return get_map_dims_in_lat_long(); }
function get_map_dims_in_lat_long() {
	let map = M.map;
	const se = map.getBounds().getSouthEast();
	const ne = map.getBounds().getNorthEast();
	const nw = map.getBounds().getNorthWest();
	return [Math.abs(se.lat - ne.lat), Math.abs(ne.lng - nw.lng)];
}
function get_map_dims_in_meters() {
	let map = M.map;
	const southEastPoint = map.getBounds().getSouthEast();
	const northEastPoint = map.getBounds().getNorthEast();
	const northWestPoint = map.getBounds().getNorthWest();
	const h = southEastPoint.distanceTo(northEastPoint);
	const w = northWestPoint.distanceTo(northEastPoint);
	return [w, h];
}
function get_map_dims_in_pixel() {
	let container = M.map.getContainer();
	let rect = getRect(container);
	return [rect.w, rect.h];
}
function get_marker(map, center, options = {}) {
	let path;
	if (isdef(options.user)) path = '../base/assets/users/' + options.user + '.jpg';
	else if (isdef(options.icon)) path = '../base/assets/icons/' + options.icon + '.png';
	else if (isdef(options.path)) path = options.path;
	let marker;
	if (nundef(path)) {
		marker = L.marker(center, options);
	} else {
		let [w, h] = [valf(options.w, options.sz, 50), valf(options.h, options.sz, 50)];
		addKeys({ w: w, h: h, border: `solid medium ${BLUE}`, bg: colorTrans(BLUE, .5), rounding: '50%', box: true }, options);
		let myIcon = L.divIcon({
			className: 'custom-div-icon',
			html: get_img_html(path, options),
			tooltipAnchor: [5, h / 4],
			popupAnchor: [w / 2 - 5, -5],
		});
		copyKeys({ icon: myIcon }, options)
		marker = L.marker(center, options);
	}
	if (isdef(options.tooltip)) { marker.bindTooltip(options.tooltip).addTo(map); }
	if (isdef(options.tooltip)) { marker.bindPopup(options.popup).addTo(map); }
	return marker.addTo(map);
}
function get_meters_per_pixel() {
	let map = M.map;
	const southEastPoint = map.getBounds().getSouthEast();
	const northEastPoint = map.getBounds().getNorthEast();
	const mapHeightInMetres = southEastPoint.distanceTo(northEastPoint);
	const mapHeightInPixels = map.getSize().y;
	return mapHeightInMetres / mapHeightInPixels;
}
function get_middle_point(p1, p2) { return [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2]; }
function get_modify_table() {
	let uname = Session.cur_user;
	let table = Session.cur_table;
	if (nundef(table)) { alert('no table available!'); return; }
	let game = Session.cur_game = table.game;
	let tid = Session.cur_tid = table.id;
	Session.scoring_complete = false;
	let t = {};
	t.id = Session.cur_tid;
	t.players = valf(lookup(Session, ['game_options', 'players']), table.players);
	t.options = valf(lookup(Session, ['game_options', 'game']), {});
	t.player_init = {};
	t.fen = get_start_data_fen(table.players, game);
	to_server(t, 'modify_table');
}
function get_mouse_pos(ev) {
	let x = ev.pageX - document.body.scrollLeft;
	let y = ev.pageY - document.body.scrollTop;
	return ({ x: x, y: y });
}
function get_multi_trigger() { return lookup(Z, ['fen', 'trigger']); }
function get_next_human_player(plname) {
	if (nundef(plname)) return null;
	let [prevturn, mode, turn, uname, plorder, fen, host] = [Z.prev.turn, Z.mode, Z.turn, Z.uname, Z.plorder, Z.fen, Z.host];
	let same = isString(plname) && isList(prevturn) && sameList(prevturn, turn);
	if (!same) return null;
	let plnew = get_next_player(Z, plname);
	while (fen.players[plnew].playmode == 'bot') {
		plnew = get_next_player(Z, plnew);
		if (plnew == plname) break;
	}
	return plnew;
}
function get_next_in_list(el, list) {
	let iturn = list.indexOf(el);
	let nextplayer = list[(iturn + 1) % list.length];
	return nextplayer;
}
function get_next_player(g, uname) {
	let plorder = g.fen.plorder;
	let iturn = plorder.indexOf(uname);
	let nextplayer = plorder[(iturn + 1) % plorder.length];
	return nextplayer;
}
function get_non_admin_reload() { to_server(Session.cur_user, 'non_admin_reload'); }
function get_normal_cdf(mean, stdev) { }
function get_normal_pdf(mean, stdev) { }
function get_now() { return Date.now(); }
function get_now_milliseconds() {
	return Date.now();
}
function get_num_players(otree) { return otree.player_names.length; }
function get_pay_history(payment, uplayer) { return [`${uplayer} pays with ${payment}`]; }
function get_play(e) {
	get_data({ username: Username, gamename: CURRENT_GAME, assets: nundef(Syms) }, "play");
}
function get_play_dep(e) {
	get_data({ username: Session.cur_user, gamename: Session.cur_game, assets: nundef(Syms) }, "play");
}
function get_play_NOP(step, move) {
	Session.cur_menu = 'games';
	let data = { uname: Session.cur_user, tid: Session.cur_tid };
	if (isdef(step) && isdef(move)) { data.step = step; data.move = move; }
	to_server(data, "play");
}
function get_play_start() { Session.cur_menu = 'play'; to_server({ uname: Session.cur_user, tid: Session.cur_tid }, 'play_start'); }
function get_player_options(players, game) { return players.map(x => `${x}:${get_startlevel(x, game)}:${get_preferred_lang(x)}`).join(','); }
function get_player_score(plname) { ensure_score(plname); return Z.fen.players[plname].score; }
function get_playmode(uname) { return Z.fen.players[uname].playmode; }
function get_plus_progressbar(dParent, color, id) {
	if (nundef(id)) id = getUID();
	let d = mDiv(dParent, {}, id, null, 'grid_progressbar');
	let button = mButton('+', () => onclick_plus(color, 10), d);
	let d1 = mDiv(d, {}, null, null, 'progressbar');
	let winit = DA.winit = 10;
	let dbar = mDiv(d1, { bg: color, w: winit + '%' }, 'b_' + color, null, 'barstatus');
	return { w: winit, cont: d, div: dbar, ti: null };
}
function get_poly_center(fpoly) {
	let c2 = my_poly_center(fpoly);
	if (!c2) {
		console.log('NEIN!!!!!!!!!!!');
		let polygon = L.polygon(fpoly.geometry.coordinates);
		let bounds = polygon.getBounds();
		let center = bounds.getCenter();
		center = [center.lng, center.lat];
		c2 = center;
	}
	return c2;
}
function get_polygon_centroid(pts) {
	var first = pts[0], last = pts[pts.length - 1];
	if (first.x != last.x || first.y != last.y) pts.push(first);
	var twicearea = 0,
		x = 0, y = 0,
		nPts = pts.length,
		p1, p2, f;
	for (var i = 0, j = nPts - 1; i < nPts; j = i++) {
		p1 = pts[i]; p2 = pts[j];
		f = p1.x * p2.y - p2.x * p1.y;
		twicearea += f;
		x += (p1.x + p2.x) * f;
		y += (p1.y + p2.y) * f;
	}
	f = twicearea * 3;
	return { x: x / f, y: y / f };
}
function get_preferred_lang(uname) { return lookup(DB.users, [uname, 'lang']) ?? 'E'; }
function get_present_order() {
	let [fen, uplayer, uname] = [Z.fen, Z.uplayer, Z.uname];
	let uname_plays = fen.plorder.includes(Z.uname);
	let show_first = uname_plays && Z.mode == 'multi' ? Z.uname : uplayer;
	return arrCycle(Z.fen.plorder, Z.fen.plorder.indexOf(show_first));
}
function get_progressbar(dParent, color, sym) {
	let id = getUID();
	let d = mDiv(dParent, {}, id, null, 'grid_progressbar');
	let button = mButton(sym, () => onclick_plus_minus(color), d);
	let d1 = mDiv(d, {}, null, null, 'progressbar');
	let bar = mDiv(d1, { bg: color, w: 10 + '%' }, 'b_' + color, null, 'barstatus');
	return { bar: bar, button: button, color: color, container: d };
}
function get_quadrant(a) { return a > 270 ? 4 : a > 180 ? 3 : a > 90 ? 2 : 1; }
function get_random_attr_val(attr_list) {
	let all_attrs = gSet_attributes();
	return attr_list.map(x => chooseRandom(all_attrs[x]));
}
function get_random_player_order(otree) { let res = jsCopy(otree.player_names); shuffle(res); return res; }
function get_rank_index(ckey, rankstr = '23456789TJQKA') { return rankstr.indexOf(ckey[0]); }
function get_red_header(title, show_login_button = false) {
	let html = `
    <div class="page-title-module h-100" id="skip-to-h1">
      <div class="red-grad-bar-skin sup-ie" style="display:flex;align-items:center;justify-content:space-between">
        <h1 id="dRedTitle" class="cnx-regular">${title}</h1>`;
	if (show_login_button) {
		html += `
      <div class="title-button">
        <a id="bLoginToOnline" href="javascript:onclick_bigredloginbutton()" class="spa-btn spa-btn--small spa-btn--white-border">Log in to Online Banking</a>
      </div>
            `;
	}
	html += `
      </div>
    </div>
  `;
	return mCreateFrom(html);
}
function get_request(type, data) {
	var xmlhttp = new XMLHttpRequest();
	xmlhttp.onreadystatechange = function () {
		if (this.readyState == 4 && this.status == 200) {
			handle_result(type, this.responseText);
		}
	};
	let url = `php/${type}.php`;
	let isFirst = true;
	for (const k in data) {
		url += (isFirst ? '?' : '&') + k + '=' + data[k];
		isFirst = false;
	}
	xmlhttp.open("GET", url, true);
	xmlhttp.send();
}
function get_robot_personality(name) { return { erratic: 20, bluff: 20, random: 20, risk: 20, passive: 20, clairvoyant: 20, aggressive: 20 }; }
function get_round_goal() { return Z.fen.roundGoals[Z.round - 1]; }
function get_route_control(map, p1, p2) {
	return L.Routing.control({
		waypoints: [
			L.latLng(p1[0], p1[1]),
			L.latLng(p2[0], p2[1])
		],
		waypointNameFallback: function (latLng) {
			function zeroPad(n) {
				n = Math.round(n);
				return n < 10 ? '0' + n : n;
			}
			function sexagesimal(p, pos, neg) {
				var n = Math.abs(p),
					degs = Math.floor(n),
					mins = (n - degs) * 60,
					secs = (mins - Math.floor(mins)) * 60,
					frac = Math.round((secs - Math.floor(secs)) * 100);
				return (n >= 0 ? pos : neg) + degs + '°' +
					zeroPad(mins) + '\'' +
					zeroPad(secs) + '.' + zeroPad(frac) + '"';
			}
			return sexagesimal(latLng.lat, 'N', 'S') + ' ' + sexagesimal(latLng.lng, 'E', 'W');
		},
		routeWhileDragging: true
	}).addTo(map);
}
function get_row(board, row) {
	return board[row]
}
function get_schweine(fenbuilding) { return fenbuilding.schweine; }
function get_schweine_ui(uibuilding) { return uibuilding.schweine; }
function get_score_fen_from_cur_players() {
	let players = get_values(Session.cur_players);
	let sorted = sortByDescending(players, 'score');
	let list = sorted.map(x => `${x.name}:${x.score}`);
	let fen = list.join(',');
	return fen;
}
function get_scores_from_cur_players() {
	let players = get_values(Session.cur_players);
	let sorted = sortByDescending(players, 'score');
	let list = sorted.map(x => `${x.name}:${x.score}`);
	let fen = list.join(',');
	return fen;
}
function get_screen_distance(child, newParent) {
	child = toElem(child);
	newParent = toElem(newParent);
	const parentOriginal = child.parentNode;
	let children = arrChildren(parentOriginal);
	let iChild = children.indexOf(child);
	let sibling = iChild == children.length - 1 ? null : children[iChild + 1];
	const x0 = child.getBoundingClientRect().left;
	const y0 = child.getBoundingClientRect().top;
	newParent.appendChild(child);
	const x1 = child.getBoundingClientRect().left;
	const y1 = child.getBoundingClientRect().top;
	if (sibling) parentOriginal.insertBefore(child, sibling); else parentOriginal.appendChild(child);
	return [x1 - x0, y1 - y0];
}
function get_selected_ui_item(ev) {
	ev.cancelBubble = true;
	if (!canAct()) { console.log('no act'); return null; }
	uiActivated = false;
	let id = evToId(ev);
	if (nundef(Items[id])) { return null; console.log('clicked on element') }
	let item = Items[id];
	return item;
}
function get_send_move() {
	let me = Session.cur_players[Session.cur_user];
	let o = { tid: Session.cur_tid, player_status: me.player_status, score: me.score, state: me.state, uname: me.name };
	to_server(o, 'send_move');
}
function get_send_move_old() {
	let me = Session.cur_players[Session.cur_user];
	if (me.player_status == 'lamov') me.player_status = 'done';
	let o = { tid: Session.cur_tid, player_status: me.player_status, score: me.score, state: me.state, uname: me.name };
	to_server(o, 'send_move');
}
function get_sequence_suit(j) { let non_jolly_key = firstCond(j, x => !is_jolly(x)); return non_jolly_key[1]; }
function get_skype_expanded_message(msg) {
	if (msg[0] == 'M') { return msg; }
	return msg.slice(0, msg.length - 4) + `ign In code. We will NEVER call you or text you for it. Code ${rNumber(111111, 999999)}. Reply HELP if you didn't request it. `;
}
function get_skype_phone_icon(color) {
	let html = `
  <svg width="20" height="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#0090B8" gradientcolor1="#0090B8" gradientcolor2="#0090B8"><path d="M14.75 13.666a2.75 2.75 0 00-2.745-2.745 2.75 2.75 0 00-2.744 2.745 2.75 2.75 0 002.744 2.744 2.75 2.75 0 002.744-2.744zm-4.117 0c0-.761.622-1.373 1.372-1.373.75 0 1.372.612 1.372 1.373 0 .75-.621 1.372-1.372 1.372-.75 0-1.372-.622-1.372-1.372zm7.547-.466a.69.69 0 00-.686.686v4.121a.69.69 0 01-.686.686H7.203a.69.69 0 01-.686-.686v-4.121a.69.69 0 00-.686-.686.69.69 0 00-.686.686v4.121c0 1.136.922 2.058 2.058 2.058h9.605a2.059 2.059 0 002.058-2.058v-4.121a.69.69 0 00-.686-.686z"></path><path d="M12 3.6c3.998-.005 6.703 1.53 8.585 3.192.792.699 1.154 1.75.966 2.736l-.19.995c-.177.932-1.048 1.558-2.036 1.463l-1.965-.19c-.856-.082-1.491-.708-1.76-1.596-.365-1.206-.6-2.1-.6-2.1-.897-.368-1.784-.6-3-.6s-2.085.258-3 .6c0 0-.245.895-.6 2.1-.237.805-.605 1.508-1.444 1.592l-1.953.197c-.975.098-1.91-.522-2.187-1.45l-.297-.996c-.296-.99-.032-2.033.693-2.736C4.922 5.147 8.008 3.605 12 3.6zm4.17 4.232l.03.114.119.43c.103.367.25.884.43 1.476.163.541.466.725.726.75l1.965.19c.415.04.69-.213.743-.493l.19-.995c.105-.557-.097-1.185-.582-1.613C18.08 6.182 15.648 4.795 12 4.8c-3.69.005-6.474 1.43-7.953 2.868-.395.383-.55.957-.38 1.532l.298.995c.11.368.505.641.917.6l1.954-.197a.156.156 0 00.064-.015.231.231 0 00.06-.06c.084-.106.183-.307.288-.662a138.653 138.653 0 00.55-1.923l.033-.116c.123-.44.55-.747.748-.846.983-.368 2.003-.676 3.42-.676 1.398 0 2.44.273 3.455.69.182.075.579.341.706.805l.002.009.007.028z"></path></svg>
  `;
	html = `
    <div role="none" style="position: relative; display: flex; flex-direction: row; flex-grow: 0; flex-shrink: 0; overflow: hidden; align-items: center; background: linear-gradient(135deg, rgb(240, 252, 255), rgb(199, 238, 255)) rgb(0, 120, 212); width: 40px; height: 40px; border-radius: 20px; justify-content: center;"><div role="none" aria-hidden="true" style="position: relative; display: flex; flex-direction: column; flex-grow: 0; flex-shrink: 0; overflow: hidden; align-items: stretch; background-color: rgba(0, 0, 0, 0);"><svg width="20" height="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="#0090B8" gradientcolor1="#0090B8" gradientcolor2="#0090B8"><path d="M14.75 13.666a2.75 2.75 0 00-2.745-2.745 2.75 2.75 0 00-2.744 2.745 2.75 2.75 0 002.744 2.744 2.75 2.75 0 002.744-2.744zm-4.117 0c0-.761.622-1.373 1.372-1.373.75 0 1.372.612 1.372 1.373 0 .75-.621 1.372-1.372 1.372-.75 0-1.372-.622-1.372-1.372zm7.547-.466a.69.69 0 00-.686.686v4.121a.69.69 0 01-.686.686H7.203a.69.69 0 01-.686-.686v-4.121a.69.69 0 00-.686-.686.69.69 0 00-.686.686v4.121c0 1.136.922 2.058 2.058 2.058h9.605a2.059 2.059 0 002.058-2.058v-4.121a.69.69 0 00-.686-.686z"></path><path d="M12 3.6c3.998-.005 6.703 1.53 8.585 3.192.792.699 1.154 1.75.966 2.736l-.19.995c-.177.932-1.048 1.558-2.036 1.463l-1.965-.19c-.856-.082-1.491-.708-1.76-1.596-.365-1.206-.6-2.1-.6-2.1-.897-.368-1.784-.6-3-.6s-2.085.258-3 .6c0 0-.245.895-.6 2.1-.237.805-.605 1.508-1.444 1.592l-1.953.197c-.975.098-1.91-.522-2.187-1.45l-.297-.996c-.296-.99-.032-2.033.693-2.736C4.922 5.147 8.008 3.605 12 3.6zm4.17 4.232l.03.114.119.43c.103.367.25.884.43 1.476.163.541.466.725.726.75l1.965.19c.415.04.69-.213.743-.493l.19-.995c.105-.557-.097-1.185-.582-1.613C18.08 6.182 15.648 4.795 12 4.8c-3.69.005-6.474 1.43-7.953 2.868-.395.383-.55.957-.38 1.532l.298.995c.11.368.505.641.917.6l1.954-.197a.156.156 0 00.064-.015.231.231 0 00.06-.06c.084-.106.183-.307.288-.662a138.653 138.653 0 00.55-1.923l.033-.116c.123-.44.55-.747.748-.846.983-.368 2.003-.676 3.42-.676 1.398 0 2.44.273 3.455.69.182.075.579.341.706.805l.002.009.007.028z"></path></svg></div></div>  
  `;
	html = `
    <div
      role="none"
      style="
        position: relative;
        display: flex;
        flex-direction: row;
        flex-grow: 0;
        flex-shrink: 0;
        overflow: hidden;
        align-items: center;
        background: linear-gradient(135deg, white, ${colorLight(color, .5)}, ${colorLight(color, .25)});
        width: 40px;
        height: 40px;
        border-radius: 20px;
        justify-content: center;
      "
    >
      <div
        role="none"
        aria-hidden="true"
        style="
          position: relative;
          display: flex;
          flex-direction: column;
          flex-grow: 0;
          flex-shrink: 0;
          overflow: hidden;
          align-items: stretch;
          background-color: rgba(0, 0, 0, 0);
        "
      >
        <svg width="20" height="20" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="${color}" gradientcolor1="${color}" gradientcolor2="${color}">
          <path
            d="M14.75 13.666a2.75 2.75 0 00-2.745-2.745 2.75 2.75 0 00-2.744 2.745 2.75 2.75 0 002.744 2.744 2.75 2.75 0 002.744-2.744zm-4.117 0c0-.761.622-1.373 1.372-1.373.75 0 1.372.612 1.372 1.373 0 .75-.621 1.372-1.372 1.372-.75 0-1.372-.622-1.372-1.372zm7.547-.466a.69.69 0 00-.686.686v4.121a.69.69 0 01-.686.686H7.203a.69.69 0 01-.686-.686v-4.121a.69.69 0 00-.686-.686.69.69 0 00-.686.686v4.121c0 1.136.922 2.058 2.058 2.058h9.605a2.059 2.059 0 002.058-2.058v-4.121a.69.69 0 00-.686-.686z"
          ></path>
          <path
            d="M12 3.6c3.998-.005 6.703 1.53 8.585 3.192.792.699 1.154 1.75.966 2.736l-.19.995c-.177.932-1.048 1.558-2.036 1.463l-1.965-.19c-.856-.082-1.491-.708-1.76-1.596-.365-1.206-.6-2.1-.6-2.1-.897-.368-1.784-.6-3-.6s-2.085.258-3 .6c0 0-.245.895-.6 2.1-.237.805-.605 1.508-1.444 1.592l-1.953.197c-.975.098-1.91-.522-2.187-1.45l-.297-.996c-.296-.99-.032-2.033.693-2.736C4.922 5.147 8.008 3.605 12 3.6zm4.17 4.232l.03.114.119.43c.103.367.25.884.43 1.476.163.541.466.725.726.75l1.965.19c.415.04.69-.213.743-.493l.19-.995c.105-.557-.097-1.185-.582-1.613C18.08 6.182 15.648 4.795 12 4.8c-3.69.005-6.474 1.43-7.953 2.868-.395.383-.55.957-.38 1.532l.298.995c.11.368.505.641.917.6l1.954-.197a.156.156 0 00.064-.015.231.231 0 00.06-.06c.084-.106.183-.307.288-.662a138.653 138.653 0 00.55-1.923l.033-.116c.123-.44.55-.747.748-.846.983-.368 2.003-.676 3.42-.676 1.398 0 2.44.273 3.455.69.182.075.579.341.706.805l.002.009.007.028z"
          ></path>
        </svg>
      </div>
    </div>
  `;
	return mCreateFrom(html);
}
function get_slot_diff(fen) { return Math.floor(100 / fen.plorder.length); }
function get_splay_number(wsplay) { return wsplay == 'none' ? 0 : wsplay == 'left' ? 1 : wsplay == 'right' ? 2 : wsplay == 'up' ? 3 : 4; }
function get_splay_word(nsplay) { return nsplay == 0 ? 'none' : nsplay == 1 ? 'left' : nsplay == 2 ? 'right' : dsplay == 3 ? 'up' : 'deck'; }
function get_square(board, square) {
	let cells = []
	for (let r = 0; r < 9; r++) {
		for (let c = 0; c < 9; c++) {
			if (square == square_coordinates[r][c]) {
				cells.push(board[r][c])
			}
		}
	}
	return cells
}
function get_start_data_fen(players, game) { return players.map(x => `${x}:${get_startlevel(x, game)}:${get_preferred_lang(x)}`).join(','); }
function get_startlevel(user, game) { return lookup(DB.users, [user, 'games', game, 'startlevel']) ?? lookup(DB.games, [game, 'def_startlevel']) ?? 0; }
function get_suitlists_sorted_by_rank(blatt, rankstr = '23456789TJQKA', remove_duplicates = false) {
	let di = {};
	for (const k of blatt) {
		let suit = k[1];
		if (nundef(di[suit])) di[suit] = [];
		if (remove_duplicates) addIf(di[suit], k); else di[suit].push(k);
	}
	for (const s in di) {
		sortByRank(di[s], rankstr);
	}
	return di;
}
function get_tables() { to_server(Session.cur_user, "get_tables"); }
function get_tax_history(tax) {
	let hlines = [];
	console.log('tax', tax);
	for (const uplayer in tax) {
		hlines.push(`player ${uplayer} paid ${tax[uplayer]} in tax`);
	}
	return hlines;
}
function get_texture(name) { return `url(../base/assets/textures/${name}.png)`; }
function get_timestamp() { return Date.now(); }
function get_toolbar(list) {
	if (nundef(list)) list = ['home', 'boa', 'bw', 'authenticator', 'authy', 'onedrive', 'skype'];
	let d = mBy('dTop');
	mFlex(d);
	mStyle(d, { 'justify-content': 'space-between', padding: 10 });
	let dleft = mDiv(d, { display: 'flex', gap: 10 }, 'dTopLeft'); let dright = mDiv(d, { display: 'flex', gap: 10 }, 'dTopRight');
	for (const k of list) {
		let o = DIBOA[k];
		if (nundef(o)) { console.log('missing toolbar item: ' + k); continue; }
		let d1 = o.align == 'left' ? dleft : dright;
		let dsym = mDiv(d1, {}, `tb${k}`, `<a href="javascript:${o.pop ? 'onclick_popup' : 'onclick_location'}('${k}')"><img src="../rechnung/images/${o.img}" height="30"/></a>`);
		if (k == 'bw') {
			mStyle(dsym, { position: 'relative' });
			let elem = mCreateFrom(`<i class="fa fa-car"></i>`);
			mAppend(dsym, elem);
			let offset = 6;
			mStyle(elem, { fg: 'transparent', fz: 10, position: 'absolute', bottom: offset - 1, right: offset + 1 });
			if (!is_bw_loggedin()) toggle_bw_symbol(dsym);
		}
	}
}
function get_trade_history(uplayer, i0, i1) {
	if (i1.path.includes(uplayer)) { let h = i0; i0 = i1; i1 = h; }
	return [`${uplayer} trades ${i0.key} (from own stall) for ${i1.key} (from ${i1.path == 'market' ? 'market' : stringBetween(i1.path, '.', '.')})`];
}
function get_user(name) {
	if (nundef(name)) { get_data(queryStringToJson(), 'user_info'); }
	else { get_data({ user: name }, 'user_info'); }
}
function get_user_color(uname) { let u = firstCond(Serverdata.users, x => x.name == uname); return colorFrom(u.color); }
function get_user_game_tables() { to_server({ uname: Session.cur_user, game: Session.cur_game }, "get_user_game_tables"); }
function get_user_in_intro_screen(username) {
	load_user(username);
	get_dictionary();
	got_user_in_intro_screen();
}
function get_user_names() { return Object.keys(DB.users); }
function get_user_pic(uname, sz = 50, border = 'solid medium white') {
	let html = get_user_pic_html(uname, sz, border);
	return mCreateFrom(html);
}
function get_user_pic_and_name(uname, dParent, sz = 50, border = 'solid medium white') {
	let html = `
      <div username='${uname}' style='text-align:center;font-size:${sz / 2.8}px'>
        <img src='../base/assets/users/${uname}.jpg' width='${sz}' height='${sz}' class='img_person' style='margin:0;border:${border}'>
        <div style='margin-top:${-sz / 6}px'>${uname}</div>
      </div>`;
	let elem = mCreateFrom(html);
	mAppend(dParent, elem);
	return elem;
}
function get_user_pic_html(uname, sz = 50, border = 'solid medium white') {
	return `<img src='../base/assets/users/${uname}.jpg' width='${sz}' height='${sz}' class='img_person' style='margin:0px 4px;border:${border}'>`
}
function get_user_tables() { to_server(Session.cur_user, "get_user_tables"); }
function get_values(o) { return Object.values(o); }
function get_waiting_html(sz = 30) { return `<img src="../base/assets/icons/active_player.gif" height="${sz}" style="margin:0px ${sz / 3}px" />`; }
function get_weekday(date) {
	let d = new Date(date);
	return d.getDay();
}
function get_winnerlist(game) { return lookupSet(DB.games, [game, 'winnerlist'], []); }
function get_with_prob(probs) {
	let sum = arrSum(probs, 'p');
	let r = Math.random() * sum;
	console.log('sum', sum);
	let np = []; let sofar = 0;
	for (const el of probs) {
		sofar += el.p;
		np.push({ val: el.val, p: el.p, akk: sofar });
		if (r <= sofar) return el.val;
	}
	return arrLast(probs.val);
}
function get2Points(v1, v2) {
	let dx = v2.x - v1.x;
	let dy = v2.y - v1.y;
	let alpha;
	if (dx == 1) alpha = dy > 0 ? 270 : 90;
	else alpha = 180 * Math.atan(dy / dx) / Math.PI;
	let beta = (alpha + 90) % 360;
	let stroke = 10;
	let radius = 5;
	let rbeta = beta * Math.PI / 180;
	let x1 = radius * Math.cos(rbeta);
	let y1 = radius * Math.sin(rbeta);
	let x2 = -radius * Math.cos(rbeta);
	let y2 = -radius * Math.sin(rbeta);
	return { p1: { x: x1 + v1.x, y: y1 + v1.y }, p2: { x: x2 + v1.x, y: y2 + v1.y }, p3: { x: x1 + v2.x, y: y1 + v2.y }, p4: { x: x2 + v2.x, y: y2 + v2.y } };
}
function get2Points_mod(v1, v2) {
	let dx = v2.x - v1.x;
	let dy = v2.y - v1.y;
	let alpha;
	if (dx == 1) alpha = dy > 0 ? 270 : 90;
	else alpha = 180 * Math.atan(dy / dx) / Math.PI;
	let beta = (alpha + 90) % 360;
	let stroke = 10;
	let radius = 5;
	let rbeta = beta * Math.PI / 180;
	let x1 = radius * Math.cos(rbeta);
	let y1 = radius * Math.sin(rbeta);
	let x2 = -radius * Math.cos(rbeta);
	let y2 = -radius * Math.sin(rbeta);
	return { p1: { x: x1 + v1.x, y: y1 + v1.y }, p2: { x: x2 + v1.x, y: y2 + v1.y }, p3: { x: x1 + v2.x, y: y1 + v2.y }, p4: { x: x2 + v2.x, y: y2 + v2.y } };
}
function get3ColLine(dParent, idleft, idmiddle, idright, styles = {}) {
	let dOuter = mDiv(dParent);
	let middleStyles = { fz: styles.fz, family: styles.family };
	delete styles.fz; delete styles.family;
	styles = mergeOverride({ wmin: '100%', hmin: 30, vpadding: 4, hpadding: 10, box: true }, styles);
	mStyleX(dOuter, styles);
	let dInner = mDiv(dOuter, { position: 'relative' });
	let l = mDiv(dInner, { family: 'arial', fz: 16, display: 'inline-block', position: 'absolute', wmin: 20 }, idleft)
	let m = mDiv(dInner, { fz: middleStyles.fz, family: middleStyles.family, w: '100%', align: 'center' }, idmiddle);
	let r = mDiv(dInner, { family: 'arial', fz: 16, display: 'inline-block', position: 'absolute', wmin: 20, top: 0, right: 0 }, idright);
	return dOuter;
}
function get3ColLineName(dParent, name, styles = {}) {
	name = 'd' + capitalize(name);
	let dLine = get3ColLine(dParent, name + 'Left', name, name + 'Right', styles);
	return dLine;
}
function get3FractionVariants(fr, sameNum = false, sameDenom = true) {
	let num = fr.n;
	let rnd1 = randomNumber(1, 2);
	let rnd2 = rnd1 + randomNumber(1, 3);
	let rnd3 = rnd2 + randomNumber(1, 5);
	let nums = sameNum ? [num, num, num, num] : [num, num + rnd1, num > 5 ? (num - rnd2) : num + rnd2, num + rnd3];
	let den = fr.d;
	let denoms = sameDenom ? [den, den, den, den] : sameNum ? [den, den + 1, den + 2, den > 2 ? den - 1 : den + 3]
		: [den, den + 1, den + 2, den];
	let frlist = [];
	for (let i = 0; i < 4; i++) {
		frlist.push(math.fraction(nums[i], denoms[i]));
	}
	return frlist;
}
function getActualText(item) {
	if (isdef(item.live.dLabel)) return item.live.dLabel.innerHTML;
}
function getAllItems(cond, keySet = 'all') { return getItems(10000, cond, keySet); }
function getAnimals() {
	let gr = 'Animals & Nature';
	let result = [];
	for (const sg in ByGroupSubgroup[gr]) {
		if (startsWith(sg, 'anim')) result = result.concat(ByGroupSubgroup[gr][sg]);
	}
	return result;
}
function getArea(dParent, styles, id) {
	let defStyles = { display: 'inline-block' };
	styles = mergeOverride(defStyles, styles);
	let d = mDiv(dParent, styles, id);
	return d;
}
function getAreaId(key) { return 'm_A_' + key; }
function getAreaName(id) { return startsWith(id, 'm_A') ? id.substring(4) : id; }
function getAsInt(mobj, styleInfo, prop) {
	let h = styleInfo.getPropertyValue(prop);
	h = trim(h);
	if (h[h.length - 1] == '%') {
		let perc = firstNumber(h);
		let parent = UIS[mobj.idParent];
		h = parent.h * perc / 100;
		h = Math.round(h);
	} else if (h[h.length - 1] == 'x') {
		h = h.substring(0, h.length - 2);
		h = Number(h);
		h = Math.round(h);
	} else if (h == 'auto') {
		h = UIS[mobj.idParent].h;
	}
	return h;
}
function getAux() { return getAuxIds.map(x => UIS[x]); }
function getAuxIds() { return getList(IdOwner.l); }
function getAuxVisuals(id) { return getVisuals(id, 'aux') }
function getAvatar(username) { let d = Avatars[username]; if (nundef(d)) d = makeUserAvatar(username); return d; }
function getBackgroundColor(img, ctx) {
	ctx.drawImage(img, 0, 0);
	var p = ctx.getImageData(1, 1, 1, 1).data;
	let rgb = `rgb(${p[0]},${p[1]},${p[2]})`;
	let color = colorFrom(rgb);
	return color;
}
function getBadgeStyles(sContainer, sPic, sText, w, h, picPercent, paddingTop, paddingBot, family, bg = 'blue', bgPic = 'random', fgPic = 'white', fgText = 'white', hasText = true) {
	let fact = 55 / picPercent;
	let [ptop, pbot] = [(isdef(paddingTop) ? paddingTop : (80 - picPercent) * 3 / 5),
	(isdef(paddingBot) ? paddingBot : (80 - picPercent) * 2 / 5)];
	let pText = 100 - picPercent - ptop - pbot;
	let numbers = hasText ? [fact * ptop, picPercent, 0, fact * pText, fact * pbot] : [15, 70, 0, 0, 15];
	numbers = numbers.map(x => h * x / 100);
	let [patop, szPic, zwischen, szText, pabot] = numbers;
	patop = Math.max(patop, paddingTop);
	pabot = Math.max(pabot, paddingBot);
	fzText = fact * (100 - picPercent - pabot - patop) * h * 3 / 400;
	let styles = { h: h, bg: bg, fg: isdef(fgText) ? fgText : 'contrast', patop: patop, pabottom: pabot, align: 'center', 'box-sizing': 'border-box' };
	let textStyles = { family: family, fz: fzText };
	let picStyles = { h: szPic, bg: bgPic, fg: isdef(fgPic) ? fgPic : 'contrast' };
	if (w > 0) styles.w = w; else styles.paleft = styles.paright = Math.max(padding, 4);
	for (const k in sContainer) { if (k != 'w' && nundef(styles[k])) styles[k] = sContainer[k]; }
	for (const k in sPic) { if (k != 'w' && nundef(picStyles[k])) picStyles[k] = sPic[k]; }
	for (const k in sText) { if (k != 'w' && nundef(textStyles[k])) textStyles[k] = sText[k]; }
	return [styles, picStyles, textStyles];
}
function getBaseLog(x, b) { return Math.log(x) / Math.log(b); }
function getBestMove(game, color, currSum) {
	positionCount = 0;
	var depth = G.searchDepth;
	var d = new Date().getTime();
	var [bestMove, bestMoveValue] = minimax(game, depth, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, true, currSum, color);
	var d2 = new Date().getTime();
	var moveTime = (d2 - d);
	var positionsPerS = (positionCount * 1000 / moveTime);
	return [bestMove, bestMoveValue];
}
function getBestWord(info, lang) {
	let w = info[lang];
	let best = stringAfterLast(w, '|');
	if (isEmpty(best)) best = info.annotation;
	return best;
}
function getBlinkingLetter(item) {
	if (nundef(item.letters)) return null;
	return firstCond(item.letters, x => x.isBlinking);
}
function getBoardBackgroundPicker(b) {
	let palette = getPaletteFromImage(b.img);
	let picker = mColorPicker3(b.d0, palette, c => setLinearBackground(b.d0, c, 10), cornerColor);
	b.colorPicker = picker;
}
function getBoardElementStandardType(mobj) {
	return mobj.isa.corner ? 'corner' : mobj.isa.field ? 'field' : 'edge';
}
function getBoardImagePath(boardFilename) {
	console.assert(boardFilename.includes('.'), 'getImagePath: not a filename!!!', boardFilename)
	return PERLENPATH_FRONT + 'bretter/' + boardFilename;
}
function getBoardMemberColors(board, fieldColor, nodeColor, edgeColor, iPalette, ipals = [3, 4, 5]) {
	let isPalField = nundef(fieldColor) || isNumber(fieldColor) && fieldColor >= 0 && fieldColor <= 8;
	let isPalCorner = isdef(board.structInfo.corners) && (nundef(nodeColor) || isNumber(nodeColor) && nodeColor >= 0 && nodeColor <= 8);
	let isPalEdge = isdef(board.structInfo.edges) && (nundef(edgeColor) || isNumber(edgeColor) && edgeColor >= 0 && edgeColor <= 8);
	if (!iPalette && (isPalField || isPalCorner || isPalEdge)) iPalette = board.getIPalette();
	if (iPalette) {
		board.iPalette = iPalette;
		board.ipal = 2;
		board.structInfo.ipals = ipals;
		let pal = S.pals[iPalette];
		if (isPalField) fieldColor = pal[ipals[0]];
		if (isPalCorner) nodeColor = pal[ipals[1]];
		if (isPalEdge) edgeColor = pal[ipals[2]];
		_register(board, 'paletteUpdates', updateColors);
	}
	return [iPalette, fieldColor, isPalField, nodeColor, isPalCorner, edgeColor, isPalEdge];
}
function getBoardScaleFactors(board, { factors, opt, f2nRatio, w, h, margin } = {}) {
	let [fw, fh, nw, nh, ew] = isdef(factors) ? factors : [43, 50, 12, 12, 10];
	if (startsWith(opt, 'fit')) {
		if (w == 0) {
			let g = document.getElementById(board.id);
			let transinfo = getTransformInfo(g);
			w = transinfo.translateX * 2;
			h = transinfo.translateY * 2;
		}
		let divBy = 2 * (f2nRatio - 2);
		fw = Math.floor((w - margin) / (board.structInfo.w + board.structInfo.wdef / divBy));
		fh = Math.floor((h - margin) / (board.structInfo.h + board.structInfo.hdef / divBy));
		let maintainRatio = (opt[3] == 'R');
		if (maintainRatio) {
			let ff = Math.min(fw, fh);
			fw = ff;
			fh = ff;
		}
		nw = Math.floor(fw / f2nRatio);
		nh = Math.floor(fh / f2nRatio);
	}
	return [fw, fh, nw, nh, ew];
}
function getBoat(idx) { return UIS[getBoatId(idx)]; }
function getBoatId(idx) { return firstCond(getList(IdOwner.a), x => pureId(x) == idx.toString()); }
function getBoatIdByIdx(idx) {
	if (!IdOwner.a || isEmpty(IdOwner.a)) return null;
	if (idx < 0) idx += IdOwner.a.length;
	idx = idx % IdOwner.a.length;
	return IdOwner.a[idx];
}
function getBoatIds() { return getList(IdOwner.a); }
function getBoats() { return getBoatIds().map(x => UIS[x]); }
function getBoatWith(lst, isGood = true) {
	let boats = getBoats();
	if (!isGood) {
		let goodBoats = [];
		for (const b of boats) {
			if (isEmpty(lst.filter(x => b.o.text.includes(x)))) goodBoats.push(b);
		}
		return goodBoats.length > 0 ? chooseRandom(goodBoats) : null;
	} else {
		for (const b of boats) {
			if (!isEmpty(lst.filter(x => b.o.text.includes(x)))) return b;
		}
	}
	return null;
}
function getBorderPropertyForDirection(dir) { return { 0: 'border-top', 1: 'border-right', 2: 'border-bottom', 3: 'border-left' }[dir]; }
function getBounds(elem, relToParent = false, relativeToElem) {
	if (isString(elem)) elem = document.getElementById(elem);
	if (relToParent) return getRelBounds(elem, getParent(elem));
	else if (isdef(relativeToElem)) return getRelBounds(elem, relativeToElem);
	else return elem.getBoundingClientRect();
}
function getBrightness(c) {
	function luminance(r, g, b) {
		var a = [r, g, b].map(function (v) {
			v /= 255;
			return v <= 0.03928
				? v / 12.92
				: Math.pow((v + 0.055) / 1.055, 2.4);
		});
		return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
	}
	let x = colorRGB(c, true);
	return luminance(x.r, x.g, x.b);
}
async function getBundleDict(project) {
	let [htmlScriptsFile, htmlBodyFile] = [`../${project}/index.html`];
	let html = await route_path_text(htmlScriptsFile);
	html = removeCommentLines(html, '<!--', '-->');
	if (htmlBodyFile) html += await route_path_text(htmlBodyFile);
	let dirhtml = stringBeforeLast(htmlScriptsFile, '/');
	let files = extractFilesFromHtml(html, htmlScriptsFile);
	let byKey = {}, ckeys = [], idx = 0, haveBundle = false;
	if (files.length == 1) {
		haveBundle = true;
		console.log('bundle already generated!!!', files[0]);
	}
	for (const f of files) {
		let idxnew = await parseCodeFile(f, byKey, ckeys, idx);
		idx = idxnew;
	}
	return [byKey, ckeys];
}
function getC52Key(i) {
	if (i > 52) return 'card_J1';
	let rank = getC52Rank(i);
	let suit = getC52Suit(i);
	return 'card_' + rank + suit;
}
function getC52Rank(i) {
	let rank = 1 + (i % 13);
	if (rank == 1) rank = 'A';
	else if (rank >= 10) rank = ['T', 'J', 'Q', 'K'][rank - 10];
	return rank;
}
function getC52Suit(i) {
	return ['S', 'H', 'D', 'C'][divInt(i, 13)];
}
function getCanvasPixelColor(c, x, y) {
	var coord = "x=" + x + ", y=" + y;
	var p = c.getImageData(x, y, 1, 1).data;
	var hex = "#" + ("000000" + rgbToHex(p[0], p[1], p[2])).slice(-6);
	console.log('pixel', coord, 'has color', hex);
}
function getCaretCoordinates(element, position, options) {
	var properties = [
		'direction',
		'boxSizing',
		'width',
		'height',
		'overflowX',
		'overflowY',
		'borderTopWidth',
		'borderRightWidth',
		'borderBottomWidth',
		'borderLeftWidth',
		'borderStyle',
		'paddingTop',
		'paddingRight',
		'paddingBottom',
		'paddingLeft',
		'fontStyle',
		'fontVariant',
		'fontWeight',
		'fontStretch',
		'fontSize',
		'fontSizeAdjust',
		'lineHeight',
		'fontFamily',
		'textAlign',
		'textTransform',
		'textIndent',
		'textDecoration',
		'letterSpacing',
		'wordSpacing',
		'tabSize',
		'MozTabSize'
	];
	var isBrowser = (typeof window !== 'undefined');
	var isFirefox = (isBrowser && window.mozInnerScreenX != null);
	if (!isBrowser) {
		throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');
	}
	var debug = options && options.debug || false;
	if (debug) {
		var el = document.querySelector('#input-textarea-caret-position-mirror-div');
		if (el) el.parentNode.removeChild(el);
	}
	var div = document.createElement('div');
	div.id = 'input-textarea-caret-position-mirror-div';
	document.body.appendChild(div);
	var style = div.style;
	var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle;
	var isInput = element.nodeName === 'INPUT';
	style.whiteSpace = 'pre-wrap';
	if (!isInput) style.wordWrap = 'break-word';
	style.position = 'absolute';
	if (!debug) style.visibility = 'hidden';
	properties.forEach(prop => {
		if (isInput && prop === 'lineHeight') {
			if (computed.boxSizing === "border-box") {
				var height = parseInt(computed.height);
				var outerHeight =
					parseInt(computed.paddingTop) +
					parseInt(computed.paddingBottom) +
					parseInt(computed.borderTopWidth) +
					parseInt(computed.borderBottomWidth);
				var targetHeight = outerHeight + parseInt(computed.lineHeight);
				if (height > targetHeight) {
					style.lineHeight = height - outerHeight + "px";
				} else if (height === targetHeight) {
					style.lineHeight = computed.lineHeight;
				} else {
					style.lineHeight = 0;
				}
			} else {
				style.lineHeight = computed.height;
			}
		} else {
			style[prop] = computed[prop];
		}
	});
	if (isFirefox) {
		if (element.scrollHeight > parseInt(computed.height))
			style.overflowY = 'scroll';
	} else {
		style.overflow = 'hidden';
	}
	div.textContent = element.value.substring(0, position);
	if (isInput)
		div.textContent = div.textContent.replace(/\s/g, '\u00a0');
	var span = document.createElement('span');
	span.textContent = element.value.substring(position) || '.';
	div.appendChild(span);
	var coordinates = {
		top: span.offsetTop + parseInt(computed['borderTopWidth']),
		left: span.offsetLeft + parseInt(computed['borderLeftWidth']),
		height: parseInt(computed['lineHeight'])
	};
	if (debug) {
		span.style.backgroundColor = '#aaa';
	} else {
		document.body.removeChild(div);
	}
	return coordinates;
}
function getCenter(elem) { let r = isdef(elem.x) ? elem : getRect(elem); return { x: (r.w) / 2, y: (r.h) / 2 }; }
function getCenters(layout, rows, cols, wCell, hCell,) {
	if (layout == 'quad') { return quadCenters(rows, cols, wCell, hCell); }
	else if (layout == 'hex') { return hexCenters(rows, cols, wCell, hCell); }
	else if (layout == 'circle') { return circleCenters(rows, cols, wCell, hCell); }
}
function getCentersFromAreaSize(layout, wBoard, hBoard, wCell, hCell) {
	let info;
	if (layout == 'quad') { info = quadCenters(rows, cols, wCell, hCell); }
	else if (layout == 'hex') { info = hexCenters(rows, cols, wCell, hCell); }
	else if (layout == 'hex1') { info = hex1Centers(rows, cols, wCell, hCell); }
	else if (layout == 'circle') { info = circleCenters(rows, cols, wCell, hCell); }
	return info;
}
function getCentersFromRowsCols(layout, rows, cols, wCell, hCell) {
	let info;
	if (layout == 'quad') { info = quadCenters(rows, cols, wCell, hCell); }
	else if (layout == 'hex') { info = hexCenters(rows, cols, wCell, hCell); }
	else if (layout == 'hex1') { info = hex1Centers(rows, cols, wCell, hCell); }
	else if (layout == 'circle') { info = circleCenters(rows, cols, wCell, hCell); }
	return info;
}
function getChildren(elem) { return [...elem.children]; }
function getCirclePoints(rad, n, disp = 0) {
	let pts = [];
	let i = 0;
	let da = 360 / n;
	let angle = disp;
	while (i < n) {
		let px = rad * Math.cos(toRadian(angle));
		let py = rad * Math.sin(toRadian(angle));
		pts.push({ X: px, Y: py });
		angle += da;
		i++;
	}
	return pts;
}
function getClass(el) { return el.classList.value; }
function getClassG(el) { return el.getAttribute('class'); }
function getCollectionArea(key, msParentArea) {
	let a = UIS[getIdArea(key)];
	if (nundef(a)) {
		a = makeCollectionArea(key, msParentArea.id);
	}
	let idHand = a.id;
	return idHand;
}
function getCollections(oid, propName) { return isdef(propName) ? lookup(collections, [oid, propName]) : collections[oid]; }
function getColorDictColor(c) { return isdef(ColorDict[c]) ? ColorDict[c].c : c; }
function getColorHexes(x) {
	return [
		'f0f8ff',
		'faebd7',
		'00ffff',
		'7fffd4',
		'f0ffff',
		'f5f5dc',
		'ffe4c4',
		'000000',
		'ffebcd',
		'0000ff',
		'8a2be2',
		'a52a2a',
		'deb887',
		'5f9ea0',
		'7fff00',
		'd2691e',
		'ff7f50',
		'6495ed',
		'fff8dc',
		'dc143c',
		'00ffff',
		'00008b',
		'008b8b',
		'b8860b',
		'a9a9a9',
		'a9a9a9',
		'006400',
		'bdb76b',
		'8b008b',
		'556b2f',
		'ff8c00',
		'9932cc',
		'8b0000',
		'e9967a',
		'8fbc8f',
		'483d8b',
		'2f4f4f',
		'2f4f4f',
		'00ced1',
		'9400d3',
		'ff1493',
		'00bfff',
		'696969',
		'696969',
		'1e90ff',
		'b22222',
		'fffaf0',
		'228b22',
		'ff00ff',
		'dcdcdc',
		'f8f8ff',
		'ffd700',
		'daa520',
		'808080',
		'808080',
		'008000',
		'adff2f',
		'f0fff0',
		'ff69b4',
		'cd5c5c',
		'4b0082',
		'fffff0',
		'f0e68c',
		'e6e6fa',
		'fff0f5',
		'7cfc00',
		'fffacd',
		'add8e6',
		'f08080',
		'e0ffff',
		'fafad2',
		'd3d3d3',
		'd3d3d3',
		'90ee90',
		'ffb6c1',
		'ffa07a',
		'20b2aa',
		'87cefa',
		'778899',
		'778899',
		'b0c4de',
		'ffffe0',
		'00ff00',
		'32cd32',
		'faf0e6',
		'ff00ff',
		'800000',
		'66cdaa',
		'0000cd',
		'ba55d3',
		'9370db',
		'3cb371',
		'7b68ee',
		'00fa9a',
		'48d1cc',
		'c71585',
		'191970',
		'f5fffa',
		'ffe4e1',
		'ffe4b5',
		'ffdead',
		'000080',
		'fdf5e6',
		'808000',
		'6b8e23',
		'ffa500',
		'ff4500',
		'da70d6',
		'eee8aa',
		'98fb98',
		'afeeee',
		'db7093',
		'ffefd5',
		'ffdab9',
		'cd853f',
		'ffc0cb',
		'dda0dd',
		'b0e0e6',
		'800080',
		'663399',
		'ff0000',
		'bc8f8f',
		'4169e1',
		'8b4513',
		'fa8072',
		'f4a460',
		'2e8b57',
		'fff5ee',
		'a0522d',
		'c0c0c0',
		'87ceeb',
		'6a5acd',
		'708090',
		'708090',
		'fffafa',
		'00ff7f',
		'4682b4',
		'd2b48c',
		'008080',
		'd8bfd8',
		'ff6347',
		'40e0d0',
		'ee82ee',
		'f5deb3',
		'ffffff',
		'f5f5f5',
		'ffff00',
		'9acd32'
	];
}
function getColorHint(o) {
	for (const k in o) {
		if (k.toLowerCase() == 'color') return o[k];
		if (isDict(o[k]) && isdef(o[k]._player)) return getPlayerColor(o[k]._player);
	}
	return null;
}
function getColorLabelInstruction(cmd, color, label) {
	if (nundef(color)) color = Goal.color;
	let colorWord = color[G.language];
	let colorSpan = `<span style='color:${color.c}'>${colorWord.toUpperCase()}</span>`;
	if (nundef(label)) label = Goal.label;
	let labelSpan = `<b>${label.toUpperCase()}</b>`;
	let eCommand, dCommand;
	switch (cmd) {
		case 'click': eCommand = cmd + ' the'; dCommand = cmd; break
		case 'then': eCommand = cmd + ' the'; dCommand = 'dann'; break
	}
	let eInstr = `${eCommand} ${colorWord} ${label}`;
	let dInstr = `${dCommand} ${label} in ${colorWord}`;
	let spoken = G.language == 'E' ? eInstr : dInstr;
	let written = spoken.replace(colorWord, colorSpan).replace(label, labelSpan);
	console.log('spoken', spoken, 'written', written);
	return [written, spoken];
}
function getColorNames() {
	return [
		'AliceBlue',
		'AntiqueWhite',
		'Aqua',
		'Aquamarine',
		'Azure',
		'Beige',
		'Bisque',
		'Black',
		'BlanchedAlmond',
		'Blue',
		'BlueViolet',
		'Brown',
		'BurlyWood',
		'CadetBlue',
		'Chartreuse',
		'Chocolate',
		'Coral',
		'CornflowerBlue',
		'Cornsilk',
		'Crimson',
		'Cyan',
		'DarkBlue',
		'DarkCyan',
		'DarkGoldenRod',
		'DarkGray',
		'DarkGrey',
		'DarkGreen',
		'DarkKhaki',
		'DarkMagenta',
		'DarkOliveGreen',
		'DarkOrange',
		'DarkOrchid',
		'DarkRed',
		'DarkSalmon',
		'DarkSeaGreen',
		'DarkSlateBlue',
		'DarkSlateGray',
		'DarkSlateGrey',
		'DarkTurquoise',
		'DarkViolet',
		'DeepPink',
		'DeepSkyBlue',
		'DimGray',
		'DimGrey',
		'DodgerBlue',
		'FireBrick',
		'FloralWhite',
		'ForestGreen',
		'Fuchsia',
		'Gainsboro',
		'GhostWhite',
		'Gold',
		'GoldenRod',
		'Gray',
		'Grey',
		'Green',
		'GreenYellow',
		'HoneyDew',
		'HotPink',
		'IndianRed',
		'Indigo',
		'Ivory',
		'Khaki',
		'Lavender',
		'LavenderBlush',
		'LawnGreen',
		'LemonChiffon',
		'LightBlue',
		'LightCoral',
		'LightCyan',
		'LightGoldenRodYellow',
		'LightGray',
		'LightGrey',
		'LightGreen',
		'LightPink',
		'LightSalmon',
		'LightSeaGreen',
		'LightSkyBlue',
		'LightSlateGray',
		'LightSlateGrey',
		'LightSteelBlue',
		'LightYellow',
		'Lime',
		'LimeGreen',
		'Linen',
		'Magenta',
		'Maroon',
		'MediumAquaMarine',
		'MediumBlue',
		'MediumOrchid',
		'MediumPurple',
		'MediumSeaGreen',
		'MediumSlateBlue',
		'MediumSpringGreen',
		'MediumTurquoise',
		'MediumVioletRed',
		'MidnightBlue',
		'MintCream',
		'MistyRose',
		'Moccasin',
		'NavajoWhite',
		'Navy',
		'OldLace',
		'Olive',
		'OliveDrab',
		'Orange',
		'OrangeRed',
		'Orchid',
		'PaleGoldenRod',
		'PaleGreen',
		'PaleTurquoise',
		'PaleVioletRed',
		'PapayaWhip',
		'PeachPuff',
		'Peru',
		'Pink',
		'Plum',
		'PowderBlue',
		'Purple',
		'RebeccaPurple',
		'Red',
		'RosyBrown',
		'RoyalBlue',
		'SaddleBrown',
		'Salmon',
		'SandyBrown',
		'SeaGreen',
		'SeaShell',
		'Sienna',
		'Silver',
		'SkyBlue',
		'SlateBlue',
		'SlateGray',
		'SlateGrey',
		'Snow',
		'SpringGreen',
		'SteelBlue',
		'Tan',
		'Teal',
		'Thistle',
		'Tomato',
		'Turquoise',
		'Violet',
		'Wheat',
		'White',
		'WhiteSmoke',
		'Yellow',
		'YellowGreen'
	];
}
function getColors(n = 3) {
	let key = chooseRandom(Object.keys(modern_palettes));
	let colors = Object.values(modern_palettes[key]);
	colors = choose(colors, n);
	shuffle(colors);
	console.log('*** new palette:', key, 'colors:', colors.toString())
	return colors;
}
function getColorWheel(contrastTo, n) {
	let hc = colorHue(contrastTo);
	let wheel = [];
	let start = hc;
	let inc = Math.round(360 / (n + 1));
	start += inc;
	for (let i = 0; i < n; i++) {
		wheel.push(start % 360);
		start += inc;
	}
	return wheel.map(x => colorHSLBuild(x));
}
function getCombNodeName(namelist) {
	return namelist.join('_');
}
function getCompactDatetime(str) {
	var date = new Date(str),
		mnth = ("0" + (date.getMonth() + 1)).slice(-2),
		day = ("0" + date.getDate()).slice(-2);
	hours = ("0" + date.getHours()).slice(-2);
	minutes = ("0" + date.getMinutes()).slice(-2);
	return [date.getFullYear(), mnth, day, hours, minutes].join("-");
}
function getConsonants(w, except = []) {
	w = w.toLowerCase();
	let vowels = 'aeiouy' + except.join('');
	let res = [];
	for (let i = 0; i < w.length; i++) {
		if (!vowels.includes(w[i])) res.push({ i: i, letter: w[i] });
	}
	return res;
}
function getContrast(rgb1, rgb2) {
	var lum1 = luminance(rgb1[0], rgb1[1], rgb1[2]);
	var lum2 = luminance(rgb2[0], rgb2[1], rgb2[2]);
	var brightest = Math.max(lum1, lum2);
	var darkest = Math.min(lum1, lum2);
	return (brightest + 0.05)
		/ (darkest + 0.05);
}
function getContrastingHue(contrastColor, minDiff = 25, mod = 30) {
	let hc = colorHue(contrastColor);
	let rnd1 = randomNumber(0, 360);
	let d = Math.floor(rnd1 / mod);
	let rnd = d * mod;
	let diff = Math.abs(rnd - hc);
	if (diff < minDiff) rnd = (rnd + 180) % 360;
	return rnd;
}
function getContrastingHueX(contrastColor, minDiff = 25, mod = 30, startWheel = 0) {
	let wheel = getHueWheel(contrastColor, minDiff, mod, startWheel);
	return chooseRandom(wheel);
}
function getCornerPixelColor(img) {
	let canvas = mCreate('canvas');
	let ctx = canvas.getContext('2d');
	ctx.drawImage(img, 0, 0);
	var p = ctx.getImageData(1, 1, 1, 1).data;
	let rgb = `rgb(${p[0]},${p[1]},${p[2]})`;
	let x = 1, y = 1;
	var coord = "x=" + x + ", y=" + y;
	let color = colorFrom(rgb);
	return color;
}
function getCornerRooms(house) {
	let rooms = house.rooms.map(x => Items[x]);
	let result = [];
	for (const r of rooms) {
		if (isCornerRoom(house, r)) {
			result.push(r.id);
		}
	}
	return result;
}
function getCornerRoomsDict(house) {
	let rooms = house.rooms.map(x => Items[x]);
	let result = {};
	for (const r of rooms) {
		let isN = r.isN = isNorthRoom(house, r);
		let isS = r.isS = isSouthRoom(house, r);
		let isW = r.isW = isWestRoom(house, r);
		let isE = r.isE = isEastRoom(house, r);
		if (isN && isW) result.NW = r.id;
		else if (isN && isE) result.NE = r.id;
		else if (isS && isE) result.SE = r.id;
		else if (isS && isW) result.SW = r.id;
	}
	return result;
}
function getCorners(board, func) {
	let fids = board.strInfo.corners;
	let res = [];
	for (const id of board.strInfo.corners) {
		if (func(G.table[id]) || func(getVisual(id))) {
			let o = getVisual(id);
			for (const prop in G.table[id]) {
				o[prop] = G.table[id][prop];
			}
			res.push(o);
		}
	}
	return res;
}
function getCornerVertices(centers, w = 100, h = 100) {
	let polys = [];
	for (const pt of centers) {
		let poly = getHexPoly(pt.x, pt.y, w, h);
		polys.push(poly);
	}
	let vertices = correctPolys(polys, 1);
	return vertices;
}
function getCorrectlyAnsweredWords() { return getQWords().filter(x => getInputStringOfWord(x) == x.word); }
function getCorrectPrefix(label, text) {
	let req = label.toLowerCase();
	let answer = text.toLowerCase();
	let res1 = removeNonAlphanum(req);
	let res2 = removeNonAlphanum(answer);
	let req1 = res1.alphas;
	let answer1 = res2.alphas;
	let whites = res1.whites;
	let common = findCommonPrefix(req1, answer1);
	let nletters = common.length;
	let ireal = 0;
	let icompact = 0;
	let iwhites = 0;
	let correctPrefix = '';
	while (icompact < nletters) {
		if (req[ireal] == common[icompact]) { correctPrefix += label[ireal]; icompact += 1; }
		else if (whites[iwhites] == req[ireal]) { correctPrefix += label[ireal]; iwhites += 1; }
		else break;
		ireal += 1;
	}
	return correctPrefix;
}
function getCorrectWords() { return Goal.seq; }
function getCorrectWordString(sep = ' ') { return getCorrectWords().join(sep); }
function getCssVar(varname) { return getComputedStyle(document.body).getPropertyValue(varname); }
function getCSSVariable(varname) { return getCssVar(varname); }
function getCurrentFileName() {
	let currentFilePath = document.scripts[document.scripts.length - 1].src;
	let fileName = currentFilePath.split('/').pop();
	return fileName;
}
async function getCurrentSuperdi() {
	await load_Codebase('../base/codebase', '../allcode.js');
	let [diall, dicode, dihistory] = [CODE.di, CODE.justcode, CODE.history];
	let superdi = {}, byKey = {};
	for (const type in diall) {
		for (const k in diall[type]) {
			let o = diall[type][k];
			o.code = dicode[k];
			o.history = dihistory[k];
			lookupSet(superdi, [type, k], o);
			lookupSet(byKey, [k], o);
		}
	}
	return [superdi, byKey];
}
function getDefaultObjectIds() { return _getChildrenOf(S.settings.table.defaultArea); }
function getDefaultObjects() { return getDefaultObjectIds(x => UIS[x]); }
function getDefaultPlayerIds() { return _getChildrenOf(S.settings.player.defaultArea); }
function getDefaultPlayers() { return getDefaultPlayerIds(x => UIS[x]); }
function getDefaultVisual(oid) { return UIS[getDefId(oid)]; }
function getDefId(oid) { return firstCond(oid2ids[oid], x => x[0] == 'd'); }
function getDefVisual(oid) { return UIS[getDefId(oid)]; }
function getDiagonallyOpposedCornerRooms(house) {
	if (coin()) return [getRoomNW(house), getRoomSE(house)]; else return [getRoomSW(house), getRoomNE(house)];
}
function getDiagRoomPairs(house) {
	return [[getRoomNW(house), getRoomSE(house)], [getRoomSW(house), getRoomNE(house)]];
}
function getDirList() {
	let dirlist = [
		'C:\\DATA\\dev\\js\\02harris\\_global',
		'C:\\DATA\\dev\\js\\02harris\\manyCars',
		'C:\\DATA\\dev\\js\\02harris\\wipgame',
		'C:\\DATA\\dev\\js\\02harris\\ch9',
		'C:\\DATA\\dev\\js\\03seidlin\\ch12\\scripts',
		'C:\\DATA\\dev\\js\\06verou',
		'C:\\DATA\\dev\\js\\07joeames\\js',
		'C:\\DATA\\dev\\js\\08cardGame1\\script',
		'C:\\DATA\\dev\\js\\16kaefer\\js',
		'C:\\DATA\\dev\\js\\19lifeGame\\version1',
		'C:\\DATA\\dev\\js\\20testPongApp',
		'C:\\DATA\\dev\\js\\23Animations_CSS_JS\\_my\\clock\\js',
		'C:\\DATA\\dev\\js\\23Animations_CSS_JS\\_my\\learning\\final\\js',
		'C:\\DATA\\dev\\js\\24memory',
		'C:\\DATA\\dev\\js\\25nnImage\\scripts',
		'C:\\DATA\\dev\\js\\26udaCanvas',
		'C:\\DATA\\dev\\js\\28cards\\test02',
		'C:\\DATA\\dev\\js\\31p0',
		'C:\\DATA\\dev\\js\\32t0\\grid',
		'C:\\DATA\\dev\\js\\33cardGameStarter',
		'C:\\DATA\\dev\\js\\40cardSolitaire\\cg01',
		'C:\\DATA\\dev\\js\\42deckOfCards\\test02',
		'C:\\DATA\\dev_2020\\CBII\\zLastVid\\work2',
		'C:\\DATA\\dev_2020\\CBII\\zLastVid\\work',
		'C:\\DATA\\dev_2020\\CBII\\zLastVid\\wCOMMON\\js',
		'C:\\DATA\\dev_2020\\CBII\\zLastVid\\wCOMMON\\js\\rsgTypes',
		'C:\\DATA\\dev_2020\\CBII\\zLastVid\\vid2\\js',
		'C:\\DATA\\dev_2020\\CBII\\zLastVid\\vid2\\rsg',
		'C:\\DATA\\dev_2020\\CBII\\zLastVid\\vid0\\static\\front\\js',
		'C:\\DATA\\dev_2020\\CBII\\zLastVid\\vid0\\static\\rsg\\js',
		'C:\\DATA\\dev_2020\\CODEBASE\\tnt_code\\_front\\asimple\\js',
		'C:\\DATA\\dev_2020\\CODEBASE\\tnt_code\\_front\\front_console\\js',
		'C:\\DATA\\dev_2020\\CODEBASE\\okt21\\static\\js',
		'C:\\DATA\\dev_2020\\CODEBASE\\work\\nov08\\js',
		'C:\\Users\\tawzz\\OneDrive\\dev\\CODEBASE\\rsg93\\static\\js',
		'C:\\Users\\tawzz\\OneDrive\\dev\\CODEBASE\\okt21\\static\\js',
		'C:\\Users\\tawzz\\OneDrive\\dev\\CBII\\CODE_SAFE\\CODE\\js',
		'C:\\Users\\tawzz\\OneDrive\\dev\\CODEBASE\\gsm2_tictactoe\\js',
		'C:\\Users\\tawzz\\OneDrive\\dev\\CODEBASE\\tnt_code\\_front\\asimple\\js',
		'C:\\Users\\tawzz\\OneDrive\\dev\\CODEBASE\\tntCode\\js',
		'C:\\D\\a00\\git_archive\\testing\\BASE\\features',
		'C:\\D\\a00\\git_archive\\testing\\BASE',
		'C:\\D\\a00\\git_archive\\test01\\public\\BASE',
		'C:\\D\\a00\\git_archive\\test01\\public\\t99',
		'C:\\D\\a00\\FLASK\\step4\\base\\js',
		'C:\\D\\a00\\FLASK\\step4\\base\\features',
		'C:\\D\\a00\\git_archive\\vid_old\\static\\rsg\\js',
		'C:\\D\\a00\\git_archive\\vid_old\\static\\front\\js',
		'C:\\D\\a00\\git_archive\\vid\\frontend\\static\\rsg\\js',
		'C:\\D\\a00\\git_archive\\vid\\frontend\\static\\front\\js',
		'C:\\D\\a00\\git_archive\\gsmTester\\C',
		'C:\\D\\a00\\git_archive\\gsmTester\\DIE',
		'C:\\D\\a00\\git_archive\\gsmTester\\DOC',
		'C:\\D\\a00\\git_archive\\gsmTester\\RSG\\js\\done',
		'C:\\D\\a00\\git_archive\\gsmTester\\RSG\\js\\measureArrange',
		'C:\\D\\a00\\git_archive\\gsmTester\\RSG\\js\\R',
		'C:\\D\\a00\\git_archive\\gsmTester\\RSG\\js\\testing',
		'C:\\D\\a00\\git_archive\\gsmTester\\RSG\\js\\types',
		'C:\\D\\a00\\git_archive\\gsmTester\\RSG\\js\\uiCreation',
		'C:\\D\\a00\\git_archive\\gsmTester\\RSG\\js',
		'C:\\D\\a00\\git_archive\\gsmTester\\SPGAME',
		'C:\\D\\a00\\git_archive\\gsmTester\\SPNEW',
		'C:\\D\\a00\\git_archive\\cardTests\\_test\\ex03',
		'C:\\D\\a00\\git_archive\\cardTests\\simple01',
		'C:\\D\\a00\\git_archive\\cardTests\\ex06_fromScratch',
		'C:\\D\\a00\\git_archive\\eximple\\static',
		'C:\\D\\a00\\git_archive\\eximple\\static\\games',
		'C:\\D\\a00\\git_archive\\dycon_ui_test\\base\\js',
		'C:\\D\\a00\\git_archive\\course-player-socketio\\public\\t99',
		'C:\\D\\a00\\git_archive\\asstest\\CODE',
		'C:\\D\\a00\\git_archive\\asstest\\SIMPLE',
		'C:\\D\\a00\\git_archive\\animaludos\\public\\work',
		'C:\\D\\a00\\git_archive\\animaludos\\public\\work\\done',
		'C:\\D\\a00\\git_archive\\also\\MZZ',
		'C:\\D\\a00\\git_archive\\also\\BASE',
		'C:\\D\\a00\\git_archive\\also\\BASE\\features',
		'C:\\D\\a00\\git_archive\\animaludos\\public',
		'C:\\D\\a00\\git_archive\\animaludos\\public\\BASE',
		'C:\\D\\a00\\git_archive\\animaludos\\public\\BASE\\features',
		'C:\\D\\a00\\git_archive\\abra',
		'C:\\D\\a00\\hive\\hive',
		'C:\\D\\a00\\TESTING\\base\\js',
		'C:\\D\\a00\\TESTING\\cosensus',
		'C:\\D\\a00\\TESTING\\easy',
		'C:\\D\\a00\\TESTING\\feedback',
		'C:\\D\\a00\\TESTING\\games',
		'C:\\D\\a00\\TESTING\\index_palette',
		'C:\\D\\a00\\videmo\\frontend\\static\\front\\js',
		'C:\\D\\a00\\videmo\\frontend\\static\\rsg\\js',
		'C:\\D\\a00\\videmo\\games\\catan\\_rsg',
		'C:\\D\\a00\\videmo\\games\\ttt\\_rsg',
		'C:\\D\\a00\\vid\\vid0\\static\\front\\js',
		'C:\\D\\a00\\vid\\vid0\\static\\rsg\\js',
		'C:\\D\\a00\\vid\\work2',
		'C:\\D\\a00\\vid\\wCOMMON\\js\\rsgTypes',
		'C:\\D\\a00\\vid\\wCOMMON\\js',
		'C:\\D\\a00\\vid\\vid2\\js',
		'C:\\D\\a00\\vid\\vid2\\rsg',
		'C:\\D\\a01\\chatApp\\public\\BASE',
		'C:\\D\\a01\\chatApp\\public\\BASE\\features',
		'C:\\D\\a01\\chatApp\\public\\work',
		'C:\\D\\a01\\chatApp\\public\\work\\done',
		'C:\\D\\a01\\chatApp\\public',
		'C:\\D\\a01\\chess',
		'C:\\xampp\\htdocs\\aroot\\_other\\perlen\\work\\done',
		'C:\\xampp\\htdocs\\aroot\\_other\\perlen\\work',
		'C:\\xampp\\htdocs\\aroot\\_other\\perlen',
		'C:\\xampp\\htdocs\\aroot\\_other\\bella\\js',
		'C:\\xampp\\htdocs\\aroot\\_other\\bg\\js',
		'C:\\xampp\\htdocs\\aroot\\_other\\bg4\\js',
		'C:\\xampp\\htdocs\\aroot\\_other\\canyonglen',
		'C:\\xampp\\htdocs\\aroot\\_other\\cards',
		'C:\\xampp\\htdocs\\aroot\\_other\\caristo',
		'C:\\xampp\\htdocs\\aroot\\_other\\chatas\\js',
		'C:\\xampp\\htdocs\\aroot\\_other\\chatas2',
		'C:\\xampp\\htdocs\\aroot\\_other\\chmultOrig\\js',
		'C:\\xampp\\htdocs\\aroot\\_other\\feedback',
		'C:\\xampp\\htdocs\\aroot\\_other\\frontend',
		'C:\\xampp\\htdocs\\aroot\\_other\\happy',
		'C:\\xampp\\htdocs\\aroot\\_other\\hive',
		'C:\\xampp\\htdocs\\aroot\\_other\\klavier',
		'C:\\xampp\\htdocs\\aroot\\_other\\phpchat\\public\\socket.io-client\\lib',
		'C:\\xampp\\htdocs\\aroot\\_other\\simply\\js',
		'C:\\xampp\\htdocs\\aroot\\_other\\v0_chatas',
		'C:\\xampp\\htdocs\\aroot\\base\\js',
		'C:\\xampp\\htdocs\\aroot\\base\\code',
		'C:\\xampp\\htdocs\\aroot\\belinda\\js',
		'C:\\xampp\\htdocs\\aroot\\belinda\\features',
		'C:\\xampp\\htdocs\\aroot\\cosensus',
		'C:\\xampp\\htdocs\\aroot\\easy',
		'C:\\xampp\\htdocs\\aroot\\iconViewer\\js',
		'C:\\xampp\\htdocs\\aroot\\rechnung',
		'C:\\xampp\\htdocs\\aroot\\simple',
		'C:\\xampp\\htdocs\\aroot\\videos\\js',
		'C:\\D\\a03\\nodemaster\\all\\caba',
		'C:\\D\\a03\\nodemaster\\all\\canvas\\lib',
		'C:\\D\\a03\\nodemaster\\all\\canvas\\noc',
		'C:\\D\\a03\\nodemaster\\all\\canvas\\smooth',
		'C:\\D\\a03\\nodemaster\\all\\cita',
		'C:\\D\\a03\\nodemaster\\all\\coding\\public\\javascripts',
		'C:\\D\\a03\\nodemaster\\all\\favicontester',
		'C:\\D\\a03\\nodemaster\\all\\fileupload\\public',
		'C:\\D\\a03\\nodemaster\\all\\fractals\\nature',
		'C:\\D\\a03\\nodemaster\\all\\fractals\\nn\\031_FlappyBird\\P5',
		'C:\\D\\a03\\nodemaster\\all\\fractals\\plant',
		'C:\\D\\a03\\nodemaster\\all\\fractals\\tree',
		'C:\\D\\a03\\nodemaster\\all\\leaflet\\leaf',
		'C:\\D\\a03\\nodemaster\\all\\leaflet\\leaf90',
		'C:\\D\\a03\\nodemaster\\all\\leaflet\\leaf91',
		'C:\\D\\a03\\nodemaster\\all\\leaflet\\leafp',
		'C:\\D\\a03\\nodemaster\\all\\leaflet\\leaf94',
		'C:\\D\\a03\\nodemaster\\all\\leaflet\\leafstreetview',
		'C:\\D\\a03\\nodemaster\\all\\leaflet\\mapgame',
		'C:\\D\\a03\\nodemaster\\all\\leaflet\\routing',
		'C:\\D\\a03\\nodemaster\\all\\mybrary\\public\\javascripts',
		'C:\\D\\a03\\nodemaster\\all\\openlayers\\map',
		'C:\\D\\a03\\nodemaster\\all\\openlayers\\mapTEXT',
		'C:\\xampp\\htdocs\\aroot\\games',
		'C:\\D\\a03\\nodemaster\\basejs',
		'C:\\D\\a03\\nodemaster\\cai',
		'C:\\D\\a03\\nodemaster\\noc',
		'C:\\D\\a03\\nodemaster\\socketstarter',
		'C:\\D\\a04\\basejs',
		'C:\\D\\a04\\game',
	];
}
function getDistinctVals(list, prop) {
	let res = [];
	for (const item of list) {
		let val = item[prop];
		addIf(res, val);
	}
	return res;
}
function getDivisors(n) {
	let x = Math.floor(Math.sqrt(n));
	let res = [];
	for (let i = 2; i <= x; i++) {
		let q = n / i;
		if (q == Math.round(q)) res.push(i);
	}
	return res;
}
function getDoorId(r1, r2) { return r1 + '_' + r2 + '_' + r1; }
function getDraggedElem(ev) {
	console.log(ev)
	if (isdef(ev.dataTransfer)) return document.getElementById(ev.dataTransfer.getData("text"));
	return null;
}
function getDynamicBaseArea(info, oid) {
	let loc = info.loc;
	let areaName = getDynId(info.loc, oid);
	if (!AREAS[areaName]) {
		let uiNode = AREAS[loc];
		let group = info.pool;
		prepParentForChildren(loc, group.length);
		for (const oid of group) {
			addPanel(loc, oid);
		}
	}
	return areaName;
}
function getDynId(loc, oid) { return loc + '@' + oid; }
function getEdgeCorners(o) {
	let cornerIds = o.corners.map(x => x._obj);
	return cornerIds.map(x => isdef(x) ? G.table[x] : x);
}
function getElementLists(o, elKey = '_obj', arrKey = '_set') {
	let res = {};
	if (!o) return [];
	for (const k in o) {
		let o1 = o[k];
		if (isLiteral(o1)) continue;
		let els = getElements(o1, elKey, arrKey);
		if (!isEmpty(els)) res[k] = els;
	}
	return res;
}
function getElements(o, elKey = '_obj', arrKey = '_set') {
	if (!o) return [];
	let res = o[arrKey] ? o[arrKey] : o;
	if (isList(res) && res.length > 0) return res[0][elKey] ? res.map(x => x[elKey]) : res;
	else return [];
}
function getElemSize(elem) {
	var d = document.createElement("div");
	document.body.appendChild(d);
	let cStyles = { position: 'fixed', opacity: 0, top: '-9999px' };
	mStyleX(d, cStyles);
	mAppend(d, elem);
	height = d.clientHeight;
	width = d.clientWidth;
	d.parentNode.removeChild(d);
	return { w: width, h: height };
}
function getEllipsePoints(radx, rady, n, disp = 0) {
	let pts = [];
	let i = 0;
	let da = 360 / n;
	let angle = disp;
	while (i < n) {
		let px = radx * Math.cos(toRadian(angle));
		let py = rady * Math.sin(toRadian(angle));
		pts.push({ X: px, Y: py });
		angle += da;
		i++;
	}
	return pts;
}
function getExtendedColors(bg, fg) {
	bg = computeColor(bg);
	fg = computeColor(fg);
	if (bg == 'inherit' && (nundef(fg) || fg == 'contrast')) {
		fg = 'inherit';
	} else if (fg == 'contrast' && isdef(bg) && bg != 'inherit') fg = colorIdealText(bg);
	else if (bg == 'contrast' && isdef(fg) && fg != 'inherit') { bg = colorIdealText(fg); }
	return [bg, fg];
}
function getFieldEdges(o) {
	let edgeIds = o.edges.map(x => x._obj);
	return edgeIds.map(x => isdef(x) ? G.table[x] : x);
}
function getFields(board) {
	let fids = board.strInfo.fields;
	return fids.map(x => G.table[x]);
}
function getFilename(path, withExt = true) {
	let fname = stringAfterLast(path, '/');
	let name = stringBefore(fname, '.');
	let ext = stringAfter(fname, '.');
	if (isEmpty(ext)) ext = 'png';
	let result = withExt ? (name + '.' + ext) : name;
	console.log(`filename (ext:${withExt}): ${result}`);
	return result;
}
function getFirstBoat() { if (!IdOwner.a || isEmpty(IdOwner.a)) return null; return UIS[getFirstBoatId()]; }
function getFirstBoatId() { if (!IdOwner.a || isEmpty(IdOwner.a)) return null; return IdOwner.a[0]; }
function getFirstId(path) { let ids = path2mainIds[path]; return ids && ids.length > 0 ? ids[0] : null; }
function getFirstKey(o) { return Object.keys(o)[0]; }
function getFirstVisual(oid) { let res = getVisual(oid); return res ? res : getDefVisual(oid); }
function getFloatLeftDiv() {
	let d = document.createElement('div');
	d.style.float = 'left';
	return d;
}
function getFontString(params) {
	let f = params.font;
	if (nundef(f)) return null;
	if (isString(f)) return f;
	else {
		let fz = f.size; if (isNumber(fz)) fz = '' + fz + 'px';
		let ff = f.family;
		let fv = f.variant;
		let fw = isdef(f.bold) ? 'bold' : isdef(f.light) ? 'light' : f.weight;
		let fs = isdef(f.italic) ? 'italic' : f.style;
		if (nundef(fz) || nundef(ff)) return null;
		let s = fz + ' ' + ff;
		if (isdef(fw)) s = fw + ' ' + s;
		if (isdef(fv)) s = fv + ' ' + s;
		if (isdef(fs)) s = fs + ' ' + s;
		return s;
	}
}
function getFractionVariantsTrial1(res) {
	let num = getRandomFractions(res, 8);
	let resInList = firstCond(nums, x => x.n == res.n && x.d == res.d);
	if (!resInList) nums.push(res);
	let finalNums = nums.filter(x => x.n == res.n);
	let otherNums = nums.filter(x => x.n != res.n);
	if (finalNums.length < 4) {
		let nMissing = 4 - finalNums.length;
		let additional = choose(otherNums, nMissing);
		finalNums = finalNums.concat(additional);
	}
	nums = finalNums;
	return nums;
}
function getFruid(pref = '') {
	const alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
	FRUIDCounter += 1;
	if (FRUIDCounter < alpha.length) return pref + alpha[FRUIDCounter];
	return pref + FRUIDCounter - alpha.length;
}
function getFuncName() {
	return getFuncName.caller.name;
}
function getFunctionCallerName() {
	return new Error().stack.match(/at (\S+)/g)[1].slice(3);
}
function getFunctionSignature(firstline, key) {
	let sig;
	if (firstline.includes(') {')) sig = stringBefore(firstline, ') {') + ')';
	else if (firstline.includes('){')) sig = stringBefore(firstline, '){') + ')';
	else sig = `function ${key}()`;
	sig += '{}';
	return sig;
}
function getFunctionsNameThatCalledThisFunction() {
	let c1 = getFunctionsNameThatCalledThisFunction.caller;
	if (nundef(c1)) return 'no caller!';
	let c2 = c1.caller;
	if (nundef(c2)) return 'no caller!';
	return c2.name;
}
function getGameOrLevelInfo(k, defval) {
	let val = lookup(DB.games, [G.id, 'levels', G.level, k]);
	if (!val) val = lookupSet(DB.games, [G.id, k], defval);
	return val;
}
function getGamePlayer() {
	for (const k in G.playersAugmented) {
		o = G.playersAugmented[k];
		if (o.obj_type == 'GamePlayer') return o;
	}
}
function getGames() { return U.avGames; }
function getGameValues() {
	let user = U.id;
	let game = G.id;
	let level = G.level;
	let settings = { numColors: 1, numRepeat: 1, numPics: 1, numSteps: 1, colors: ColorList };
	settings = mergeOverride(settings, DB.settings);
	if (isdef(U.settings)) settings = mergeOverride(settings, U.settings);
	if (isdef(DB.games[game])) settings = mergeOverride(settings, DB.games[game]);
	let next = lookup(DB.games, [game, 'levels', level]); if (next) settings = mergeOverride(settings, next);
	next = lookup(U, ['games', game]); if (next) settings = mergeOverride(settings, next);
	next = lookup(U, ['games', game, 'levels', level]); if (next) settings = mergeOverride(settings, next);
	delete settings.levels;
	Speech.setLanguage(settings.language);
	return settings;
}
function getGlobalColors() { return Object.keys(ColorDict).map(x => x.E); }
function getGlobals() {
	let di = {};
	let keys = get_keys(window); keys.sort();
	for (const k of keys) {
		let o = window[k];
		let type = typeof o;
		lookupAddToList(di, [type], { key: k, o: o, value: k, type: type });
	}
	Globals = di;
	return di;
}
function getGSGElements(gCond, sCond) {
	let keys = [];
	let byg = ByGroupSubgroup;
	for (const gKey in byg) {
		if (!gCond(gKey)) continue;
		for (const sKey in byg[gKey]) {
			if (!sCond(sKey)) continue;
			keys = keys.concat(byg[gKey][sKey]);
		}
	}
	return keys.sort();
}
function getHarmoniousStyles(sz, family, bg = 'blue', fg = 'random', hasText = true) {
	let fpic = 2 / 3; let ffont = 1 / 8; let ftop = 1 / 9; let fbot = 1 / 12;
	let styles = { w: sz, h: sz, bg: bg, fg: 'contrast', patop: sz * ftop, pabottom: sz * fbot, align: 'center', 'box-sizing': 'border-box' };
	let textStyles = { family: family, fz: Math.floor(sz * ffont) };
	let picStyles = { h: sz * fpic, bg: fg };
	return [styles, picStyles, textStyles];
}
function getHarmoniousStyles1(w, h, padding, family, bg = 'blue', fg = 'random', hasText = true) {
	let numbers = hasText ? [15, 55, 0, 20, 10] : [15, 70, 0, 0, 15];
	numbers = numbers.map(x => h * x / 100);
	[patop, szPic, zwischen, szText, pabot] = numbers;
	patop = Math.max(patop, padding);
	pabot = Math.max(pabot, padding);
	let styles = { h: h, bg: bg, fg: 'contrast', patop: patop, pabottom: pabot, align: 'center', 'box-sizing': 'border-box' };
	let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };
	let picStyles = { h: szPic, bg: fg };
	if (w > 0) styles.w = w; else styles.paleft = styles.paright = Math.max(padding, 4);
	return [styles, picStyles, textStyles];
}
function getHarmoniousStylesPlus(sContainer, sPic, sText, w, h, padding, family, bg = 'blue', fg = 'random', hasText = true) {
	let numbers = hasText ? [15, 55, 0, 20, 10] : [15, 70, 0, 0, 15];
	numbers = numbers.map(x => h * x / 100);
	[patop, szPic, zwischen, szText, pabot] = numbers;
	patop = Math.max(patop, padding);
	pabot = Math.max(pabot, padding);
	let styles = { h: h, bg: bg, fg: 'contrast', patop: patop, pabottom: pabot, align: 'center', 'box-sizing': 'border-box' };
	let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };
	let picStyles = { h: szPic, bg: fg };
	if (w > 0) styles.w = w; else styles.paleft = styles.paright = Math.max(padding, 4);
	for (const k in sContainer) { if (k != 'w' && nundef(styles[k])) styles[k] = sContainer[k]; }
	for (const k in sPic) { if (k != 'w' && nundef(picStyles[k])) picStyles[k] = sPic[k]; }
	for (const k in sText) { if (k != 'w' && nundef(textStyles[k])) textStyles[k] = sText[k]; }
	return [styles, picStyles, textStyles];
}
function getHarmoniousStylesPlusPlus(sContainer, sPic, sText, w, h, picPercent, padding, family, bg = 'blue', bgPic = 'random', fgPic = 'white', fgText = 'white', hasText = true) {
	let fact = 55 / picPercent;
	let [ptop, pbot] = [(80 - picPercent) * 3 / 5, (80 - picPercent) * 2 / 5];
	let numbers = hasText ? [fact * 15, picPercent, 0, fact * 20, fact * 10] : [15, 70, 0, 0, 15];
	numbers = numbers.map(x => h * x / 100);
	[patop, szPic, zwischen, szText, pabot] = numbers;
	patop = Math.max(patop, padding);
	pabot = Math.max(pabot, padding);
	let styles = { h: h, bg: bg, fg: isdef(fgText) ? fgText : 'contrast', patop: patop, pabottom: pabot, align: 'center', 'box-sizing': 'border-box' };
	let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };
	let picStyles = { h: szPic, bg: bgPic, fg: isdef(fgPic) ? fgPic : 'contrast' };
	if (w > 0) styles.w = w; else styles.paleft = styles.paright = Math.max(padding, 4);
	for (const k in sContainer) { if (k != 'w' && nundef(styles[k])) styles[k] = sContainer[k]; }
	for (const k in sPic) { if (k != 'w' && nundef(picStyles[k])) picStyles[k] = sPic[k]; }
	for (const k in sText) { if (k != 'w' && nundef(textStyles[k])) textStyles[k] = sText[k]; }
	return [styles, picStyles, textStyles];
}
function getHarmoniousStylesX(sz, family, bg = 'blue', fg = 'random', hasText = true, setWidth = false) {
	let numbers = hasText ? [15, 55, 0, 20, 10] : [15, 70, 0, 0, 15];
	numbers = numbers.map(x => sz * x / 100);
	[patop, szPic, zwischen, szText, pabot] = numbers;
	console.log(patop, szPic, zwischen, szText, pabot);
	let styles = { h: sz, bg: bg, fg: 'contrast', patop: patop, pabottom: pabot, align: 'center', 'box-sizing': 'border-box' };
	let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };
	let picStyles = { h: szPic, bg: fg };
	if (setWidth) styles.w = sz; else styles.paleft = styles.paright = 4;
	return [styles, picStyles, textStyles];
}
function getHarmoniousStylesXX(w, h, padding, family, bg = 'blue', fg = 'random', hasText = true) {
	let numbers = hasText ? [15, 55, 0, 20, 10] : [15, 70, 0, 0, 15];
	numbers = numbers.map(x => h * x / 100);
	[patop, szPic, zwischen, szText, pabot] = numbers;
	patop = Math.max(patop, padding);
	pabot = Math.max(pabot, padding);
	let styles = { h: h, bg: bg, fg: 'contrast', patop: patop, pabottom: pabot, align: 'center', 'box-sizing': 'border-box' };
	let textStyles = { family: family, fz: Math.floor(szText * 3 / 4) };
	let picStyles = { h: szPic, bg: fg };
	if (w > 0) styles.w = w; else styles.paleft = styles.paright = Math.max(padding, 4);
	return [styles, picStyles, textStyles];
}
function getHexFieldInfo(boardInfo, row, col) {
	let info = {
		shape: 'hex',
		memType: 'field',
		row: row,
		col: col,
		x: -boardInfo.w / 2 + (col - boardInfo.minCol) * boardInfo.dx + boardInfo.wdef / 2,
		y: -boardInfo.h / 2 + boardInfo.hdef / 2 + (row - boardInfo.minRow) * boardInfo.dy,
		w: boardInfo.wdef,
		h: boardInfo.hdef,
	};
	info.poly = getHexPoly(info.x, info.y, info.w, info.h);
	return info;
}
function getHexGridInfo(rows, cols) {
	[wdef, hdef] = [4, 4];
	[dx, dy] = [wdef / 2, (hdef * 3) / 4];
	let info = {
		structType: 'hexGrid',
		rows: rows,
		cols: cols,
		wdef: 4,
		hdef: 4,
		dx: dx,
		dy: dy,
		w: wdef + (cols - 1) * dx,
		h: hdef + (rows - 1) * dy,
		minRow: 0,
		minCol: 0,
	};
	return info;
}
function getHexPoly(x, y, w, h) {
	let hex = [[0, -0.5], [0.5, -0.25], [0.5, 0.25], [0, 0.5], [-0.5, 0.25], [-0.5, -0.25]];
	return getPoly(hex, x, y, w, h);
}
function getHue(cssHSLA) {
	let h = firstNumber(cssHSLA);
	return h;
}
function getHueWheel(contrastTo, minDiff = 25, mod = 30, start = 0) {
	let hc = colorHue(contrastTo);
	let wheel = [];
	while (start < 360) {
		let d1 = Math.abs((start + 360) - hc);
		let d2 = Math.abs((start) - hc);
		let d3 = Math.abs((start - 360) - hc);
		let min = Math.min(d1, d2, d3);
		if (min > minDiff) wheel.push(start);
		start += mod;
	}
	return wheel;
}
function getIdArea(areaName) {
	if (startsWith(areaName, 'a_d_')) {
		return areaName;
	} else if (startsWith(areaName, 'm_A_')) {
		return areaName;
	} else {
		return 'm_A_' + areaName;
	}
}
function getidAvailable(i) { return 'c_b_mm_plj' + i; }
function getIdForOid(oid) { return 'm_t_' + oid; }
function getidNum(i) { return 'c_b_mm_pln' + i; }
function getidPlayermode(mode) { return 'c_b_mm_' + mode; }
function getIds(id, type = 'all') {
	let res = id2uids[id];
	if (nundef(res)) return [];
	if (isEmpty(res) || type == 'all') return res;
	return res.filter(x => isdef(x[type]));
}
function getIdsInfobox() { return IdOwner.i ? IdOwner.i : []; }
function getidSpan(i) { return 'sppl' + i; }
function getidSpanJoin(i) { return 'spplj' + i; }
function getidType(i) { return 'c_b_mm_plt' + i; }
function getIfDict(o, key, defval) {
	let entry = o[key];
	if (nundef(entry) && isdef(defval)) {
		o[key] = defval;
	}
	return o[key];
}
function getIndicesCondi(arr, func) {
	let res = [];
	for (let i = 0; i < arr.length; i++) {
		if (func(arr[i], i)) res.push(i);
	}
	return res;
}
function getIndicesOfCorrectlyAnsweredWords() { return getCorrectlyAnsweredWords().map(x => x.iWord); }
function getIndicesOfWrongChars() { return getWrongChars().map(x => x.index); }
function getIndicesOfWrongWords() { return getWrongWords().map(x => x.iWord); }
function getInfos(cats, lang, { minlen, maxlen, wShort = false, wLast = false, wExact = false, sorter = null }) {
	let keys = setCategories(cats);
	let infos = [];
	if (isdef(minlen && isdef(maxlen))) {
		keys = keys.filter(k => {
			let info = jsCopy(symbolDict[k]);
			let exact = CorrectWordsExact[lang][k];
			if (wExact && nundef(exact)) return false;
			let ws = wExact ? [exact.req] : wLast ? [lastOfLanguage(k, lang)] : wordsOfLanguage(k, lang);
			if (wShort) ws = [getShortestWord(ws, false)];
			info.words = [];
			for (const w of ws) {
				if (w.length >= minlen && w.length <= maxlen) {
					info.words.push(w);
					info.best = w;
				}
			}
			if (!isEmpty(info.words)) { infos.push(info); return true; } else return false;
		});
	}
	if (isdef(sorter)) sortByFunc(infos, sorter);
	return infos;
}
function getInputStringOfChar(inp) { return iDiv(inp).innerHTML; }
function getInputStringOfChari(index) { return getInputStringOfChar(Goal.chars[index]); }
function getInputStringOfWord(winp) { return winp.charInputs.map(x => iDiv(x).innerHTML).join(''); }
function getInputStringOfWordi(iWord) { return getInputStringOfWord(Goal.words[iWord]); }
function getInputValue(id) { const input = document.getElementById(id); const text = input.value; input.value = ''; return text; }
function getInputWords() { return Goal.words.map(x => getInputStringOfWord(x)); }
function getInputWordString(sep = ' ') { return getInputWords().join(sep); }
function getInstance(G) {
	return new (Daat.GameClasses[G.id])(G.id);
}
function getInstrGeoJson(instr, coord) {
	console.log('instr', instr, 'coord', coord);
	var formatter = new L.Routing.Formatter();
	var instrPts = {
		type: "FeatureCollection",
		features: []
	};
	for (var i = 0; i < instr.length; ++i) {
		var g = {
			"type": "Point",
			"coordinates": [coord[instr[i].index].lng, coord[instr[i].index].lat]
		};
		var p = {
			"instruction": formatter.formatInstruction(instr[i])
		};
		instrPts.features.push({
			"geometry": g,
			"type": "Feature",
			"properties": p
		});
	}
	return instrPts;
}
function getItem(k) { return infoToItem(Syms[k]); }
function getItemOfSameIndexAsIn(val, arr, items) {
	let i = arr.indexOf(val);
	return items[i];
}
function getItems(n, cond, keySet = 'all') {
	if (isNumber(n)) { n = _getKeysCond(n, cond, keySet); }
	if (isString(n[0])) n = n.map(x => Syms[x]);
	if (nundef(n[0].info)) n = n.map(x => infoToItem(x));
	return n;
}
function getItemsMaxLen(n, len, keySet = 'all', lang = 'E', luc = 'c') { return getItemsMaxWordLength(...arguments); }
function getItemsMaxWordLength(n, len, keySet = 'all', lang = 'E', luc = 'c') {
	let items = getItems(n, x => x[lang].length <= len, keySet);
	addLabels(items, lang, luc);
	return items;
}
function getItemWithMax(d, propName) {
	testHelpers('getItemWithMax dict:', d, 'propName:', propName);
	let max = 0;
	let kmax = null;
	for (const key in d) {
		let val = d[key][propName];
		if (val > max) {
			max = val;
			kmax = key;
		}
	}
	return [kmax, d[kmax], max];
}
function getItemWithMaxValue(d) {
	let k = Object.keys(d).reduce((a, b) => (d[a] >= d[b] ? a : b));
	return [k, d[k]];
}
function getKeys(dict) { return Object.keys(dict); }
function getKeySet(groupName, language, maxlength) {
	let keys = setGroup(groupName);
	keys = isdef(maxlength) && maxlength > 0 ?
		keys.filter(x => lastOfLanguage(x, language).length <= maxlength)
		: keys;
	return keys;
}
function getKeySets() {
	makeCategories();
	let res = {};
	for (const k in Syms) {
		let info = Syms[k];
		if (nundef(info.cats)) continue;
		for (const ksk of info.cats) {
			lookupAddIfToList(res, [ksk], k);
		}
	}
	res.animals = getAnimals();
	res.nature = getNature();
	localStorage.setItem('KeySets', JSON.stringify(res));
	return res;
}
function getKeySetSimple(cats, lang, minlen, maxlen, wLast = false, wExact = false, sorter = null) {
	let keys = setCategories(cats);
	if (isdef(minlen && isdef(maxlen))) {
		keys = keys.filter(k => {
			let exact = CorrectWordsExact[k];
			if (wExact && nundef(exact)) return false;
			let ws = wLast ? [lastOfLanguage(k, lang)] : wordsOfLanguage(k, lang);
			for (const w of ws) {
				if (w.length >= minlen && w.length <= maxlen
					&& (!wExact || isdef(exact) && w.toLowerCase() == exact.req && !exact.danger))
					return true;
			}
			return false;
		});
	}
	if (isdef(sorter)) sortByFunc(keys, sorter);
	return keys;
}
function getKeySetsX() {
	let ks = localStorage.getItem('KeySets');
	if (isdef(ks)) return JSON.parse(ks);
	let res = {};
	for (const k in Syms) {
		let info = Syms[k];
		if (nundef(info.cats)) continue;
		for (const ksk of info.cats) {
			lookupAddIfToList(res, [ksk], k);
		}
	}
	localStorage.setItem('KeySets', JSON.stringify(res));
	return res;
}
function getKeySetX(categories, language, minlength, maxlength, bestOnly = false, sortAccessor = null, correctOnly = false, reqOnly = false) {
	let keys = setCategories(categories);
	if (isdef(minlength && isdef(maxlength))) {
		keys = keys.filter(k => {
			let ws = bestOnly ? [lastOfLanguage(k, language)] : wordsOfLanguage(k, language);
			for (const w of ws) {
				if (w.length >= minlength && w.length <= maxlength
					&& (!correctOnly || isdef(CorrectWordsExact[k]))
					&& (!reqOnly || w.toLowerCase() == CorrectWordsExact[k].req))
					return true;
			}
			return false;
		});
	}
	if (isdef(sortAccessor)) sortByFunc(keys, sortAccessor);
	return keys;
}
function getLastBoatId() { if (!IdOwner.a || isEmpty(IdOwner.a)) return null; return IdOwner.a[IdOwner.a.length - 1]; }
function getLayoutSample(n) {
	if (G.level > 4) {
	}
	let samples = {
		1: '"a"',
		2: '"a b"', //'"a" "b"',
		3: ['"a b c"', '"a a" "b c"', '"a b" "c c"'],
		4: ['"z z d" "a a c" "a a c"', '"a b" "c d"'],
		5: ['"a b e" "c c d"', '"a a b" "c d e"', '"a b e" "c d e"'],
		6: ['"a b b c" "d d e f"', '"a b b c" "a d e f"', '"a b b b" "c d e f"'],
		7: ['"a b c d" "a b e f"', '"a b b c" "a d e c" "a d f g"'],
		8: ['"a a b c" "d d e c" "f g e h"', '"a b b c" "a d e c" "f g e h"'],
		9: ['"a a b b" "c d d e" "f g h i"', '"a d e b" "c d e b" "f g h i"'],
		10: '"j a b b" "c d d e" "f g h i"',
		11: '"j a a b b" "j c d d e" "f g h i k"',
		12: '"j a a b b l" "j c d d e l" "f g h i k k"',
		13: '"j a a b b" "j c d d e" "f g h i k" "l l m m k"',
		14: '"n j a a b b" "n j c d d e" "f g h i i k" "l l m m m k"',
		15: '"n j o o b b" "n j a a b b" "n j c d d e" "f g h i i k" "l l m m m k"',
		16: [
			'"a b c d e" "f f g h e" "o p i h j" "k l i m n"',
			'"a b b d e" "n f p g e" "i j j o k" "l l c m h"',
			'"a a p g c h" "a a b b c h" "n d d e e f" "o i j k l m"',
			'"a b c o d e" "f b c p g e" "f i i j g k" "n l m j h k"'
		],
		17: [
			'"a b c d e" "f g h i j" "k l m i o" "p n q q o"',
			'"a a c d e" "f g h i j" "k l m i o" "p n q b o"',
			'"a b c d e" "f b h i j" "k l m i o" "p n m q g"'
		],
		18: [
			'"a b c d e" "a g h i j" "k l m n o" "p q r f o"',
			'"a b b c d e" "a g h h i j" "k l l m n o" "p q q r f o"',
			'"a b b c d e" "a g g h i j" "k g g m n o" "p q l r f o"',
			'"a b b c d e" "a g h h i j" "k k l m n o" "p q l r f o"',
		],
		19: [
			'"a b c d e" "f b h i j" "k l m s o" "p n q g r"',
			'"a a b c d e" "f h b i i j" "k l m m s o" "p n q g g r"',
			'"a a b c d e" "f h b i l j" "k h m m s o" "p n q g g r"',
			'"a q b c d e" "f h b i l j" "k h m m s o" "p n m m g r"',
			'"a q b c d e" "f h b i l j" "k h m m s o" "p n m m g r"',
		],
		20: [
			'"a b c d e" "f g h i j" "k l m n o" "p q r s t"',
			'"a b b c d e" "f g h h i j" "k k l m n o" "p q r s s t"',
			'"a b b c d e" "f g h h i j" "k k l m i o" "p q r n s t"',
			'"a f b c d e" "a g h h i j" "k k l m i o" "p q r n s t"',
		],
		21: [
			'"a b b c d e" "f g h h i j" "k u l m n o" "p q r s s t"',
			'"a b b c d e" "f u g h i j" "k u l m n o" "p q r s n t"',
			'"a b b c d e" "f g h u i j" "k k l m i o" "p q r n s t"',
			'"a f b c d e" "a g h h i j" "k u l m i o" "p q r n s t"',
		],
		22: [
			'"a v b c d e" "f g h h i j" "k u l m n o" "p q r s s t"',
			'"a b b c d e e" "f u g h i j v" "k u l m n o v" "p q r s n t t"',
			'"a b b c d e e" "f u g h i j j" "k u l m n o v" "p q r s n t t"',
			'"a b b c d d e" "m b b c i j e" "f u g h i j v" "k u l l n o v" "p q r s n t t"',
		],
		23: [
			'"a v b c d e" "f g h h i j" "k u l m n o" "p q r w s t"',
			'"a w b c d e e" "f u g h i j v" "k u l m n o o" "p q r s n t t"',
			'"a b b c d e e" "f w g h i j j" "k u l m n o v" "p q r s n t t"',
		],
		24: [
			'"a v b c d e" "f g h x i j" "k u l m n o" "p q r w s t"',
			'"a v v b c d e" "f g h x x i j" "k u l l n o m" "p q r w s t m"',
		],
		25: ['"a b c d e f g" "a h i k l m g" "o p n r s m u" "v w x y q t j"'],
		26: ['"a a c d e f g" "h i b k l j n" "o p q r s m u" "v w x y z t u"'],
		27: ['"a b c d e f g" "h i j k l m n" "o p q r s t u" "v w x y z A u"'],
		28: ['"a b c d e f g" "h i j k l m n" "o p q r s t u" "v w x y z A B"'],
		29: ['"a b c d e f g h" "i j k d m n o p" "q r r t u v w x" "y z A B C s l l"'],
		30: ['"a b c d e f g h" "i j k d m n o p" "q r s t u v w x" "y z A B C D l l"'],
		31: ['"a b c d e f g h" "i j k l m n o p" "q r s t u v w x" "y z A B C D E E"'],
		32: ['"a b c d e f g h" "i j k l m n o p" "q r s t u v w x" "y z A B C D E F"'],
	};
	let s;
	if (nundef(n)) {
		let l = chooseRandom(Object.keys(samples));
		s = samples[l];
	} else {
		s = samples[n];
	}
	s = isList(s) ? chooseRandom(s) : s;
	s = getLetterSwapEncoding(s);
	return s;
}
function getLbl(key, sz, bg, label) {
	let items, ifs = { bg: bg }, options = { sz: sz };
	if (isdef(label)) options.showLabels = true; else options.showLabels = false;
	[items, ifs, options] = createStandardItems(null, ifs, options, [key], isdef(label) ? [label] : undefined);
	prepDims(items, options);
	prepLbls(items, ifs, options);
	return items[0];
}
function getLbls(onClickPictureHandler, ifs = {}, options = {}, keys, labels) {
	let items;
	[items, ifs, options] = createStandardItems(onClickPictureHandler, ifs, options, keys, labels);
	prepDims(items, options);
	prepLbls(items, ifs, options);
	return items;
}
function getLettersExcept(w, except = []) {
	w = w.toLowerCase();
	let res = [];
	for (let i = 0; i < w.length; i++) {
		if (!except.includes(w[i])) res.push({ i: i, letter: w[i] });
	}
	return res;
}
function getLetterSwapEncoding(s) {
	let di = getRandomLetterMapping(s);
	let result = '';
	for (let i = 0; i < s.length; i++) {
		result += s[i] in di ? di[s[i]] : s[i];
	}
	return result;
}
function getLines(s) {
	var str = s;
	var res = str.split('\n');
	return res;
}
function getLineStart(line) {
	if (isEmpty(line.trim())) { return ['', 'empty'] }
	let type = 'in_process';
	let w = stringBefore(line, ' ');
	let ch = line[0];
	let i = 0; while (line[i] == '\t') { i++; }
	let fw = line.slice(i);
	if (line.startsWith('//#region')) { w = 'REGION'; type = 'REGION' }
	else if (line.startsWith('//#endregion')) { w = 'ENDREGION'; type = 'REGION' }
	else if (line.startsWith('//')) { w = 'COMMENT'; type = 'empty' }
	else if (isdef(fw) && fw.startsWith('//')) { w = 'COMMENT'; type = 'empty' }
	else if (ch == '\t') { w = 'TAB'; }
	else if (ch == '}' || ch == '{') { w = 'BRACKET' }
	else if (nundef(ch)) { w = 'UNDEFINED'; type = 'WTF' }
	else if (ch == ' ') { w = 'SPACE'; type = 'WTF' }
	else if (ch == '\r') { type = 'WTF' }
	else if (nundef(fw)) { w = fw; type = 'WTF' }
	if (['async', 'class', 'const', 'function', 'var'].includes(w)) type = 'block';
	else if (isLetter(ch)) type = 'WTF';
	return [w, type];
}
function getLinkContainerId(linkId) { return 'd' + linkId; }
function getList(lst) { return isdef(lst) ? lst : []; }
function getListsContainingAll(ll, l) {
	let res = [];
	for (const l1 of ll) {
		if (containsAll(l1, l)) res.push(l1);
	}
	return res;
}
function getLuminosity(cssHSLA) {
	let ints = allNumbers(cssHSLA);
	return ints[2];
}
function getMainArea(dParent, styles = {}) {
	clearElement(dParent);
	let dArea = getArea(dParent, styles);
	return dArea;
}
function getMainAreaPadding(dParent, padding = 10, bg = 'grey', styles = {}) {
	let aTable = percentOf(dParent, 100, 100);
	let defAreaStyles = { margin: padding, w: aTable.w - 2 * padding, h: aTable.h - 2 * padding, bg: bg, layout: 'hcc', };
	clearElement(dParent);
	let dArea = getArea(dParent, mergeOverride(defAreaStyles, styles));
	return dArea;
}
function getMainAreaPercent(dParent, bg = 'grey', wPercent = 94, hPercent = 96, id) {
	clearElement(dParent);
	let aTable = percentOf(dParent, wPercent, hPercent);
	let dArea = getArea(dParent, { w: aTable.w, h: aTable.h, layout: 'hcc', bg: bg }, id);
	return dArea;
}
function getMainId(oid) { return firstCond(oid2ids[oid], x => x[0] == 'm'); }
function getMainVisual(oid) { return UIS[oid]; }
function getMatchingPictoKey(o, key) {
	let sym = o.obj_type;
	if (sym in S.settings.symbols) { sym = S.settings.symbols[sym]; }
	if (!(sym in iconChars)) {
		symNew = Object.keys(iconChars)[randomNumber(5, 120)];
		S.settings.symbols[sym] = symNew;
		sym = symNew;
	}
}
function getMissingIndices(arr, len) {
	let i = 0;
	let a = arr[i];
	let j = 0;
	let res = [];
	while (j < len) {
		while (j < a) {
			testHelpers(j, a, 'adding j');
			res.push(j);
			j += 1;
		}
		i += 1;
		j = a + 1;
		a = i < arr.length ? arr[i] : len;
	}
	return res;
}
function getMixedNumber(num, denom) {
	const quotient = Math.floor(num / denom);
	const remainder = num % denom;
	if (remainder === 0) {
		return { full: quotient, frac: null, n: null, d: null };
	} else {
		return { full: quotient, frac: math.fraction(remainder, denom), n: remainder, d: denom };
	};
}
function getMouseObject(e) {
	return (e ? e.target : window.event.srcElement);
}
function getMouseX(e) {
	return (e ? e.clientX : window.event.clientX);
}
function getMouseY(e) {
	return (e ? e.clientY : window.event.clientY);
}
function getNamedUID(name) {
	if (!(name in NAMED_UIDS)) {
		NAMED_UIDS[name] = 0;
	}
	NAMED_UIDS[name] += 1;
	return name[0] + NAMED_UIDS[name];
}
function getNature() {
	let gr = 'Animals & Nature';
	let result = [];
	for (const sg in ByGroupSubgroup[gr]) {
		result = result.concat(ByGroupSubgroup[gr][sg]);
	}
	return result;
}
function getNColors(n) {
	return choose(getColorNames(), n);
}
function getNextIndexOfMissingNumber(iStart = 0) {
	for (let i = iStart; i < G.seq.length; i++) {
		if (Goal.words[i].hasBlanks) return i;
	}
	return null;
}
function getNextStartBoat() {
	let mobj = null;
	let sb = startBoats[0];
	if (G.phase == 'setup') {
		let boats = getBoats();
		for (const b of boats) {
			for (const id of startBoats) {
				for (const t of b.o.text) {
					if (t.includes(id)) {
						sb = id;
						mobj = b;
						removeInPlace(startBoats, sb);
						return mobj;
					}
				}
			}
		}
	}
	return mobj;
}
function getNextTableId() {
	let ids = nundef(DB.tables) ? [] : Object.keys(DB.tables);
	ids = ids.map(x => Number(x));
	let max = Math.max(ids);
	return '' + (max + 1);
}
function getNItemsPerKeylist(n, keylists, options = {}) {
	let items = [];
	for (const list of keylists) {
		options.keySet = list.keys;
		let cat = list.cat;
		let newItems = genItems(n, options);
		newItems.map(x => { x.cat = cat; items.push(x) });
	}
	return items;
}
function getNumCards(deck) { return deck.cards.length; }
function getNumSeqHint() {
	let l = G.op == 'plus' ? 'to' : 'from';
	let msg = `${G.op} ${G.step} ${l} the previous number`;
	msg = `${G.oop.cmd} ${G.step} ${G.oop.link} the previous number`;
	return msg;
}
function getNumSeqHintString(i) {
	console.log('i', i, 'trial#', G.trialNumber)
	let cmd = G.op;
	let m = G.step;
	let lstSpoken, lstWritten;
	if (i == 0) {
		lstSpoken = [G.oop.cmd, m];
	} else if (i == 1) {
		let decl = G.op == 'plus' ? 'to' : G.op == 'minus' ? 'from' : 'by';
		let phrase = decl + ' the previous number';
		lstSpoken = [G.oop.cmd, m, G.oop.link, ' the previous number'];
	} else if (i == 2) {
		let iBlank = getNextIndexOfMissingNumber();
		let iPrevious = iBlank - 1;
		let n = G.seq[iPrevious];
		lstSpoken = ['the previous number', 'is', n];
	} else if (i >= 3) {
		let iBlank = getNextIndexOfMissingNumber();
		let iPrevious = iBlank - 1;
		let n = G.seq[iPrevious];
		let oop = OPS[cmd];
		let erg = i >= 4 ? Goal.words[iBlank].word : '?';
		lstSpoken = ['', n, oop.sp, m, 'equals', erg];
		lstWritten = [n, oop.wr, m, '=', erg];
	} else {
		let iBlank = getNextIndexOfMissingNumber();
		lstSpoken = ['enter', Goal.words[iBlank].word];
	}
	if (G.language == 'D') lstSpoken = lstSpoken.map(x => translateToGerman(x));
	if (nundef(lstWritten)) lstWritten = lstSpoken;
	return [lstSpoken.join(' '), lstWritten.join(' ')];
}
function getO(n, R) { let oid = n.oid; if (isdef(oid)) return R.getO(oid); else return null; }
function getObject(id) { return G.table[id]; }
function getObjectFromWindow(key) {
	let code, sig, type;
	let f = window[key];
	if (typeof f != 'function') return null;
	code = f.toString();
	sig = getFunctionSignature(stringBefore(code, '\n'), key);
	type = 'func';
	let o = { name: key, code: code, sig: sig, region: type, filename: '', path: '', type: type };
	CODE.justcode[key] = code;
	CODE.all[key] = CODE.di[type][key] = o;
	return o;
}
function getObjectsWithSame(olist, props, o, up = true, breakWhenDifferent = true) {
	let res = [];
	let val = lookup(o, props);
	if (up) {
		for (let i = 0; i <= olist.length - 1; i++) {
			let val1 = lookup(olist[i], props);
			if (val1 == val) res.push(olist[i]); else if (breakWhenDifferent) return res;
		}
	} else {
		for (let i = olist.length - 1; i >= 0; i--) {
			let val1 = lookup(olist[i], props);
			if (val1 == val) res.push(olist[i]); else if (breakWhenDifferent) return res;
		}
	}
	return res;
}
function getOidForMainId(id) { return id[0] == 'm' ? id.substring(4) : null; }
function getOlist() {
	let keyList = ['female', 'male', 'spy', 'frog', 'fairy'];
	let olist = [];
	for (const k of keyList) {
		olist.push({ key: k, label: k, color: randomColor() });
	}
	return olist;
}
function getOperand(type) { let x = OPS[type]; return randomNumber(Math.max(2, x.min), x.max); }
function getOperationHintString(i) {
	if (i == 0) {
		let spOp = G.oop.sp; if (G.language == 'D') spOp = DD[spOp];
		let sSpoken = [G.operand, spOp, G.step].join(' ');
		let sWritten = visOperation(G.op, G.operand, G.step, null, '?');
		return [sSpoken, sWritten];
	} else {
		let result = G.oop.f(G.operand, G.step);
		let lstSpoken = i == 1 ? result == 0 ? [result] : ['count', 'the red dots'] : [G.operand, G.oop.sp, G.step, 'equals', result];
		if (G.language == 'D') lstSpoken = lstSpoken.map(x => translateToGerman(x));
		let sSpoken = lstSpoken.join(' ');
		let sWritten = visOperation(G.op, G.operand, G.step, null);
		return [sSpoken, sWritten];
	}
}
function getOppDir(dir) { return { e: 'w', w: 'e', n: 's', s: 'n' }[dir]; }
function getOptionsMinimalistic(dParent, handler, w = 0, h = 0, ifs = {}, options = {}, g) {
	[w, h] = detectArea(dParent, w, h);
	let defOptions = {
		isRegular: true, hugeFont: true, szPic: { w: 200, h: 200 }, gap: 15, shufflePositions: true,
		showPic: true, showLabels: true, luc: 'l', labelPos: 'bottom', language: g.language, keySet: g.vocab,
		w: w, h: h, fz: 24, fzText: 24, fzPic: 96, ifs: ifs, handler: handler, ifs: ifs, handler: handler,
	};
	addSimpleProps(g, options);
	addKeys(defOptions, options);
	if (options.numRepeat > 1 && nundef(options.ifs.bg)) {
		let bg = isdef(options.colorKeys) ? 'white' : (i) => options.sameBackground ? computeColor('random') : 'random';
		let fg = isdef(options.colorKeys) ? 'black' : 'contrast';
		options.ifs.bg = bg;
		options.ifs.fg = fg;
	}
	return options;
}
function getOrdinal(i) { return G.numRepeat == 1 ? '' : G.language == 'E' ? ordinal_suffix_of(i) : '' + i + '. '; }
function getOrdinalColorLabelInstruction(cmd, ordinal, color, label) {
	if (nundef(ordinal)) ordinal = getOrdinal(Goal.iRepeat);
	if (nundef(color)) color = Goal.color;
	let colorWord = '', colorSpan = '';
	if (isdef(color)) {
		colorWord = nundef(color) ? '' : nundef(color[G.language]) ? color.E : color[G.language];
		if (G.language == 'D' && !isEmpty(ordinal) && !['lila', 'rosa'].includes(colorWord)) colorWord += 'e';
		colorSpan = `<span style='color:${color.c}'>${colorWord.toUpperCase()}</span>`;
	}
	if (nundef(label)) label = Goal.label;
	let labelSpan = `<b>${label.toUpperCase()}</b>`;
	let eCommand, dCommand;
	switch (cmd) {
		case 'click': eCommand = cmd + ' the'; dCommand = cmd; break
		case 'then': eCommand = cmd + ' the'; dCommand = 'dann'; break
	}
	let eInstr = `${eCommand} ${ordinal} ${colorWord} ${label}`;
	let dInstr = ordinal == '' ? `${dCommand} ${label} ${colorWord == '' ? '' : 'in ' + colorWord}`
		: `${dCommand} ${ordinal} ${colorWord} ${label}`;
	let ecorr = `${ordinal} ${colorWord} ${label}`
	let dcorr = ordinal == '' ? `${label} ${colorWord == '' ? '' : 'in ' + colorWord}`
		: `${ordinal} ${colorWord} ${label}`;
	let corr = G.language == 'E' ? ecorr : dcorr;
	let spoken = G.language == 'E' ? eInstr : dInstr;
	let written = spoken.replace(colorWord, colorSpan).replace(label, labelSpan);
	return [written, spoken, corr];
}
function getOuterDivForMenuStyle() {
	return createElementFromHtml(`<div style='max-height:430px;text-align: center; animation: appear 4s ease'>`);
}
function getPageHeaderDivForPlayer(oid) { return document.getElementById('c_c_' + G.playersAugmented[oid].username); }
function getPal(ipal, pal) {
	return pal[ipal % pal.length];
}
function getpal(ipal_dep = -1, ihue = 0, bOrf = 'b', pal) {
	let p = empty(pal) || !pal || pal == undefined ? palette : pal;
	if (!p) return randomColor();
	nHues = p[0].length;
	nShades = p.length;
	if (ipal_dep < -1) ipal_dep = randomNumber(0, nShades);
	else if (ipal_dep >= nShades) ipal_dep %= nShades;
	if (ihue < -1) ihue = randomNumber(0, nHues);
	else if (ihue >= nHues) ihue %= nHues;
	return p[ipal_dep][ihue][bOrf];
}
function getPalette(color, type = 'shade') {
	color = colorFrom(color);
	return colorPalShade(color);
}
function getPaletteFromHues(hues) {
	let colors = hues.map(h => colorFromHue(h));
	return colors.map(x => getPalette(x));
}
function getPaletteFromImage(img) {
	let palette0 = ColorThiefObject.getPalette(img);
	let palette = [];
	for (const pal of palette0) {
		let color = colorFrom(pal);
		palette.push(color);
	}
	return palette;
}
function getPara(msg, float) {
	let pl = document.createElement('div');
	if (isdef(float)) pl.style.float = float;
	pl.innerHTML = msg;
	return pl;
}
function getParams(areaName, oSpec, oid) {
	let params = oSpec.params ? oSpec.params : {};
	let panels = oSpec.panels ? oSpec.panels : [];
	let num = panels.length;
	let or = params.orientation ? params.orientation == 'h' ? 'rows'
		: 'columns' : DEF_ORIENTATION;
	let split = params.split ? params.split : DEF_SPLIT;
	let bg = oSpec.color ? oSpec.color : randomColor();
	let fg = bg ? colorIdealText(bg) : null;
	let id = oSpec.id ? oSpec.id : areaName;
	if (oid) { id = getDynId(id, oid); }
	let parent = mBy(areaName);
	if (oSpec.id) {
		parent.id = id;
		addAREA(id, oSpec);
		parent.innerHTML = id;
	}
	if (bg) { mColor(parent, bg, fg); }
	return [num, or, split, bg, fg, id, panels, parent];
}
function getParamsForMaPicStyle(desc = 'segoeBlack') {
	desc = desc.toLowerCase();
	switch (desc) {
		case 'twittertext': return { isText: true, isOmoji: false };
		case 'twitterimage': return { isText: false, isOmoji: false };
		case 'openmojitext': return { isText: true, isOmoji: true };
		case 'openmojiimage': return { isText: false, isOmoji: true };
		case 'openmojiblacktext': return { isText: true, isOmoji: 'openmoBlack' };
		case 'segoe': return { isText: true, isOmoji: 'segoe ui emoji' };
		case 'segoeblack': return { isText: true, isOmoji: 'segoe ui symbol' };
		default: return { isText: true, isOmoji: false };
	}
}
function getParent(elem) { return elem.parentElement; }
function getParentOfScript() {
	var thisScript = document.scripts[document.scripts.length - 1];
	var parent = thisScript.parentElement;
	return parent;
}
function getParentRNode(n, R) { return n.uidParent ? R.rNodes(n.uidParent) : null; }
function getParentUi(n) { return n.idUiParent ? mBy(n.idUiParent) : null; }
function getParentUiNodes(n, R) { return n.uidParent ? R.uiNodes(n.uidParent) : null; }
function getPic(key, sz, bg, label) {
	let items, ifs = { bg: bg }, options = { sz: sz };
	if (isdef(label)) options.showLabels = true; else options.showLabels = false;
	[items, ifs, options] = createStandardItems(null, ifs, options, [key], isdef(label) ? [label] : undefined);
	prepDims(items, options);
	prepPics(items, ifs, options);
	return items[0];
}
function getPics(onClickPictureHandler, ifs = {}, options = {}, keys, labels) {
	let items;
	[items, ifs, options] = createStandardItems(onClickPictureHandler, ifs, options, keys, labels);
	prepDims(items, options);
	prepPics(items, ifs, options);
	return items;
}
function getPicsS(onClickPictureHandler, ifs = {}, options = {}, keys, labels) {
	let items;
	[items, ifs, options] = createStandardItemsS(onClickPictureHandler, ifs, options, keys, labels);
	console.log(items)
	prepDims(items, options);
	options.showPics = true;
	_createDivs(items, ifs, options);
	return items;
}
function getPlayer(id) { return G.playersAugmented[id]; }
function getPlayerArea(pid) {
	let areaName = defaultGameplayerAreaName + '_' + pid;
	let msPlayer = getMainArea(areaName);
	if (!msPlayer) { msPlayer = _makeGameplayerArea(areaName, 'a_d_game'); }
	return msPlayer;
}
function getPlayerColor(id) { return G.playersAugmented[id].color }
function getPlayerColorString(id) { return G.playersAugmented[id].altName }
function getPlayerInfo(i) { return currentPlayersById[plidByIndex[i]]; }
function getPlayermodeRadio(mode) {
	return document.getElementById(getidNum(mode));
}
function getPlayerRadio(n) {
	return document.getElementById(getidNum(n));
}
function getPlayersIncludingU() {
	if (!isList(G.numPlayers)) G.numPlayers = [G.numPlayers];
	let n = G.numPlayers[0];
	let ids = chooseKeys(DB.users, n, ['guest0', 'test0']);
	if (!ids.includes(Username)) ids.splice(0, 1, Username);
	T.players = ids.map(x => new Player(x, DB.users[x].settings.color));
	ids.map(x => lookupAddToList(DB.users, [x, 'tables'], T.id));
}
function getPlayerTypeInput(n) {
	return document.getElementById(getidType(n));
}
function getPlid(username) {
	console.log(playerConfig[GAME].players, username);
	let res = firstCondDict(playerConfig[GAME].players, x => x.username == username);
	console.log(res)
	return res;
}
function getPlidForUsername(username) {
	let players = S.gameConfig.players;
	let pl = firstCond(players, x => x.username == username);
	let res = pl.id;
	return res;
}
function getPoly(offsets, x, y, w, h) {
	let poly = [];
	for (let p of offsets) {
		let px = Math.round(x + p[0] * w);
		let py = Math.round(y + p[1] * h);
		poly.push({ x: px, y: py });
	}
	return poly;
}
function getPrefixHint() {
	let oldHintLength = isdef(G.hintLength) ? G.hintLength : 0;
	if (nundef(G.hintLength)) G.hintLength = 0;
	G.input.value = G.correctPrefix;
	let progress = G.correctPrefix.length > G.nCorrect;
	if (G.correctPrefix.length > G.nCorrect) {
		G.hintLength = 1;
		G.nCorrect = G.correctPrefix.length;
	} else if (G.hintLength < G.goal.label.length - G.nCorrect) G.hintLength += 1;
	if (G.hintLength == 0) G.hintLength = 1;
	let wr = substringOfMinLength(G.goal.label, G.correctPrefix.length, G.hintLength);
	let sp = oldHintLength == G.hintLength && !progress ? G.lastHintPrompt : null;
	return [wr, sp];
}
function getProfileImagePath(userrecord) {
	let dir = '../base/assets/images/';
	let path = dir + (userrecord.hasImage ? userrecord.username : 'unknown_user') + '.jpg';
	return path;
}
function getPublicPath(filename) {
	let result = './public/' + getFilename(filename);
	console.log('pubPath', result);
	return result;
}
function GetPvLine(depth) {
	;
	var move = ProbePvTable();
	var count = 0;
	while (move != NOMOVE && count < depth) {
		if (MoveExists(move)) {
			MakeMove(move);
			brd_PvArray[count++] = move;
		} else {
			break;
		}
		move = ProbePvTable();
	}
	while (brd_ply > 0) {
		TakeMove();
	}
	return count;
}
function getQChars() {
	return Goal.qCharIndices.map(x => Goal.chars[x]);
}
function getQuadFieldInfo(boardInfo, row, col) {
	let info = {
		shape: 'rect',
		memType: 'field',
		row: row,
		col: col,
		x: -boardInfo.w / 2 + (col - boardInfo.minCol) * boardInfo.dx + boardInfo.wdef / 2,
		y: -boardInfo.h / 2 + (row - boardInfo.minRow) * boardInfo.dy + boardInfo.hdef / 2,
		w: boardInfo.wdef,
		h: boardInfo.hdef,
	};
	info.poly = getQuadPoly(info.x, info.y, info.w, info.h);
	return info;
}
function getQuadGridInfo(rows, cols) {
	[wdef, hdef] = [4, 4];
	let info = {
		structType: 'grid',
		rows: rows,
		cols: cols,
		wdef: 4,
		hdef: 4,
		dx: wdef,
		dy: hdef,
		w: wdef * cols,
		h: hdef * rows,
		minRow: 1,
		minCol: 1,
	};
	return info;
}
function getQuadPoly(x, y, w, h) {
	q = [[0.5, -0.5], [0.5, 0.5], [-0.5, 0.5], [-0.5, -0.5]];
	return getPoly(q, x, y, w, h);
}
function getQWords() { return Goal.qWordIndices.map(x => Goal.words[x]); }
function getRandomBoat() { return UIS[chooseRandom(getBoatIds())]; }
function getRandomCard({ rank, suit, type } = {}) {
	if (isdef(rank) || isdef(suit)) return card52(rank, suit);
	else if (type == 'c52') return card52();
	else if (type == 'inno') return cardInno();
}
function getRandomCards(n, { rank, suit, type, age, color } = {}) {
	if (type == 'inno') {
		let allKeys = Object.keys(cinno);
		let keys = isdef(age) ? allKeys.filter(x => cinno[x].age == age) : allKeys;
		keys = isdef(color) ? keys.filter(x => cinno[x].color == color) : keys;
		let nKeys = choose(keys, n);
		return nKeys;
	}
}
function getRandomConsonant(w, except = []) { let cons = getConsonants(w, except); return chooseRandom(cons); }
function getRandomFraction(num, denom) {
	if (isdef(denom)) {
		if (nundef(num)) num = randomNumber(1, denom - 1);
		return math.fraction(num, denom);
	} else if (isdef(num)) {
		denom = randomNumber(2, 9);
		return math.fraction(num, denom);
	}
	let flist = all2DigitFractionsUnder1Expanded();
	let fr = chooseRandom(flist);
	return math.fraction(Number(fr.numer), Number(fr.denom));
}
function getRandomFractions(n) {
	let flist = all2DigitFractionsUnder1Expanded();
	let frlist = choose(flist, n);
	return frlist.map(x => math.fraction(Number(x.numer), Number(x.denom)));
}
function getRandomFromArray(array) { return (array[randomIndex(array) | 0]) }
function getRandomHues(fromLocalStorage = true) {
	let hue1 = randomNumber(0, 360);
	if (hue1 > 165 && hue1 < 195) hue1 += 60;
	if (hue1 > 270 && hue1 < 325) hue1 = (hue1 + 120) % 360;
	let hue2 = randomNumber(0, 360);
	if (hue2 > 168 && hue2 < 192) hue2 += 70;
	if (hue2 > 270 && hue2 < 325) hue2 = (hue2 + 120) % 360;
	if (Math.abs(hue1 - hue2) < 20) {
		hue1 = randomNumber(-30, 160);
		hue2 = randomNumber(200, 280);
	}
	if (fromLocalStorage) {
		let info = localStorage.getItem('palette');
		if (info) {
			let ns = allNumbers(info);
			hue1 = ns[0];
			hue2 = ns[1];
		}
	}
	return [hue1, hue2];
}
function getRandomItems(n, keyOrSet, text = true, pic = true, styles = {}) {
	let keys = getRandomKeys(n, keyOrSet);
	if (pic == true) return getPics(() => console.log('click'), styles, { showLabels: text }, keys);
	else return getLbls(() => console.log('click'), styles, { showLabels: text }, keys);
}
function getRandomKey(dict) {
	let keys = Object.keys(dict);
	return chooseRandom(keys);
}
function getRandomKeys(n, kSetOrList) { return choose(isList(kSetOrList) ? kSetOrList : KeySets[kSetOrList], n); }
function getRandomKeysFromGKeys(n) { return getRandomKeys(n, G.keys); }
function getRandomKeysIncluding(n, k, kSetOrList) {
	let keys = getRandomKeys(n, kSetOrList);
	if (!keys.includes(k)) {
		let i = randomNumber(0, keys.length - 1);
		keys.splice(i, 1, k);
	}
	shuffle(keys);
	return keys;
}
function getRandomLetter(w, except = []) { let cons = getLettersExcept(w, except); return chooseRandom(cons); }
function getRandomLetterMapping(s) {
	if (nundef(s)) s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
	let alphabet = filterDistinctLetters(s);
	let alphabet2 = shuffle(jsCopy(alphabet));
	let di = {};
	for (let i = 0; i < alphabet.length; i++) {
		di[alphabet[i]] = alphabet2[i];
	}
	return di;
}
function getRandomNodeThatCanBeAdded(R) {
	let nonEmpty = allCondDict(R.oidNodes, x => !isEmpty(x));
}
function getRandomNumberSequence(n, minStart, maxStart, fBuild, exceptStart) {
	let nStart = randomNumber(minStart, maxStart - n + 1);
	if (exceptStart) {
		let att = 10;
		while (att >= 0 && nStart == exceptStart) { att -= 1; nStart = randomNumber(minStart, maxStart - n + 1); }
	}
	if (isNumber(fBuild)) return range(nStart, nStart + (n - 1) * fBuild, fBuild);
	else {
		let res = [], x = nStart;
		for (let i = 0; i < n; i++) {
			res.push(x);
			x = fBuild(x);
		}
		return res;
	}
}
function getRandomPerlenKeys(di, n) { return choose(Object.keys(di), n); }
function getRandomPicto() { let key = getRandomKey(iconChars); }
function getRandomPixelColor(img) {
	let canvas = mCreate('canvas');
	let ctx = canvas.getContext('2d');
	ctx.drawImage(img, 0, 0);
	let [rx, ry] = [randomNumber(1, 100), randomNumber(1, 50)];
	console.log('______________', rx, ry)
	var p = ctx.getImageData(rx, ry, 1, 1).data;
	console.log('p', p)
	let rgb = `rgb(${p[0]},${p[1]},${p[2]})`;
	let x = rx, y = ry;
	var coord = "x=" + x + ", y=" + y;
	let color = colorFrom(rgb);
	console.log('pixel', coord, 'has color', color);
	return color;
}
function getRandomSetItem(lang = 'E', key, keylist) {
	if (nundef(keylist)) keylist = setCategories(['animal']);
	if (nundef(key)) key = chooseRandom(keylist);
	let info = jsCopy(picInfo(key));
	let valid, words;
	let oValid = info[lang + '_valid_sound'];
	if (isEmpty(oValid)) valid = []; else valid = sepWordListFromString(oValid, ['|']);
	let oWords = info[lang];
	if (isEmpty(oWords)) words = []; else words = sepWordListFromString(oWords, ['|']);
	let dWords = info.D;
	if (isEmpty(dWords)) dWords = []; else dWords = sepWordListFromString(dWords, ['|']);
	let eWords = info.E;
	if (isEmpty(eWords)) eWords = []; else eWords = sepWordListFromString(eWords, ['|']);
	words = isEnglish(lang) ? eWords : dWords;
	info.eWords = eWords;
	info.dWords = dWords;
	info.words = words;
	info.best = Syms[key][Settings.language];
	info.valid = valid;
	currentLanguage = lang;
	return info;
}
function getRandomShape() { return chooseRandom(['ellipse', 'roundedRect', 'rect', 'hex']); }
function getRandomUidNodeWithAct(R) {
	let cands = Object.values(R.uiNodes).filter(x => isdef(x.act) && isdef(x.oid));
	if (isEmpty(cands)) return null;
	let n = chooseRandom(cands);
	return n;
}
function getRandomVowel(w, except = []) { let vowels = getVowels(w, except); return chooseRandom(vowels); }
function getRandomWP(min = 0, max = 35) { let n = randomNumber(min, max); console.log('wp', n); return jsCopy(WordP[n]); }
function getRect(elem, relto) {
	if (isString(elem)) elem = document.getElementById(elem);
	let res = elem.getBoundingClientRect();
	if (isdef(relto)) {
		let b2 = relto.getBoundingClientRect();
		let b1 = res;
		res = {
			x: b1.x - b2.x,
			y: b1.y - b2.y,
			left: b1.left - b2.left,
			top: b1.top - b2.top,
			right: b1.right - b2.right,
			bottom: b1.bottom - b2.bottom,
			width: b1.width,
			height: b1.height
		};
	}
	let r = { x: res.left, y: res.top, w: res.width, h: res.height };
	addKeys({ l: r.x, t: r.y, r: r.x + r.w, b: r.t + r.h }, r);
	return r;
}
function getRectInt(elem, relto) {
	if (isString(elem)) elem = document.getElementById(elem);
	let res = elem.getBoundingClientRect();
	if (isdef(relto)) {
		let b2 = relto.getBoundingClientRect();
		let b1 = res;
		res = {
			x: b1.x - b2.x,
			y: b1.y - b2.y,
			left: b1.left - b2.left,
			top: b1.top - b2.top,
			right: b1.right - b2.right,
			bottom: b1.bottom - b2.bottom,
			width: b1.width,
			height: b1.height
		};
	}
	let r4 = { x: Math.round(res.left), y: Math.round(res.top), w: Math.round(res.width), h: Math.round(res.height) };
	extendRect(r4);
	return r4;
}
function getRelativeIds(id) { return getList(id2ids[id]); }
function getRelBounds(elem, elRel) {
	let b1 = elem.getBoundingClientRect();
	if (!elRel) return b1;
	let b2 = elRel.getBoundingClientRect();
	return {
		x: b1.x - b2.x,
		y: b1.y - b2.y,
		left: b1.left - b2.left,
		top: b1.top - b2.top,
		right: b1.right - b2.right,
		bottom: b1.bottom - b2.bottom,
		width: b1.width,
		height: b1.height
	};
}
function getRelCoords(ev, elem) {
	let x = ev.pageX - elem.offset().left;
	let y = ev.pageY - elem.offset().top;
	return { x: x, y: y };
}
function getRelCoordsX(ev, elem) {
	let x = ev.pageX - elem.getBoundingClientRect().left;
	let y = ev.pageY - elem.getBoundingClientRect().top;
	return { x: x, y: y };
}
function getRoomNE(house) { return firstCond(house.rooms, x => isNorthRoom(house, Items[x]) && isEastRoom(house, Items[x])); }
function getRoomNW(house) { return firstCond(house.rooms, x => isNorthRoom(house, Items[x]) && isWestRoom(house, Items[x])); }
function getRoomSE(house) {
	let rooms = house.rooms.map(x => Items[x]);
	for (const r of rooms) {
		let isSouth = isSouthRoom(house, r);
		let isEast = isEastRoom(house, r);
	}
	return firstCond(house.rooms, x => isSouthRoom(house, Items[x]) && isEastRoom(house, Items[x]));
}
function getRoomSW(house) { return firstCond(house.rooms, x => isSouthRoom(house, Items[x]) && isWestRoom(house, Items[x])); }
function getScaledSizeCss(sz, scale) { return `${sz.w * scale}px ${sz.h * scale}px`; }
function getServerObject(oid) { return serverData.table[oid] ? serverData.table[oid] : serverData.players[oid]; }
function getSet(o, key) {
	if (!(key in o) || (!('set' in o[key]) && !('xset' in o[key]))) return null;
	else if ('set' in o[key]) return o[key].set;
	else return o[key].xset;
}
function getShortestWord(list, preferFirst = true) {
	let res = list[0];
	if (preferFirst) {
		for (let i = 1; i < list.length; i++) {
			if (list[i].length < res.length) res = list[i];
		}
	} else {
		for (let i = 1; i < list.length; i++) {
			if (list[i].length <= res.length) res = list[i];
		}
	}
	return res;
}
function getSignalColor() { if (currentLevel != 4 && currentLevel != 7 && currentLevel != 10 && currentLevel != 3) return 'red'; else return 'yellow'; }
function getSimpleSetElements(o) { return getValueArray(o); }
function getSimpleStyles(sz, family, bg, fg) {
	let styles = { bg: bg, fg: 'contrast', align: 'center', 'box-sizing': 'border-box', padding: 4, margin: 2 };
	let textStyles = { family: family };
	let picStyles = { w: sz, h: sz, bg: fg };
	return [styles, picStyles, textStyles];
}
function getSize(elem) { let r = getRectInt(elem); return { w: r.w, h: r.h, sz: Math.min(r.w, r.h) }; }
function getSizeNeeded(elem) {
	var d = elem.cloneNode(true);
	d.style.width = 'auto';
	document.body.appendChild(d);
	let cStyles = {};
	cStyles.position = 'fixed';
	cStyles.opacity = 0;
	cStyles.top = '-9999px';
	mStyle(d, cStyles);
	height = d.clientHeight;
	width = d.clientWidth;
	d.parentNode.removeChild(d);
	return { w: Math.round(width), h: Math.round(height) };
}
function getSizeWithStyles(text, styles) {
	var d = document.createElement("div");
	document.body.appendChild(d);
	let cStyles = jsCopy(styles);
	cStyles.position = 'fixed';
	cStyles.opacity = 0;
	cStyles.top = '-9999px';
	mStyleX(d, cStyles);
	d.innerHTML = text;
	height = d.clientHeight;
	width = d.clientWidth;
	d.parentNode.removeChild(d);
	return { w: width, h: height };
}
function getSizeWithStylesX(text, styles, wmax, hmax) {
	var d = document.createElement("div");
	document.body.appendChild(d);
	let cStyles = jsCopy(styles);
	cStyles.position = 'fixed';
	cStyles.opacity = 0;
	cStyles.top = '-9999px';
	if (isdef(wmax)) cStyles.width = wmax;
	if (isdef(hmax)) cStyles.height = wmax;
	mStyleX(d, cStyles);
	d.innerHTML = text;
	height = d.clientHeight;
	width = d.clientWidth;
	let x = getBounds(d)
	d.parentNode.removeChild(d);
	let res = { w: x.width, h: x.height };
	return res;
}
function getSizing(n, R, currentSizing) {
	return isdef(n.params) && isdef(n.params.sizing) ? n.params.sizing
		: isdef(currentSizing) ? currentSizing : R.defs.defaultSizing;
}
function getStandardAreaNameForKey(key) { return 'm_A_' + key; }
function getStandardAreaNameForPlayerProp(pid, propName) { return 'area_' + pid + '_' + propName; }
function getStandardFz(wi, hi, showPic, showLabels, wLongest) {
	let hText = showPic ? hi / 3 : hi;
	return showLabels ? idealFontSize(wLongest, wi, hText) : 0;
}
function getStandardFzPic(wi, hi, showLabels) { return Math.min(wi * .8, showLabels ? hi * .6 : hi * .75); }
function getStartLevels(user) {
	let udata = lookup(DB, ['users', user]);
	if (!udata) return 'not available';
	let res = [];
	let res2 = {};
	for (const g in udata.games) {
		res2[g] = udata.games[g].startLevel;
		res.push(g + ': ' + udata.games[g].startLevel);
	}
	return res2;
}
function getStyledItems(words, bgFunc, fgFunc = 'contrast', fzFunc) {
	let items = [];
	if (isString(bgFunc)) { bgFunc = () => bgFunc; }
	if (isLiteral(fzFunc)) { fzFunc = () => fzFunc; }
	if (isString(fgFunc)) { fgFunc = () => fgFunc; }
	else if (nundef(fgFunc)) fgFunc = (i, w, bg) => colorIdealText(bg);
	for (let i = 0; i < words.length; i++) {
		let w = words[i];
		let bg = bgFunc(i, w);
		let fg = fgFunc(i, w, bg);
		let item = { w: w, bg: bg, fg: fg, i: i, fz: fzFunc(i, w) };
		items.push(item)
	}
	return items;
}
function getStyledItems1(words, bgFunc, fgFunc = 'contrast', fzFunc) {
	let items = [];
	if (isString(bgFunc)) { bgFunc = () => bgFunc; }
	if (isLiteral(fzFunc)) { fzFunc = () => fzFunc; }
	if (isString(fgFunc)) { fgFunc = () => fgFunc; }
	else if (nundef(fgFunc)) fgFunc = (i, w, bg) => colorIdealText(bg);
	for (let i = 0; i < words.length; i++) {
		let w = words[i];
		let bg = bgFunc(i, w);
		let fg = fgFunc(i, w, bg);
		let item = { w: w, bg: bg, fg: fg, i: i, fz: fzFunc(i, w) };
		items.push(item)
	}
	return items;
}
function getStyleProp(elem, prop) { return getComputedStyle(elem).getPropertyValue(prop); }
function getSudokuPattern(r, c) {
	let patterns = {
		44: [
			[[0, 1, 2, 3], [2, 3, 0, 1], [3, 0, 1, 2], [1, 2, 3, 0]],
			[[0, 1, 2, 3], [3, 2, 0, 1], [2, 3, 1, 0], [1, 0, 3, 2]],
			[[0, 1, 2, 3], [2, 3, 0, 1], [1, 0, 3, 2], [3, 2, 1, 0]],
		],
	};
	return chooseRandom(patterns['' + r + c]);
}
function getSudokuPatternFromDB(r, c, index) {
	let key = '' + r + 'x' + c;
	let numSamples = Object.keys(DB.games.gColoku.samples[key]).length;
	if (nundef(index)) index = randomNumber(0, numSamples - 1); else if (index >= numSamples) index = 1;
	let sample = DB.games.gColoku.samples[key][index];
	let pattern = sudokuSampleToIndexMatrix(sample.sol, r, c);
	let puzzle = sudokuSampleToIndexMatrix(sample.min, r, c);
	return { pattern: pattern, puzzle: puzzle };
}
function getSuitName(suit) {
	return suit === 0 ? 'spades' : suit === 1 ? 'hearts' : suit === 2 ? 'clubs' : suit === 3 ? 'diamonds' : 'joker';
}
function getSym(key, lang = 'E') {
	let info = jsCopy(picInfo(key));
	if (nundef(info.bestD)) { info.bestE = info.E.key; return info; }
	let valid, words;
	let oValid = info[lang + '_valid_sound'];
	if (isEmpty(oValid)) valid = []; else valid = sepWordListFromString(oValid, ['|']);
	let oWords = info[lang];
	if (isEmpty(oWords)) words = []; else words = sepWordListFromString(oWords, ['|']);
	let dWords = info.D;
	if (isEmpty(dWords)) dWords = []; else dWords = sepWordListFromString(dWords, ['|']);
	let eWords = info.E;
	if (isEmpty(eWords)) eWords = []; else eWords = sepWordListFromString(eWords, ['|']);
	words = isEnglish(lang) ? eWords : dWords;
	info.eWords = eWords;
	info.dWords = dWords;
	info.words = words;
	info.best = arrLast(words);
	info.valid = valid;
	currentLanguage = lang;
	return info;
}
function getTables() { return U.tables; }
function getTabletopCardsArea() {
	let msTable = getMainArea(defaultTabletopCardsAreaName);
	if (!msTable) { msTable = _makeTabletopCardsArea('a_d_game'); }
	return msTable;
}
function getTextAreaCurrentLine(el) {
	let line = '';
	if (el instanceof HTMLTextAreaElement) {
		line = el.value.slice(el.value.lastIndexOf('\n', el.selectionStart - 1) + 1,
			((end = el.value.indexOf('\n', el.selectionStart)) => end > -1 ? end : undefined)());
	}
	return line;
}
function getTextAreaCurrentWord(el) {
	let line = '', w = '', prefix = '';
	if (el instanceof HTMLTextAreaElement) {
		let s = el.value;
		let i_caret = el.selectionEnd;
		let i_last_break_before_caret = s.lastIndexOf('\n', i_caret - 1); if (i_last_break_before_caret < 0) i_last_break_before_caret = 0;
		let i_next_break = s.indexOf('\n', i_caret); if (i_next_break < 0) i_next_break = s.length - 1;
		let i_caret_within_line = i_caret - i_last_break_before_caret;
		line = s.slice(i_last_break_before_caret + 1, i_next_break);
		let pos = i_caret_within_line - 2;
		console.log('_________\nline:', line, '\ni_caret=' + i_caret, 'i_in_line=' + pos);
		for (let i = pos; i >= 0; i--) {
			let ch = line[i];
			if (isAlphaNum(ch)) w = ch + w; else break;
		}
		prefix = w;
		for (let i = pos + 1; i < line.length; i++) {
			let ch = line[i];
			if (isAlphaNum(ch)) w = w + ch; else break;
		}
	}
	return [w, prefix];
}
function getTextColor(c) {
	let rgb = c
		.substring(4, c.indexOf(')'))
		.split(', ')
		.map(x => parseInt(x));
	let o = Math.round((parseInt(rgb[0]) * 299 + parseInt(rgb[1]) * 587 + parseInt(rgb[2]) * 114) / 1000);
	return o > 125 ? 'black' : 'white';
}
function getTextForFraction(num, denom) {
	let s = '' + num + '&frasl;' + denom; return s;
}
function getTextForFractionX(num, denom) {
	if (num == denom) return '1';
	else if (denom == 1) return num;
	else if (num / denom > 2) {
		let mixed = getMixedNumber(num, denom);
		return getTextForMixed(mixed.full, mixed.n, mixed.d);
	} else {
		let s = '' + num + '&frasl;' + denom; return s;
	}
}
function getTextForMixed(full, num, denom) {
	let s = '' + full;
	if (isdef(num) && isdef(denom)) s += ' ' + num + '&frasl;' + denom;
	return s;
}
function getTextSize(s = 'hallo', parentDivOrId) {
	var newDiv = document.createElement("div");
	newDiv.innerHTML = s;
	newDiv.style.cssText = "position:fixed; top:-9999px; opacity:0;"
	if (isdef(parentDivOrId)) {
		if (isString(parentDivOrId)) parentDivOrId = document.getElementById(parentDivOrId);
		parentDivOrId.appendChild(newDiv);
	} else {
		document.body.appendChild(newDiv);
	}
	height = newDiv.clientHeight;
	width = newDiv.clientWidth;
	newDiv.parentNode.removeChild(newDiv)
	return { w: width, h: height };
}
function getTextSizeX(text, fz, family, weight = 900, parentDivOrId = null, styles = {}) {
	var d = document.createElement("div");
	styles.fz = fz;
	styles.family = family;
	styles['font-weight'] = weight;
	styles.position = 'fixed';
	styles.opacity = 0;
	styles.top = '-9999px';
	styles.w = 200;
	mStyleX(d, styles);
	d.innerHTML = text;
	if (isdef(parentDivOrId)) {
		if (isString(parentDivOrId)) parentDivOrId = document.getElementById(parentDivOrId);
		parentDivOrId.appendChild(d);
	} else {
		document.body.appendChild(d);
	}
	height = d.clientHeight;
	width = d.clientWidth;
	d.parentNode.removeChild(d)
	return { w: width, h: height };
}
function getTextSizeX1(text, fz, family, weight = 900, parentDivOrId = null, styles = {}) {
	var d = document.createElement("div");
	styles.fz = fz;
	styles.family = family;
	styles['font-weight'] = weight;
	styles.position = 'fixed';
	styles.opacity = 0;
	styles.top = '-9999px';
	mStyleX(d, styles);
	d.innerHTML = text;
	if (isdef(parentDivOrId)) {
		if (isString(parentDivOrId)) parentDivOrId = document.getElementById(parentDivOrId);
		parentDivOrId.appendChild(d);
	} else {
		document.body.appendChild(d);
	}
	height = d.clientHeight;
	width = d.clientWidth;
	return { w: width, h: height, d: d };
}
function getTextWidth(text, font) {
	var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));
	var context = canvas.getContext('2d');
	context.font = font;
	var metrics = context.measureText(text);
	return metrics.width;
}
function getTimeElapsed() { return TimeElapsed + msElapsedSince(TimestampStarted); }
function getTransformInfo(gElement) {
	var matrix = gElement.getCTM();
	let info = decomposeMatrix(matrix);
	return info;
}
function getTransformInfoDOM(d) {
	let info = parseComplexStyleProperty(d.style.transform);
	if (info.translate) {
		let s = info.translate.split(',');
		info.translateX = s[0].trim();
		info.translateY = s.length > 1 ? s[1].trim() : s[0].trim();
	}
	if (!isdef(info.translateX)) info.translateX = '0px';
	if (!isdef(info.translateY)) info.translateY = '0px';
	if (info.scale) {
		let s = info.scale.split(',');
		info.scaleX = s[0].trim();
		info.scaleY = s.length > 1 ? s[1].trim() : s[0].trim();
	}
	if (!isdef(info.scaleX)) info.scaleX = '1';
	if (!isdef(info.scaleY)) info.scaleY = '1';
	if (!isdef(info.rotation)) info.rotation = '0';
	for (const k in info) {
		if (!isNumber(info[k])) info[k] = firstNumber(info[k]);
	}
	return info;
}
function getTranslateX(myElement) {
	var style = window.getComputedStyle(myElement);
	var matrix = new WebKitCSSMatrix(style.webkitTransform);
	console.log('translateX: ', matrix.m41);
}
function getTranslateY(myElement) {
	var style = window.getComputedStyle(myElement);
	var matrix = new WebKitCSSMatrix(style.webkitTransform);
	console.log('translateX: ', matrix.m41);
}
function getTransPalette(color = '#000000') {
	let res = [];
	for (const alpha of [.0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1]) res.push(colorTrans(color, alpha));
	return res;
}
function getTransPalette9(color = '#000000') {
	let res = [];
	for (const alpha of [.1, .2, .3, .4, .5, .6, .7, .8, .9]) res.push(colorTrans(color, alpha));
	return res;
}
function getTriangleDownPoly(x, y, w, h) {
	let tridown = [[-0.5, 0.5], [0.5, 0.5], [-0.5, 0.5]];
	return getPoly(tridown, x, y, w, h);
}
function getTriangleUpPoly(x, y, w, h) {
	let triup = [[0, -0.5], [0.5, 0.5], [-0.5, 0.5]];
	return getPoly(triup, x, y, w, h);
}
function getTupleGroups() {
	let act = G.serverData.options;
	let tupleGroups = [];
	for (const desc in act) {
		let tg = { desc: desc, tuples: [] };
		let tuples = expand1_99(act[desc].actions);
		if (tuples.length == 1 && !isList(tuples[0])) tuples = [tuples];
		tg.tuples = tuples;
		tupleGroups.push({ desc: desc, tuples: tuples });
	}
	return tupleGroups;
}
function getTuples(data) {
	let tuples = [];
	if ('actions' in data) {
		tuples = expand(data.actions);
		tuples.sort();
		if (!empty(tuples) && tuples.length == 1 && !Array.isArray(tuples[0])) {
			tuples = [tuples];
		}
	}
	return tuples;
}
function getTurnPlayer() {
	return T.players[T.index];
}
function getTypeOf(param) {
	let type = typeof param;
	if (type == 'string') {
		return 'string';
	}
	if (type == 'object') {
		type = param.constructor.name;
		if (startsWith(type, 'SVG')) type = stringBefore(stringAfter(type, 'SVG'), 'Element').toLowerCase();
		else if (startsWith(type, 'HTML')) type = stringBefore(stringAfter(type, 'HTML'), 'Element').toLowerCase();
	}
	let lType = type.toLowerCase();
	if (lType.includes('event')) type = 'event';
	return type;
}
function getUID(pref = '') {
	UIDCounter += 1;
	return pref + '_' + UIDCounter;
}
function getUIObject(id) { return UIS[id]; }
function getUis(olist, func) { return olist.map(o => func(o)); }
function getUnitOwner(nationality) {
	if (nationality == 'Germany' || nationality == 'Italy') {
		return 'Axis';
	} else if (nationality == 'USSR') {
		return 'USSR';
	} else if (nationality == 'Britain' || nationality == 'France' || nationality == 'USA') {
		return 'West';
	} else {
		return 'Minor';
	}
}
function getUser(idPlayer) { return G.playersAugmented[idPlayer].username; }
function getuser_1send() {
	get_data('getuser', {});
}
function getuser_2handleResult(result) {
	Userdata = JSON.parse(result);
	Userdata.image = Userdata.username + '.jpg';
	Username = Userdata.username;
	let d = mBy('dUserInfo');
	clearElement(d);
	let dParent = mDiv(d);
	let dir = '../base/assets/images/';
	let path = dir + (Userdata.hasImage ? Username : 'unknown_user') + '.jpg';
	let size = 100;
	let styles = { 'object-fit': 'cover', rounding: '50%', margin: 10, h: size, w: size, border: '2px solid white' };
	let dUserImage = mImg(path, dParent, styles);
	dUserImage.id = 'dUserImage';
	let dUserName = mText(Username, d, { fz: 14, family: 'opensans' });
	dUserName.id = 'dUserName';
	let dUserEmail = mText(Userdata.email, d, { fz: 12, opacity: .5, family: 'opensans' });
	dUserEmail.id = 'dUserEmail';
}
function getUsername(idPlayer) { return getUser(idPlayer); }
function getUsernameForPlayer(id) {
	let players = S.gameConfig.players;
	let pl = firstCond(players, x => x.id == id);
	let uname = pl.username;
	return uname;
}
function getUsernameForPlid(id) { return playerConfig[GAME].players[id].username; }
function getUsers() { return Object.keys(DB.users); }
function getUserStartLevel(game) { return valf(lookup(U, ['games', game, 'startLevel']), 0); }
function getUserStartLevel_dep(game) { gInfo = U.games[game]; level = isdef(gInfo) && isdef(gInfo.startLevel) ? gInfo.startLevel : 0; return level; }
function getValueArray(o, elKey = 'obj', arrKey = '_set') {
	let raw = jsCopy(o);
	if (isdef(o[arrKey])) {
		raw = raw[arrKey];
	}
	if (isDict(raw)) {
		raw = odict2olist(raw);
	}
	if (!isList(raw)) return [];
	if (raw.length > 0 && raw[0][elKey]) {
		raw = raw.map(x => x[elKey]);
	}
	return raw;
}
function getValueInPixel(val, relto) {
	if (isNumber(val)) return val;
	val = firstNumber(val);
	return val * relto / 100;
}
function getVerticalOverflow(element) { return element.scrollHeight - element.clientHeight; }
function getVisibleChild(id) { for (const ch of mBy(id).children) if (ch.style.display != 'none') return ch.id; }
function getVisibleList(o) {
	return o.visible._set;
}
function getVisibleSet(o) {
	return getSet(o, 'visible');
	if (!('visible' in o) || (!('set' in o.visible) && !('xset' in o.visible))) return null;
	else if ('set' in o.visible) return o.visible.set;
	else return o.visible.xset;
}
function getVisual(oid) { return UIS[getMainId(oid)]; }
function getVisuals(oid) {
	let mk = UIS[getMainId(oid)];
	if (mk || USE_OLD_GRID_FUNCTIONS) return mk;
	let oids = oid2ids[oid];
	if (!oids || !IdOwner.m) return null;
	return intersection(IdOwner.m, oid2ids[oid]).map(x => UIS[x]);
}
function getVowels(w, except = []) {
	w = w.toLowerCase();
	let vowels = 'aeiouy';
	let res = [];
	for (let i = 0; i < w.length; i++) {
		if (vowels.includes(w[i]) && !except.includes(w[i])) res.push({ i: i, letter: w[i] });
	}
	return res;
}
function getWordSize(text, fz, family, weight = 900) {
	let st = {
		fz: fz,
		display: 'inline-block',
		bg: 'green',
		family: family,
		weight: weight, //900, //'bold', //weight, //'bold',
	};
	return getSizeWithStyles(text, st);
}
function getWordSize_dep(text, fz, family, weight = 900) {
	console.log('hier!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
	var d = document.createElement("div");
	document.body.appendChild(d);
	d.innerHTML = text;
	d.style.fontSize = fz + 'px';
	d.style.position = 'fixed';
	d.style.fontFamily = family;
	d.style.fontWeight = 900;
	let b = getBounds(d);
	height = d.clientHeight;
	width = d.clientWidth;
	return { w: width, h: height };
}
function getWordSize2(text, fz, family, weight = 900) {
	var d = document.createElement("div");
	document.body.appendChild(d);
	d.style.fontSize = fz + 'px';
	d.style.opacity = 0;
	d.style.position = 'fixed';
	d.style.top = '-9999px';
	d.style.display = 'inline-block';
	d.style.backgroundColor = 'green';
	d.style.fontFamily = family;
	d.style.fontWeight = weight;
	d.innerHTML = text;
	height = d.clientHeight;
	width = d.clientWidth;
	d.parentNode.removeChild(d)
	return { w: width, h: height };
}
function getWrongChars() { return getQChars().filter(x => getInputStringOfChar(x) != x.letter); }
function getWrongWords() { return getQWords().filter(x => getInputStringOfWord(x) != x.word); }
function getZoomFactor(gElement) {
	var matrix = gElement.getCTM();
	let info = decomposeMatrix(matrix);
	return info.scale;
}
function gFg(g, color, thickness) { g.setAttribute('stroke', color); if (thickness) g.setAttribute('stroke-width', thickness); }
function gG() { return gCreate('g'); }
function gHex(w, h) { let pts = size2hex(w, h); return gPoly(pts); }
function gInfo(n, R, uidParent) {
	let pf = n.params;
	n.uiType = 'g';
	let ui = gShape(pf.shape, pf.size, pf.size, pf.bg, pf.rounding);
	let gParent = findAncestorElemWithParentOfType(mBy(uidParent), 'svg');
	gParent.appendChild(ui);
	n.idUiParent = gParent.id;
	if (n.content) {
		let bgText = pf.bgText ? pf.bgText : null;
		let color = nundef(pf.fg) ? nundef(pf.bgText) ? null : colorIdealText(pf.bgText) : pf.fg;
		n.label = agText(ui, n.content, color, bgText, pf.font);
		calcRays(n, gParent, R);
	}
	if (pf.border) {
		let th = isdef(pf.thickness) ? pf.thickness : 1;
		let color = decodeColor(pf.border);
		let ch = ui.children[0];
		ch.setAttribute('stroke', color);
		ch.setAttribute('stroke-width', th);
	}
	positionGElement(ui, uidParent, gParent);
	return ui;
}
function giRep(gi, dParent, styles, shape, prefix, content) {
	gi = isString(gi) ? gi[1] == '_' ? Items[gi] : Items[name2id(gi)] : gi;
	let id = gi.id;
	let name = gi.name;
	let d = mShape(shape, dParent, styles);
	d.id = (isdef(prefix) ? prefix : '') + id;
	let key = isdef(prefix) ? prefix : 'div';
	d.innerHTML = content;
	let di = {}; di[key] = d; iAdd(gi, di);
	return d;
}
function give_each_jolly_group(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		pl.journeys.push(['4Hn', '4Sn', '*Hn']);
		pl.goals['3'] = true; pl.roundgoal = '3';
	}
	fen.players[uplayer].hand.push('4Cn');
}
function give_one_player_0_coins(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);
	let pl = fen.players[otherplayer];
	pl.coins = 0;
}
function give_other_blackmailed_building(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let b1 = stage_building(fen, 1, 'farm'); b1.rumors = ['KHr'];
	b1.isblackmailed = true;
	set_queen_phase(o);
}
function give_other_jolly_group(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);
	let pl = fen.players[otherplayer];
	pl.journeys.push(['2Hn', '2Sn', '*Hn']);
	pl.goals['3'] = true; pl.roundgoal = '3';
	fen.players[uplayer].hand.push('2Cn');
}
function give_other_jolly_sequence(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);
	let pl = fen.players[otherplayer];
	pl.journeys.push(['KHn', 'AHn', '*Hn', '3Hn', '4Hn', '5Hn', '6Hn']);
	pl.goals['7R'] = true; pl.roundgoal = '7R';
	fen.players[uplayer].hand.push('2Hn', '5Hn', 'JHn', 'QHn');
}
function give_other_various_buildings(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let other = firstCond(o.fen.plorder, (p) => p != uplayer);
	return give_various_buildings_to(o, other);
}
function give_player_7R(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.hand = ['7Cn', '8Cn', 'TCn', 'JCn', 'QCn', 'KCn', 'ACn', '*Hn', '8Cn', '2Hn', '2Sn', '2Hn'];
	let otherplayer = firstCond(fen.plorder, (p) => p != uplayer);
	let plother = fen.players[otherplayer];
	plother.hand.unshift('9Cn', '2Sn', '2Hn', '6Cn', '5Cn');
}
function give_player_achieve_5(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.hand = ['6Hn', '6Hn', '6Hn', '6Hn', '*Hn', '4Cn', '4Cn', '4Cn', '3Dn', '3Dn', '2Sn', 'KHn', 'QSn'];
	for (const plname of fen.plorder) {
		if (plname == uplayer) continue;
		let pl1 = fen.players[plname];
		pl1.journeys = [['2Cn', '2Hn', '*Hn']];
	}
}
function give_player_group(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.journeys = [['2Hn', '2Sn', '2Hn']];
}
function give_player_hand_group(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.hand = ['2Hn', '2Sn', '2Hn', '3Hn', '3Sn', '3Hn', '4Hn', '4Sn', '*Hn'];
}
function give_player_hand_groups(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.hand = ['2Hn', '2Hn', '2Sn', '2Cn', '3Sn', '3Hn', '4Hn', '4Sn', '*Hn'];
}
function give_player_jolly(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.hand.push('*Hn');
}
function give_player_jolly_sequence(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.journeys.push(['KHn', 'AHn', '*Hn', '3Hn', '4Hn', '5Hn', '6Hn']);
	pl.goals['7R'] = true; pl.roundgoal = '7R';
	fen.players[uplayer].hand.push('2Hn', 'JHn', 'QHn');
}
function give_player_king(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	fen.players[uplayer].hand.push('KHn');
}
function give_player_luxury_cards(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	fen.players[uplayer].hand.push('AHl', 'AHl', 'AHl');
}
function give_player_multiple_commission_cards(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.hand.push('QCn', 'QHn');
	pl.stall.push('QDn', 'QSn');
	pl.commissions.push('QCc');
}
function give_player_one_ferro_set(o) {
	o.fen.players[o.fen.turn[0]].hand = ['*Hn', 'KHn', 'KCn'];
}
function give_player_only_4_cards(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	fen.players[uplayer].hand = ['AHn', 'AHn'];
	fen.players[uplayer].stall = ['ACn', 'ASn'];
}
function give_player_only_one_card(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.hand = ['4Hn'];
}
function give_player_queen(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	fen.players[uplayer].hand.push('QHn');
}
function give_player_sequence(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let pl = fen.players[uplayer];
	pl.hand = ['2Sn', '3Sn', '4Sn', '5Sn', '6Sn', '7Sn', '8Sn', '9Sn', 'ASn'];
}
function give_player_two_ferro_sets(o) {
	o.fen.players[o.fen.turn[0]].hand = ['*Hn', 'KHn', 'KCn', 'QHn', 'QCn', 'QDn'];
}
function give_player_various_buildings(o) {
	let plname = o.fen.turn[0];
	return give_various_buildings_to(o, plname);
}
function give_players_buildings(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	stage_correct_buildings(fen, { mimi: { estate: 1 }, amanda: { chateau: 1 } });
	fen.stage = 5;
	fen.phase = 'king';
}
function give_players_buildings_plus(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let di = {};
	for (const plname of fen.plorder) { di[plname] = { estate: 1, farm: 1, chateau: 1 }; }
	stage_correct_buildings(fen, di);
	ari_add_harvest_cards(fen);
	fen.stage = o.stage = 5;
	fen.phase = 'king';
}
function give_players_empty_stalls(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let n = rChoose([2, 3]);
	fen.market = deck_deal(fen.deck, 2);
	fen.stage = 4, fen.actionsCompleted = [], fen.stallSelected = jsCopy(fen.plorder);
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		pl.stall = [];
		pl.stall_value = 0;
	}
}
function give_players_hand_A2(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		pl.hand = ['ACn', '2Cn', '3Cn', '5Hn', '7Hn', '7Sn', '7Cn', '7Dn'];
	}
	[fen.stage, fen.turn] = set_journey_or_stall_stage(fen, o.options, fen.phase);
}
function give_players_hand_journey(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		arrExtend(pl.hand, ['ACn', '2Cn', '3Cn']);
	}
}
function give_players_schwein(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	for (let i = 0; i < fen.plorder.length; i++) {
		let b = stage_building(fen, i, 'farm');
		b.h = 'KHn';
		b.schweine = [2];
		let b1 = stage_building(fen, i, 'estate');
	}
	[fen.turn, fen.stage] = [[uplayer], 5];
	fen.phase = 'king';
}
function give_players_schwein_old(o, isOpen = true) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let b = stage_building(fen, 1, 'farm');
	b.h = 'KHn';
	if (isOpen) b.schweine = [b.list[2]];
	fen.stage = 5;
	fen.phase = 'king';
}
function give_players_schweine_variety(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let b = stage_building_new(fen, 1, 'farm', 1, 1);
	b = stage_building_new(fen, 1, 'farm', 1, 0);
	b = stage_building_new(fen, 1, 'farm', 0, 0);
	b = stage_building_new(fen, 1, 'farm', 0, 1);
	b = stage_building_new(fen, 1, 'farm', 0, 2);
	b = stage_building(fen, 0, 'farm'); b.h = 'KHn'; b.schweine = [2];
	[fen.turn, fen.stage] = [[uplayer], 5];
	fen.phase = 'king';
}
function give_players_stalls(o) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let n = rChoose([2, 3]);
	fen.market = deck_deal(fen.deck, 2);
	fen.stage = 4, fen.actionsCompleted = [], fen.stallSelected = jsCopy(fen.plorder);
	for (const plname of fen.plorder) {
		let pl = fen.players[plname];
		for (let i = 0; i < n; i++)  top_elem_from_to(pl.hand, pl.stall);
		pl.stall_value = calc_stall_value(fen, plname);
	}
}
function give_various_buildings_to(o, plname) {
	let [fen, uplayer] = [o.fen, o.fen.turn[0]];
	let i = fen.plorder.indexOf(plname);
	let b1 = stage_building(fen, i, 'farm'); b1.rumors = ['KHr'];
	let b2 = stage_building(fen, i, 'farm');
	let lead = b2.lead;
	b2.rumors = ['4Cr', `${lead[0]}Cr`];
	let b3 = stage_building(fen, i, 'farm');
	return plname;
}
function glabel(el, val, { bg, fg, contrastBackground = false, force = true, shrinkFont = false, wrap = false, fz = 20 } = {}) {
	let mobj = el.mobj;
	if (contrastBackground) {
		unitTestMS('.................fill black!!!');
		mobj.text({ txt: val, force: force, shrinkFont: shrinkFont, wrap: wrap, fz: fz, bg: 'white', fill: 'black' });
	} else {
		mobj.text({ txt: val, force: force, shrinkFont: shrinkFont, wrap: wrap, fz: fz, bg: bg, fill: fg });
	}
}
function glabels(board, ids, func, { bg, fg, contrastBackground = false, force = true, shrinkFont = false, wrap = false, fz = 20 } = {}) {
	for (const id of ids) {
		let el = board.objects[id];
		let val = func(el);
		glabel(el, val, { bg: bg, fg: fg, contrastBackground: contrastBackground, force: force, shrinkFont: shrinkFont, wrap: wrap, fz: fz });
	}
}
function gLine(x1, y1, x2, y2) { let r = gCreate('line'); r.setAttribute('x1', x1); r.setAttribute('y1', y1); r.setAttribute('x2', x2); r.setAttribute('y2', y2); return r; }
function gMaze() {
	function maze_fen() { return 'nix'; }
	function maze_prompt(g, fen) {
		let [rows, cols, sz, gap] = [g.rows, g.cols, g.sz, g.gap];
		clear_graph();
		let maze = new MazeGraph(dTable, rows, cols, sz, gap);
		setRectInt(maze.dGraph);
		mLinebreak(dTable, 12);
		let cellStart = maze.getTopLeftCell();
		mCellContent(iDiv(cellStart), { w: '60%', h: '60%', fz: '50%', padding: '5%', bg: 'green', fg: 'white', rounding: '50%' }, 'A');
		let cellGoal = maze.getBottomRightCell();
		mCellContent(iDiv(cellGoal), { w: '60%', h: '60%', fz: '50%', padding: '5%', bg: 'red', fg: 'white', rounding: '50%' }, 'B');
		let [roomFrom, roomTo] = [cellStart.nodeId, cellGoal.nodeId];
		if (isdef(fen)) {
			let instruction = mText('game over!', dTable, { fz: 24, display: 'inline-block' });
			return;
		}
		let instruction = mText('is there a path from A to B?', dTable, { fz: 24, display: 'inline-block' });
		mLinebreak(dTable);
		let path = maze.getShortestPathFromTo(roomFrom, roomTo);
		console.assert(path.length < Infinity, 'WAAAAAAAAAAAAAAS?');
		if (coin()) maze.cutPath(path, .5, .75);
		let len = maze.getLengthOfShortestPath(roomFrom, roomTo);
		let is_yes = len != Infinity;
		let byes = mButton('yes', (ev) => maze_eval(is_yes, ev), dTable, { fz: 20 }, ['donebutton', 'buttonClass']);
		let bno = mButton('no', (ev) => maze_eval(!is_yes, ev), dTable, { fz: 20 }, ['donebutton', 'buttonClass']);
		if (is_yes) { Goal = { b_correct: byes, b_wrong: bno, is_yes: true, maze: maze, path: path }; }
		else { Goal = { b_correct: bno, b_wrong: byes, is_yes: false, maze: maze, path: path }; }
		animatePropertyX(dTable, 'opacity', [0, 0, 1], 500, 'both', 'ease', 0);
	}
	function maze_eval(is_correct, ev) {
		if (!canAct()) return;
		uiActivated = false; clear_timeouts();
		let button_clicked = ev.target;
		race_set_fen();
		race_update_my_score(is_correct ? 1 : -1);
		let delay = maze_feedback(is_correct, button_clicked);
		setTimeout(() => {
			in_game_open_prompt_off();
			clear_table_events();
			race_send_move();
		}, delay);
	}
	function clear_graph() { if (nundef(Goal)) return; let cy = lookup(Goal, ['maze', 'cy']); if (cy) cy.destroy(); }
	function maze_feedback(is_correct, button_clicked, show_feedback = true) {
		let delay = !is_correct && show_feedback ? 1000 : 100;
		if (!is_correct) {
			mStyle(Goal.b_correct, { bg: 'green' });
			animate(Goal.b_correct, 'komisch', 1000);
			if (Goal.is_yes) Goal.maze.breadCrumbs(Goal.path); else Goal.maze.colorComponents();
		}
		if (is_correct) { mStyle(button_clicked, { bg: 'green' }); mCheckit(button_clicked, 100); }
		else { mXit(button_clicked); }
		return delay;
	}
	return {
		prompt: maze_prompt,
		fen: maze_fen,
	}
}
function go_offline() { DA.internet = false; }
function go_online() { DA.internet = true; }
function goalHasNumber() {
	let ws = Goal.info.words;
	return firstCond(ws, x => isNumber(x));
}
function goalHasNumberOrTimeString() {
	return goalHasNumber() || goalHasTimeString();
}
function goalHasTimeString() {
	let ws = Goal.info.words;
	return firstCond(ws, x => isTimeString(x));
}
function got_create_table(obj) { Session.cur_tid = obj.table.id; Session.cur_table = obj.table; present_table(obj); }
function got_dictionary(obj) {
	let lang = obj.lang;
	let x = obj.dict;
	Dictionary[lang] = to_words(x);
	return;
	let keys = get_keys(obj).filter(x => endsWith(x, 'dict'));
	console.log('keys', keys)
	if (isEmpty(keys)) return;
	if (nundef(Dictionary)) Dictionary = {};
	let l = obj.lang;
	for (const k of keys) {
		if (nundef(Dictionary[l])) {
			Dictionary[l] = to_words(obj[k]);
		}
	}
}
function got_games(obj) {
	let tables = obj.tables;
	let bygame = set_tables_by_game(obj, false);
	set_most_recent_table_as_cur_tid(tables);
	present_games();
}
function got_intro(obj) {
	Session.users = obj.users;
	Session.users_by_name = {};
	for (const u of Session.users) {
		Session.users_by_name[u.username] = u;
		if (isdef(DB.users[u.username])) { copyKeys(DB.users[u.username], u); }
	}
	present_intro();
}
function got_modify_table(obj) { Session.cur_tid = obj.table.id; Session.cur_table = obj.table; present_table(obj); }
function got_non_admin_reload(obj) {
	in_game_off();
	in_game_open_prompt_off();
	console.log('got_non_admin reload: obj', obj)
	set_tables_by_game(obj);
	tables = obj.tables;
	if (isEmpty(tables)) {
		console.assert(nundef(Session.cur_tid), 'reload no table still cur_tid!!!!!')
		get_user_in_intro_screen();
	} else {
		get_play_start();
	}
}
function got_play(obj) { present_table(obj); }
function got_play_start(obj) {
	console.log('got_play_start', obj);
	let table = obj.table;
	console.log('fen', table.fen);
	let lang = get_preferred_lang(Session.cur_user);
	set_start_data_from_fen(obj.table.fen, obj.table.game);
	let lang2 = get_preferred_lang(Session.cur_user);
	if (lang != lang2) get_dictionary();
	present_table(obj);
}
function got_send_move(obj) { present_table(obj); }
function got_tables(obj) {
	set_tables_by_game(obj);
	if (isdef(Session.cur_tid)) { get_play(); } else get_games();
}
function got_user_game_tables(obj) {
	let tables = obj.tables;
	if (!isEmpty(tables)) { Session.cur_tid = tables[0].id; Session.cur_table = tables[0]; }
}
function got_user_in_intro_screen() {
	show('dIntro'); clearElement('dIntro');
	intro_show_user_image(Session.cur_user);
	present_wait_for_table_to_start();
}
function gotNumberOrTimeString(answer) {
	if (isNumber(answer) || isTimeString(answer)) return true; else return false;
}
function gPanel(n, R, area) {
	gParent = mBy(area);
	n.idUiParent = gParent.id;
	if (isdef(n.ui)) {
		delete n.changing;
		return n.ui;
	}
	let ui = agG(gParent);
	n.uiType = 'g';
	return ui;
}
function gPoly(pts) { let r = gCreate('polygon'); if (pts) r.setAttribute('points', pts); return r; }
function gPos(g, x, y) { g.style.transform = `translate(${x}px, ${y}px)`; }
function gRect(w, h) { let r = gCreate('rect'); r.setAttribute('width', w); r.setAttribute('height', h); r.setAttribute('x', -w / 2); r.setAttribute('y', -h / 2); return r; }
function gRectPartOnArea() {
	let g = new MMS({ parent: UIS.a_d_game }).setDefaults({ bg: 'powderBlue' }).attach();
	let ms = new MMS({ parent: g }).rect({ w: 50, h: 50, bg: 'blue' }).attach();
	console.log(ms.elem)
}
function grid(id, rows, cols, size, bg = 'blue') {
	visualStructures[id] = [];
	let w = size * cols;
	let h = size * rows;
	let ms = new MS(id, 'g')
		.setbg(getpal(3))
		.rect({ w: w, h: h });
	ms.tag('layout', 'grid');
	visualStructures[id].push(ms);
	return (r, c) => {
		return {
			x: c * size - w / 2 + size / 2,
			y: r * size - h / 2 + size / 2,
			id: id,
			ms: ms
		};
	};
}
function gridLabeled(list, picLabelStyles) {
	let dGrid = mDiv(mBy('table'));
	let elems = [];
	let isText = true;
	let isOmoji = false;
	let pictureSize = 200;
	let stylesForLabelButton = { rounding: 10, margin: pictureSize / 8 };
	for (const k of list) {
		let info = symbolDict[k];
		let label = info.type == 'emo' ? (isdef(info.bestE) ? info.bestE : lastOfLanguage(k, 'E')) + ' ' + lastIndex
			: k;
		let el = maPicLabelButtonFitText(info, label,
			{ w: pictureSize, h: pictureSize, bgPic: 'random', shade: null, contrast: null },
			onClickIVPicture, dGrid, stylesForLabelButton, 'frameOnHover', isText, isOmoji);
		el.id = 'pic' + lastIndex;
		elems.push(el);
		Pictures.push({ div: el, info: info, label: label, isSelected: false });
		lastIndex += 1;
	}
	let gridStyles = { 'place-content': 'center', gap: 4, margin: 4, padding: 4, bg: 'silver', rounding: 5 };
	let size = layoutGrid(elems, dGrid, gridStyles, { rows: 10, isInline: true });
	console.log('lastIndex', lastIndex)
}
function gridLabeledX(keyList, labelList, dParent, { rows, layout } = {}, clickHandler) {
	let dGrid = mDiv(dParent);
	let elems = [];
	let isText = true;
	let isOmoji = false;
	let pictureSize = 200;
	let stylesForLabelButton = { rounding: 10, margin: pictureSize / 8 };
	let pics = [];
	for (let i = 0; i < keyList.length; i++) {
		let k = keyList[i];
		let info = symbolDict[k];
		let label = labelList[i];
		let el = maPicLabelButtonFitText(info, label,
			{ w: pictureSize, h: pictureSize, bgPic: 'random', shade: null, contrast: null },
			clickHandler, dGrid, stylesForLabelButton, 'frameOnHover', isText, isOmoji);
		el.id = 'pic' + lastIndex;
		elems.push(el);
		pics.push({ div: el, info: info, label: label, isSelected: false });
		lastIndex += 1;
	}
	let gridStyles = { 'place-content': 'center', gap: 4, margin: 4, padding: 4, bg: 'silver', rounding: 5 };
	let func = (layout == 'flex' ? layoutFlex : layoutGrid);
	let size = func(elems, dGrid, gridStyles, { rows: rows, isInline: true });
	return pics;
}
function gridLayout(nuiBoard, R) {
	calcBoardDimensionsX(nuiBoard, R);
	let [fw, fh] = [nuiBoard.fw, nuiBoard.fh];
	let boardDiv = mBy(nuiBoard.uidDiv);
	let svg = mBy(nuiBoard.uidSvg);
	let g = mBy(nuiBoard.uid);
	mStyle(boardDiv, { 'min-width': nuiBoard.wTotal, 'min-height': nuiBoard.hTotal });
	nuiBoard.sizeMeasured = { w: nuiBoard.wTotal, h: nuiBoard.hTotal };
	nuiBoard.size = jsCopy(nuiBoard.sizeMeasured);
	for (const fid of nuiBoard.children) {
		let f = R.uiNodes[fid];
		if (f.params.shape == 'line') {
			let line = f.ui.firstChild;
			if (nundef(line)) {
				agLine(f.ui, f.info.x1 * fw, f.info.y1 * fw, f.info.x2 * fw, f.info.y2 * fw);
			} else {
				line.setAttribute('x1', f.info.x1 * fw);
				line.setAttribute('y1', f.info.y1 * fw);
				line.setAttribute('x2', f.info.x2 * fw);
				line.setAttribute('y2', f.info.y2 * fw);
			}
			f.pos = { x: (f.info.x1 * fw + f.info.x2 * fw) / 2, y: (f.info.y1 * fw + f.info.y2 * fw) / 2 };
		} else {
			f.pos = { x: (fw * f.info.x), y: (fh * f.info.y) };
			gPos(f.ui, fw * f.info.x, fh * f.info.y);
		}
	}
	g.style = `transform: translate(${nuiBoard.wTotal / 2}px, ${nuiBoard.hTotal / 2}px)`;
}
function gridSkeleton(omap, R, gridInfoFunc, fieldInfoFunc) {
	let board = { o: omap, info: gridInfoFunc(omap.rows, omap.cols) };
	let fields = {};
	for (const fid of getElements(omap.fields)) {
		let o = R.getO(fid);
		fields[fid] = { oid: fid, o: o, info: fieldInfoFunc(board.info, o.row, o.col) };
	}
	board.info.vertices = correctPolys(Object.values(fields).map(x => x.info.poly), 1);
	let dhelp = {};
	let corners = {};
	for (const fid in fields) {
		let f = fields[fid];
		let i = 0;
		for (const cid of getElements(f.o.corners)) {
			if (cid && nundef(dhelp[cid])) {
				let pt = f.info.poly[i];
				corners[cid] = { oid: cid, o: R.getO(cid), info: { shape: 'circle', memType: 'corner', x: pt.x, y: pt.y, w: 1, h: 1 } };
				dhelp[cid] = true;
			}
			i += 1;
		}
	}
	dhelp = {};
	let edges = {};
	for (const fid in fields) {
		let f = fields[fid];
		for (const eid of getElements(f.o.edges)) {
			if (eid && nundef(dhelp[eid])) {
				let el = R.getO(eid);
				let n1 = corners[el.corners[0]._obj];
				let n2 = corners[el.corners[1]._obj];
				let [x1, y1, x2, y2] = [n1.info.x, n1.info.y, n2.info.x, n2.info.y];
				edges[eid] = { oid: eid, o: el, info: { shape: 'line', memType: 'edge', x1: x1, y1: y1, x2: x2, y2: y2, x: (x1 + x2) / 2, y: (y1 + y2) / 2, thickness: 1, w: 1, h: 1 } };
				dhelp[eid] = true;
			}
		}
	}
	return { board: board, fields: fields, corners: corners, edges: edges };
}
function gRounding(r, rounding) {
	r.setAttribute('rx', rounding);
	r.setAttribute('ry', rounding);
}
function groupSizes() {
	ensureSymBySet();
	for (const gname in symKeysBySet) {
		console.log('group', gname + ': ' + symKeysBySet[gname].length);
	}
}
function growIfDefaultMainAreaWidth(mobj) {
	let wElem = mobj.parts.table.offsetWidth;
	let areaName = mobj.idParent;
	if (isdef(wElem) && isdef(AREAS[areaName])) {
		let wNeeded = wElem + 40;
		let wArea = UIS[areaName].w;
		if (wArea < wNeeded || wArea > wNeeded + 100) {
			setAreaWidth(areaName, wNeeded);
		}
	}
}
function growIfDefaultPlayerAreaWidthblablabla_UNUSED(mobj) {
	let wElem = mobj.parts.table.offsetWidth;
	let areaName = mobj.idParent;
	if (isdef(wElem) && isdef(AREAS[areaName])) {
		let wNeeded = wElem + 40;
		let wArea = UIS[areaName].w;
		if (wArea < wNeeded || wArea > wNeeded + 100) {
			setAreaWidth(areaName, wNeeded);
		}
	}
}
function gSet() {
	function set_fen() {
		let items = Session.items;
		let fen = items.map(x => x.fen).join(',');
		return fen;
	}
	function set_prompt(g, fen) {
		let [n, rows, cols] = [g.num_attrs, g.rows, g.cols];
		let all_attrs = gSet_attributes();
		let attrs_in_play = arrTake(get_keys(all_attrs), n);
		let deck = g.deck = make_set_deck(n);
		shuffle(deck);
		let goal = Goal = { set: make_goal_set(deck, g.prob_different), cards: [] };
		let dCards = stdRowsColsContainer(dTable, cols, styles = { bg: 'transparent' });
		let card_styles = { w: cols > 4 ? 130 : 160 };
		let items = g.items = [];
		let deck_rest = arrWithout(deck, goal.set);
		let fens = choose(deck_rest, rows * cols - 3);
		let all_fens = goal.set.concat(fens);
		shuffle(all_fens);
		if (isdef(fen)) { all_fens = fen.split(','); }
		for (const f of all_fens) {
			let item = create_set_card(f, dCards, card_styles);
			let d = iDiv(item);
			mStyle(d, { cursor: 'pointer' });
			d.onclick = set_interact;
			if (Goal.set.includes(item.fen)) Goal.cards.push(item);
			items.push(item);
		}
		g.selected = [];
		return items;
	}
	function set_interact(ev) {
		ev.cancelBubble = true;
		if (!canAct()) { console.log('no act'); return; }
		let id = evToId(ev);
		if (isdef(Items[id])) {
			let item = Items[id];
			toggleSelectionOfPicture(item, Session.selected);
			if (Session.selected.length == 3) {
				let correct = check_complete_set(Session.selected.map(x => x.fen));
				if (correct) {
					Selected = { isCorrect: true, feedbackUI: Session.selected.map(x => iDiv(x)) };
				} else {
					Selected = { isCorrect: false, correctUis: Goal.cards.map(x => iDiv(x)), feedbackUI: null, animation: 'onPulse1' };
				}
				set_eval();
			}
		}
	}
	function set_eval() {
		if (!canAct()) return;
		uiActivated = false; clear_timeouts();
		IsAnswerCorrect = Selected.isCorrect;
		race_set_fen();
		race_update_my_score(IsAnswerCorrect ? 1 : 0);
		let delay = show_feedback(IsAnswerCorrect);
		setTimeout(() => {
			in_game_open_prompt_off();
			clear_table_events();
			race_send_move();
		}, delay);
	}
	return {
		prompt: set_prompt,
		fen: set_fen,
	}
}
function gSet_attributes() {
	const all_attrs = {
		shape: ['circle', 'triangle', 'square'],
		color: [RED, BLUE, GREEN],
		num: [1, 2, 3],
		shading: ['solid', 'empty', 'gradient'],
		background: ['white', 'grey', 'black'],
		text: ['none', 'letter', 'number'],
	};
	return all_attrs;
}
function gShape(shape, w = 20, h = 20, color = 'green', rounding) {
	let el = gG();
	if (nundef(shape)) shape = 'rect';
	if (shape != 'line') agColoredShape(el, shape, w, h, color);
	else gStroke(el, color, w);
	if (isdef(rounding) && shape == 'rect') {
		let r = el.children[0];
		gRounding(r, rounding);
	}
	return el;
}
function gSize(g, w, h, shape = null, iChild = 0) {
	let el = (getTypeOf(g) != 'g') ? g : g.children[iChild];
	let t = getTypeOf(el);
	switch (t) {
		case 'rect': el.setAttribute('width', w); el.setAttribute('height', h); el.setAttribute('x', -w / 2); el.setAttribute('y', -h / 2); break;
		case 'ellipse': el.setAttribute('rx', w / 2); el.setAttribute('ry', h / 2); break;
		default:
			if (shape) {
				switch (shape) {
					case 'hex': let pts = size2hex(w, h); el.setAttribute('points', pts); break;
				}
			}
	}
	return el;
}
function gSizeToContent(svg) {
	var bbox = svg.getBBox();
	svg.setAttribute("width", bbox.x + bbox.width + bbox.x);
	svg.setAttribute("height", bbox.y + bbox.height + bbox.y);
}
function gSpotit() {
	function spotit_fen() {
		let items = Session.items;
		console.log('items', items)
		let fen = items.map(x => x.keys.join(' ')).join(',');
		let item_fens = [];
		for (const item of items) {
			let arr = arrFlatten(item.pattern);
			let ifen = arr.map(x => `${x.key}:${x.scale}`).join(' ');
			item_fens.push(ifen);
		}
		fen = item_fens.join(',');
		return fen;
	}
	function spotit_prompt(g, fen) {
		g.items = spotit_deal(g.num_cards, g.rows, g.cols, g.vocab, g.lang, g.min_scale, g.max_scale, fen);
	}
	function spotit_interact(ev) {
		ev.cancelBubble = true;
		if (!canAct()) { console.log('no act'); return; }
		let keyClicked = evToProp(ev, 'key');
		let id = evToId(ev);
		if (isdef(keyClicked) && isdef(Items[id])) {
			let item = Items[id];
			if (Object.values(item.shares).includes(keyClicked)) {
				let otherCard = spotitFindCardSharingSymbol(item, keyClicked);
				let cardSymbol = ev.target;
				let otherSymbol = spotitFindSymbol(otherCard, keyClicked);
				Selected = { isCorrect: true, feedbackUI: [cardSymbol, otherSymbol] };
			} else {
				let cardSymbol = ev.target;
				Selected = { isCorrect: false, feedbackUI: [cardSymbol], correctUis: spotit_get_shared_symbols(), correctionDelay: Session.items.length * 1500 };
			}
			spotit_eval();
		}
	}
	function spotit_eval() {
		if (!canAct()) return;
		uiActivated = false; clear_timeouts();
		IsAnswerCorrect = Selected.isCorrect;
		race_set_fen();
		race_update_my_score(IsAnswerCorrect ? 1 : 0);
		let delay = show_feedback(IsAnswerCorrect);
		setTimeout(() => {
			in_game_open_prompt_off();
			clear_table_events();
			race_send_move();
		}, delay);
	}
	function spotit_card(info, dParent, cardStyles, onClickSym) {
		CSZ = 300;
		copyKeys({ w: CSZ, h: CSZ }, cardStyles);
		let card = cRound(dParent, cardStyles, info.id);
		addKeys(info, card);
		let d = iDiv(card);
		let zipped = [];
		for (let i = 0; i < card.keys.length; i++) {
			zipped.push({ key: card.keys[i], scale: card.scales[i] });
		}
		card.pattern = fillColarr(card.colarr, zipped);
		let symStyles = { sz: CSZ / (card.rows + 1), fg: 'random', hmargin: 8, vmargin: 4, cursor: 'pointer' };
		let syms = [];
		mRowsX(iDiv(card), card.pattern, symStyles, { 'justify-content': 'center' }, { 'justify-content': 'center' }, syms);
		for (let i = 0; i < info.keys.length; i++) {
			let key = card.keys[i];
			let sym = syms[i];
			card.live[key] = sym;
			sym.setAttribute('key', key);
			sym.onclick = onClickSym;
		}
		return card;
	}
	function spotit_deal(numCards, rows, cols, vocab, lang, min_scale, max_scale, fen) {
		lang = valf(lang, 'E');
		let colarr = _calc_hex_col_array(rows, cols);
		if (rows == 3 && cols == 1) { colarr = [1, 3, 1]; }
		else if (rows == 2 && cols == 1) { colarr = [1, 2]; }
		else if (rows == 4 && cols == 1) { rows = 3; colarr = [2, 3, 1]; }
		else if (rows == 5 && cols == 1) { rows = 4; cols = 1; colarr = [1, 3, 3, 1]; }
		else if (rows == 5 && cols == 3) { rows = 5; cols = 1; colarr = [1, 3, 4, 3, 1]; }
		else if (rows == 6 && cols == 2) { rows = 5.5; colarr = [2, 4, 5, 4, 2]; }
		else if (rows == 6 && cols == 3) { rows = 5.8; colarr = [2, 4, 5, 4, 3]; }
		let perCard = arrSum(colarr);
		let nShared = (numCards * (numCards - 1)) / 2;
		let nUnique = perCard - numCards + 1;
		let numKeysNeeded = nShared + numCards * nUnique;
		let nMin = numKeysNeeded + 3;
		let keypool = setKeys({ nMin: nMin, lang: valf(lang, 'E'), key: valf(vocab, 'animals'), keySets: KeySets, filterFunc: (_, x) => !x.includes(' ') });
		let keys = choose(keypool, numKeysNeeded);
		let dupls = keys.slice(0, nShared);
		let uniqs = keys.slice(nShared);
		let infos = [];
		for (let i = 0; i < numCards; i++) {
			let keylist = uniqs.slice(i * nUnique, (i + 1) * nUnique);
			let info = { id: getUID(), shares: {}, keys: keylist, rows: rows, cols: cols, colarr: colarr, num_syms: perCard };
			infos.push(info);
		}
		let iShared = 0;
		for (let i = 0; i < numCards; i++) {
			for (let j = i + 1; j < numCards; j++) {
				let c1 = infos[i];
				let c2 = infos[j];
				let dupl = dupls[iShared++];
				c1.keys.push(dupl);
				c1.shares[c2.id] = dupl;
				c2.shares[c1.id] = dupl;
				c2.keys.push(dupl);
			}
		}
		for (const info of infos) { shuffle(info.keys); }
		for (const info of infos) {
			info.scales = info.keys.map(x => chooseRandom([.5, .75, 1, 1.25]));
		}
		if (!isEmpty(fen)) {
			let ks_for_cards = fen.split(',');
			for (let i = 0; i < infos.length; i++) {
				let info = infos[i];
				let ks_list = ks_for_cards[i].split(' ');
				info.keys = ks_list.map(x => stringBefore(x, ':'));
				info.scales = ks_list.map(x => stringAfter(x, ':')).map(x => Number(x));
			}
		}
		let items = [];
		for (const info of infos) {
			let item = spotit_card(info, dTable, { margin: 20 }, spotit_interact);
			items.push(item);
		}
		return items;
	}
	function spotit_get_shared_symbols() {
		let result = [];
		for (const item of Session.items) {
			for (const id in item.shares) {
				let k = item.shares[id];
				let ui = iGetl(item, k);
				result.push(ui);
			}
		}
		return result;
	}
	function spotit_colarr_settings(num) {
		let di = {
			3: { rows: 2, colarr: [1, 2] },
			4: { rows: 2, colarr: [2, 2] },
			5: { rows: 2.5, colarr: [2, 3] },
			6: { rows: 3, colarr: [1, 2] },
			7: { rows: 3, colarr: [1, 2] },
			8: { rows: 3.2, colarr: [1, 2] },
			9: { rows: 2, colarr: [1, 2] },
			10: { rows: 2, colarr: [1, 2] },
			11: { rows: 2, colarr: [1, 2] },
			12: { rows: 2, colarr: [1, 2] },
			13: { rows: 2, colarr: [1, 2] },
			14: { rows: 2, colarr: [1, 2] },
			15: { rows: 2, colarr: [1, 2] },
		}
		let colarr = _calc_hex_col_array(rows, cols);
		if (rows == 3 && cols == 1) { colarr = [1, 3, 1]; }
		else if (rows == 2 && cols == 1) { colarr = [1, 2]; }
		else if (rows == 4 && cols == 1) { rows = 3; colarr = [2, 3, 1]; }
		else if (rows == 5 && cols == 1) { rows = 4; cols = 1; colarr = [1, 3, 3, 1]; }
		else if (rows == 3 && cols == 3) { rows = 3; cols = 3; colarr = [1, 3, 3, 1]; }
		else if (rows == 5 && cols == 3) { rows = 5; cols = 1; colarr = [1, 3, 4, 3, 1]; }
		else if (rows == 6 && cols == 2) { rows = 5.5; colarr = [2, 4, 5, 4, 2]; }
	}
	function spotit_deal_new_not_yet(numCards, rows, colarr, vocab, lang, min_scale, max_scale, fen) {
		lang = valf(lang, 'E');
		let perCard = arrSum(colarr);
		let nShared = (numCards * (numCards - 1)) / 2;
		let nUnique = perCard - numCards + 1;
		let numKeysNeeded = nShared + numCards * nUnique;
		let nMin = numKeysNeeded + 3;
		let keypool = setKeys({ nMin: nMin, lang: valf(lang, 'E'), key: valf(vocab, 'animals'), keySets: KeySets, filterFunc: (_, x) => !x.includes(' ') });
		let keys = choose(keypool, numKeysNeeded);
		let dupls = keys.slice(0, nShared);
		let uniqs = keys.slice(nShared);
		let infos = [];
		for (let i = 0; i < numCards; i++) {
			let keylist = uniqs.slice(i * nUnique, (i + 1) * nUnique);
			let info = { id: getUID(), shares: {}, keys: keylist, rows: rows, cols: cols, colarr: colarr, num_syms: perCard };
			infos.push(info);
		}
		let iShared = 0;
		for (let i = 0; i < numCards; i++) {
			for (let j = i + 1; j < numCards; j++) {
				let c1 = infos[i];
				let c2 = infos[j];
				let dupl = dupls[iShared++];
				c1.keys.push(dupl);
				c1.shares[c2.id] = dupl;
				c2.shares[c1.id] = dupl;
				c2.keys.push(dupl);
			}
		}
		for (const info of infos) { shuffle(info.keys); }
		for (const info of infos) {
			info.scales = info.keys.map(x => chooseRandom([.6, .75, 1, 1.25]));
		}
		if (!isEmpty(fen)) {
			let ks_for_cards = fen.split(',');
			for (let i = 0; i < infos.length; i++) {
				let info = infos[i];
				let ks_list = ks_for_cards[i].split(' ');
				info.keys = ks_list.map(x => stringBefore(x, ':'));
				info.scales = ks_list.map(x => stringAfter(x, ':')).map(x => Number(x));
			}
		}
		let items = [];
		for (const info of infos) {
			let item = spotit_card(info, dTable, { margin: 20 }, spotit_interact);
			items.push(item);
		}
		return items;
	}
	return {
		prompt: spotit_prompt,
		fen: spotit_fen,
	}
}
function gStroke(g, color, thickness) { g.setAttribute('stroke', color); if (thickness) g.setAttribute('stroke-width', thickness); }
function gSvg() { return gCreate('svg'); }
function gTest00() {
	let g = new AbsGraph1();
	let nid1 = g.addNode();
	let nid2 = g.addNode();
	let eid1 = g.addEdge(nid1, nid2);
	console.log('g', g.getNodeIds(), g.getEdgeIds());
}
function gTest01() {
	let g = new AbsGraph1();
	let nids = g.addNodes(10);
	let eids = g.addEdges(15);
	console.log('g', g.getNodeIds(), g.getEdgeIds());
}
function gTest02() {
	initTable();
	let d = mDiv(dTable, { w: 500, h: 300, bg: 'blue', align: 'left' });
	let g = new SimpleGraph(d);
	let nids = g.addNodes(10);
	let eids = g.addEdges(15);
	console.log('g', g.getNodeIds(), g.getEdgeIds());
	g.cose();
	g.addLayoutControls();
}
function gTest03() {
	initTable();
	let d = mDiv(dTable, { w: 500, h: 360, bg: 'blue', align: 'left' });
	let g = new AbsGraph1(d);
	upgradeToSimpleGraph(g, d);
	let nids = g.addNodes(10);
	let eids = g.addEdges(15);
	console.log('g', g.getNodeIds(), g.getEdgeIds());
	g.cose();
	g.addLayoutControls();
}
function gTest04() {
	initTable();
	let d = mDiv(dTable, { w: 500, h: 360, bg: 'blue', align: 'left' });
	let g = new AbsGraph1(d);
	g.addVisual(d);
	let nids = g.addNodes(10);
	let eids = g.addEdges(15);
	console.log('g', g.getNodeIds(), g.getEdgeIds());
	g.cose();
	g.addLayoutControls(d);
}
function gTest05() {
	initTable();
	let hexPoints = [0, -1, 1, -0.5, 1, 0.5, 0, 1, -1, 0.5, -1, -0.5];
	let styles = {
		outer: { bg: 'pink', padding: 25 },
		inner: { w: 500, h: 400 },
		node: { shape: 'polygon', 'shape-polygon-points': hexPoints, w: 90, h: 100, bg: 'black', fg: 'red', fz: 40 }
	};
	let g = new UIGraph(dTable, styles);
	let nids = g.addNodes(7);
	console.log('g', g.getNodeIds(), g.getEdgeIds());
	g.hex1(3, 2, styles.node.w + 2, styles.node.h + 2);
	g.addLayoutControls();
	g.disableDD();
	g.nodeEvent('click', x => { let id = x.id(); console.log('clicked ' + id); g.mStyle(id, { bg: 'yellow', fg: 'blue' }); });
}
function gTest06() {
	initTable();
	let hexPoints = [0, -1, 1, -0.5, 1, 0.5, 0, 1, -1, 0.5, -1, -0.5];
	let styles = {
		outer: { bg: 'pink', padding: 25 },
		inner: { w: 500, h: 400 },
		node: { bg: 'pink' },
		edge: { bg: 'blue' }
	};
	let g = new UIGraph(dTable, styles);
	let cy = g.cy;
	let nids = g.addNodes(10);
	let eids = g.addEdges(10);
	let node = g.getNodes()[0];
	node.addClass('high');
	g.cose();
	cy.style().selector('node.field').style('color', 'black');
	cy.style().selector('node.city').style('shape', 'hexagon');
	let node1 = g.getNodes()[1];
	node.addClass('city');
	node1.addClass('field');
}
function gTest07() {
	initTable();
	let hexPoints = [0, -1, 1, -0.5, 1, 0.5, 0, 1, -1, 0.5, -1, -0.5];
	let styles = {
		outer: { bg: 'pink', padding: 25 },
		inner: { w: 500, h: 400 },
		node: { bg: 'pink', shape: 'hex' },
		edge: { bg: 'blue' }
	};
	let g = new UIGraph(dTable, styles);
	let cy = g.cy;
	let nids = g.addNodes(10);
	let eids = g.addEdges(10);
	let node = g.getNodes()[0];
	node.addClass('high');
	g.cose();
	cy.style().selector('node.field').style('color', 'black');
	cy.style().selector('node.city').style('shape', 'hexagon');
	let node1 = g.getNodes()[1];
	node.addClass('city');
	node1.addClass('field');
}
function gTest08() {
	initTable();
	let styles = {
		outer: { bg: 'pink', padding: 25 },
		inner: { w: 500, h: 400 },
		node: { bg: 'pink', shape: 'hex' },
		edge: { bg: 'green' }
	};
	let g = new UIGraph(dTable, styles);
	let nids = g.addNodes(10);
	let eids = g.addEdges(10);
	g.cose();
	g.addLayoutControls();
	let nodes = g.getNodes();
	console.log('nodes', nodes[0]);
	g.mStyle(nodes[0], { shape: 'ellipse', bg: 'black' });
}
function gTest09() {
	initTable();
	let [w, h] = [50, 50];
	let styles = {
		outer: { bg: 'pink', padding: 25 },
		inner: { w: 500, h: 400 },
		node: { bg: 'pink', shape: 'hex', w: w, h: h },
		edge: { bg: 'green' }
	};
	let g = new UIGraph(dTable, styles);
	let [rows, topcols] = [5, 3];
	let total = hex1Count(rows, topcols);
	console.log('for rows', rows, 'and cols', topcols, 'need', total, 'nodes')
	let nids = g.addNodes(total);
	g.hex1(rows, topcols, w + 4, h + 4);
	let indices = hex1Indices(rows, topcols);
	console.log('indices', indices);
	let ids = g.getNodeIds();
	console.log('node ids:', ids);
	let di = {};
	for (let i = 0; i < ids.length; i++) {
		let [row, col] = [indices[i].row, indices[i].col];
		let id = ids[i];
		lookupSet(di, [row, col], id);
		g.setProp(id, 'row', row);
		g.setProp(id, 'col', col);
		g.setProp(id, 'label', `${row},${col}`);
	}
	let labels = g.getNodes().map(x => x.data().label);
	console.log('labels', labels);
	let label = g.cy.getElementById(ids[1]).data('label');
	for (let i = 0; i < ids.length; i++) {
		let [row, col] = [indices[i].row, indices[i].col];
		let id = ids[i];
		let nid2 = lookup(di, [row, col + 2]); if (nid2) g.addEdge(id, nid2);
		nid2 = lookup(di, [row + 1, col - 1]); if (nid2) g.addEdge(id, nid2);
		nid2 = lookup(di, [row + 1, col + 1]); if (nid2) g.addEdge(id, nid2);
	}
	let deg = g.getDegree(ids[1]);
	let deg1 = g.getDegree(ids[10]);
	let deg2 = g.getDegree(ids[18]);
	console.log('das geht: label', label, deg, deg1, deg2);
}
function gTest10() {
	initTable();
	let [rows, topcols, w, h] = [7, 10, 50, 50];
	let styles = {
		outer: { bg: 'pink', padding: 25 },
		inner: { w: 500, h: 400 },
		node: { bg: 'pink', shape: 'hex', w: w, h: h },
		edge: { bg: 'green' }
	};
	let g = hex1Board(dTable, rows, topcols, styles);
}
function gTest11() {
	let g = createSampleHex1();
	let ids = g.getNodeIds();
	let id = ids[0];
	console.log('size', g.getSize(id), g.cy.getElementById(id).bb());
	let n = g.cy.getElementById(id);
	n.css({ width: '40px', height: '40px' });
	g.zoom(false);
	let bb = g.cy.elements().bb();
	console.log('gesamt graph braucht:', bb)
}
function gTest12() {
	let g = createSampleHex1(21, 11); let ids = g.getNodeIds(); let id = ids[0];
	g.showExtent();
}
function gTest13() {
	let g = createSampleHex1(3, 2, 100, 100); let ids = g.getNodeIds(); let id = ids[0]; g.showExtent();
	let center = g.getProp(id, 'center');
	console.log('center prop', center);
	center = g.posDict['preset'][id];
	console.log('center', center);
	let size = g.getSize(id);
	console.log('size', size);
	let pN = { x: center.x, y: size.y1 };
	let node = g.getNode(id);
	let b = node.renderedBoundingBox();
	pN = { x: b.x1 + b.w / 2, y: b.y1 };
	let nNew = g.addNode({ width: 25, height: 25 }, pN);
	console.log('new node', nNew);
	let n1 = g.getNode(nNew);
	n1.css('background-color', 'blue');
	let st = { bg: 'red', shape: 'ellipse', w: 25, h: 25 };
	let st1 = mStyleToCy(st);
	n1.css(st1);
}
function guest_update() {
	assertion(isdef(Z.fen), 'no fen');
	show_status();
	let mydata = firstCond(Z.playerdata, x => x.name == Clientdata.uid);
	if (isdef(mydata) && isdef(mydata.state) && isNumber(mydata.state.green)) {
		console.log('mydata.state', mydata.state);
		assertion(isdef(mydata.state), 'no state');
		for (const k of ['green', 'red']) {
			assertion(isNumber(mydata.state[k]), 'NAN state[' + k + ']');
			Clientdata.state[k] = Math.ceil((mydata.state[k] + Clientdata.state[k]) / 2);
		}
	}
	for (const k in Z.fen) {
		set_new_goal(k, Z.fen[k]);
	}
	autopoll();
}
function gZone(d, gid, vAnchor, hAnchor, wPercent, hPercent, bg, fg) {
	let svg1 = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
	let wd = d.style.width;
	let hd = d.style.height;
}
//#endregion

//#region H

function h2rgb(h) {
  let r = Math.abs(h * 6 - 3) - 1;
  let g = 2 - Math.abs(h * 6 - 2);
  let b = 2 - Math.abs(h * 6 - 4);
  return saturate(float3(r, g, b));
}
function hackPhaseAndPlayerTest(msg) {
  testHelpers(msg);
  let res = stringAfterLast(msg, 'Beginning ');
  let phase = stringBefore(res, ' ');
  testHelpers(res, 'phase=' + phase);
  let res1 = stringAfter(res, '<br>');
  let player = stringBefore(res1, ' ');
  testHelpers(res1, 'player=' + player);
}
function hallo(control, map) {
  control.on('routeselected', function (e) {
    var coord = e.route.coordinates;
    var instr = e.route.instructions;
    L.geoJson(getInstrGeoJson(instr, coord)).addTo(map);
  });
}
function halloIchZeichneJetzt() {
  let isDrawing = false;
  let x = 0;
  let y = 0;
  const canvas = document.getElementById('sheet');
  let r = getRect(G.clientBoard.dOuter); r.left = r.x; r.top = r.y;
  console.log('rectBoard', r);
  canvas.width = r.w;
  canvas.height = r.h;
  var context = canvas.getContext('2d');
  canvas.onmousedown = e => {
    x = e.offsetX;
    y = e.offsetY;
    isDrawing = true;
  };
  canvas.onmousemove = e => {
    if (isDrawing === true) {
      drawLine(context, x, y, e.offsetX, e.offsetY);
      x = e.offsetX;
      y = e.offsetY;
    }
  };
  canvas.onmouseup = e => {
    if (isDrawing === true) {
      drawLine(context, x, y, e.offsetX, e.offsetY);
      x = 0;
      y = 0;
      isDrawing = false;
    }
  };
  var socket = io();
  socket.on('update_canvas', function (data) {
    let { x1, y1, x2, y2, color } = JSON.parse(data);
    drawLine(context, x1, y1, x2, y2, color, true);
  });
  function drawLine(context, x1, y1, x2, y2, color = selected_color, from_server = false) {
    if (!from_server)
      socket.emit('update_canvas', JSON.stringify({ x1, y1, x2, y2, color }));
    context.beginPath();
    context.strokeStyle = color;
    context.lineWidth = 5;
    context.lineCap = 'round'
    context.moveTo(x1, y1);
    context.lineTo(x2, y2);
    context.stroke();
    context.closePath();
  }
}
function hand_select() {
  let res = prompt('enter player names: ');
  let parts = splitAtAnyOf(res, ' ,');
  let list = [];
  for (const p of parts) {
    let name = p.toLowerCase().trim();
    if (isdef(DB.users[name])) addIf(list, name);
  }
  list.sort(); list.unshift(Session.cur_user);
  populate_players(list);
}
function handLayout(n, R) {
  let uis = n.children.map(x => R.uiNodes[x].ui);
  let area = n.uid;
  let ch0 = R.uiNodes[n.children[0]];
  let size = ch0.params.size;
  console.log('I am in handLayout!!!!!!!!!!!!!!')
  if (nundef(size)) size = { w: 70, h: 110 };
  let [w, h, gap] = [size.w, size.h, 4];
  if (isEmpty(uis)) return [0, 0];
  let x = y = gap;
  let ov = n.params.overlap;
  ov /= 100;
  if (nundef(ov) || isNaN(ov)) ov = .20;
  let overlap = ov * w;
  let dParent = mBy(area);
  dParent.style.position = 'relative';
  console.log('_______________', x, y, gap, w, ov)
  uis.map(d => {
    mAppend(dParent, d);
    d.style.position = 'absolute';
    d.style.borderRadius = '12px';
    d.style.padding = '4px';
    mPos(d, x, y);
    x += overlap;
  });
  let sz = { w: x - overlap + w + gap, h: y + h + gap };
  console.log('x', x, 'w', w, 'y', y, 'h', h, 'gap', gap, 'sz', sz)
  dParent.style.minHeight = (sz.h) + 'px';
  dParent.style.minWidth = (sz.w) + 'px';
  return sz;
}
function handLayout_Wrapper(n, R) {
  let uis = n.children.map(x => R.uiNodes[x].ui.parentNode);
  let area = n.uid;
  let ch0 = R.uiNodes[n.children[0]];
  let size = ch0.params.size;
  let [w, h, gap] = [size.w, size.h, 4];
  if (isEmpty(uis)) return [0, 0];
  let x = y = gap;
  let ov = n.params.overlap / 100;
  if (nundef(ov)) ov = .20;
  console.log('overlap', ov, n.params);
  let overlap = .1 * w;
  let dParent = mBy(area);
  dParent.style.position = 'relative';
  uis.map(d => {
    mAppend(dParent, d);
    d.style.position = 'absolute';
    mPos(d, x, y);
    x += overlap;
  });
  let sz = { w: x - overlap + w + gap, h: y + h + gap };
  console.log('x', x, 'w', w, 'y', y, 'h', h, 'gap', gap, 'sz', sz)
  dParent.style.minHeight = (sz.h) + 'px';
  dParent.style.minWidth = (sz.w) + 'px';
  return sz;
}
function handle_bid() {
  let [z, A, fen, uplayer, ui] = [Z, Z.A, Z.fen, Z.uplayer, UI];
  let oldbid = jsCopy(fen.oldbid);
  let bid = jsCopy(fen.newbid);
  let ranks = '23456789TJQKA';
  bid = normalize_bid(bid);
  let higher = is_bid_higher_than(bid, oldbid);
  if (bid[2] == 0) bid[2] = '_';
  if (!higher) {
    select_error('the bid you entered is not high enough!');
  } else {
    fen.lastbid = fen.players[uplayer].lastbid = bid;
    fen.lastbidder = uplayer;
    delete fen.oldbid; delete fen.newbid;
    Z.turn = [get_next_player(Z, uplayer)];
    take_turn_fen();
  }
}
function handle_command(cmd) {
  switch (cmd) {
    case 'clear': G.selist = clear_select(G.selist); toolbar_check(); break;
    case 'next': push_hist(); inc_g_index(); break;
    case 'back': pop_hist(); dec_g_index(); break;
    default: console.log('do not know how to handle ***', cmd, '***'); break;
  }
  console.log('history', G.hist)
  console.log('current selection', G.selist.map(x => x.name));
}
function handle_connect(id) { console.log('connected', id); io.emit('message', 'someone logged in!'); }
function handle_disconnect(x) { console.log('disconnected', x); io.emit('message', x); }
function handle_drag_and_drop(e) {
  if (e.type == "dragover") {
    e.preventDefault();
    mClass(e.target, "dragging");
  } else if (e.type == "dragleave") {
    mClassRemove(e.target, "dragging");
  } else if (e.type == "drop") {
    let target = e.target;
    let id = target.id;
    mClassRemove(e.target, "dragging");
    console.log('===>dropped on target:', e.target);
    e.preventDefault();
    DA.imageChanged = true;
    mClassRemove(e.target, "dragging");
    mDropImage(e, e.target);
  } else {
    mClassRemove(e.target, "dragging");
  }
}
function handle_gamestate(gamestate) {
  if (!in_game_screen) {
    return;
  }
  gamestate = JSON.parse(gamestate);
  requestAnimationFrame(() => paint_game(gamestate));
}
function handle_gehtHoch() {
  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];
  let [bid, bidder] = [fen.lastbid, fen.lastbidder];
  let diff = calc_bid_minus_cards(fen, bid);
  let aufheber = uplayer;
  let loser = diff > 0 ? bidder : aufheber;
  let war_drin = fen.war_drin = diff <= 0;
  let loser_handsize = inc_handsize(fen, loser);
  new_deal(fen);
  let nextplayer;
  if (loser_handsize > Z.options.max_handsize) {
    nextplayer = get_next_player(Z, loser)
    let plorder = fen.plorder = remove_player(fen, loser);
  } else {
    nextplayer = loser;
  }
  fen.loser = loser; fen.bidder = bidder; fen.aufheber = aufheber;
  bluff_change_to_ack_round(fen, nextplayer);
  take_turn_fen();
}
function handle_message(x) {
  console.log('from server:', x.msg);
}
function handle_result(result, cmd) {
  if (verbose) console.log('cmd', cmd, '\nresult', result);
  if (result.trim() == "") return;
  let obj;
  try { obj = JSON.parse(result); } catch { console.log('ERROR:', result); }
  if (Clientdata.AUTORESET) { Clientdata.AUTORESET = false; if (result.auto == true) { console.log('message bounced'); return; } }
  DA.result = jsCopy(obj);
  processServerdata(obj, cmd);
  switch (cmd) {
    case "assets": load_assets(obj); start_with_assets(); break;
    case "users": show_users(); break;
    case "tables": show_tables(); break;
    case "delete_table":
    case "delete_tables": show_tables(); break;
    case "table1":
      update_table();
      console.log('cmd', cmd)
      console.log('obj', obj)
      for (const k in obj) { if (isLiteral(obj[k])) { console.log(k, obj[k]); } }
      clear_timeouts();
      gamestep();
      break;
    case "gameover":
    case "table":
    case "startgame":
      update_table();
      if (Z.skip_presentation) { Z.func.state_info(mBy('dTitleLeft')); autopoll(); return; }
      clear_timeouts();
      gamestep();
      break;
  }
}
function handle_result_orig(result, type) {
  if (result.trim() == "") return;
  var obj = JSON.parse(result);
  if ('contacts chats games play account'.includes(type)) Session.cur_menu = type;
  switch (obj.data_type) {
    case "user_info":
      ensure_assets_old(obj);
      start_with_basic_assets();
      break;
    case "contacts":
      var inner_left_panel = mBy("inner_left_panel");
      inner_left_panel.innerHTML = createContactsContent(obj.myusers, obj.msgs);
      Session.others = obj.myusers.map(x => x.id);
      for (const u of obj.myusers) { add_live_user(u); }
      break;
    case "games":
      ensure_assets(obj);
      mBy('inner_left_panel').innerHTML = createGamesContent(dict2list(DB.games), obj.tables);
      mCenterCenterFlex(mBy('game_menu'));
      break;
    case "chats":
      if (isEmpty(Session.cur_chatter)) Session.cur_chatter = obj.other.username;
      console.log('CURRENT_CHAT_USER', Session.cur_chatter);
      SEEN_STATUS = false;
      var inner_left_panel = mBy("inner_left_panel");
      inner_left_panel.innerHTML = obj.mydata;
      inner_left_panel.innerHTML = createMessageContent(obj.messages, obj.me, obj.other);
      var messages_holder = mBy("messages_holder");
      setTimeout(function () {
        messages_holder.scrollTo(0, messages_holder.scrollHeight);
        var message_text = mBy("message_text");
        message_text.focus();
      }, 100);
      break;
    case "play":
      ensure_assets(obj);
      game_resume_or_start();
      break;
    case 'account':
      mBy("inner_left_panel").innerHTML = is_online() ? createAccountContent(obj.message) : createAccountContentNoDD(obj.message);
      break;
    case "send_message":
      sent_audio.play();
      get_chat();
      break;
    case "dbsave":
      break;
    case "send_image":
      alert(obj.message);
      get_chat();
      break;
    case "chats_refresh":
      SEEN_STATUS = false;
      var messages_holder = mBy("messages_holder");
      messages_holder.innerHTML = obj.messages;
      if (typeof obj.new_message != 'undefined') {
        if (obj.new_message) {
          received_audio.play();
          setTimeout(function () {
            messages_holder.scrollTo(0, messages_holder.scrollHeight);
            var message_text = mBy("message_text");
            message_text.focus();
          }, 100);
        }
      }
      break;
    case 'save_account':
      throw ("NEEEEEEEEEEEEEEEEEIIIIIIIIIIIIIIIIIIIIIIIIIN");
      if (obj.changed) window.location = "index.html?user=" + obj.message.username;
      else console.log('STILL SAME USERNAME', obj.message.username);
      break;
  }
}
function handle_settings(x) {
  console.log('message from server:', x.msg);
  settings = x.settings;
  defaults = x.defaults;
  console.log('settings:', settings);
  console.log('defaults:', defaults);
}
function handle_update(x) { console.log('got update', x); io.emit('update', x); }
function handleAction(x) {
  return [[x]];
}
function handleClientIdSendLogin(data) {
  logClientReceive('clientId', data);
  ClientId = data.clientId;
  sendLogin(valf(Username, 'hansi'));
}
function handleDB(data) {
  DB = data.DB;
  setUserData(Username);
  enterLobby();
}
function handleDbUpdate(data) { logClientReceive('dbUpdate', data); DB.standardSettings = data.standardSettings; }
function handleGameCode(gameCode) {
  gameCodeDisplay.innerText = gameCode;
}
function handleGameOver(data) {
  if (!gameActive) {
    return;
  }
  data = JSON.parse(data);
  gameActive = false;
  if (data.winner === playerNumber) {
    alert('You Win!');
  } else {
    alert('You Lose :(');
  }
}
function handleGameState(data) { logClientReceive('gameState', data); G.presentGameState(data); }
function handleHide(data) { hideMouseAvatar(data.username); }
function handleInitialPosition(data) {
  console.log('initial position:', data);
}
function handleListOfConstants(lst, n1, area, R) {
  for (const oid1 of lst) {
    let o1 = R.getO(oid1);
    let key = keysForOids[oid1];
    let ntree, nui;
    ntree = instantOidKey(oid1, key, n1.uid, R);
    nui = recUi(ntree, n1.uid, R, oid1, key);
  }
}
function handleListOfObjectIds(lst, n1, area, R) {
  createPanelParentOfObjects(lst, n1, area, R);
  let keysForOids = findOrCreateKeysForObjTypes(lst, R);
  for (const oid1 of lst) {
    let o1 = R.getO(oid1);
    let key = keysForOids[oid1];
    let ntree, nui;
    ntree = instantOidKey(oid1, key, n1.uid, R);
    nui = recUi(ntree, R, n1.uid, oid1, key);
  }
}
function handleMessage(data) {
  if (isdef(data.data)) data = data.data;
  logClientReceive('userMessage', data);
  if (isString(data)) {
    data.type = messageTypes.LEFT;
  } else if (data.author === U.username) {
    data.type = messageTypes.RIGHT;
  } else {
    data.type = messageTypes.LEFT;
  }
  messages.push(data);
  displayMessages();
  let chatWindow = mBy('dLobby')
  chatWindow.scrollTop = chatWindow.scrollHeight;
}
function handleMouse(data) {
  let [x, y] = [data.x, data.y];
  x += $('#dFieldArea').offset().left - $(window).scrollLeft();
  y += $('#dFieldArea').offset().top - $(window).scrollTop();
  moveAvatar(data.username, x, y);
}
function handleSet(x) {
  let irgend = x.map(expand1_99);
  let res = stripSet(irgend);
  return res;
}
function handleShow(data) { showMouseAvatar(data.username); }
function handleTooManyPlayers() {
  reset();
  alert('This game is already in progress');
}
function handleTuple(x) {
  let irgend = x.map(expand1_99);
  return multiCartesi(...irgend);
}
function handleUnknownCode() {
  reset();
  alert('Unknown Game Code')
}
function handleUserJoined(data) {
  logClientReceive('userJoined', data.username)
}
function handleUserLeft(data) {
  logClientReceive('userLeft', data.id)
}
function handleUserMessage(data) {
  logClientReceive('userMessage', data.username);
}
function has_at_most_n_jolly(j, n = 1) { return j.filter(x => is_jolly(x)).length <= n; }
function has_farm(uname) { return firstCond(UI.players[uname].buildinglist, x => x.type == 'farm'); }
function has_jolly(j) { return firstCond(j, x => is_jolly(x)); }
function has_schweine(fenbuilding) { return !isEmpty(fenbuilding.schweine); }
function hasChildren(n) {
  let ch = RCONTAINERPROP[n.type];
  if (nundef(ch)) ch = 'ch';
  return isdef(n[ch]);
}
function hasClickedUI() { uiPaused |= hasClickedMask; }
function hasDuplicate(arr, efunc) {
  let di = {};
  if (nundef(efunc)) efunc = x => { return x === ' ' };
  let i = -1;
  for (const a of arr) {
    i += 1;
    if (efunc(a)) continue;
    if (a in di) return { i: i, val: a };
    di[a] = true;
  }
  return false;
}
function hasDuplicates(list) {
  let res = [];
  for (let i = 0; i < list.length; i++) {
    for (let j = i + 1; j < list.length; j++) {
      if (list[i] == list[j]) { res.push(list[i]) }
    }
  }
  return res.length > 0 ? res : false;
}
function HASH_CA() { brd_posKey ^= CastleKeys[brd_castlePerm]; }
function HASH_EP() { brd_posKey ^= PieceKeys[brd_enPas]; }
function HASH_PCE(pce, sq) { brd_posKey ^= PieceKeys[pce * 120 + sq]; }
function HASH_SIDE() { brd_posKey ^= SideKey; }
function hasId(o) { return isdef(o._id); }
function hasSameProps(o1, o2) {
  let diff = propDiff(o1, o2);
  return !diff.hasChanged;
}
function hasWhiteSpace(s) { return /\s/g.test(s); }
function helleFarbe(contrastTo, minDiff = 25, mod = 30, start = 0) {
  let wheel = getHueWheel(contrastTo, minDiff, mod, start);
  let hue = chooseRandom(wheel);
  let hsl = colorHSLBuild(hue, 100, 50);
  return hsl;
}
function hex1Board(dParent, rows, topcols, styles = {}) {
  let g = new UIGraph(dParent, styles);
  let [w, h] = [valf(lookup(styles, ['node', 'w']), 50), valf(lookup(styles, ['node', 'h']), 50)];
  let total = hex1Count(rows, topcols);
  let nids = g.addNodes(total);
  g.hex1(rows, topcols, w + 4, h + 4);
  let indices = hex1Indices(rows, topcols);
  let ids = g.getNodeIds();
  let di = {};
  for (let i = 0; i < ids.length; i++) {
    let [row, col] = [indices[i].row, indices[i].col];
    let id = ids[i];
    lookupSet(di, [row, col], id);
    g.setProp(id, 'row', row);
    g.setProp(id, 'col', col);
    g.setProp(id, 'label', `${row},${col}`);
  }
  for (let i = 0; i < ids.length; i++) {
    let [row, col] = [indices[i].row, indices[i].col];
    let id = ids[i];
    let nid2 = lookup(di, [row, col + 2]); if (nid2) g.addEdge(id, nid2);
    nid2 = lookup(di, [row + 1, col - 1]); if (nid2) g.addEdge(id, nid2);
    nid2 = lookup(di, [row + 1, col + 1]); if (nid2) g.addEdge(id, nid2);
  }
  let byrc = {};
  for (const r in di) {
    byrc[r] = {};
    for (const c in di[r]) {
      byrc[r][c] = g.getNode(di[r][c]).data();
    }
  }
  g.di = di;
  g.byrc = byrc;
  g.rc = (i, j, f) => (isdef(f)) ? f(g.getNode(di[i][j])) : g.getNode(di[i][j]);
  return g;
}
function hex1Centers(rows, cols, wCell = 100, hCell = null) {
  let colarr = _calc_hex_col_array(rows, cols);
  let maxcols = arrMax(colarr);
  if (nundef(hCell)) hCell = (hCell / .866);
  let hline = hCell * .75;
  let offX = wCell / 2, offY = hCell / 2;
  let centers = [];
  let x = 0; y = 0;
  for (let r = 0; r < colarr.length; r++) {
    let n = colarr[r];
    for (let c = 0; c < n; c++) {
      let dx = (maxcols - n) * wCell / 2;
      let dy = r * hline;
      let center = { x: dx + c * wCell + offX, y: dy + offY };
      centers.push(center);
    }
  }
  return [centers, wCell * maxcols, hCell / 4 + rows * hline];
}
function hex1Count(rows, topcols) {
  let colarr = _calc_hex_col_array(rows, topcols);
  let total = 0;
  for (let r = 0; r < colarr.length; r++) { total += colarr[r]; }
  return total;
}
function hex1Indices(rows, topcols) {
  let colarr = _calc_hex_col_array(rows, topcols);
  let iStart = Math.floor(rows / 2);
  let inc = -1;
  let res = [];
  for (let r = 0; r < colarr.length; r++) {
    let n = colarr[r];
    for (let c = 0; c < n; c++) {
      let icol = iStart + 2 * c;
      let irow = r;
      res.push({ row: irow, col: icol });
    }
    if (iStart == 0) inc = 1;
    iStart += inc;
  }
  return res;
}
function hex2rgb(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  result = result
    ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    }
    : null;
  if (result) return `rgb(${result.r},${result.g},${result.b})`;
  else return 'rgb(0,0,0)';
}
function hexAToHSLA(H) {
  let ex = /^#([\da-f]{4}){1,2}$/i;
  if (ex.test(H)) {
    let r = 0,
      g = 0,
      b = 0,
      a = 1;
    if (H.length == 5) {
      r = '0x' + H[1] + H[1];
      g = '0x' + H[2] + H[2];
      b = '0x' + H[3] + H[3];
      a = '0x' + H[4] + H[4];
    } else if (H.length == 9) {
      r = '0x' + H[1] + H[2];
      g = '0x' + H[3] + H[4];
      b = '0x' + H[5] + H[6];
      a = '0x' + H[7] + H[8];
    }
    r /= 255;
    g /= 255;
    b /= 255;
    let cmin = Math.min(r, g, b),
      cmax = Math.max(r, g, b),
      delta = cmax - cmin,
      h = 0,
      s = 0,
      l = 0;
    if (delta == 0) h = 0;
    else if (cmax == r) h = ((g - b) / delta) % 6;
    else if (cmax == g) h = (b - r) / delta + 2;
    else h = (r - g) / delta + 4;
    h = Math.round(h * 60);
    if (h < 0) h += 360;
    l = (cmax + cmin) / 2;
    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
    s = +(s * 100).toFixed(1);
    l = +(l * 100).toFixed(1);
    a = (a / 255).toFixed(3);
    return 'hsla(' + h + ',' + s + '%,' + l + '%,' + a + ')';
  } else {
    return 'Invalid input color';
  }
}
function hexBoard(dParent, rows = 13, cols = 5, wHex = 100) {
  let hline = (wHex / .866) * .75;
  dParent = mDiv(dParent, { position: 'relative', w: wHex * cols, h: hline * (rows + .5), display: 'inline-block' });
  let hlist = [];
  let xOffset = 0;
  for (let r = 0; r < rows; r++) {
    let curCols = r % 2 ? cols - 1 : cols;
    let dx = r % 2 ? wHex / 2 : 0;
    dx += xOffset;
    for (let c = 0; c < curCols; c++) {
      let [dOuter, dInner] = oneHex(dParent, wHex, wHex, '#ffffff10');
      mStyleX(dOuter, { position: 'absolute', left: dx + c * wHex, top: r * hline });
      hlist.push(dInner);
    }
  }
  function oneHex(dParent, w, h, bg) {
    let d1 = mDiv(dParent, { w: w, h: h, display: 'inline', position: 'relative' });
    let d2 = mDiv(d1, { w: w, h: h, display: 'inline', position: 'absolute', left: 0, top: 0 });
    let g = aSvgg(d2);
    let wgap = 8, hgap = 0;
    let hex1 = agShape(g, 'hex', w - 2 * wgap, h - 2 * hgap, bg);
    let offx = 16;
    let offy = 20;
    let d3 = mDiv(d1, { w: w, h: h, display: 'inline', position: 'absolute', left: 0, top: 0 });
    let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w: `${100 - offx}%`, h: `${100 - offy}%`, rounding: '50%', display: 'inline', position: 'absolute' });
    return [d1, d4];
  }
  return hlist;
}
function hexBoardNO(dParent, rows = 3, cols = 5, sz = 100) {
  let hline = (sz / .866) * .75;
  dParent = mDiv(dParent, { position: 'relative', w: sz * cols, h: hline * (rows + .5), display: 'inline-block' });
  let fields = [];
  for (let r = 0; r < rows; r++) {
    let curCols = r % 2 ? cols - 1 : cols;
    let dx = r % 2 ? sz / 2 : 0;
    for (let c = 0; c < curCols; c++) {
      let [dOuter, dInner] = oneHex(dParent, sz, sz, 'yellow');
      mStyleX(dOuter, { position: 'absolute', left: dx + c * sz, top: r * hline });
      fields.push(dInner);
    }
    return fields;
  }
  function oneHex(dParent, w, h, bg) {
    let d1 = mDiv(dParent, { w: w, h: h, display: 'inline', position: 'relative' });
    let d2 = mDiv(d1, { w: w, h: h, display: 'inline', position: 'absolute', left: 0, top: 0 });
    let g = aSvgg(d2);
    let wgap = 8, hgap = 0;
    let hex1 = agShape(g, 'hex', w - 2 * wgap, h - 2 * hgap, bg);
    let offx = 16;
    let offy = 20;
    let d3 = mDiv(d1, { w: w, h: h, rounding: '50%', display: 'inline', position: 'absolute', left: 0, top: 0 });
    let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w: `${100 - offx}%`, h: `${100 - offy}%`, rounding: '50%', bg: 'random', display: 'inline', position: 'absolute' });
    return [d1, d4];
  }
}
function hexBoardTests() {
  let w = window.innerWidth;
  let sz = 100;
  let cols = math.floor(w / 100);
  let dBoard = mDiv(dTable);
  mCenterFlex(dTable);
  hexBoard(dBoard, 5, cols - 1, 100);
}
function hexCenters(rows, cols, wCell = 100, hCell) {
  if (nundef(hCell)) hCell = (hCell / .866);
  let hline = hCell * .75;
  let offX = wCell / 2, offY = hCell / 2;
  let centers = [];
  let startSmaller = Math.floor(rows / 2) % 2 == 1;
  let x = 0; y = 0;
  for (let r = 0; r < rows; r++) {
    let isSmaller = startSmaller && r % 2 == 0 || !startSmaller && r % 2 == 1;
    let curCols = isSmaller ? cols - 1 : cols;
    let dx = isSmaller ? wCell / 2 : 0;
    dx += offX;
    for (let c = 0; c < curCols; c++) {
      let center = { x: dx + c * wCell, y: offY + r * hline };
      centers.push(center);
    }
  }
  return [centers, wCell * cols, hCell / 4 + rows * hline];
}
function hexCornerNodes(g) {
  let nodes = g.getNodes();
  let centers = nodes.map(x => x.data('center'));
  let vertices = getCornerVertices(centers);
  for (const f of nodes) {
    let center = f.data('center');
    console.log('center', center)
  }
}
function hexDigitToDecimal(hex) {
  let n = firstNumber(hex);
  if (nundef(n)) {
    hex = hex.toLowerCase();
    return hex == 'f' ? 15 : hex == 'e' ? 14 : hex == 'd' ? 13 : hex == 'c' ? 12 : hex == 'b' ? 11 : 10;
  } else return n;
}
function hexgrid(id, rows, topcols, wFieldTotal, wFieldGap = 4, ipal = 2, visibility = ['board', 'fields'], interactivity = 'hover') {
  visualStructures[id] = [];
  rows = rows % 2 != 0 ? rows : rows + 1;
  let cols = topcols;
  let colarr = calc_hex_col_array(rows, cols);
  let maxcols = Math.max(...colarr);
  let wField = wFieldTotal;
  let hField = (2 * wField) / 1.73;
  let w = wField * maxcols;
  let h = hField * rows * 0.75 + hField / 4;
  let ilist = [];
  let clist = [];
  let fields = {};
  let imiddleRow = (rows - 1) / 2;
  for (let irow = 0; irow < colarr.length; irow++) {
    let colstart = maxcols - colarr[irow];
    fields[irow] = {};
    let y = hField * 0.75 * (irow - imiddleRow);
    for (let j = 0; j < colarr[irow]; j++) {
      var icol = colstart + 2 * j;
      let x = (icol * wField) / 2 + wField / 2 - w / 2;
      ilist.push({ row: irow, col: icol });
      clist.push({ x: x, y: y });
      fields[irow][icol] = { x: x, y: y };
      x += wField;
    }
  }
  for (option of visibility) {
    if (option == 'board') {
      let msField = new MS(id, 'g')
        .setbg(getpal(ipal))
        .rect({ w: w + 4, h: h + 4 })
        .draw();
      msField.tag('layout', 'hex');
      msField.tag('points', fields);
      visualStructures[id].push(msField);
    }
    ipal += 1;
    if (option == 'fields') {
      for (const r in fields) {
        let polyRow = fields[r];
        for (const c in polyRow) {
          let field = fields[r][c];
          let msField = visual('hex', { id: id + '_' + r + '_' + c, w: wField - wFieldGap, x: field.x, y: field.y }).setbg(getpal(ipal));
          msField.tag('row', r);
          msField.tag('col', c);
          fields[r][c].ms = msField;
          visualStructures[id].push(msField);
        }
      }
    }
  }
  return (r, c) => {
    testHexgrid(r, c);
    return {
      x: fields[r][c] ? fields[r][c].x : null,
      y: fields[r][c] ? fields[r][c].y : null,
      id: id
    };
  };
}
function hexGrid(soDict, loc, condList) {
  let [idBoard, sBoard] = findMatch(soDict, condList);
  return _hexGrid(loc, idBoard, sBoard, soDict);
}
function hexGrid_old(soDict, loc, sBoard, idBoard) {
  let res = _hexGrid(loc, idBoard, sBoard, soDict);
  timit.showTime('old hexGrid done!');
  return res;
}
function hexStringToDecimal(hex) {
  let len = hex.length;
  let fact = 1;
  let num = 0;
  for (let i = len - 1; i >= 0; i--) {
    num += hexDigitToDecimal(hex[i]) * fact;
    fact *= 16;
  }
  return num;
}
function hextest() {
  let [centers, wCont, hCont] = hexCenters(5, 4, 100, 100);
  console.log('centers', centers);
  let dCont = mDiv(dMain, { position: 'relative', w: wCont, h: hCont });
  for (const pt of centers) {
    let d = drawShape('hex', dCont);
    mCenterAt(d, pt.x, pt.y);
  }
  return dCont;
}
function hexTest00() {
  let dParent = dTable;
  let styles = { margin: 3 };
  styles = { padding: 4 };
  let h1 = mHex00(dParent, styles);
}
function hexTest01() {
  let dParent = dTable;
  let styles = { margin: 3 };
  styles = { padding: 4 };
  let h1 = mHex01(dParent, styles);
  let h2 = mHex01(dParent, styles);
}
function hexTest02() {
  let dParent = dTable;
  dParent = mDiv(dTable, { bg: 'random', w: 800, h: 500 });
  mCenterFlex(dParent);
  let whexBrut = 100;
  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * 4, h: 300, bg: 'violet', display: 'inline-block' });
  let hlist = [];
  for (let i = 0; i < 4; i++) {
    let h = mHex02(dParent, whexBrut);
    mStyleX(h, { position: 'absolute', left: i * whexBrut, top: 0 });
    hlist.push(h);
  }
}
function hexTest03() {
  let dParent = dTable;
  dParent = mDiv(dTable, { bg: 'random', w: 800, h: 500 });
  mCenterFlex(dParent);
  let whexBrut = 100;
  let hline = (whexBrut / .866) * .75;
  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * 4, h: 300, bg: 'violet', display: 'inline-block' });
  let hlist = [];
  for (let i = 0; i < 4; i++) {
    let h = mHex03(dParent, whexBrut, 'yellow');
    mStyleX(h, { position: 'absolute', left: i * whexBrut, top: 0 });
    hlist.push(h);
  }
  for (let i = 0; i < 3; i++) {
    let h = mHex03(dParent, whexBrut, 'yellow');
    mStyleX(h, { position: 'absolute', left: whexBrut / 2 + i * whexBrut, top: hline });
    hlist.push(h);
  }
}
function hexTest04() {
  let dParent = dTable;
  let rows = 5, cols = 5;
  let whexBrut = 100;
  let hline = (whexBrut / .866) * .75;
  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * cols, h: hline * (rows + .5), display: 'inline-block' });
  let hlist = [];
  for (let r = 0; r < rows; r++) {
    let curCols = r % 2 ? cols - 1 : cols;
    let dx = r % 2 ? whexBrut / 2 : 0;
    for (let c = 0; c < curCols; c++) {
      let h = mHex04(dParent, whexBrut, 'yellow');
      mStyleX(h, { position: 'absolute', left: dx + c * whexBrut, top: r * hline });
      hlist.push(h);
    }
  }
}
function hexTest05() {
  let dParent = dTable;
  let rows = 4, cols = 9;
  let whexBrut = 100;
  let hline = (whexBrut / .866) * .75;
  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * cols, h: hline * (rows + .5), display: 'inline-block' });
  let hlist = [];
  for (let r = 0; r < rows; r++) {
    let curCols = r % 2 ? cols - 1 : cols;
    let dx = r % 2 ? whexBrut / 2 : 0;
    for (let c = 0; c < curCols; c++) {
      let h = mHex05(dParent, whexBrut, 'yellow');
      mStyleX(h, { position: 'absolute', left: dx + c * whexBrut, top: r * hline });
      hlist.push(h);
    }
  }
}
function hexTest06() {
  let sz = 200;
  let d1 = mDiv(dTable, { w: sz, h: sz, bg: 'random', display: 'inline', position: 'relative' });
  let d2 = mDiv(d1, { w: 200, h: 200, bg: 'random', display: 'inline', position: 'absolute', left: 0, top: 0 });
  let g = aSvgg(d2);
  let gap = 2;
  let hex1 = agShape(g, 'hex', sz - 2 * gap, sz - 2 * gap, 'red');
  let offx = 10;
  let offy = 20;
  let d3 = mDiv(d1, { w: 200, h: 200, rounding: '50%', display: 'inline', position: 'absolute', left: 0, top: 0 });
  let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w: `${100 - offx}%`, h: `${100 - offy}%`, rounding: '50%', bg: 'random', display: 'inline', position: 'absolute' });
  return d4;
}
function hexTest07() {
  let dParent = dTable;
  let rows = 4, cols = 5;
  let whexBrut = 100;
  let hline = (whexBrut / .866) * .75;
  dParent = mDiv(dParent, { position: 'relative', w: whexBrut * cols, h: hline * (rows + .5), display: 'inline-block' });
  let hlist = [];
  for (let r = 0; r < rows; r++) {
    let curCols = r % 2 ? cols - 1 : cols;
    let dx = r % 2 ? whexBrut / 2 : 0;
    for (let c = 0; c < curCols; c++) {
      let h = oneHex(dParent, whexBrut, whexBrut, 'yellow');
      mStyleX(h, { position: 'absolute', left: dx + c * whexBrut, top: r * hline });
      hlist.push(h);
    }
  }
  function oneHex(dParent, w, h, bg) {
    let d1 = mDiv(dParent, { w: w, h: h, display: 'inline', position: 'relative' });
    let d2 = mDiv(d1, { w: w, h: h, display: 'inline', position: 'absolute', left: 0, top: 0 });
    let g = aSvgg(d2);
    let wgap = 8, hgap = 0;
    let hex1 = agShape(g, 'hex', w - 2 * wgap, h - 2 * hgap, bg);
    let offx = 16;
    let offy = 20;
    let d3 = mDiv(d1, { w: w, h: h, rounding: '50%', display: 'inline', position: 'absolute', left: 0, top: 0 });
    let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w: `${100 - offx}%`, h: `${100 - offy}%`, rounding: '50%', bg: 'random', display: 'inline', position: 'absolute' });
    return d1;
  }
}
function hexTest08(dParent, rows = 13, cols = 5, wHex = 100) {
  let hline = (wHex / .866) * .75;
  dParent = mDiv(dParent, { position: 'relative', w: wHex * cols, h: hline * (rows + .5), display: 'inline-block' });
  let hlist = [];
  let xOffset = 0;
  for (let r = 0; r < rows; r++) {
    let curCols = r % 2 ? cols - 1 : cols;
    let dx = r % 2 ? wHex / 2 : 0;
    dx += xOffset;
    for (let c = 0; c < curCols; c++) {
      let [dOuter, dInner] = oneHex(dParent, wHex, wHex, '#ffffff10');
      mStyleX(dOuter, { position: 'absolute', left: dx + c * wHex, top: r * hline });
      hlist.push(dInner);
    }
  }
  function oneHex(dParent, w, h, bg) {
    let d1 = mDiv(dParent, { w: w, h: h, display: 'inline', position: 'relative' });
    let d2 = mDiv(d1, { w: w, h: h, display: 'inline', position: 'absolute', left: 0, top: 0 });
    let g = aSvgg(d2);
    let wgap = 8, hgap = 0;
    let hex1 = agShape(g, 'hex', w - 2 * wgap, h - 2 * hgap, bg);
    let offx = 16;
    let offy = 20;
    let d3 = mDiv(d1, { w: w, h: h, display: 'inline', position: 'absolute', left: 0, top: 0 });
    let d4 = mDiv(d3, { left: `${offx / 2}%`, top: `${offy / 2}%`, w: `${100 - offx}%`, h: `${100 - offy}%`, rounding: '50%', display: 'inline', position: 'absolute' });
    return [d1, d4];
  }
  return hlist;
}
function hextestNewBROKEN() {
  let info = createHexboard2(3, 4, 50);
  console.log('info', info);
  let [centers, maxx, maxy] = [[], 0, 0];
  let [wCell, hCell] = [100, 100];
  for (const item of info.items) {
    if (item.isHexCenter) {
      let [x, y] = [item.x, item.y];
      maxx = Math.max(maxx, x); maxy = Math.max(maxy, y);
      centers.push({ x: x, y: y });
    }
  }
  let wCont = maxx + wCell / 2;
  let hCont = maxy + hCell / 2;
  let resultOfHexCenters = [centers, wCont, hCont];
  console.log('centers', centers);
  let dCont = mDiv(dMain, { position: 'relative', w: wCont, h: hCont, bg: 'pink' });
  for (const pt of centers) {
    let d = drawShape('hex', dCont);
    mCenterAt(d, pt.x, pt.y);
  }
}
function hexToHSL(H) {
  let ex = /^#([\da-f]{3}){1,2}$/i;
  if (ex.test(H)) {
    let r = 0,
      g = 0,
      b = 0;
    if (H.length == 4) {
      r = '0x' + H[1] + H[1];
      g = '0x' + H[2] + H[2];
      b = '0x' + H[3] + H[3];
    } else if (H.length == 7) {
      r = '0x' + H[1] + H[2];
      g = '0x' + H[3] + H[4];
      b = '0x' + H[5] + H[6];
    }
    r /= 255;
    g /= 255;
    b /= 255;
    let cmin = Math.min(r, g, b),
      cmax = Math.max(r, g, b),
      delta = cmax - cmin,
      h = 0,
      s = 0,
      l = 0;
    if (delta == 0) h = 0;
    else if (cmax == r) h = ((g - b) / delta) % 6;
    else if (cmax == g) h = (b - r) / delta + 2;
    else h = (r - g) / delta + 4;
    h = Math.round(h * 60);
    if (h < 0) h += 360;
    l = (cmax + cmin) / 2;
    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
    s = +(s * 100).toFixed(1);
    l = +(l * 100).toFixed(1);
    return 'hsl(' + h + ',' + s + '%,' + l + '%)';
  } else {
    return 'Invalid input color';
  }
}
function hexToRgb(hex) {
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result
    ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    }
    : null;
}
function hFunc(content, funcname, arg1, arg2, arg3) {
  let html = `<a style='color:blue' href="javascript:${funcname}('${arg1}','${arg2}','${arg3}');">${content}</a>`;
  return html;
}
function hide(elem) {
  if (isString(elem)) elem = document.getElementById(elem);
  if (nundef(elem)) return;
  if (isSvg(elem)) {
    elem.setAttribute('style', 'visibility:hidden;display:none');
  } else {
    elem.style.display = 'none';
  }
}
function hide_buildings() {
  let uplayer = Z.uplayer;
  let buildings = UI.players[uplayer].buildinglist;
  for (const b of buildings) {
    for (let i = 1; i < b.items.length; i++) {
      let card = b.items[i];
      if (b.schweine.includes(card)) continue;
      face_down(b.items[i]);
    }
  }
}
function hide_history_popup() { let d = mBy('dHistoryPopup'); if (isdef(d)) { mAppend(UI.dHistoryParent, UI.dHistory); mRemove(d); } }
function hide_motto() { mClear('dMotto') }
function hide_options_popup() { let d = mBy('dOptions'); if (isdef(d)) mRemove(d); }
function hide0(id) { mBy(id).style.display = "none"; }
function hideBoat(id) { let ms = UIS[id]; ms.hide(); ms.o.weg = true; }
function hideCurrent() {
  if (dCurrent) {
    if (dCurrent.id == 'dChat') disappear(mBy('dChatWindow'), DELAY_DISAPPEAR);
    disappear(dCurrent, DELAY_DISAPPEAR);
    dCurrent = null;
    return DELAY_DISAPPEAR;
  } else return 0;
}
function hideElems(idlist) {
  for (const id of idlist) {
    EID[id].ms.hide();
  }
}
function hideEventList() { document.getElementById('events').style.display = 'none'; }
function hideGame() { document.getElementById('R_d_root').style.display = 'none'; }
function hideGameConfig() { document.getElementById('gameConfig').style.display = 'none'; }
function hideInfobox(oid) { let id = makeIdInfobox(oid); if (UIS[id]) UIS[id].hide(); }
function hideJoinConfig() { hide('joinConfig'); }
function hideLoader() { mBy('dLoader').style.display = "none"; }
function hideLobby() { document.getElementById('a_d_lobby').style.display = 'none'; }
function hideLog(pl) { let d = LOG[pl]; if (d) hide(d); }
function hideLogin() { document.getElementById('a_d_login').style.display = 'none'; }
function hideMenu(desc) {
  let d = mBy('div' + desc);
  if (isVisible(d)) {
    let b = mBy('b' + desc);
    hide(d);
    b.innerHTML = '+' + desc[0];
  }
}
function hideMouse() {
  var x = dTable.getElementsByTagName("DIV");
  for (const el of x) { el.prevCursor = el.style.cursor; }
  for (const p of Pictures) {
    mRemoveClass(iDiv(p), 'frameOnHover'); iDiv(p).style.cursor = 'none';
    for (const ch of iDiv(p).children) ch.style.cursor = 'none';
  }
  for (const el of x) { mClass(el, 'noCursor'); }
}
function hideMouseAvatar(username) { hide(getAvatar(username)); }
function hideOuterDoors(house) {
  for (const did of jsCopy(house.doors)) {
    let door = Items[did];
    hide(iDiv(door));
  }
}
function hidePlayer(i) {
  let id;
  id = getidNum(i); hide(id);
  id = getidSpan(i); hide(id);
  id = getidType(i); hide(id);
}
function hideShield() { setTimeout(() => { mBy('dShield').style.display = 'none' }, 500); }
function hideSvg(elem) {
  elem.setAttribute('style', 'visibility:hidden;display:none');
}
function hideTooltip() { $('div#tooltip').css({ display: 'none' }); }
function highAll(oid) { mapSafe('high', getVisuals, oid); }
function highAux(oid) { mapSafe('high', getAuxVisuals, oid); }
function highlight(x) {
  let msList = getVisuals(x);
  for (const ms of msList) {
    ms.high();
  }
}
function highlight_player(uname) { mHigh(`d_${uname}`); mHigh(iDiv(Items[uname])); }
function highlightBoat(id) {
  if (id === null) return;
  if (boatHighlighted) {
    if (boatHighlighted.id == id) return;
    else unhighlightBoat();
  }
  boatHighlighted = UIS[id];
  boatHighlighted.elem.scrollIntoView(false);
  highlightMsAndRelatives(null, boatHighlighted);
  openInfoboxesForBoatOids(boatHighlighted);
}
function highlightContentIds(b) {
  let s = b.innerHTML;
  let ids = s.split(/[ ,:;]+/);
  for (const id of ids) {
    if (id == '_') continue;
    let msList = getVisuals(id);
    for (const ms of msList) ms.high();
  }
}
function highlightMsAndRelatives(ev, mobj, partName) {
  let id = mobj.id;
  mobj.high(partName);
  if (mobj.isa.infobox) bringInfoboxToFront(mobj);
  let relativeIds = id2uids[id];
  if (nundef(relativeIds)) return;
  for (const idRel of relativeIds) {
    let msRel = UIS[idRel];
    msRel.high('title');
  }
}
function highlightNextBoat() {
  if (!boatHighlighted) highlightBoat(getFirstBoatId());
  else {
    let idx = boatHighlighted.o.iTuple + 1;
    highlightBoat(getBoatIdByIdx(boatHighlighted.o.iTuple + 1));
  }
}
function highlightPrevBoat() {
  if (!boatHighlighted) highlightBoat(getLastBoatId()); else highlightBoat(getBoatIdByIdx(boatHighlighted.o.iTuple - 1));
}
function highMain(oid) { mapSafe('high', getVisual, oid); }
function highSelfAndRelatives(uid, R) {
  for (const oid of R.uid2oids[uid]) {
    for (const uid1 of R.oid2uids[oid]) {
      let ui = R.getUI(uid1);
      mHigh(ui);
    }
  }
  let n = R.uiNodes[uid];
  if (n.potentialOverlap) {
    let ui = R.getUI(uid);
    bringToFront(ui);
  }
}
function HintAnimation(sq, ms = 2000) {
  if (GameController.BoardFlipped == BOOL.TRUE) { sq = MIRROR120(sq); }
  $(".Square").each(function (index) {
    if ((RanksBrd[sq] == 7 - Math.round($(this).position().top / 60)) && (FilesBrd[sq] == Math.round($(this).position().left / 60))) {
      animateProperty(this, 'opacity', '1', '0', '1', ms);
    }
  });
}
function hintEngineStart(hintFunc, hintlist, initialDelay) {
  G.hintFunc = hintFunc;
  recShowHints(hintlist, QContextCounter, initialDelay, d => initialDelay + 2000);
}
function horLayout(n, R) {
  console.log('n', n, n.ui);
  let uids = n.children;
  let dims = calcTotalDims(n, uids, R);
  let margin = dims.margin;
  console.log('dims', dims);
  let x = margin;
  let y = margin;
  let uiParent = n.ui;
  uiParent.style.position = 'relative';
  console.log(uiParent);
  for (const ch of uids) {
    let n = R.uiNodes[ch];
    let w = n.size.w;
    let h = n.size.h;
    n.pos = { x: x, y: y };
    let ui = n.ui;
    ui.style.position = 'absolute';
    ui.style.display = 'inline-block';
    ui.style.boxSizing = 'border-box';
    ui.style.left = x + 'px';
    ui.style.top = y + 'px';
    ui.style.margin = 'auto';
    x += w + 2;
  }
  uiParent.style.width = dims.w + 'px';
  uiParent.style.minHeight = dims.h + 'px';
}
function host_update() {
  assertion(isdef(Z.fen), 'no fen');
  check_for_clicks();
  show_status();
}
function houseTest00() {
  let s = '"a a b c" "d d e c" "f g e h"'; console.log(getRandomLetterMapping(s)); console.log('_____\n', s, '\n', getLetterSwapEncoding(s));
}
function howto_close(item) { toggle_fiddle(); }
function howto_open(item) {
  iClear('dTable')
  if (nundef(item)) item = DB.apps.howto;
  dSearch = mBy('dSearch'); mClear(dSearch);
  show_sidebar(Object.keys(CODE.justcode), show_code);
  mStyle(dSearch, { bg: item.color });
  mInputLineWithButtons(dSearch, { Code: filter_codebase, Signatures: filter_sig })
}
function HPLayout() {
  if (isdef(UI.DRR)) UI.DRR.remove();
  mInsert(UI.dRechts, UI.dHistory);
  Clientdata.historyLayout = 'hp';
}
function hRoute(content, route, arg1, arg2, arg3) {
  let html = `<a href="/${route}"`;
  if (isdef(arg1)) html += `/${arg1}`;
  if (isdef(arg2)) html += `/${arg2}`;
  if (isdef(arg3)) html += `/${arg3}`;
  html += `">${content}</a>`;
  return html;
}
function HRPLayout() {
  let dr = UI.dRechts;
  dr.remove();
  let drr = UI.DRR = mDiv(dTable);
  mAppend(drr, UI.dHistory);
  mAppend(dTable, dr);
  Clientdata.historyLayout = 'hrp';
}
function hsl2hsv(hue, sat, light) {
  sat *= light < 0.5 ? light : 1 - light;
  return [
    hue,
    (2 * sat) / (light + sat),
    light + sat
  ];
}
function hsl2rgb(h, s, l) {
  let RGB = h2rgb(h);
  let C = (1 - Math.abs(2 * l - 1)) * s;
  return (RGB - 0.5) * C + l;
}
function HSLAToRGBA(hsla, isPct) {
  let ex = /^hsla\(((((([12]?[1-9]?\d)|[12]0\d|(3[0-5]\d))(\.\d+)?)|(\.\d+))(deg)?|(0|0?\.\d+)turn|(([0-6](\.\d+)?)|(\.\d+))rad)(((,\s?(([1-9]?\d(\.\d+)?)|100|(\.\d+))%){2},\s?)|((\s(([1-9]?\d(\.\d+)?)|100|(\.\d+))%){2}\s\/\s))((0?\.\d+)|[01]|(([1-9]?\d(\.\d+)?)|100|(\.\d+))%)\)$/i;
  if (ex.test(hsla)) {
    let sep = hsla.indexOf(',') > -1 ? ',' : ' ';
    hsla = hsla
      .substr(5)
      .split(')')[0]
      .split(sep);
    if (hsla.indexOf('/') > -1) hsla.splice(3, 1);
    isPct = isPct === true;
    let h = hsla[0],
      s = hsla[1].substr(0, hsla[1].length - 1) / 100,
      l = hsla[2].substr(0, hsla[2].length - 1) / 100,
      a = hsla[3];
    if (h.indexOf('deg') > -1) h = h.substr(0, h.length - 3);
    else if (h.indexOf('rad') > -1) h = Math.round((h.substr(0, h.length - 3) / (2 * Math.PI)) * 360);
    else if (h.indexOf('turn') > -1) h = Math.round(h.substr(0, h.length - 4) * 360);
    if (h >= 360) h %= 360;
    let c = (1 - Math.abs(2 * l - 1)) * s,
      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),
      m = l - c / 2,
      r = 0,
      g = 0,
      b = 0;
    if (0 <= h && h < 60) {
      r = c;
      g = x;
      b = 0;
    } else if (60 <= h && h < 120) {
      r = x;
      g = c;
      b = 0;
    } else if (120 <= h && h < 180) {
      r = 0;
      g = c;
      b = x;
    } else if (180 <= h && h < 240) {
      r = 0;
      g = x;
      b = c;
    } else if (240 <= h && h < 300) {
      r = x;
      g = 0;
      b = c;
    } else if (300 <= h && h < 360) {
      r = c;
      g = 0;
      b = x;
    }
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);
    let pctFound = a.indexOf('%') > -1;
    if (isPct) {
      r = +((r / 255) * 100).toFixed(1);
      g = +((g / 255) * 100).toFixed(1);
      b = +((b / 255) * 100).toFixed(1);
      if (!pctFound) {
        a *= 100;
      } else {
        a = a.substr(0, a.length - 1);
      }
    } else if (pctFound) {
      a = a.substr(0, a.length - 1) / 100;
    }
    return 'rgba(' + (isPct ? r + '%,' + g + '%,' + b + '%,' + a + '%' : +r + ',' + +g + ',' + +b + ',' + +a) + ')';
  } else {
    return 'Invalid input color';
  }
}
function hslToHex(h, s, l) {
  l /= 100;
  const a = s * Math.min(l, 1 - l) / 100;
  const f = n => {
    const k = (n + h / 30) % 12;
    const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return Math.round(255 * color).toString(16).padStart(2, '0');
  };
  return `#${f(0)}${f(8)}${f(4)}`;
}
function hslToHexCOOL(hslColor) {
  const hslColorCopy = { ...hslColor };
  hslColorCopy.l /= 100;
  const a =
    (hslColorCopy.s * Math.min(hslColorCopy.l, 1 - hslColorCopy.l)) / 100;
  const f = (n) => {
    const k = (n + hslColorCopy.h / 30) % 12;
    const color = hslColorCopy.l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return Math.round(255 * color)
      .toString(16)
      .padStart(2, "0");
  };
  return `#${f(0)}${f(8)}${f(4)}`.toUpperCase();
}
function hslToHslaString(h, s, l, a = 1) {
  return 'hsla(' + h + ', ' + s + '%, ' + l + '%, ' + a + ')';
}
function hslToHsv(h, s, l) {
  let newh = h;
  l /= 100.0;
  s /= 100.0;
  testHelpers(h, s, l);
  let newv = (2 * l + s * (1 - Math.abs(2 * l - 1))) / 2;
  let news = (2 * (newv - l)) / newv;
  testHelpers(newh, news, newv);
  let rgb = hsvToRgb(newh, news, newv);
  let result = [h, s, l, newh, news, newv];
  result.push(rgbToHex(rgb[0], rgb[1], rgb[2]));
  return result;
}
function HSLToRGB(hsl, isPct) {
  let ex = /^hsl\(((((([12]?[1-9]?\d)|[12]0\d|(3[0-5]\d))(\.\d+)?)|(\.\d+))(deg)?|(0|0?\.\d+)turn|(([0-6](\.\d+)?)|(\.\d+))rad)((,\s?(([1-9]?\d(\.\d+)?)|100|(\.\d+))%){2}|(\s(([1-9]?\d(\.\d+)?)|100|(\.\d+))%){2})\)$/i;
  if (ex.test(hsl)) {
    let sep = hsl.indexOf(',') > -1 ? ',' : ' ';
    hsl = hsl
      .substr(4)
      .split(')')[0]
      .split(sep);
    isPct = isPct === true;
    let h = hsl[0],
      s = hsl[1].substr(0, hsl[1].length - 1) / 100,
      l = hsl[2].substr(0, hsl[2].length - 1) / 100;
    if (h.indexOf('deg') > -1) h = h.substr(0, h.length - 3);
    else if (h.indexOf('rad') > -1) h = Math.round((h.substr(0, h.length - 3) / (2 * Math.PI)) * 360);
    else if (h.indexOf('turn') > -1) h = Math.round(h.substr(0, h.length - 4) * 360);
    if (h >= 360) h %= 360;
    let c = (1 - Math.abs(2 * l - 1)) * s,
      x = c * (1 - Math.abs(((h / 60) % 2) - 1)),
      m = l - c / 2,
      r = 0,
      g = 0,
      b = 0;
    if (0 <= h && h < 60) {
      r = c;
      g = x;
      b = 0;
    } else if (60 <= h && h < 120) {
      r = x;
      g = c;
      b = 0;
    } else if (120 <= h && h < 180) {
      r = 0;
      g = c;
      b = x;
    } else if (180 <= h && h < 240) {
      r = 0;
      g = x;
      b = c;
    } else if (240 <= h && h < 300) {
      r = x;
      g = 0;
      b = c;
    } else if (300 <= h && h < 360) {
      r = c;
      g = 0;
      b = x;
    }
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);
    if (isPct) {
      r = +((r / 255) * 100).toFixed(1);
      g = +((g / 255) * 100).toFixed(1);
      b = +((b / 255) * 100).toFixed(1);
    }
    return 'rgb(' + (isPct ? r + '%,' + g + '%,' + b + '%' : +r + ',' + +g + ',' + +b) + ')';
  } else {
    return 'Invalid input color';
  }
}
function hsv2hsl(hue, sat, val) {
  return [
    hue,
    (sat * val) / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue),
    hue / 2
  ];
}
function hsvToHsl(h, s, v) {
  let newh = h;
  s /= 100.0;
  v /= 100.0;
  testHelpers(h, s, v);
  let newl = 0.5 * v * (2 - s);
  let news = (v * s) / (1 - Math.abs(2 * s - 1));
  testHelpers(newh, news, newl);
  return {
    h: newh,
    s: news,
    l: newl
  };
}
function hsvToRgb(h, s, v) {
  let f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
  return [Math.floor(f(5) * 255), Math.floor(f(3) * 255), Math.floor(f(1) * 255)];
}
function html_to_umlaut(html) {
  console.log('html', html);
  if (html == 'u00c4') { return 'Ä'; }
  else return html;
}
function hue(h) {
  var r = Math.abs(h * 6 - 3) - 1;
  var g = 2 - Math.abs(h * 6 - 2);
  var b = 2 - Math.abs(h * 6 - 4);
  return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];
}
//#endregion

//#region I J
function i_am_acting_host() { return U.name == Z.fen.acting_host; }
function i_am_host() { return U.name == Z.host; }
function i_am_trigger() { return is_multi_trigger(U.name); }
function i52(i) { return isList(i) ? i.map(x => Card52.getItem(x)) : Card52.getItem(i); }
function iAdd(item, liveprops, addprops) {
  let id, l;
  if (isString(item)) { id = item; item = valf(Items[id], {}); }
  let el = valf(liveprops.div, liveprops.ui, iDiv(item), null);
  id = valnwhite(item.id, (el ? el.id : getUID()), getUID());
  item.id = id; if (nundef(Items[id])) Items[id] = item; if (el) el.id = id;
  if (nundef(item.live)) item.live = {};
  l = item.live;
  for (const k in liveprops) {
    let val = liveprops[k];
    if (nundef(val)) { continue; }
    l[k] = val;
    if (isdef(val.id) && val.id != id) { lookupAddIfToList(val, ['memberOf'], id); }
  }
  if (isdef(addprops)) copyKeys(addprops, item);
  return item;
}
function iAddContent(item, d) { let dm = diContent(item); if (isdef(dm)) mAppend(dm, d); }
function iAmInGame() {
  let gc = S.gameConfig;
  let players = gc.players;
  let me = firstCond(players, x => startsWith(x.username, USERNAME));
  return me !== null;
}
function iAmStarter() { return S.gameConfig.players[0].username == USERNAME; }
function iAppend(dParent, i) { mAppend(iDiv(dParent), iDiv(i)); }
function iAppend52(i, dParent, faceUp) {
  let item = i52(i);
  iFace(item, faceUp);
  mAppend(dParent, item.div);
  return item;
}
function iBounds(i, irel) {
  if (isdef(i.div)) i = i.div;
  if (isdef(irel) && isdef(irel.div)) irel = irel.div;
  isParent = (i.parentNode == irel);
  let b = getBounds(i, isParent, irel);
  let [x, y, w, h] = [Math.round(b.left), Math.round(b.top), Math.round(b.width), Math.round(b.height)];
  return { x: x, y: y, w: w, h: h };
}
function iButtonSidebarDiv(dParent, bCaption = '☰', bStyles = { fz: 30 }, sbStyles = { bg: wpink }, divStyles = {}, outerStyles = { matop: 4, bg: wgrey }) {
  let d0 = mDiv100(dParent);
  let b = mButton(bCaption, null, d0, bStyles, 'mybutton', getUID('b'));
  outerStyles.position = 'relative';
  let h = getRect(d0).h - (getRect(b).h + outerStyles.matop);
  outerStyles.h = h;
  let d = mDiv(d0, outerStyles);
  let dSide = mDiv(d, sbStyles);
  let dContent = mDiv(d, divStyles, getUID());
  let sb = iSidebar(dSide, dContent, b, 120, false);
  let item = mItem(getUID('comp'), { div: d0, button: b, sidebar: sb, dContent: dContent }, { type: 'component' });
  return item;
}
function iCenter(item, offsetX, offsetY) { let d = iDiv(item); mCenterAbs(d, offsetX, offsetY); }
function iClear(item) {
  if (nundef(item)) return;
  if (isString(item)) { let id = item; if (isdef(Items[id])) item = Items[id]; else item = toElem(id); }
  let d = iDiv(item);
  if (isdef(d)) {
    let desc = Array.from(d.querySelectorAll('[id]:not([id=""])')); //'[id]:not([id]="")');
    desc = desc.filter(x => isdef(Items[x.id]))
    for (const item1 of desc) iDelete(item1.id);
    mClear(d);
  }
}
function iCollect(tags = ['div']) {
  for (const t of tags) {
    let divs = Array.from(document.getElementsByTagName(t)).filter(d => !isEmptyOrWhiteSpace(d.id) && !isEmpty(d.innerHTML));
    for (const d of divs) {
      iAdd({}, { div: d });
    }
  }
}
function iContainer(dParent, styles, classes, id, inner) {
  let item = { id: isdef(id) ? id : getUID(), type: 'plain' };
  let dOuter = mDiv(dParent);
  let dInner = mDiv100(dOuter);
  mCenterCenterFlex(dInner);
  if (isdef(inner)) d.innerHTML = inner;
  if (nundef(styles)) styles = {};
  styles.display = 'inline-block';
  mStyle(dOuter, styles);
  if (isdef(classes)) mClass(dOuter, classes);
  iAdd(item, { div: dOuter, dInner: dInner });
  item.add = elem => mAppend(dInner, elem);
  return item;
}
function iconViewer(keys) {
  onclick = show100;
  IconSet = isdef(keys) ? keys : symKeysBySet['nosymbols'];
  lastIndex = 0;
  Pictures = [];
  show100();
}
function iconViewerTestKeysets() {
  let allKeys = symKeysBySet.nosymbols;
  let keys = allKeys.filter(x => isdef(symbolDict[x].best100));
  let keys1 = allKeys.filter(x => isdef(symbolDict[x].best100) && isdef(symbolDict[x].bestE));
  let keys2 = allKeys.filter(x => isdef(symbolDict[x].best50));
  let keys3 = allKeys.filter(x => isdef(symbolDict[x].best25));
  console.log(keys3);
  iconViewer(keys3);
}
function id2name(id) { id.substring(2).split('_').join(' '); }
function idealFontDims(txt, wmax, hmax, fz = 22, fzmin = 6, weight) {
  let tStyles = { fz: fz, family: 'arial' };
  if (isdef(weight)) tStyles.weight = weight;
  while (true) {
    let tSize = getSizeWithStyles(txt, tStyles);
    if (tSize.h <= hmax && tSize.w <= wmax || tStyles.fz <= fzmin) return { w: tSize.w, h: tSize.h, fz: tStyles.fz, family: 'arial' };
    else tStyles.fz -= 1;
  }
}
function idealFontSize(txt, wmax, hmax, fz = 22, fzmin = 6, weight) { return idealFontDims(...arguments).fz; }
function idealFontsize(txt, wmax, hmax, fz, fzmin, weight) {
  let tStyles = { fz: fz, family: 'arial' };
  if (isdef(weight)) tStyles.weight = weight;
  while (true) {
    let tSize = getSizeWithStyles(txt, tStyles);
    if (tSize.h <= hmax && tSize.w <= wmax || tStyles.fz <= fzmin) return { w: tSize.w, h: tSize.h, fz: tStyles.fz, family: 'arial' };
    else tStyles.fz -= 1;
  }
}
function idealFontsizeX(elem, wmax, hmax, fz, fzmin) {
  let tStyles = { w: wmax, fz: fz, family: 'arial' };
  let i = 0;
  while (i < 100) {
    i += 1;
    mStyleX(elem, tStyles);
    let tSize = getElemSize(elem);
    if (tSize.h <= hmax || tStyles.fz <= fzmin) {
      return { w: tSize.w, h: tSize.h, fz: tStyles.fz };
    } else tStyles.fz -= 1;
  }
}
function idealTextColor(bg, grayPreferred = false) {
  const nThreshold = 105;
  if (bg.substring(0, 1) != '#') bg = colorNameToHexString(bg);
  rgb = hexToRgb(bg);
  r = rgb.r;
  g = rgb.g;
  b = rgb.b;
  var bgDelta = r * 0.299 + g * 0.587 + b * 0.114;
  var foreColor = 255 - bgDelta < nThreshold ? 'black' : 'white';
  if (grayPreferred) foreColor = 255 - bgDelta < nThreshold ? 'dimgray' : 'snow';
  return foreColor;
}
function iDelete(id) {
  delete Items[id];
}
function identifyCardByRank(key, rank) {
  if (key == 'market') {
  }
}
function iDetect(itemInfoKey) {
  let item, info, key;
  if (isString(itemInfoKey)) { key = itemInfoKey; info = Syms[key]; item = infoToItem(info); }
  else if (isDict(itemInfoKey)) {
    if (isdef(itemInfoKey.info)) { item = itemInfoKey; info = item.info; key = item.info.key; }
    else { info = itemInfoKey; key = info.key; item = infoToItem(info); }
  }
  return [item, info, key];
}
function iDiv(i) { return isdef(i.live) ? i.live.div : isdef(i.div) ? i.div : i; }
function iDivs(ilist) { return isEmpty(ilist) ? [] : isItem(ilist[0]) ? ilist.map(x => iDiv(x)) : ilist; }
function iDoor(r1, dir, r2, styles = {}) {
  r1 = isString(r1) ? Items[r1] : r1;
  let house = Items[r1.house];
  r2 = isdef(r2) ? isString(r2) ? Items[r2] : r2 : null;
  let wall = r2 ? findWall(r1, r2) : isdef(dir) ? findFreeWall(r1, r1.walls[dir]) : findFreeWall(r1);
  if (wall.door) { errlog('there is already a door between', r1.id, 'and', r2); return; }
  let szDoor = valf(styles.szDoor, house.szDoor);
  let bg = valf(styles.bg, house.bg);
  let dParent = iDiv(house);
  let wr = wall.rect;
  if (nundef(r2) && wall.room) { r2 = Items[wall.room]; }
  let dr = jsCopy(wr);
  let or = wall.dir == 'e' || wall.dir == 'w' ? 'v' : 'h';
  if (or == 'v') {
    let len = wr.h;
    let offy = (len - szDoor) / 2;
    dr.y = dr.t = dr.t + offy;
    dr.h = szDoor;
  } else {
    let len = wr.w;
    let offx = (len - szDoor) / 2;
    dr.x = dr.l = dr.l + offx;
    dr.w = szDoor;
  }
  let id = getDoorId(r1.id, r2 ? r2.id : house.id);
  let door = { rooms: [r1.id], rect: dr, id: id, or: or };
  if (r2) { r2.doors.push(id); door.rooms.push(r2.id); } else { house.doors.push(id); }
  r1.doors.push(id);
  let stylesPlus = { position: 'absolute', left: dr.x, top: dr.y, w: dr.w, h: dr.h, bg: bg };
  copyKeys(stylesPlus, styles);
  d = mDiv(dParent, styles);
  iAdd(door, { div: d });
  return door;
}
function iDov(item) { return isdef(item.live) ? item.live.overlay : null; }
function if_hotseat_autoswitch(result) {
  if (isdef(result.table) && isdef(Z) && Z.mode == 'hotseat') {
    let turn = lookup(result, ['table', 'fen', 'turn']);
    assertion(isdef(turn), 'turn is NOT defined (_sendSIMSIM) !!!!');
    let uname = turn.length == 1 ? turn[0] : arrNext(turn, U.name);
    if (uname != U.name) switch_uname(uname);
  }
}
function if_plural(n) { return n == 1 ? '' : 's'; }
function if_stringified(obj) { return is_stringified(obj) ? JSON.parse(obj) : obj; }
function if_stringified_or_dict(obj) { return nundef(obj) ? {} : is_stringified(obj) ? JSON.parse(obj) : obj; }
function if_stringified_or_list(obj) { return nundef(obj) ? [] : is_stringified(obj) ? JSON.parse(obj) : obj; }
function if_stringified_or_string(obj) { return nundef(obj) ? '' : is_stringified(obj) ? JSON.parse(obj) : obj; }
function iFace(item, faceUp) { if (isdef(faceUp)) faceUp ? iFaceUp(item) : iFaceDown(item); }
function iFaceDown(item) { Card52.turnFaceDown(item); }
function iFaceUp(item) { Card52.turnFaceUp(item); }
function iFromRowCol(row, col, rows, cols) { return row * cols + col; }
function iG(i) { return isdef(i.live) ? i.live.g : isdef(i.g) ? i.g : i; }
function iGet(item, key) { return item[key]; }
function iGetl(item, key) { return item.live[key]; }
function iGrid(rows, cols, dParent, styles) {
  styles.display = 'inline-block';
  let items = [];
  let index = 0;
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      let d = mDiv(dParent, styles);
      let item = { row: i, col: j, index: index };
      index += 1;
      iAdd(item, { div: d });
      items.push(item);
    }
    mLinebreak(dParent);
  }
  return items;
}
function iH00(iarr, dParent, styles, id) {
  function iH00Zone(dTable, nmax = 7, padding = 10) {
    let sz = netHandSize(nmax);
    return mZone(dTable, { wmin: sz.w, h: sz.h, padding: padding });
  }
  let h = isdef(Items[id]) ? Items[id] : { arr: iarr, styles: styles, id: id };
  if (nundef(h.zone)) h.zone = iH00Zone(dParent); else clearElement(h.zone);
  let items = i52(iarr);
  h.iHand = iSplay(items, h.zone);
  return h;
}
function iH00_dep(iarr, dParent, styles, id) {
  function iH00Zone(dTable, nmax = 3, padding = 10) {
    let sz = netHandSize(nmax);
    return mZone(dTable, { wmin: sz.w, h: sz.h, padding: padding, rounding: 10 });
  }
  let data = DA[id] = {};
  let h = data.deck = new DeckClass();
  h.init(iarr);
  h = data;
  if (nundef(h.zone)) h.zone = iH00Zone(dParent); else clearElement(h.zone);
  if (nundef(h.iHand)) {
    let items = i52(h.deck.cards());
    h.iHand = iSplay(items, h.zone);
  } else if (redo) {
    clearElement(h.zone);
    let items = i52(h.deck.cards());
    h.iHand = iSplay(items, h.zone);
  }
  return h;
}
function iH01(iarr, dParent, styles, id, overlap) {
  function iH01Zone(dTable, nmax = 3, padding = 10) {
    let sz = netHandSize(nmax);
    return mZone(dTable, { wmin: sz.w, h: sz.h, padding: padding });
  }
  let h = isdef(Items[id]) ? Items[id] : { arr: iarr, styles: styles, id: id };
  if (nundef(h.zone)) h.zone = iH01Zone(dParent); else clearElement(h.zone);
  let items = i52(iarr);
  h.iHand = iSplay(items, h.zone, {}, 'right', overlap);
  return h;
}
function iHand52(i) {
  let hand = iSplay(i, dTable);
}
function iHandZone(dParent, styles, nmax) {
  if (nundef(styles)) styles = { bg: 'random', rounding: 10 };
  if (isdef(nmax)) {
    console.log('nmax', nmax)
    let sz = netHandSize(nmax);
    styles.w = sz.w;
    styles.h = sz.h;
  }
  return mZone(dParent, styles);
}
function iHandZone_test(dTable, nmax = 10, padding = 10) {
  let sz = netHandSize(nmax);
  return mZone(dTable, { wmin: sz.w, h: sz.h, bg: 'random', padding: padding, rounding: 10 });
}
function iHexboard(cols = 3, rows = 3, a = 48) {
  let sq3 = Math.sqrt(3);
  let wp = a / 4, hp = a / 4, h = sq3 * a / 2;
  let [xoff, dx, yoff, dy] = [h + wp / 2, 2 * h, hp / 2, a / 2];
  let ys = 2 + 3 * rows;
  let xs = cols;
  let x = xoff, y = yoff;
  let pts = [];
  let infos = [];
  let idx = 0;
  let yEven = true;
  for (let i = 0; i < ys; i++) {
    let tcolOffset = yEven ? 1 : 0;
    let isCenterRow = i >= 2 && ((i - 2) % 3) == 0;
    for (let j = 0; j < xs + (1 - tcolOffset); j++) {
      let pt = { x: x, y: y };
      pts.push(pt);
      infos.push({ index: idx, tcol: tcolOffset + 2 * j, trow: i, x: x, y: y, pt: pt, isCenterRow: isCenterRow, isHexCenter: isCenterRow, isCenterCol: j % 2 == 1 });
      x += dx;
      idx += 1;
    }
    yEven = !yEven;
    y += dy; x = i % 2 ? xoff : wp / 2;
  }
  let byrc = {};
  for (const i of infos) {
    lookupSet(byrc, [i.trow, i.tcol], i.index);
  }
  let byxy = {};
  let adjList = [];
  let di = {};
  for (const info of infos) {
    let [r, c] = [info.trow, info.tcol];
    info.nodes = [
      lookup(byrc, [r - 2, c]),
      lookup(byrc, [r - 1, c + 1]),
      lookup(byrc, [r + 1, c + 1]),
      lookup(byrc, [r + 2, c]),
      lookup(byrc, [r + 1, c - 1]),
      lookup(byrc, [r + 1, c - 1]),
    ];
    for (let i = 0; i < 6; i++) {
      let n1 = info.nodes[i];
      if (n1 == null) continue;
      let n2 = info.nodes[(i + 1 % 6)];
      if (n2 == null) continue;
      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;
      lookupSet(di, [n1, n2], true);
      adjList.push([n1, n2]);
    }
    info.neighbors = [
      lookup(byrc, [r - 3, c + 1]),
      lookup(byrc, [r, c + 2]),
      lookup(byrc, [r + 3, c + 1]),
      lookup(byrc, [r + 3, c - 1]),
      lookup(byrc, [r, c - 2]),
      lookup(byrc, [r - 3, c - 1]),
    ];
  }
  let boardItem = { dx: dx, dy: dy, rows: rows, cols: cols, count: infos.length, adjList: adjList, byrc: byrc, pts: pts, items: infos };
  return boardItem;
}
function iHigh(item) { let d = iDiv(item); mStyle(d, { bg: 'darkgray' }); }
function iHighlight(item) { let d = iDov(item); mClass(d, 'overlaySelected'); }
function iHouse(dParent, ns = 1, styles = { w: 500, h: 400 }) {
  let d = mDiv(dParent, { display: 'inline-grid', position: 'relative', box: true });
  ns = isNumber(ns) ? d.style.gridTemplateAreas = getLayoutSample(ns) : ns; //'"z z d" "a a c" "a a c"';// getLayoutSample(3);
  let s = d.style.gridTemplateAreas = ns;
  let letterList = filterDistinctLetters(s);
  let wallWidth = valf(styles.gap, 4);
  let lines = s.split('"').filter(x => !isWhiteSpaceString(x));
  let cols = lines[0].split(' ').length;
  let rows = lines.length;
  let wHouse = Math.round(styles.w / cols) * cols + wallWidth * cols + 1;
  let hHouse = Math.round(styles.h / rows) * rows + wallWidth * rows + 1;
  d.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
  d.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
  let szDoor = valf(styles.szDoor, 40);
  let [wallColor, floorColor] = [valf(styles.fg, 'white'), valf(styles.bg, BLUE)];
  mStyleX(d, { bg: wallColor, w: wHouse, h: hHouse, gap: wallWidth, padding: wallWidth });
  let rooms = [];
  for (const ch of letterList) {
    let r = iRoom(d, ch, { bg: floorColor });
    rooms.push(r);
  }
  let house = { rect: getRect(d), fg: wallColor, bg: floorColor, doors: [], rooms: rooms.map(x => x.id), roomLetters: letterList, szDoor: szDoor, wallWidth: wallWidth };
  house.roomsByLetter = {};
  rooms.map(x => house.roomsByLetter[x.ch] = x.id);
  iAdd(house, { div: d });
  rooms.map(x => x.house = house.id);
  roomAdjacency(house);
  return house;
}
function iInit(dParent, item) {
  if (is_canvas(dParent)) draw_on_canvas(dParent.cx, item);
  else draw_on_div(dParent, item);
}
function iLabel(i) { return isdef(i.live) ? i.live.dLabel : isdef(i.dLabel) ? i.dLabel : null; }
function iLabyrint(dParent, cols, rows, styles = { w: 800, h: 400 }) {
  let d = mDiv(dParent, { display: 'inline-grid', position: 'relative', box: true });
  ns = isNumber(ns) ? d.style.gridTemplateAreas = getLayoutSample(ns) : ns; //'"z z d" "a a c" "a a c"';// getLayoutSample(3);
  let s = d.style.gridTemplateAreas = ns;
  let letterList = filterDistinctLetters(s);
  let wallWidth = valf(styles.gap, 4);
  let lines = s.split('"').filter(x => !isWhiteSpaceString(x));
  let wHouse = Math.round(styles.w / cols) * cols + wallWidth * cols + 1;
  let hHouse = Math.round(styles.h / rows) * rows + wallWidth * rows + 1;
  d.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
  d.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
  let szDoor = valf(styles.szDoor, 40);
  let [wallColor, floorColor] = [valf(styles.fg, 'white'), valf(styles.bg, BLUE)];
  mStyleX(d, { bg: wallColor, w: wHouse, h: hHouse, gap: wallWidth, padding: wallWidth });
  let rooms = [];
  for (const ch of letterList) {
    let r = iRoom(d, ch, { bg: floorColor });
    rooms.push(r);
  }
  let house = { rect: getRect(d), fg: wallColor, bg: floorColor, doors: [], rooms: rooms.map(x => x.id), roomLetters: letterList, szDoor: szDoor, wallWidth: wallWidth };
  house.roomsByLetter = {};
  rooms.map(x => house.roomsByLetter[x.ch] = x.id);
  iAdd(house, { div: d });
  rooms.map(x => x.house = house.id);
  roomAdjacency(house);
  return house;
}
function iLetters(s, dParent, style) {
  let d = mDiv(dParent);
  for (let i = 0; i < s.length; i++) {
    let d1 = mDiv(d);
    d1.innerHTML = s[i];
    mStyleX(d1, style);
  }
  return d;
}
function image_show(e) {
  var image = e.target.src;
  var image_viewer = mBy("image_viewer");
  image_viewer.innerHTML = "<img src='" + image + "' style='width:100%' />";
  image_viewer.className = "image_on";
}
function imageFileTests() {
  initTable(); Items = {};
  Socket = io(SERVERURL);
  let item = mFileInput(dTable);
  mLinebreak(dTable, 25);
  let btn = mButton('upload', () => mSocketUploadImage(item, Socket), dTable);
}
function iMagnify(perle) { mMagnify(null, perle); }
function iMagnifyCancel() { mCancelMagnify(); }
function iMagnifyX(ui, item, pos) {
  let path = item.path;
  if (isdef(MAGNIFIER_IMAGE) && MAGNIFIER_IMAGE.src == path) {
    console.log('schon offen!!!')
    return;
  } else if (isdef(MAGNIFIER_IMAGE)) mCancelMagnify();
  let imgSize = 514, fontSize = 24;
  let [w, h, fz] = [imgSize, imgSize + fontSize + 10, fontSize];
  let dPresent = MAGNIFIER_IMAGE = mDiv(document.body, { bg: HeaderColor, position: 'absolute', left: 0, top: 0, w: w, h: h });
  let d = dPresent;
  let dText = mText(item.text, d, { color: 'white', fz: fz });
  let dImage = mDiv(d, { rounding: '50%', w: w, h: w });
  mCenterCenterFlex(dImage);
  let img1 = mImg(path, dImage, {});
  mCenterCenterFlex(dPresent);
}
function iMakeHand(iarr, dParent, styles, id) {
  let data = DA[id] = {};
  let h = data.deck = new DeckClass();
  h.init(iarr);
  iPresentHand(data, dParent, styles);
  return data;
}
function iMakeHand_test(dParent, iarr, id) {
  let data = DA[id] = {};
  let h = data.deck = new DeckClass();
  h.init(iarr);
  iPresentHand_test(dParent, data);
  return data;
}
function iMeasure(item, sizingOptions) {
  if (nundef(iDiv(item))) return;
  setRect(iDiv(item), valf(sizingOptions, { hgrow: true, wgrow: true }));
}
function iMenuLine(dParent, styles) {
  let d = mRow(dParent, styles);
  console.log('d', d)
  let item = mItem('dMenu', { div: d }, { type: 'menu' });
  return item;
}
function iMenuSidebarDiv(dParent, options) {
  let d0 = mDiv100(dParent, options.outerStyles);
  setRect(d0);
  let dMenu = mDiv(d0, options.menuStyles);
  let b = mButton(options.bCaption, null, dMenu, options.bStyles, 'mybutton', getUID('b'));
  setRect(dMenu, { hfix: true, wgrow: true });
  let st = options.innerStyles;
  st.position = 'relative';
  st.h = d0.rect.h - dMenu.rect.h - valf(st.matop, 0);
  let d = mDiv(d0, options.innerStyles);
  let dSide = mDiv(d, options.sbStyles);
  let dContent = mDiv(d, options.divStyles, getUID());
  let sb = iSidebar(dSide, dContent, b, 120, false);
  let item = mItem(getUID('comp'), { div: d0, button: b, dMenu: dMenu, sidebar: sb, dContent: dContent }, { type: 'component' });
  return item;
}
function iMessage(item, msg) { let dm = diMessage(item); if (isdef(dm)) dm.innerHTML = msg; }
function img_html(filename, fulldim = 'height') {
  return `<img ${fulldim}='100%' src='../rechnung/images/${filename}'>`;
}
function iMoveFromTo(item, d1, d2, callback, offset) {
  let bi = iBounds(item);
  let b1 = iBounds(d1);
  let b2 = iBounds(d2);
  if (nundef(offset)) offset = { x: 0, y: 0 };
  let dist = { x: b2.x - b1.x + offset.x, y: b2.y - b1.y + offset.y };
  item.div.style.zIndex = 100;
  let a = aTranslateBy(item.div, dist.x, dist.y, 500);
  a.onfinish = () => { mAppend(d2, item.div); item.div.style.zIndex = item.z = iZMax(); if (isdef(callback)) callback(); };
}
function iMoveFromToPure(item, d1, d2, callback, offset) {
  let bi = iBounds(item);
  let b1 = iBounds(d1);
  let b2 = iBounds(d2);
  if (nundef(offset)) offset = { x: 0, y: 0 };
  let dist = { x: b2.x - b1.x + offset.x, y: b2.y - b1.y + offset.y };
  item.div.style.zIndex = 100;
  let a = aTranslateBy(item.div, dist.x, dist.y, 500);
  a.onfinish = () => { if (isdef(callback)) callback(); };
}
function in_game() { return isdef(mBy('table')) && Session.in_game == `${Session.cur_user} ${Session.cur_tid}`; }
function in_game_off() { Session.in_game = null; }
function in_game_on() { Session.in_game = `${Session.cur_user} ${Session.cur_tid}`; }
function in_game_open_prompt() { return uiActivated && Session.in_prompt == `${Session.cur_user} ${Session.cur_tid}`; }
function in_game_open_prompt_off() { Session.in_prompt = null; }
function in_game_open_prompt_on() { Session.in_prompt = `${Session.cur_user} ${Session.cur_tid}`; }
function inc_g_index() { set_g_index(G.i + 1); }
function inc_handsize(fen, uname) {
  let pl = fen.players[uname];
  pl.handsize = Number(pl.handsize) + 1;
  return pl.handsize;
}
function inc_level_on_winstreak(winners, game) {
  for (const w of winners) {
    let o = lookup(DB.users, [w, 'games', game]);
    console.assert(isdef(o), 'no DB.users record for game', game);
    o.winstreak = DB.users[w].games[game].winstreak = isdef(o.winstreak) ? o.winstreak + 1 : 1;
    if (o.winstreak >= 1) {
      let currentlevel = get_startlevel(w, game);
      lookupSetOverride(DB.users, [w, 'games', game, 'startlevel'], Math.min(currentlevel + 1, Session.maxlevel));
      delete o.winstreak;
    }
  }
}
function inc_player_score(plname) { ensure_score(plname); return Z.fen.players[plname].score += 1; }
function incInput(inp, n = 1) {
  let val = Number(inp.innerHTML);
  val += n;
  inp.innerHTML = val;
}
function includesAnyOf(s, slist) { for (const l of slist) { if (s.includes(l)) return true; } return false; }
function increase_handicap_if_losestreak(losers, game) {
  console.log('winners', losers);
  for (const w of losers) {
    let o = lookupSet(DB.users, [w, 'games', game], {});
    if (nundef(o.losestreak)) o.losestreak = 1; else o.losestreak += 1;
    if (o.losestreak >= 1) {
      lookupSetOverride(o, ['startlevel'], Math.max(o.startlevel - 1, 0));
      o.losestreak = 0;
      console.log('...startlevel of', w, 'is decreased to', get_startlevel(w, game));
    }
  }
}
function incrementSimulation() {
  if (mouse.down) {
    var dx = mouse.x - circle.x,
      dy = mouse.y - circle.y,
      distance = Math.sqrt(dx * dx + dy * dy),
      unitX = dx / distance,
      unitY = dy / distance,
      force = distance * mousePullStrength;
    circle.vx += unitX * force;
    circle.vy += unitY * force;
  }
  circle.vy += gravity;
  circle.vx *= dampening;
  circle.vy *= dampening;
  circle.x += circle.vx;
  circle.y += circle.vy;
  if (circle.y + radius > canvas.height) {
    circle.y = canvas.height - radius;
    circle.vy = - Math.abs(circle.vy);
  }
  else if (circle.y - radius < 0) {
    circle.y = radius;
    circle.vy = Math.abs(circle.vy);
  }
  if (circle.x + radius > canvas.width) {
    circle.x = canvas.width - radius;
    circle.vx = - Math.abs(circle.vx);
  }
  else if (circle.x - radius < 0) {
    circle.x = radius;
    circle.vx = Math.abs(circle.vx);
  }
}
function indexDiff(a, b, s) {
  let ia = s.indexOf(a);
  let ib = s.indexOf(b);
  console.log('index of', a, 'is', ia)
  console.log('index of', b, 'is', ib)
  return ia - ib;
}
function indexOfAny(s, list, pos) {
  let min = 1000000;
  let match = null;
  for (const w of list) {
    let i = s.indexOf(w, pos);
    if (i >= 0 && i < min) { min = i; match = w; }
  }
  return match ? [min, match] : [-1, null];
}
function indexOfFuncMax(arr, prop, f) {
  let max = null;
  let imax = null;
  for (const [i, v] of arr.entries()) {
    let val = isdef(prop) && isdef(v[prop]) ? v[prop] : v;
    if (isdef(f)) val = f(val);
    if (max == null || val > max) { max = val; imax = i }
  }
  return { i: imax, val: max };
}
function indexOfFuncMin(arr, prop, f) {
  let min = null;
  let imax = null;
  for (const [i, v] of arr.entries()) {
    let val = isdef(prop) && isdef(v[prop]) ? v[prop] : v;
    if (isdef(f)) val = f(val);
    if (min == null || val < min) { min = val; imax = i }
  }
  return { i: imax, val: min };
}
function indexOfMax(arr, prop) {
  let max = null;
  let imax = null;
  for (const [i, v] of arr.entries()) {
    if (prop) {
      if (max == null || v[prop] > max) {
        max = v[prop];
        imax = i;
      } else {
        if (max == null || v > max) {
          max = v;
          imax = i;
        }
      }
    }
  }
  return { i: imax, val: max };
}
function indexOfMin(arr, prop) {
  let min = null;
  let imin = null;
  for (const [i, v] of arr.entries()) {
    if (prop) {
      if (min == null || lookup(v, [prop]) < min) {
        min = v[prop];
        imin = i;
      }
    } else {
      if (min == null || v < min) {
        min = v;
        imin = i;
      }
    }
  }
  return { i: imin, val: min };
}
function inferPlayerColorFromNameOrInit(plid, index) {
  let cname = plid.toLowerCase();
  if (cname in playerColors) return playerColors[cname];
  if (nundef(index)) index = 0;
  let ckeys = getKeys(playerColors);
  return playerColors[ckeys[index] % playerColors.length];
}
function inferType(val) {
  for (const t of ['region', 'power', 'unit', 'faction']) {
    if (isType(t, val)) {
      return t;
    }
  }
  return 'unknown';
}
function info_from_fen(fen) {
  let all_attrs = gSet_attributes();
  let keys = get_keys(all_attrs);
  let info = {};
  for (let i = 0; i < fen.length; i++) {
    let prop = keys[i];
    let val = all_attrs[prop][Number(fen[i])];
    info[prop] = val;
  }
  return info;
}
function infoHasNumber(info) {
  let ws = info.words;
  return firstCond(ws, x => isNumber(x));
}
function infoHasNumberOrTimeString(info) {
  return infoHasNumber(info) || infoHasTimeString(info);
}
function infoHasTimeString(info) {
  let ws = info.words;
  return firstCond(ws, x => isTimeString(x));
}
function infoLayout(n, R) { }
function infoToItem(x) { let item = { info: x, key: x.key }; item.id = iRegister(item); return item; }
function init() {
  createPeeps()
  resize()
  gsap.ticker.add(render)
  window.addEventListener('resize', resize)
}
function init_internet() { DA.internet = navigator.onLine; }
function init_keyhandlers() {
  onkeyup = onkeyupHandler;
}
function init_table() {
  dTable = mBy('dTable'); mStyle(dTable, { box: true, padding: 10, hmin: 500, w: '100%' });
}
function initActionPanel() {
  show('dLeftSide');
  let dParent = mBy('dLeftSide');
  clearElement(dParent);
  dLeiste = mDiv(dParent);
  mStyle(dLeiste, { wmin: 70, hmin: '100%', display: 'flex', 'flex-flow': 'column wrap' });
}
function initAutoplayToActionButtons() {
  if (S.settings.game == 'catan') setKeys(S.settings, ['dev', 'keywords', 'action'], { buy: 'buy devcard', hex: 'place robber', Corner: 'settlement or city', Edge: 'road' })
  else setKeys(S.settings, ['dev', 'keywords', 'action'], {});
  let d = document.getElementById('a_d_autoplay_buttons');
  let buttons = [...d.children];
  let defaultIds = ['c_b_NextPlayer', 'c_b_NextTurn'];
  let kws = lookup(S.settings, ['dev', 'keywords', 'action']);
  if (!kws) kws = {};
  let kwKeys = getKeys(kws);
  let requiredButtonIds = kwKeys.map(x => 'c_b_RTA_' + x).concat(defaultIds);
  let actualButtons = buttons.filter(x => x.id).map(x => x.id);
  for (const id of arrMinus(actualButtons, requiredButtonIds)) $('#' + id).remove();
  for (const id of arrMinus(requiredButtonIds, actualButtons)) {
    let b = document.createElement('button');
    let key = id.substring(8);
    b.innerHTML = kws[key];
    b.id = id;
    b.onclick = () => onClickRunToAction(b.id, id);
    d.appendChild(b);
  }
}
function initAux() {
  dAux = mBy('dAux');
}
function InitBoardSquares() {
  var light = 0;
  var rankName;
  var fileName;
  var divString;
  var lightString;
  var lastLight = 0;
  for (rankIter = RANKS.RANK_8; rankIter >= RANKS.RANK_1; rankIter--) {
    light = lastLight ^ 1;
    lastLight ^= 1;
    rankName = "rank" + (rankIter + 1);
    for (fileIter = FILES.FILE_A; fileIter <= FILES.FILE_H; fileIter++) {
      fileName = "file" + (fileIter + 1);
      if (light == 0) lightString = "Light";
      else lightString = "Dark";
      divString = "<div class=\"Square clickElement " + rankName + " " + fileName + " " + lightString + "\"/>";
      light ^= 1;
      $("#ChessBoard").append(divString);
    }
  }
}
function initBoardSquares() {
  var light = 0;
  var rowName;
  var colName;
  var divString;
  var lightString;
  var lastLight = 0;
  for (rowIter = ROWS.ROW_8; rowIter >= ROWS.ROW_1; rowIter--) {
    light = lastLight ^ 1;
    lastLight ^= 1;
    rowName = "row" + (rowIter + 1);
    for (colIter = COLUMNS.COL_A; colIter <= COLUMNS.COL_H; colIter++) {
      colName = "col" + (colIter + 1);
      if (light == 0) lightString = "Light";
      else lightString = "Dark";
      divString = "<div class=\"Square clickElement " + rowName + " " + colName + " " + lightString + "\"/>";
      light ^= 1;
      $("#Board").append(divString);
    }
  }
}
function InitBoardVars() {
  var index = 0;
  for (index = 0; index < MAXGAMEMOVES; index++) {
    brd_history.push({
      move: NOMOVE,
      castlePerm: 0,
      enPas: 0,
      fiftyMove: 0,
      posKey: 0
    });
  }
  for (index = 0; index < PVENTRIES; index++) {
    brd_PvTable.push({
      move: NOMOVE,
      posKey: 0
    });
  }
}
function initCodingUI() {
  mStyle('dMain', { bg: 'silver' });
  [dTable, dSidebar] = mCols100('dMain', '1fr auto', 0);
  let [dtitle, dta] = mRows100(dTable, 'auto 1fr', 2);
  mDiv(dtitle, { padding: 10, fg: 'white', fz: 24 }, null, 'OUTPUT:');
  AU.ta = mTextArea100(dta, { fz: 20, padding: 10, family: 'opensans' });
}
function InitColsRowsBrd() {
  var index = 0;
  var col = COLUMNS.COL_A;
  var row = ROWS.ROW_1;
  var sq = SQUARES.A1;
  var sq64 = 0;
  for (index = 0; index < BRD_SQ_NUM; ++index) {
    ColBrd[index] = SQUARES.OFFBOARD;
    RowBrd[index] = SQUARES.OFFBOARD;
  }
  for (row = ROWS.ROW_1; row <= ROWS.ROW_8; ++row) {
    for (col = COLUMNS.COL_A; col <= COLUMNS.COL_H; ++col) {
      sq = fromRCMxToNumArrSq(col, row);
      ColBrd[sq] = col;
      RowBrd[sq] = row;
    }
  }
}
function initCrowd() {
  while (availablePeeps.length) {
    addPeepToCrowd().walk.progress(Math.random())
  }
}
function initDom() {
  ROOT = makeRoot();
  createMSTree(ROOT);
  simpleColors(S.settings.color.theme);
  measureMSTree(ROOT);
  if (!firstDomLoad) {
    initZoom();
    zoom_on_resize('a_d_header');
    zoom_on_wheel_alt();
    firstDomLoad = true;
  }
}
function InitFilesRanksBrd() {
  var index = 0;
  var file = FILES.FILE_A;
  var rank = RANKS.RANK_1;
  var sq = SQUARES.A1;
  var sq64 = 0;
  for (index = 0; index < BRD_SQ_NUM; ++index) {
    FilesBrd[index] = SQUARES.OFFBOARD;
    RanksBrd[index] = SQUARES.OFFBOARD;
  }
  for (rank = RANKS.RANK_1; rank <= RANKS.RANK_8; ++rank) {
    for (file = FILES.FILE_A; file <= FILES.FILE_H; ++file) {
      sq = FR2SQ(file, rank);
      FilesBrd[sq] = file;
      RanksBrd[sq] = rank;
    }
  }
}
function initGameScreen() {
  console.log('IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII!!!!!!!!!!')
  hide('dMainContent'); hide('dHeader'); show('dButtons');
  show('dGameScreen');
  console.log('game should be starting!!!');
  if (isdef(G)) {
    console.log('should just go back to game!');
  } else {
    _start();
  }
}
function InitHashKeys() {
  var index = 0;
  for (index = 0; index < 13 * 120; ++index) {
    PieceKeys[index] = RAND_32();
  }
  SideKey = RAND_32();
  for (index = 0; index < 16; ++index) {
    CastleKeys[index] = RAND_32();
  }
}
function initialize_state() {
  let dpop = mBy('dPopup'); dpop.onclick = ev => evNoBubble(ev);
  onclick = close_popup;
  onkeyup = keyhandler;
  let state = localStorage.getItem('boa');
  if (state) S = JSON.parse(state);
  else S = { location: null, boa_state: null, bw_state: null, master_password: null, score: 0, };
  S.location = 'home';
  S.bw_state = 'loggedin';
  S.boa_state = null;
}
function initLineBottom() {
  dLineBottomOuter = mDiv(table); dLineBottomOuter.id = 'lineBottomOuter';
  dLineBottom = mDiv(dLineBottomOuter); dLineBottom.id = 'lineBottom';
  dLineBottomLeft = mDiv(dLineBottom); dLineBottomLeft.id = 'lineBottomLeft';
  dLineBottomRight = mDiv(dLineBottom); dLineBottomRight.id = 'lineBottomRight';
  dLineBottom = mDiv(dLineBottom); dLineBottom.id = 'lineBottomMiddle';
  mLinebreak(table);
}
function initLineNavi() {
  dNavi = mBy('freezer');
  mStyleX(dNavi, { bg: 'navy', margin: 0, padding: 0, pabottom: 4, paleft: 4 })
  dLineNaviOuter = mDiv(dNavi); dLineNaviOuter.id = 'lineNaviOuter';
  dLineNavi = mDiv(dLineNaviOuter); dLineNavi.id = 'lineNavi';
  dLineNaviLeft = mDiv(dLineNavi); dLineNaviLeft.id = 'lineNaviLeft';
  dLineNaviRight = mDiv(dLineNavi); dLineNaviRight.id = 'lineNaviRight';
  dLineNaviMiddle = mDiv(dLineNavi); dLineNaviMiddle.id = 'lineNaviMiddle';
  mLinebreak(table);
}
function initLineTable() {
  dLineTableOuter = mDiv(table); dLineTableOuter.id = 'lineTableOuter';
  dLineTable = mDiv(dLineTableOuter); dLineTable.id = 'lineTable';
  dLineTableLeft = mDiv(dLineTable); dLineTableLeft.id = 'lineTableLeft';
  dLineTableMiddle = mDiv(dLineTable); dLineTableMiddle.id = 'lineTableMiddle';
  mClass(dLineTableMiddle, 'flexWrap');
  dLineTableRight = mDiv(dLineTable); dLineTableRight.id = 'lineTableRight';
  mLinebreak(table);
}
function initLineTitle() {
  dLineTitleOuter = mDiv(table); dLineTitleOuter.id = 'lineTitleOuter';
  dLineTitle = mDiv(dLineTitleOuter); dLineTitle.id = 'lineTitle';
  if (PROJECTNAME != 'belinda') mStyle(dLineTitle, { matop: 5 });
  dLineTitleLeft = mDiv(dLineTitle); dLineTitleLeft.id = 'lineTitleLeft';
  dLineTitleRight = mDiv(dLineTitle); dLineTitleRight.id = 'lineTitleRight';
  dLineTitleMiddle = mDiv(dLineTitle); dLineTitleMiddle.id = 'lineTitleMiddle';
  mLinebreak(table);
}
function initLineTop() {
  dLineTopOuter = mDiv(table); dLineTopOuter.id = 'lineTopOuter';
  dLineTop = mDiv(dLineTopOuter); dLineTop.id = 'lineTop';
  dLineTopLeft = mDiv(dLineTop); dLineTopLeft.id = 'lineTopLeft';
  dLineTopRight = mDiv(dLineTop); dLineTopRight.id = 'lineTopRight';
  dLineTopMiddle = mDiv(dLineTop); dLineTopMiddle.id = 'lineTopMiddle';
  dScore = mDiv(dLineTopMiddle);
  dScore.id = 'dScore';
  dLevel = mDiv(dLineTopLeft);
  dLevel.id = 'dLevel';
  dGameTitle = mDiv(dLineTopRight);
  dGameTitle.id = 'dGameTitle';
  let d = mDiv(dLineTopRight);
  d.id = 'time';
  mLinebreak(table);
}
function initLive() { Live = {}; }
function initLobby(username) {
  hide('dGameScreen'); hide('dButtons');
  show('dMainContent'); show('dLobby'); show('dHeader'); show('dTempleLobby');
  setTitle('Welcome to the Lobby');
  if (isString(username)) { sendLogin(username); console.log('...', username) }
  else username = U.name;
  sendBtn.onclick = e => {
    e.preventDefault();
    if (!messageInput.value) {
      if (GENERATE_EMPTY_MESSAGES) messageInput.value = 'hallo';
      else return console.log('must supply a message');
    }
    const message = { author: username, date: formatDate(new Date()), content: messageInput.value };
    console.log('sending message', message)
    sendUserMessage(message);
    messageInput.value = '';
  };
}
function initLocalClocks() {
  var date = new Date;
  var seconds = date.getSeconds();
  var minutes = date.getMinutes();
  var hours = date.getHours();
  var hands = [
    {
      hand: 'hours',
      angle: (hours * 30) + (minutes / 2)
    },
    {
      hand: 'minutes',
      angle: (minutes * 6)
    },
    {
      hand: 'seconds',
      angle: (seconds * 6)
    }
  ];
  for (var j = 0; j < hands.length; j++) {
    var elements = document.querySelectorAll('.' + hands[j].hand);
    for (var k = 0; k < elements.length; k++) {
      elements[k].style.webkitTransform = 'rotateZ(' + hands[j].angle + 'deg)';
      elements[k].style.transform = 'rotateZ(' + hands[j].angle + 'deg)';
      if (hands[j].hand === 'minutes') {
        elements[k].parentNode.setAttribute('data-second-angle', hands[j + 1].angle);
      }
    }
  }
}
function InitMvvLva() {
  var Attacker;
  var Victim;
  for (Attacker = PIECES.wP; Attacker <= PIECES.bK; ++Attacker) {
    for (Victim = PIECES.wP; Victim <= PIECES.bK; ++Victim) {
      MvvLvaScores[Victim * 14 + Attacker] = VictimScore[Victim] + 6 - (VictimScore[Attacker] / 100);
    }
  }
}
function initOptions() {
  setDefaultOptions();
  S.options.colors = getColors(3);
  S.options.clickToSelect = true;
  S.options.tooltips = document.getElementById('bTTip').textContent.includes('ON');
  setPlayMode(S_playMode);
  if (isdef(S.user.spec)) {
    for (const k in S.user.spec.OPTIONS) {
      S.options[k] = S.user.spec.OPTIONS[k];
    }
  }
  initAutoplayToActionButtons();
  initTextures();
  setColorPalette(S.options.colors);
}
function initPage() {
  let colors = ['#27344b', '#485b6c', '#383e48', '#f2f7f8'];
  mStyle(dMain, { padding: 0, margin: 0 });
  let dLeft = mDiv(dMain, { hmin: 500, bg: colors[0], flex: 1 }, 'dLeft');
  let dRight = mDiv(dMain, { hmin: 500, flex: 4 }, 'dRight');
  let dHeader = mDiv(dRight, { bg: colors[1], align: 'center', h: 70, fz: 40, family: 'summervibes', position: 'relative' }, 'dHeader', 'My Chat');
  let dContainer = mDiv(dRight, { display: 'flex' });
  let dInnerLeft = mDiv(dContainer, { position: 'relative', hmin: 430, bg: colors[2], flex: 1 }, 'dInnerLeft');
  mCenterCenterFlex(dInnerLeft);
  let dInnerRight = mDiv(dContainer, { transition: `all ${DELAY_PANE}ms ease`, hmin: 430, bg: colors[3], flex: 2, align: 'center' }, 'dInnerRight');
  let dChatWindow = mDiv(dInnerRight, { display: 'none', 'overflow-x': 'hidden', 'overflow-y': 'auto', padding: 10, fg: 'black', align: 'left' }, 'dChatWindow');
  let dGameWindow = mDiv(dInnerRight, { display: 'none', overflow: 'hidden' }, 'dGameWindow');
  let dUserInfo = mDiv(dLeft, { padding: 10, align: 'center' }, 'dUserInfo');
  let dToolbar = mDiv(dLeft, { matop: 40, align: 'center' });
  for (const t of ['Games', 'Tables', 'Chat', 'Contacts', 'Account']) {
    let text = t + ` <img src="../base/assets/images/icons/${t}.png" height="90%" style="float:right"/>`;
    let dLabel = mLabel(text, dToolbar, { padding: 5, cursor: 'pointer', w: '100%', h: 30, display: 'block', 'border-bottom': 'solid thin #ffffff55' });
    dLabel.onclick = () => window['onClickMenu'](t.toLowerCase());
    let d = mDiv(dInnerLeft, { position: 'absolute', w: '100%', h: '100%', display: 'none' }, 'd' + t);
  }
}
function initPageHeader() {
  pageHeaderSetGame();
  pageHeaderSetPlayers();
}
function initPlayers() {
  S.players = {};
  G.players = {};
  let ckeys = Object.keys(playerColors);
  let i = 0;
  for (const id in G.serverData.players) {
    let pl = G.serverData.players[id];
    let colorName = isdef(pl.color) ? pl.color : ckeys[i];
    colorName = colorName.toLowerCase();
    let altName = capitalize(colorName);
    let color = isdef(playerColors[colorName]) ? playerColors[colorName] : colorName;
    let username = isdef(S.gameInfo.userList) ? S.gameInfo.userList[i]
      : isdef(S.plAddedByMe) && S.plAddedByMe[id] ? S.plAddedByMe[id] : 'unknown' + i;
    S.players[id] = { username: username, id: id, color: color, altName: altName, index: i };
    i += 1;
  }
}
function initRSGData() {
  S.user = {};
  G = { table: {}, players: {} };
  UIS = {};
  IdOwner = {};
  id2oids = {};
  oid2ids = {};
  id2uids = {};
  DELETED_IDS = [];
}
function initScore() { resetScore(); }
function initServerPool(settings, state, perlenDict) {
  let pool = {};
  let poolArr = [];
  let maxPoolIndex = 0;
  addKeys(settings, { poolSelection: 'random', numPool: 20 });
  let n = settings.poolSelection != 'player' ? settings.numPool : 0;
  let keys = getRandomPerlenKeys(perlenDict, n);
  for (const k of keys) {
    addToPool(pool, poolArr, perlenDict[k], maxPoolIndex);
    maxPoolIndex += 1;
  }
  state.pool = pool;
  state.poolArr = poolArr;
  return maxPoolIndex;
}
function initSETTINGS() {
  setDefaultRSGSettings();
  setPlaymode(S.settings.playmode, true);
  S.settings.dev = {};
  if (S.settings.userSettings) _mergeOptions();
  _initAutoplayToActionButtons();
  _initCheatButtons();
  _initScenarioButtons();
}
function initSettings(game) {
  Settings = deepmergeOverride(DB.settings, U.settings);
  delete Settings.games;
  let gsSettings = lookup(U, ['games', game, 'settings']);
  if (isdef(gsSettings)) Settings = deepmergeOverride(Settings, gsSettings);
  updateSettings();
}
function initSettingsP0() {
  let iLanguage = mBy('input' + currentLanguage);
  iLanguage.checked = true;
  let iPicsPerLevel = mBy('inputPicsPerLevel');
  iPicsPerLevel.value = PICS_PER_LEVEL;
}
function initSidebar() {
  show('dLeftSide');
  let dParent = mBy('dLeftSide');
  clearElement(dParent);
  dLeiste = mDiv(dParent);
  mStyle(dLeiste, { wmin: 70, hmax: '100vh', display: 'flex', 'flex-flow': 'column wrap' });
}
function initSidebar1() {
  show(dSidebar);
  clearElement(dSidebar);
  mDiv(dSidebar, { 'min-width': 50, 'max-height': '100vh', display: 'flex', 'flex-flow': 'column wrap', 'align-content': 'center' }, 'dLeiste');
}
function initSocket() {
  Socket = io();
  Socket.on('clientId', handleClientIdSendLogin);
  Socket.on('db', handleDB);
  Socket.on('userJoined', handleUserJoined);
  Socket.on('userLeft', handleUserLeft);
  Socket.on('userMessage', handleUserMessage);
  Socket.on('gameState', handleGameState);
  Socket.on('dbUpdate', handleDbUpdate);
  Socket.on('mouse', handleMouse);
  Socket.on('show', handleShow);
  Socket.on('hide', handleHide);
}
function InitSq120To64() {
  var index = 0;
  var file = FILES.FILE_A;
  var rank = RANKS.RANK_1;
  var sq = SQUARES.A1;
  var sq64 = 0;
  for (index = 0; index < BRD_SQ_NUM; ++index) {
    Sq120ToSq64[index] = 65;
  }
  for (index = 0; index < 64; ++index) {
    Sq64ToSq120[index] = 120;
  }
  for (rank = RANKS.RANK_1; rank <= RANKS.RANK_8; ++rank) {
    for (file = FILES.FILE_A; file <= FILES.FILE_H; ++file) {
      sq = FR2SQ(file, rank);
      Sq64ToSq120[sq64] = sq;
      Sq120ToSq64[sq] = sq64;
      sq64++;
    }
  }
}
function initSTRUCTURES() {
  let data = S.user.spec.STRUCTURES;
  if (nundef(data)) return;
  BINDINGS = {};
  let hasStructure = false;
  for (const areaName in data) {
    reqs = data[areaName];
    let mobj = makeArea(areaName, reqs.location);
    let areaId = mobj.id;
    for (const prop in reqs) {
      let val = reqs[prop];
      if (prop == 'location') continue;
      if (prop == 'structure') {
        hasStructure = true;
        let info = reqs.structure;
        let func = info.type;
        let odict = parseDictionaryName(info.object_pool);
        if (!odict) odict = G.table;
        let boardInfo = info.cond;
        let structObject = window[func](odict, areaId, boardInfo);
        timit.showTime('*** board end ***')
      } else if (prop == 'binding') {
        BINDINGS[areaId] = val;
      } else {
        let lst = jsCopy(val);
        let func = 'set' + capitalize(prop);
        let params = lst;
        if (!Array.isArray(params)) params = params.split(',');
        if (mobj[func] !== null) mobj[func](...params);
      }
    }
  }
  return hasStructure;
}
function initSymbolTableForGamesAddons() {
  Daat.GameClasses = {
    gTouchPic: GTouchPic, gNamit: GNamit, gStory: GStory,
    gTouchColors: GTouchColors, gPremem: GPremem, gMem: GMem, gMissingLetter: GMissingLetter,
    gMissingNumber: GMissingNumber, gWritePic: GWritePic, gSayPic: GSayPic, gSteps: GSteps, gElim: GElim,
    gAnagram: GAnagram, gAbacus: GAbacus, gPasscode: GPasscode, gCats: GCats,
  }
}
async function initSyms() {
  console.log('haloooooooooooooooo');
}
function initTable() {
  clearElement(dTableBackground);
  setTableBackground(RED, 'white', true);
  let ltitle = get3ColLineName(dTableBackground, 'title', { hmin: 30 });
  mStyleX(dTitle, { maleft: -50 })
  let ltable = get3ColLineName(dTableBackground, 'table', {});
  let lbottom = get3ColLineName(dTableBackground, 'bottom', { position: 'absolute', bottom: 30 });
}
function initTableOptions(playMode) {
  if (playMode == 'play') {
    S.options.table = {
      showComplexVals: false,
      optIn: null,
      optOut: { visible: -1, obj_type: -1, row: -1, col: -1, rows: -1, cols: -1, neighbors: -1, corners: -1, edges: -1, fields: -1, id: -1, name: -1 },
      showProps: false,
      sysprop: { player: presentPlayer },
      fontSize: M.game == 'catan' ? 12 : 60
    };
  } else {
    S.options.table = {
      showComplexVals: true,
      optin: null,
      optOut: { row: -1, col: -1, neighbors: -1, corners: -1, edges: -1, obj_type: -1, name: -1, id: -1 },
      showProps: true,
      sysprop: M.game == 'catan' ? null : { visible: presentVisible },
      fontSize: 12
    };
  }
}
function initTABLES() {
  let tables = {
    a_d_game: S.settings.gameAreaSize,
  };
  document.getElementById('c_d_statusInHeaderText').innerHTML = ''
  if (isPlain()) {
    let space = 400;
    let pmainSpace = space;
    let pothersSpace = (space - 100) * (S.gameConfig.numPlayers - 1);
    setCSSVariable('--wPlayers', '' + pothersSpace + 'px');
    S.settings.table.defaultArea = 'a_d_objects';
    S.settings.player.defaultArea = 'a_d_player'; //'a_d_options';
    S.settings.player.defaultMainArea = 'a_d_game';
    tables.a_d_game = [pmainSpace, 800];
    document.getElementById('c_d_statusText').innerHTML = 'Me'
  } else {
    document.getElementById('a_d_player_header').innerHTML = '<p>players</p>';
    setCSSVariable('--wPlayers', '400px');
    S.settings.table.defaultArea = 'a_d_objects';
    S.settings.player.defaultArea = 'a_d_player'; //'a_d_options';
    S.settings.player.defaultMainArea = null;
    let d = document.getElementById('a_d_game');
    d.style.overflow = 'visible';
    d.classList.remove('flexWrap');
  }
  for (const areaName of [S.settings.table.defaultArea, S.settings.player.defaultArea, S.settings.player.defaultMainArea]) {
    if (areaName === null) continue;
    let d = document.getElementById(areaName);
    if (d.id != 'a_d_player') { d.style.overflowY = 'auto'; }
    d.style.overflowX = 'hidden';
    d.classList.add('flexWrap');
  }
  for (const areaName in tables) {
    setAreaWidth(areaName, tables[areaName][0]);
    setAreaHeight(areaName, tables[areaName][1]);
  }
}
function initTextures() {
  let textures = lookup(S.options, ['assets', 'textures']);
  if (!textures) return;
  console.log(S.options.assets.textures)
  for (const s of S.options.assets.textures) {
    let key, val;
    if (isList(s)) { key = s[0]; val = s[1]; } else { key = s; val = s; }
  }
}
function initUI() {
  document.title = 'HA!';
  divMain = d3.select('#MAIN');
  divPlayer = d3.select('#PLAYER');
  divOpps = {};
  let dOpps = d3.select('#OPPS');
  for (const plid in playerConfig[GAME].players) {
    let dPlid = dOpps.append('div').attr('id', plid);
    divOpps[plid] = dPlid;
  }
  colors = ['blue', 'red', 'green', 'purple', 'black', 'white'];
  iColor = 0;
}
function initZoom() {
  let bz = localStorage.getItem('bodyZoom');
  if (bz) bz = Math.max(Number(bz), .2);
  else bz = 1.0;
  zoom(bz);
}
function initZoomToFit() { justExpand = true; zoom_on_resize(...arguments); }
function inno_action_achieve(otree, uname) {
  return [];
}
function inno_action_draw(otree, uname) {
  let [age, letter] = inno_get_deck_info_for_player(otree, uname);
  let res = `draw.decks.${letter}.${age}`;
  return [res];
}
function inno_action_meld(otree, uname) {
  return otree[uname].hand.map(x => `${uname}.hand.${x}`);
}
function inno_action_topcard(otree, uname) {
  let top2 = inno_get_top_card_actions(otree, uname);
  return top2;
}
function inno_activate(otree, r, uname, cardname) {
  let fname = `inno_${cardname}_todo`;
  if (nundef(window[fname])) { console.log('activate', cardname, 'NOT IMPLEMENTED!!!!'); return; }
  let todo = window[fname](otree, uname);
  let todo_incl_sharing = inno_add_sharing_players(otree, uname, cardname, todo);
  let idx = otree.todo.indexOf(r);
  console.assert(idx == otree.itask, 'inno_activate: itask does NOT point to r!!!!!');
  otree.todo.splice(idx, 1, ...todo_incl_sharing);
}
function inno_add_sharing_players(otree, uname, cardname, todo) {
  otree.pl_sharing = inno_calc_sharing(otree, uname, cardname);
  let task_list = jsCopy(todo);
  todo = [];
  for (const plname of otree.pl_sharing) {
    let new_task_list = [];
    for (const t of task_list) { let t1 = {}; t1.uname = plname; t1.id = getUID('r'); addKeys(t, t1); new_task_list.push(t1); }
    todo = todo.concat(new_task_list);
  }
  todo = todo.concat(task_list);
  return todo;
}
function inno_agriculture_post(otree, r, uname, action, item) {
  if (action != 'pass') {
    let card = inno_get_cardinfo(stringAfterLast(action, '.'));
    let deck = otree.decks[card.exp[0]][card.age];
    return_elem_to_deck_from(card.key, otree[uname].hand, deck);
    let n = card.age + 1;
    let pl = otree[uname];
    draw_from_deck_to(otree.decks.B[n], pl.scored);
  }
  next_task(otree, r);
  turn_send_move_update(otree, uname);
}
function inno_agriculture_pre(otree, r, uname) {
  r.actions = inno_get_hand_actions(otree, uname);
  r.actions.push('pass');
  activate_actions(r, uname);
}
function inno_agriculture_todo(otree, uname) {
  let r1 = {
    id: getUID('r'),
    uname: uname,
    key: 'inno_agriculture',
    actions: [],
    selected: null,
  };
  let list = [r1];
  return list;
}
function inno_branch(obj, otree, rtree) {
  ui_present_stats(otree);
  let uitree = ui_present_table(rtree, dTable);
  if (nundef(otree.todo)) { otree.todo = inno_todo_init(otree); }
  let req = otree.todo[otree.itask];
  console.log('____________', ITER);
  let my_turn = true;
  window[req.key + '_pre'](otree, req, req.uname);
}
function inno_calc_sharing(otree, uname, ckey) {
  let ci = inno_get_cardinfo(ckey);
  let sym = ci.type;
  let n = otree[uname].totals[sym];
  let pl_sharing = otree.plorder.filter(x => x != uname && otree[x].totals[sym] >= n);
  return pl_sharing;
}
function inno_calc_visible_syms(board, splays = {}) {
  let res = {};
  INNO.symNames.map(x => res[x] = 0);
  for (const color in board) {
    let res_color = inno_calc_visible_syms_pile(board[color], splays[color]);
    for (const k in res) { res[k] += res_color[k]; }
  }
  return res;
}
function inno_calc_visible_syms_pile(keys, dir) {
  let [cards, totals] = [keys.map(x => InnoById[x]), {}];
  INNO.symNames.map(x => totals[x] = 0);
  if (isEmpty(keys)) return totals;
  let top = cards.shift();
  for (const k of top.resources) {
    if (isdef(totals[k])) totals[k] += 1;
  }
  if (nundef(dir) || dir == 0) return totals;
  if (dir == 1) {
  } else if (dir == 2) {
    for (const c of cards) {
      for (const k in totals) {
        if (c.resources[0] == k) totals[k]++;
        if (c.resources[1] == k) totals[k]++;
      }
    }
  }
  return totals;
}
function inno_card(dParent, keyOrName) {
  if (nundef(keyOrName)) keyOrName = chooseRandom(get_keys(InnoById));
  let cardInfo, name, key, id;
  if (isdef(InnoById[keyOrName])) { id = key = keyOrName; cardInfo = InnoById[id]; name = cardInfo.name; }
  else if (isdef(InnoByName[keyOrName])) { name = keyOrName; cardInfo = InnoByName[name]; id = key = cardInfo.id; };
  let sym = INNO.sym[cardInfo.type];
  let info = Syms[sym.key];
  let card = cBlank(dParent, { fg: 'black', bg: INNO.color[cardInfo.color], w: Card.sz, h: Card.sz * .65, margin: 10 });
  let [dCard, sz, szTitle, margin] = [iDiv(card), Card.sz / 5, cardInfo.exp[0] == 'A' ? Card.sz / 12 : Card.sz / 8, 4];
  let [dTitle, dMain] = cTitleArea(card, szTitle);
  let d = mAddContent(dTitle, name, {
    patop: 4, bg: sym.bg, fg: 'white', h: szTitle, fz: szTitle * .7, align: 'center',
    position: 'relative'
  });
  mAddContent(d, cardInfo.age, { hpadding: szTitle / 4, float: 'right' });
  let s = mSym(sym.key, d, { hpadding: szTitle / 4, h: szTitle * .7, fg: sym.fg, float: 'left' });
  let positions = ['tl', 'bl', 'bc', 'br'];
  for (let i = 0; i < 4; i++) {
    let r = cardInfo.resources[i];
    let pos = positions[i];
    if (r in INNO.sym) { innoSym(r, dMain, sz, pos, margin); }
    else if (r == 'None') { innoAgeNumber(cardInfo.age, dMain, sz, pos, margin); }
    else if (isNumber(r)) { innoBonusNumber(r, dMain, sz, pos, margin); }
    else if (r == 'echo') { innoEcho(cardInfo.echo, dMain, sz, pos, margin); }
    else if (r == 'inspire') { innoInspire(cardInfo.inspire, dMain, sz, pos, margin); }
  }
  if (isdef(cardInfo.dogmas)) {
    let box = mBoxFromMargins(dMain, 10, margin, sz + margin, sz + 2 * margin);
    mStyle(box, { align: 'left' });
    let text = '';
    for (const dog of cardInfo.dogmas) {
      let t = startsWith(dog, 'I demand') ? ('I <b>demand</b>' + dog.substring(8)) : startsWith(dog, 'I compell') ? ('I <b>compell</b>' + dog.substring(8)) : dog;
      text += `<span style="color:${sym.bg};font-family:${info.family}">${info.text}</span>` + '&nbsp;' + t + '<br>';
    }
    let t2 = innoText(text);
    mFillText(t2, box);
  } else if (isdef(cardInfo.res_city)) {
    let positions = ['tc', 'tr'];
    for (let i = 0; i < 2; i++) {
      let r = cardInfo.res_city[i];
      let pos = positions[i];
      if (r == 'flag') { innoFlag(cardInfo.type, dMain, sz, pos, margin); }
      else if (r in INNO.sym) { innoSym(r, dMain, sz, pos, margin); }
      else if (r == 'None') { innoAgeNumber(cardInfo.age, dMain, sz, pos, margin); }
      else if (isNumber(r)) { innoBonusNumber(r, dMain, sz, pos, margin); }
      else if (r == 'echo') { innoEcho(cardInfo.echo, dMain, sz, pos, margin); }
      else if (r == 'inspire') { innoInspire(cardInfo.inspire, dMain, sz, pos, margin); }
    }
  }
  card.info = cardInfo;
  return card;
}
function inno_card_fixed_font(dParent, keyOrName) {
  if (nundef(keyOrName)) keyOrName = chooseRandom(get_keys(InnoById));
  let cardInfo, name, key, id;
  if (isdef(InnoById[keyOrName])) { id = key = keyOrName; cardInfo = InnoById[id]; name = cardInfo.name; }
  else if (isdef(InnoByName[keyOrName])) { name = keyOrName; cardInfo = InnoByName[name]; id = key = cardInfo.id; };
  let sym = INNO.sym[cardInfo.type];
  let info = Syms[sym.key];
  let card = cBlank(dParent, { fg: 'black', bg: INNO.color[cardInfo.color], w: Card.sz, h: Card.sz * .65, margin: 10 });
  let [dCard, sz, szTitle, margin] = [iDiv(card), Card.sz / 5, cardInfo.exp[0] == 'A' ? Card.sz / 12 : Card.sz / 8, 4];
  let [dTitle, dMain] = cTitleArea(card, szTitle);
  let d = mAddContent(dTitle, name, {
    patop: 4, bg: sym.bg, fg: 'white', h: szTitle, fz: szTitle * .7, align: 'center',
    position: 'relative'
  });
  mAddContent(d, cardInfo.age, { hpadding: szTitle / 4, float: 'right' });
  let s = mSym(sym.key, d, { hpadding: szTitle / 4, h: szTitle * .7, fg: sym.fg, float: 'left' });
  let positions = ['tl', 'bl', 'bc', 'br'];
  for (let i = 0; i < 4; i++) {
    let r = cardInfo.resources[i];
    let pos = positions[i];
    if (r in INNO.sym) { innoSym(r, dMain, sz, pos, margin); }
    else if (r == 'None') { innoAgeNumber(cardInfo.age, dMain, sz, pos, margin); }
    else if (isNumber(r)) { innoBonusNumber(r, dMain, sz, pos, margin); }
    else if (r == 'echo') { innoEcho(cardInfo.echo, dMain, sz, pos, margin); }
  }
  let box = mBoxFromMargins(dMain, 10, margin, sz + margin, sz + 2 * margin);
  console.log('box', box);
  mStyle(box, { align: 'left', padding: 4 });
  let text = '';
  for (const dog of cardInfo.dogmas) {
    let t = startsWith(dog, 'I demand') ? ('I <b>demand</b>' + dog.substring(8)) : startsWith(dog, 'I compell') ? ('I <b>compell</b>' + dog.substring(8)) : dog;
    text += `<span style="color:${sym.bg};font-family:${info.family}">${info.text}</span>` + '&nbsp;' + t + '<br>';
  }
  let t2 = innoText(text);
  mText(t2, box, { fz: 10 });
  card.info = cardInfo;
  return card;
}
function inno_code_of_laws_post(otree, r, uname, action, item) {
  if (action != 'pass') {
    let card = inno_get_cardinfo(stringAfterLast(action, '.'));
    elem_from_to(card.key, otree[uname].hand, otree[uname].board[card.color]);
    let splay = inno_get_splay(otree, `${uname}.board.${card.color}`);
    if (splay == 0 && otree[uname].board[card.color].length > 1) otree[uname].splays[card.color] = 1;
  }
  next_task(otree, r);
  turn_send_move_update(otree, uname);
}
function inno_code_of_laws_pre(otree, r, uname) {
  r.actions = inno_get_hand_actions(otree, uname);
  r.actions.push('pass');
  activate_actions(r, uname);
}
function inno_code_of_laws_todo(otree, uname) {
  console.log('making todolist for code_of_laws!!!');
  let r1 = {
    id: getUID('r'),
    uname: uname,
    key: 'inno_code_of_laws',
    actions: [],
    selected: null,
  };
  let list = [r1];
  return list;
}
function inno_create_card_assets() {
  Dinno = { A: {}, B: {}, C: {}, E: {}, F: {} };
  InnoById = {};
  InnoByName = {};
  for (const exp in Cinno) {
    for (const name in Cinno[exp]) {
      let c = Cinno[exp][name];
      c.name = name;
      c.exp = exp;
      let id = inno_get_id(c);
      c.id = c.key = id;
      if (isdef(InnoById[id])) { console.log('duplicate id', id, InnoById[id].name, c.name); }
      InnoById[id] = c;
      let key_name = name.toLowerCase().trim();
      if (isdef(InnoByName[key_name])) console.log('duplicate name', name);
      InnoByName[key_name] = c;
      lookupAddToList(Dinno, [exp[0], c.age], c.id);
    }
  }
}
function inno_create_ui_tree(n, dParent, r) {
  let d;
  if (n.path.includes('splays')) {
  } else if (n.path.includes('achievements')) {
    let id = getUID('u');
    d = mDiv(dParent, { bg: 'sienna', fg: 'white', w: '100%' }, id, n.path);
    mFlexWrap(d);
    for (const cont of n.content) {
      let card = InnoById[cont];
      let d1 = mDiv(d, { bg: 'sienna', margin: 4, border: 'blue', wmin: 25 }, null, isdef(card) ? card.age : cont);
    }
    r.add_ui_node(d, id, n.oid);
  } else if (startsWith(n.path, 'deck')) {
    mFlexWrap(dParent);
    let id = getUID('u');
    let styles = isNumber(stringAfterLast(n.path, '.')) ? { bg: 'beige', fg: 'black', margin: 4, border: 'red', wmin: 25 } : { bg: 'beige', fg: 'black' };
    d = mDiv(dParent, styles, id, n.path);
    r.add_ui_node(d, id, n.oid);
  } else if (r.otree.player_names.includes(n.content)) {
    let id = getUID('u');
    let bg = r.otree[n.content].color;
    let styles = { bg: bg, fg: 'contrast', w: '100%' };
    d = mDiv(dParent, styles, id, n.path);
    r.add_ui_node(d, id, n.oid);
  } else if (n.type == 'cardlist' && !n.path.includes('board')) {
    let id = getUID('u');
    d = mDiv(dParent, { bg: '#00000080', gap: 10, padding: 10 }, id, stringAfterLast(n.path, '.'));
    mCenterFlex(d);
    r.add_ui_node(d, id, n.oid);
  } else if (n.type == 'string' && !endsWith(n.path, 'board')) {
    let id = getUID('u');
    d = mDiv(dParent, { bg: 'inherit' }, id, n.content);
    r.add_ui_node(d, id, n.oid);
  } else if (endsWith(n.path, 'board')) {
    let id = getUID('u');
    d = mDiv(dParent, { bg: 'inherit' }, id, n.content);
    mFlexWrap(d);
    r.add_ui_node(d, id, n.oid);
  } else if (n.type == 'cardlist' && n.path.includes('board')) {
    let id = getUID('u');
    d = mDiv(dParent, {}, id);
    let splay = inno_get_splay(r.otree, n.path);
    let [num, wcard, hcard, ov] = [n.content.length, 300, 200, 78];
    mContainerSplay(d, splay, wcard, hcard, num, ov);
    r.add_ui_node(d, id, n.oid);
  } else if (n.type == 'card') {
    let c;
    if (n.path.includes('board')) {
      c = inno_present_card(dParent, n.content);
      let list = lookup(Session.otree, stringBeforeLast(n.path, '.').split('.'));
      let splay = inno_get_splay(r.otree, n.path);
      mItemSplay(c, list, splay);
    } else {
      c = inno_present_card(dParent, n.content);
      let d = iDiv(c);
    }
    r.add_ui_node(iDiv(c), c.id, n.oid);
  }
  if (nundef(d)) return;
  for (const ch of n.children) {
    inno_create_ui_tree(r.nodes[ch], d, r);
  }
}
function inno_draw_action(otree, r, uname, exp, age) {
  draw_from_deck_to(otree.decks[exp][age], otree[uname].hand);
  next_task(otree, r);
}
function inno_get_all_actions(otree, uname) {
  let actions = [];
  let ameld = inno_action_meld(otree, uname);
  let atop = inno_action_topcard(otree, uname);
  let achieve = inno_action_achieve(otree, uname);
  let adraw = inno_action_draw(otree, uname);
  actions = atop.concat(ameld, achieve, adraw);
  return actions;
}
function inno_get_basic_deck_age(otree, min_age) {
  for (let i = min_age; i <= 10; i++) {
    let deck = otree.decks.B[i];
    let len = deck.length;
    if (len > 0) return i;
  }
  return 11;
}
function inno_get_cardinfo(key) { return InnoById[key]; }
function inno_get_deck_age(otree, deck_letter, min_age = 1) {
  let deck_age = inno_get_basic_deck_age(otree, min_age);
  if (deck_letter == 'B') return deck_age;
  let deck = otree.decks[deck_letter][deck_age];
  while (deck_age <= 10 && isEmpty(deck)) { deck_age += 1; deck = otree.decks[deck_letter][deck_age]; }
  return deck_age;
}
function inno_get_deck_info_for_player(otree, uname) {
  let has_echo = inno_has_echo(otree, uname);
  let letter = has_echo || isEmpty(otree[uname].hand) ? 'B' : 'E';
  let min_age = inno_get_player_age(otree, uname);
  let age = inno_get_deck_age(otree, letter, min_age);
  return [age, letter];
}
function inno_get_hand_actions(otree, uname) {
  let actions = [];
  otree[uname].hand.map(x => actions.push(`${uname}.hand.${x}`));
  return actions;
}
function inno_get_id(c) { return normalize_string(c.name); }
function inno_get_object_keys(otree) {
  let keys = {}; for (const k in InnoById) keys[k] = true;
  for (const k of otree.plorder) keys[k] = true;
  for (const k of ['decks', 'board', 'splays', 'hand', 'green', 'purple', 'blue', 'red', 'yellow', 'forecast', 'scored', 'artifact', 'special_achievements', 'achievements']) keys[k] = true;
  let decknames = 'ABCEF';
  for (let i = 0; i < decknames.length; i++) { keys[decknames[i]] = true; }
  for (let age = 1; age <= 10; age++) { keys['' + age] = true; }
  return keys;
}
function inno_get_phase(iphase) { return INNO.phases[iphase].key; }
function inno_get_player_age(otree, uname) {
  let top = inno_get_top_card_info(otree, uname);
  let maxage = arrMinMax(top, x => x.age).max;
  return maxage;
}
function inno_get_splay(otree, path) {
  let [uname, x, color, y] = path.split('.');
  let splay = otree[uname].splays[color];
  return splay;
}
function inno_get_top_card_actions(otree, uname) {
  let keys = inno_get_top_card_keys(otree, uname);
  let res = keys.map(x => `${uname}.board.${inno_get_cardinfo(x).color}.${x}`);
  return res;
}
function inno_get_top_card_info(otree, uname) { return inno_get_top_card_keys(otree, uname).map(x => inno_get_cardinfo(x)); }
function inno_get_top_card_keys(otree, uname) {
  let pl = otree[uname];
  let board = pl.board;
  let top = [];
  for (const k in board) { if (!isEmpty(board[k])) top.push(arrFirst(board[k])); }
  return top;
}
function inno_has_echo(otree, uname) {
  let handcardinfo = otree[uname].hand.map(x => inno_get_cardinfo(x));
  let has_echo = firstCond(handcardinfo, x => x.exp[0] == 'E');
  return has_echo;
}
function inno_has_towers(cardinfo) { return cardinfo.resources.includes('tower'); }
function inno_init_post(otree, r, uname, action, item) {
  let path = r.selected;
  let cardname = stringAfterLast(path, '.');
  let card = inno_get_cardinfo(cardname);
  let pl = otree[uname];
  lookupAddToList(otree, ['progress'], { name: uname, key: cardname });
  elem_from_to(cardname, pl.hand, pl.board[card.color]);
  let i = otree.itask + 1;
  if (i >= get_num_players(otree)) {
    otree.plorder = sortBy(otree.progress, 'key').map(x => x.name);
    otree.history = otree.todo;
    otree.progress = null;
    otree.todo = inno_todo_justone(otree);
  } else {
    otree.itask = i;
  }
  turn_send_move_update(otree, uname);
}
function inno_init_pre(otree, r, uname) {
  r.actions = inno_get_hand_actions(otree, uname);
  activate_actions(r, uname);
}
function inno_is_artifact(cardinfo) { return cardinfo.exp[0] == 'A'; }
function inno_is_basic(cardinfo) { return cardinfo.exp[0] == 'B'; }
function inno_is_echoes(cardinfo) { return cardinfo.exp[0] == 'E'; }
function inno_is_figure(cardinfo) { return cardinfo.exp[0] == 'F'; }
function inno_justone_post(otree, r, uname, action, item) {
  inno_perform_action(otree, r, uname, action, item);
  turn_send_move_update(otree, uname);
}
function inno_justone_pre(otree, r, uname) {
  r.actions = inno_get_all_actions(otree, uname);
  activate_actions(r, uname);
}
function inno_meld(otree, r, uname, cardname) {
  let ci = inno_get_cardinfo(cardname);
  let pl = otree[uname];
  elem_from_to_top(cardname, pl.hand, pl.board[ci.color]);
  next_task(otree, r);
}
function inno_metalworking_post(otree, r, uname, action, item) {
  next_task(otree, r);
  turn_send_move_update(otree, uname);
}
function inno_metalworking_pre(otree, r, uname) {
  let deck_letter = inno_has_echo(otree, uname) ? 'E' : 'B';
  let card = null;
  while (nundef(card) || inno_has_towers(card)) {
    let deck_age = inno_get_deck_age(otree, deck_letter);
    let deck = otree.decks[deck_letter][deck_age];
    let peek = deck[0];
    ckey = deck.shift();
    console.log('age', deck_age, 'deck length', deck.length)
    console.assert(isdef(ckey) && peek == ckey, 'metalworking: not drawing top card!!!!!!!');
    card = inno_get_cardinfo(ckey);
    console.log('draw card', ckey, inno_has_towers(card));
    if (inno_has_towers(card)) otree[uname].scored.push(ckey); else otree[uname].hand.push(ckey);
  }
  console.log('metalworking is *DONE*');
  inno_metalworking_post(otree, r, uname);
}
function inno_metalworking_todo(otree, uname) {
  console.log('making todolist for metalworking!!!');
  let r1 = {
    id: getUID('r'),
    uname: uname,
    key: 'inno_metalworking',
    actions: [],
    selected: null,
  };
  let list = [r1];
  return list;
}
function inno_perform_action(otree, r, uname, action, item) {
  console.log('inno_perform_action', otree, r, uname, action, item);
  let a = action;
  console.assert(r.selected == action, 'r.selected NOT SAME AS action!!!!!!!!!!!!!!!!!!!!!!!!');
  let parts = a.split('.');
  if (parts.length == 3) {
    let [x, obj, cardname] = parts;
    if (obj == 'hand' && x == uname) {
      inno_meld(otree, r, uname, cardname);
    }
    let [deck, exp, age] = parts;
    if (deck == 'decks') {
      console.assert(false, 'SHOULD NOT GET HERE HAPPEN!!!! inno_perform_action draw mit a=draw.decks...!!!!!!!!!!!!!!!');
    }
  } else if (parts.length == 4) {
    let [x, obj, color, cardname] = parts;
    if (obj == 'board' && x == uname) {
      inno_activate(otree, r, uname, cardname);
    }
    let [action, deck, exp, age] = parts;
    if (action == 'draw' && deck == 'decks') {
      inno_draw_action(otree, r, uname, exp, age);
    }
  }
}
function inno_perform_initial_selections(r, otree) {
  let pl_order = [];
  for (const uname of otree.turn) {
    let path = r.selected[uname][0];
    let cardname = stringAfterLast(path, '.');
    let card = inno_get_cardinfo(cardname);
    let pl = otree[uname];
    pl_order.push({ name: uname, key: cardname });
    elem_from_to(cardname, pl.hand, pl.board[card.color]);
  }
  return pl_order;
}
function inno_present_board(dParent, board) {
  let dBoard = mDiv(dParent, {}, null, 'board');
  mFlex(dBoard);
  let boardItemLists = [];
  for (const color in board) {
    let cardlist = board[color];
    let d = mDiv(dBoard);
    let items = inno_present_cards(d, cardlist);
    boardItemLists.push(items);
  }
  return boardItemLists;
}
function inno_present_card(dParent, k) { let card = inno_card(dParent, k); card.key = card.info.key; return card; }
function inno_present_cards(dParent, keys) {
  let items = [];
  for (const k of keys) {
    let card = inno_present_card(dParent, k);
    items.push(card);
  }
  return items;
}
function inno_present_hand(dParent, hand) {
  let dHand = mDiv(dParent, {}, null, 'hand');
  mFlexWrap(dHand); mLinebreak(dHand);
  let handItems = inno_present_cards(dHand, hand);
  return handItems;
}
function inno_regular_pre(otree, r, uname) { inno_justone_pre(otree, r, uname); }
function inno_setup(player_names) {
  inno_shuffle_decks();
  let pre_fen = {};
  let decks = pre_fen.decks = jsCopy(Dinno);
  pre_fen.achievements = [];
  for (const age in decks.B) { last_elem_from_to(decks.B[age], pre_fen.achievements); }
  pre_fen.special_achievements = ['monument', 'empire', 'world', 'wonder', 'universe', 'legend', 'repute', 'fame', 'glory', 'victory', 'supremacy', 'destiny', 'wealth', 'heritage', 'history'];
  let pls = pre_fen.players = {};
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  for (const plname of player_names) {
    let pl = pls[plname] = {
      hand: [],
      board: { blue: [], red: [], green: [], yellow: [], purple: [] },
      splays: { blue: 0, red: 0, green: 0, yellow: 0, purple: 0 },
      achievements: [],
      scored: [],
      forecast: [],
      artifact: null
    };
    last_elem_from_to(deck1, pl.hand); last_elem_from_to(deck2, pl.hand);
  }
  pre_fen.plorder = jsCopy(player_names);
  let fen = {
    players: pre_fen.players,
    decks: pre_fen.decks,
  };
  addKeys(pre_fen, fen);
  return fen;
}
function inno_show_other_player_info(ev) {
  console.log('enter', ev.target);
  let id = evToId(ev);
  let g = Session;
  let plname = stringAfter(id, '_');
  let pl = firstCond(g.players, x => x.name == plname);
  console.log('player info for', pl);
}
function inno_shuffle_decks() {
  for (const exp in Dinno) {
    for (const age in Dinno[exp]) {
      shuffle(Dinno[exp][age]);
    }
  }
}
function inno_stat_sym(key, n, dParent, sz) {
  let d = mDiv(dParent, { display: 'flex', dir: 'c', fz: sz });
  let s = mSym(INNO.sym[key].key, d, { h: sz, fz: sz, fg: INNO.sym[key].fg });
  d.innerHTML += `<span>${n}</span>`;
  return d;
}
function inno_todo_init(otree) {
  let r = {
    key: 'inno_init',
    actions: [],
    selected: null,
  };
  let list = [];
  for (const uname of otree.plorder) {
    let task = jsCopy(r);
    task.id = getUID('r');
    task.uname = uname;
    list.push(task);
  };
  otree.itask = 0;
  return list;
}
function inno_todo_justone(otree) {
  let r = {
    key: 'inno_justone',
    actions: [],
    selected: null,
  };
  let list = otree.todo = [];
  for (const uname of otree.plorder) {
    let i = get_index_in_plorder(otree, uname);
    if (i >= otree.plorder.length / 2) break;
    let task = jsCopy(r);
    task.id = getUID('r');
    task.uname = uname;
    list.push(task);
  };
  otree.itask = 0;
  return list;
}
function inno_todo_regular(otree, uname) {
  let r = {
    key: 'inno_regular',
    uname: uname,
    actions: [],
    selected: null,
  };
  let r1 = jsCopy(r); r1.id = getUID('r');
  let r2 = jsCopy(r); r2.id = getUID('r');
  let list = [r1, r2];
  otree.itask = 0;
  return list;
}
function inno_undo_random_deal(fen) {
  for (const uname in fen.players) {
    let pl = fen.players[uname];
    last_elem_from_to(pl.hand, fen.decks.E[1]);
    last_elem_from_to(pl.hand, fen.decks.B[1]);
  }
}
function inno_ut0_create_staged() {
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  console.log('fen', fen)
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('agriculture', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking', 'mimi.board.yellow.agriculture', 'mimi.hand.comb',
    'leo.board.red.metalworking', 'leo.board.red.metalworking', 'mimi.board.yellow.agriculture', 'pass', 'mimi.board.yellow.agriculture', 'pass'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut1_create_staged() {
  console.log('*** TEST: activate agriculture ***');
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('agriculture', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking', 'mimi.board.yellow.agriculture', 'mimi.hand.comb'];
  DA.iter = 13;
  return [fen, player_names];
}
function inno_ut10_create_staged() {
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('agriculture', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking', 'draw', 'draw', 'draw', 'draw'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut11_create_staged() {
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('agriculture', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking', 'draw', 'draw', 'draw', 'draw', 'meld', 'meld', 'draw', 'draw', 'meld', 'meld'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut12_create_staged() {
  console.log('*** TEST: activate code_of_laws ***');
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('code_of_laws', deck1, mimi.hand);
  elem_from_to('puppet', deck2, mimi.hand);
  elem_from_to('sailing', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  DA.staged_moves = ['mimi.hand.code_of_laws', 'leo.hand.sailing', 'mimi.board.purple.code_of_laws', 'leo.hand.soap', 'mimi.hand.puppet'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut2_create_staged() {
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('agriculture', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  DA.staged_moves = ['mimi.hand.agriculture', 'leo.hand.metalworking'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut3_create_staged() {
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo', 'felix', 'amanda'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo, felix, amanda] = [fen.decks, fen.players.mimi, fen.players.leo, fen.players.felix, fen.players.amanda];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('wheel', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  elem_from_to('agriculture', deck1, felix.hand);
  elem_from_to('chopsticks', deck2, felix.hand);
  elem_from_to('pottery', deck1, amanda.hand);
  elem_from_to('dice', deck2, amanda.hand);
  DA.staged_moves = ['mimi.hand.wheel', 'leo.hand.metalworking', 'felix.hand.agriculture', 'amanda.hand.dice'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut4_create_staged() {
  console.log('*** TEST: sharing agriculture ***');
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo', 'felix'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo, felix] = [fen.decks, fen.players.mimi, fen.players.leo, fen.players.felix];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('pottery', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  elem_from_to('agriculture', deck1, felix.hand);
  elem_from_to('chopsticks', deck2, felix.hand);
  DA.staged_moves = ['mimi.hand.pottery', 'leo.hand.soap', 'felix.hand.agriculture'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut5_create_staged() {
  console.log('*** TEST: sharing metalworking ***');
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo', 'felix'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo, felix] = [fen.decks, fen.players.mimi, fen.players.leo, fen.players.felix];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('wheel', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  elem_from_to('agriculture', deck1, felix.hand);
  elem_from_to('chopsticks', deck2, felix.hand);
  DA.staged_moves = ['mimi.hand.wheel', 'leo.hand.metalworking', 'felix.hand.agriculture', 'draw.decks.B.1'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut6_create_staged() {
  console.log('*** TEST: draw ***');
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('wheel', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  DA.staged_moves = ['mimi.hand.wheel', 'leo.hand.soap'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut7_create_staged() {
  console.log('*** TEST: draw 2 ***');
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('wheel', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('soap', deck2, leo.hand);
  DA.staged_moves = ['mimi.hand.wheel', 'leo.hand.soap', 'decks.E.1', 'decks.B.1', 'decks.B.1'];
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut8_create_staged() {
  console.log('*** TEST: splay up ***');
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('agriculture', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('puppet', deck2, leo.hand);
  elem_from_to('chopsticks', deck2, mimi.board.yellow);
  elem_from_to('soap', deck2, mimi.board.yellow);
  elem_from_to('fermenting', decks.B[2], mimi.board.yellow);
  fen.players.mimi.splays.yellow = 3;
  DA.iter = 100;
  return [fen, player_names];
}
function inno_ut9_create_staged() {
  console.log('*** TEST: splay complex ***');
  Session.cur_game = 'gPreinno';
  let player_names = ['mimi', 'leo'];
  let fen = inno_setup(player_names);
  let [decks, mimi, leo] = [fen.decks, fen.players.mimi, fen.players.leo];
  let deck1 = decks.B[1]; let deck2 = decks.E[1];
  inno_undo_random_deal(fen);
  elem_from_to('agriculture', deck1, mimi.hand);
  elem_from_to('comb', deck2, mimi.hand);
  elem_from_to('metalworking', deck1, leo.hand);
  elem_from_to('puppet', deck2, leo.hand);
  let mydeck1 = decks.B[1].map(x => ({ key: x, deck: decks.B[1] }));
  let mydeck2 = decks.B[2].map(x => ({ key: x, deck: decks.B[2] }));
  let mydeck3 = decks.B[3].map(x => ({ key: x, deck: decks.B[3] }));
  let mydecks = mydeck1.concat(mydeck2).concat(mydeck3);
  for (const x of mydecks) { elem_from_to(x.key, x.deck, mimi.board[inno_get_cardinfo(x.key).color]); }
  fen.players.mimi.splays.blue = 3;
  fen.players.mimi.splays.red = 0;
  fen.players.mimi.splays.green = 1;
  fen.players.mimi.splays.yellow = 2;
  fen.players.mimi.splays.purple = 2;
  DA.iter = 100;
  return [fen, player_names];
}
function innoAgeNumber(n, dParent, sz, pos, margin = 10) {
  let x = Card.sz * .04; sz -= x;
  let hOff = 0;
  let styles = { wmin: sz * 1.1, h: sz, bg: '#131313', align: 'center' };
  let box = mShape('hexFlat', dParent, styles); mPlace(box, pos, margin, margin - hOff / 2);
  s = mDiv(box, { fz: sz * .6, fg: 'white', display: 'inline-block' }, null, n);
  mPlace(s, 'cc');
  return box;
}
function innoBonusNumber(n, dParent, sz, pos, margin = 10) {
  let hOff = margin / 2;
  let styles = { w: sz, h: sz - hOff, bg: 'brown', box: true, align: 'center' };
  let box = mShape('circle', dParent, styles); mPlace(box, pos, margin + hOff / 2, margin);
  let dText = mDiv(box, { fz: sz * .1, fg: 'black', 'line-height': sz * .1, matop: sz * .05 }, null, 'bonus');
  let dNum = mDiv(box, { fz: sz * .7, fg: 'black', 'line-height': sz * .65 }, null, n);
  return box;
}
function innoEcho(text, dParent, sz, pos, margin = 10) {
  if (isList(text)) text = text.join('<br>');
  margin /= 2;
  sz += margin / 4;
  let box = mDiv(dParent, { w: sz, h: sz, bg: 'black', fg: 'white', rounding: 10 });
  mPlace(box, pos, margin);
  box.onclick = (ev) => makeInfobox(ev, box, 3);
  let t2 = innoText(text);
  mFillText(t2, box);
  return box;
}
function innoFlag(cardType, dParent, sz, pos, margin = 10) {
  let box = mDiv(dParent, { w: sz, h: sz, bg: INNO.sym.flag.bg, rounding: 10 }); if (isdef(pos)) mPlace(box, pos, margin);
  s = mSym(INNO.sym.flag.key, box, { sz: sz * .75, fg: INNO.sym[cardType].bg }, 'cc');
  return box;
}
function innoInspire(text, dParent, sz, pos, margin = 10) {
  if (isList(text)) text = text.join('<br>');
  margin /= 2;
  sz += margin / 4;
  let box = mDiv(dParent, { w: sz, h: sz, bg: '#ffffff80', fg: 'black', rounding: 10 });
  mPlace(box, pos, margin);
  box.onclick = (ev) => makeInfobox(ev, box, 3);
  let t2 = innoText(text);
  mFillText(t2, box);
  return box;
}
function innoSym(key, dParent, sz, pos, margin = 10) {
  let box = mDiv(dParent, { w: sz, h: sz, bg: INNO.sym[key].bg, rounding: 10 }); if (isdef(pos)) mPlace(box, pos, margin);
  s = mSym(INNO.sym[key].key, box, { sz: sz * .75, fg: INNO.sym[key].fg }, 'cc');
  return box;
}
function innoSymInline(key, dParent) {
  s = mSymInline(INNO.sym[key].key, dParent, { fg: INNO.sym[key].fg, bg: INNO.sym[key].bg, rounding: 10 });
  return s;
}
function innoText(text) {
  for (const s in INNO.sym) { INNO.sym[s].sym = Syms[INNO.sym[s].key]; }
  let parts = text.split('[');
  let s = parts[0];
  for (let i = 1; i < parts.length; i++) {
    let part = parts[i];
    let kw = stringBefore(part, ']');
    let sp;
    let fz = Card.sz * .04;
    if (Object.keys(INNO.sym).includes(kw)) { let o = INNO.sym[kw]; sp = makeSymbolSpan(o.sym, o.bg, o.fg, fz * .9, '20%'); }
    else if (isNumber(kw)) { sp = makeNumberSpan(kw, '#232323', 'white', fz * .9, '20%'); }
    s += sp + stringAfter(part, ']');
  }
  return s;
}
function innovation_get_card(ckey, index, h = 200) {
  let filename = `${Basepath}assets/games/innovation/img${ckey}.jpg`;
  let clip = 50;
  let html = `<img src='${filename}' height='${h + clip}' style='clip-path:inset(0px 0px ${clip}px 0px)'></img>`;
  let d = mDiv(null, { rounding: 8, bg: 'blue', margin: 10, h: h, w: h * 141 / 200, overflow: 'hidden' }, null, html, 'card');
  mMagnifyOnHoverControl(d)
  let item = { key: ckey, index: index, div: d, html: html, h: h, faceUp: true };
  d.onclick = () => { face_up(item); };
  return item;
}
function innovation_present(fen, d_table) {
  G = {};
  G.deck = ui_generic_deck(d_table, fen.deck);
  let pls = G.players = {};
  for (const uname in fen.players) {
    let pl = pls[uname] = {};
    let fpl = fen.players[uname];
    let user = firstCond(Users, x => x.name == uname);
    copyKeys(user, pl)
    console.log('pl', uname, pl)
    let d = mDiv(d_table, { bg: user.color }, null, uname); mFlexWrap(d)
    pl.div = d;
    let i = 0; let items = pl.hand = fpl.hand.map(x => { i++; return innovation_get_card(x, i) });
    for (const item of items) mAppend(d, iDiv(item));
  }
}
function innovation_setup(players) {
  let fen = {};
  let deck = fen.deck = shuffle(range(0, 435));
  let pls = fen.players = {};
  for (const uname of players) {
    let pl = pls[uname] = {};
    pl.hand = deck_deal(deck, 7);
  }
  let plturn = fen.plturn = rChoose(players);
  let phase = fen.phase = 'create';
  return fen;
}
function input_to_anzeige1(caption, index) {
  let [A, fen, uplayer] = [Z.A, Z.fen, Z.uplayer];
  const di = { '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine', T: 'ten', J: 'jack', Q: 'queen', K: 'king', A: 'ace' };
  let bid = fen.newbid;
  if (index == 0) {
    bid[0] = Number(caption);
    if (bid[0] == 0) {
      bid[0] = '_'; bid[1] = '_';
    } else if (bid[1] == '_') {
      let hand = fen.players[uplayer].hand;
      let c1 = arrLast(hand);
      let r = c1[0];
      if (r == '2') r = bid[3] == 'ace' ? 'K' : 'A';
      if (di[r] == bid[3]) bid[1] = bid[3] == 'three' ? 'four' : 'three'; else bid[1] = di[r];
    }
  } else if (index == 1) {
    bid[1] = di[caption];
    if (bid[0] == '_') bid[0] = 1;
    if (bid[3] == bid[1]) { bid[0] = bid[0] + bid[2]; bid[2] = bid[3] = '_'; }
  } else if (index == 2) {
    bid[2] = Number(caption);
    if (bid[2] == 0) {
      bid[2] = '_'; bid[3] = '_';
    } else if (bid[3] == '_') {
      let hand = fen.players[uplayer].hand;
      let c1 = hand[0];
      let r = c1[0];
      if (r == '2') r = bid[1] == 'ace' ? 'K' : 'A';
      if (di[r] == bid[1]) bid[3] = bid[1] == 'three' ? 'four' : 'three'; else bid[3] = di[r];
    }
  } else {
    bid[3] = di[caption];
    if (bid[2] == '_') bid[2] = 1;
    if (bid[3] == bid[1]) { bid[0] = bid[0] + bid[2]; bid[1] = bid[3]; bid[2] = bid[3] = '_'; }
  }
  for (let i = 0; i < 4; i++)  iDiv(UI.panelItems[i]).innerHTML = bid[i];
}
function insertColNew(board, cClick) { return expandBoard(board, board.rows, board.cols + 1, cClick + 1); }
function insertHere() {
  var thisScript = document.scripts[document.scripts.length - 1];
  var parent = thisScript.parentElement;
  for (let i = 0; i < arguments.length; i++) {
    const el = arguments[i];
    if (typeof el == 'string') {
      thisScript.nextSibling.insertAdjacentHTML('beforebegin', el);
    } else {
      parent.insertBefore(el, thisScript.nextSibling);
    }
  }
}
function insertRowNew(board, cClick) { return expandBoard(board, board.rows + 1, board.cols, cClick + 1); }
function instanceOf(o, className) {
  let otype = o.obj_type;
  switch (className) {
    case '_player':
    case 'player': return ['GamePlayer', 'me', '_me', 'player', '_player', 'opp', 'opponent', '_opponent'].includes(otype); break;
    case 'building': return otype == 'farm' || otype == 'estate' || otype == 'chateau' || otype == 'settlement' || otype == 'city' || otype == 'road'; break;
  }
}
function instantiateFractions(wp) {
  let text = wp.text;
  let parts = text.split('{');
  console.log('parts', parts);
  let tnew = '';
  if (!startsWith(text, '{')) { tnew += parts[0]; parts = parts.slice(1); }
  let denom;
  for (const part of parts) {
    let textPart = stringAfter(part, '}');
    let key = part.substring(0, 2);
    console.log('key', key);
    if (part[0] == 'F') {
      let numer = part[1] == 'a' ? 1 : isdef(denom) ? denom : randomNumber(2, 8);
      if (nundef(denom)) {
        denom = numer <= 2 ? randomNumber(numer + 1, 9) :
          numer < 9 ? coin() ? randomNumber(2, numer - 1) : randomNumber(numer + 1, 9) : randomNumber(2, number - 1);
      }
      tnew += ' ' + getTextForFraction(numer, denom);
      operands.push(numer / denom);
    }
    tnew += ' ' + textPart.trim();
  }
  wp.text = tnew.trim();
}
function instantiateNames(wp) {
  let text = wp.text;
  let parts = text.split('@P');
  let diNames = wp.diNames = {};
  let tnew = '';
  let allNames = jsCopy(arrPlus(GirlNames, BoyNames));
  let gNames = jsCopy(GirlNames);
  let bNames = jsCopy(BoyNames);
  if (!startsWith(text, '@P')) { tnew += parts[0]; parts = parts.slice(1); }
  for (const part of parts) {
    let textPart = stringAfter(part, ' ');
    let hasDot = part[2] == '.';
    let key = part.substring(0, 2);
    if (['G', 'B', 'P'].includes(part[0])) {
      let nlist = part[0] == 'P' ? allNames : part[0] == 'B' ? bNames : gNames;
      if (isdef(diNames[key])) {
        tnew += ' ' + diNames[key];
      } else {
        diNames[key] = chooseRandom(nlist);
        removeInPlace(nlist, diNames[key]);
        removeInPlace(allNames, diNames[key]);
        tnew += ' ' + diNames[key];
      }
    }
    tnew += (hasDot ? '. ' : ' ') + textPart.trim();
  }
  wp.text = tnew.trim();
  if (wp.sol[0] == 'p') {
    let k = wp.sol.trim().substring(3);
    wp.result = { number: 0, text: diNames[k] };
    return true;
  } else { return false; }
}
function instantiateNumbers(wp) {
  let text = wp.text;
  if (wp.sol[0] == 's') { wp.result = { number: 0, text: wp.sol.substring(1) }; return [{}, '']; }
  let diop = wp.diop = {}, res, result = [], eq;
  let solist = wp.sol.split('=>');
  for (const sol of solist) {
    [res, eq] = replaceSol(sol, diop);
    result.push(res);
  }
  result = arrLast(result).res;
  wp.result = { number: isdef(diop.R) ? diop.R : result };
  wp.result.text = '' + wp.result.number;
  for (const k in diop) {
    if (k == 'R') continue;
    text = replaceAll(text, '@' + k, valToString(diop[k]));
  }
  wp.text = text;
  fractionConvert(wp, diop);
  return [diop, eq];
}
function instantiateNumbers_dep(wp) {
  let text = wp.text;
  let diop = {};
  let sol = wp.sol;
  let rhs = stringBefore(sol, '=');
  let type = rhs.includes('*') ? rhs.includes('R') ? 'div' : 'mult' : rhs.includes('R') ? 'minus' : 'plus';
  let i = 0;
  while (i < rhs.length) {
    if (rhs[i] == 'R') { diop.R = getOperand(type); i += 1; }
    else if (rhs[i] == 'N') {
      i += 1;
      let inum = Number(rhs[i]);
      let k = 'N' + inum;
      diop[k] = getOperand(type);
      i += 1;
    } else i += 1;
  }
  i = 0;
  while (i < rhs.length) {
    if (rhs[i] == 'n') {
      i += 1;
      let inum = Number(rhs[i]);
      let k = 'n' + inum;
      let kN = 'N' + inum;
      let x = diop[kN];
      diop[k] = randomNumber(1, x - 1);
      i += 1;
    } else i += 1;
  }
  let eq = rhs;
  for (const k in diop) {
    eq = eq.replace(k, diop[k]);
  }
  let result = eval(eq);
  let lhs = stringAfter(sol, '=');
  diop[lhs] = result;
  wp.result = { number: isdef(diop.R) ? diop.R : result };
  wp.result.text = '' + wp.result.number;
  for (const k in diop) {
    if (k == 'R') continue;
    text = text.replace('@' + k, diop[k]);
  }
  wp.text = text;
  return [diop, eq];
}
function instantiateNumbersIncludingFractions(wp) {
  let sol = wp.sol;
  console.log('________________sol', sol)
  let parts = sol.split('{');
  let di = {};
  let newSol = '';
  for (const p of parts) {
    if (p[0] == 'N') {
      let key = p.substring(0, 2);
      let n;
      console.log('p', p)
      if (p[2] == '(') {
        let nums = stringBetween(p, '(', ')');
        let lst = allNumbers(nums);
        if (lst.length <= 3 && lst[0] <= lst[1]) {
          n = randomNumber(...lst);
        } else {
          n = chooseRandom(lst);
        }
      } else {
        n = randomNumber(2, 9);
      }
      let rest = stringAfter(p, '}');
      newSol += '' + n + rest;
      di[key] = n;
    } else newSol += p;
  }
  console.log('newSol', newSol);
  let res = eval(newSol);
  console.log('res of simplify', res);
  let numResult = res[0] / res[1];
  let textResult = numResult == Math.round(numResult) ? numResult : '' + res[0] + '/' + res[1];
  wp.result = { number: numResult, text: textResult };
  let text = wp.text;
  for (const k in di) {
    if (k == 'R') continue;
    text = replaceAll(text, '{' + k + '}', di[k]);
  }
  console.log('_________ text', text);
  parts = text.split('{');
  let tnew = '';
  for (const p of parts) {
    if (p[0] == 'F') {
      let s = stringBefore(p, '}');
      console.log('s', s)
      let [n, d] = allNumbers(s);
      tnew += getTextForFraction(n, d);
      tnew += '; ' + stringAfter(p, '}');
    } else tnew += p;
  }
  text = tnew;
  wp.text = text;
  mText(wp.text, dTable)
}
function instantiateOidKeyAtParent(oid, key, uidParent, R) {
  console.log('>>>>>instantiate', oid, 'using', key, 'at', uidParent, '\nrParent', R.rNodes[uidParent], '\nuiParent', R.uiNodes[uidParent]);
  let rtreeParent = R.rNodes[uidParent];
  if (nundef(rtreeParent.children)) {
    if (isdef(R.uiNodes[uidParent])) change_parent_type_if_needed(rtreeParent, R);
    rtreeParent.children = [];
  }
  let index = rtreeParent.children.length;
  let newPath = isdef(rtreeParent.sub) ? extendPath(rtreeParent.path, index) : '.';
  let nsp = R.lastSpec[key];
  let n1 = recBuildRTree(nsp, key, '.', rtreeParent, R.lastSpec, R, oid);
  R.rNodes[n1.uid] = n1;
  lookupAddToList(R.rNodesOidKey, [oid, key], n1.uid);
  rtreeParent.children.push(n1.uid);
  if (isdef(R.uiNodes) && isdef(R.uiNodes[uidParent])) {
    let parent = R.uiNodes[uidParent];
    parent.adirty = true;
    recBuildUiFromNode(n1, uidParent, R, parent.defParams, oid);
    parent.children = rtreeParent.children;
  } else {
    console.log('UI not creatable! No suitable parent found! uidParent', uidParent, 'oid', oid, 'key', key, R.uiNodes);
  }
}
function instantiateWP(wp) {
  if (wp.title.includes('Fractions')) instantiateNumbersIncludingFractions(wp); else instantiateNumbers(wp);
  instantiateNames(wp);
  console.log('wp', wp.text, wp.result);
}
function instantOidKey(oid, key, uidParent, R) {
  let rtreeParent = R.rNodes[uidParent];
  if (nundef(rtreeParent.children)) {
    rtreeParent.children = [];
  }
  let n1 = recTree(R.lastSpec[key], rtreeParent, R, oid, key);
  R.rNodes[n1.uid] = n1;
  rtreeParent.children.push(n1.uid);
  if (rtreeParent.children.length == 2 && rtreeParent.type == 'invisible' && lookup(rtreeParent, ['params', 'bg'])) {
    let uiParent = R.uiNodes[rtreeParent.uid];
    if (isdef(uiParent)) {
      rtreeParent.type = uiParent.type = 'panel';
      decodeParams(uiParent, R, {});
      uiParent.adirty = true;
      applyCssStyles(uiParent.ui, uiParent.cssParams);
    }
  }
  return n1;
}
function intDiv(n, q) {
  return Math.floor(n / q);
}
function interaction(fen, plname, func) {
  if (!uiActivated) return;
  uiActivate = false;
  pollStop();
  func(fen, plname);
}
function interrupt() {
  STOPAUS = true;
  uiActivated = aiActivated = false;
  clearTimeouts();
  if (isdef(G.clear)) G.clear();
  TOMan.clear();
  clearMarkers();
}
async function intersectAnimeAndAllfuncs(){
  let kws = await extractKeywords('../animex/anime.js',true);
  console.log('kws',kws); //return;
  let kws1 = await extractKeywords('../allf.js');
  let inter = intersection(kws, kws1);
  console.log('keywords', inter);
  text=inter.join()
  return text
}
function intersection(arr1, arr2) {
  let res = [];
  for (const a of arr1) {
    if (arr2.includes(a)) {
      addIf(res, a);
    }
  }
  return res;
}
function intro_create_score_table(fen) {
  let dParent = mBy('dIntro');
  let d = mDiv(dParent, { margin: 'auto', w: 300 });
  html = `<div style='text-align:center;margin-top:100px'>
  <table id='customers'><tr><th>player</th><th>score</th></tr>
  `;
  let plparts = fen.split(',');
  for (const pl of plparts) {
    html += `<tr><td>${stringBefore(pl, ':')}</td><td>${stringAfter(pl, ':')}</td></tr>`
  }
  html += '</table></div>';
  d.innerHTML = html;
}
function intro_show_user_image(uname) {
  let dParent = mBy('dIntro');
  let d = mDiv(dParent, { margin: 'auto', w: 300 });
  let html = `
  <div style='text-align:center;margin-top:100px'>
    <img src='../base/assets/images/${uname}.jpg' class="img_person" height=200 />
  </div>
  `;
  d.innerHTML = html;
}
function ipadd(elem) {
  elem.setAttribute('draggable', true);
  function OnDragOver(ev) {
    elem.setAttribute('DragOver', true);
    ev.stopPropagation();
    ev.preventDefault();
    ev.dataTransfer.dropEffect = 'copy';
  }
  function OnDragLeave(ev) {
    elem.removeAttribute('DragOver');
  }
  function OnDrop(ev) {
    elem.removeAttribute('DragOver');
    ev.preventDefault();
    ev.stopPropagation();
    elem.innerHTML = ev.dataTransfer.getData('text/plain');
  }
  function OnDragStart(ev) {
    console.log('insane!!!');
    ev.stopPropagation();
    ev.dataTransfer.dropEffect = 'move';
    ev.dataTransfer.setData('text/plain', this.innerHTML);
  }
  function OnClickClick(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    let aname = 'data_transport';
    let source = DA[aname];
    if (isdef(source)) {
      elem.innerHTML = source.innerHTML;
      toggleSelectionOfPicture(source);
      DA[aname] = null;
    } else {
      toggleSelectionOfPicture(elem);
      DA[aname] = elem;
    }
  }
  elem.addEventListener('dragstart', OnDragStart);
  elem.addEventListener('dragover', OnDragOver);
  elem.addEventListener('dragleave', OnDragLeave);
  elem.addEventListener('drop', OnDrop);
  elem.onclick = OnClickClick;
  DA.data_transport = null;
}
function ipaddX(elem, role) {
  let isSource = role != 'target';
  let isTarget = role != 'source';
  if (isSource) elem.setAttribute('draggable', true);
  function OnDragOver(ev) {
    elem.setAttribute('DragOver', true);
    ev.stopPropagation();
    ev.preventDefault();
    ev.dataTransfer.dropEffect = 'copy';
  }
  function OnDragLeave(ev) {
    elem.removeAttribute('DragOver');
  }
  function OnDrop(ev) {
    elem.removeAttribute('DragOver');
    ev.preventDefault();
    ev.stopPropagation();
    if (isTarget) elem.innerHTML = ev.dataTransfer.getData('text/plain');
  }
  function OnDragStart(ev) {
    ev.stopPropagation();
    ev.dataTransfer.dropEffect = 'move';
    ev.dataTransfer.setData('text/plain', this.innerHTML);
  }
  function OnClickClick(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    let aname = 'data_transport';
    let source = DA[aname];
    if (nundef(source) && isSource) {
      toggleSelectionOfPicture(elem);
      DA[aname] = elem;
    } else if (isdef(source)) {
      if (isTarget) {
        if (source == elem) {
          console.log('INPUT');
          elem.innerHTML = '_';
        } else {
          elem.innerHTML = source.innerHTML;
        }
        toggleSelectionOfPicture(source);
        DA[aname] = null;
      }
      else if (isSource) {
        toggleSelectionOfPicture(source);
        if (source != elem) { toggleSelectionOfPicture(elem); DA[aname] = elem; }
        else {
          let is_letter = !isTarget;
          if (is_letter) {
            let l = elem.innerHTML;
            let inp_empty;
            for (const inp of Goal.inputs) {
              let di = iDiv(inp);
              let inner = di.innerHTML;
              if (iDiv(inp).innerHTML == '_') { inp_empty = inp; break; }
            }
            if (isdef(inp_empty)) iDiv(inp_empty).innerHTML = l;
          }
          DA[aname] = null;
        }
      }
    }
  }
  if (isSource) elem.addEventListener('dragstart', OnDragStart);
  elem.addEventListener('dragover', OnDragOver);
  elem.addEventListener('dragleave', OnDragLeave);
  elem.addEventListener('drop', OnDrop);
  elem.onclick = OnClickClick;
  DA.data_transport = null;
}
function ipaddX_orig(elem, role) {
  let isSource = role != 'target';
  let isTarget = role != 'source';
  if (isSource) elem.setAttribute('draggable', true);
  function OnDragOver(ev) {
    elem.setAttribute('DragOver', true);
    ev.stopPropagation();
    ev.preventDefault();
    ev.dataTransfer.dropEffect = 'copy';
  }
  function OnDragLeave(ev) {
    elem.removeAttribute('DragOver');
  }
  function OnDrop(ev) {
    elem.removeAttribute('DragOver');
    ev.preventDefault();
    ev.stopPropagation();
    if (isTarget) elem.innerHTML = ev.dataTransfer.getData('text/plain');
  }
  function OnDragStart(ev) {
    ev.stopPropagation();
    ev.dataTransfer.dropEffect = 'move';
    ev.dataTransfer.setData('text/plain', this.innerHTML);
  }
  function OnClickClick(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    let aname = 'data_transport';
    let source = DA[aname];
    if (nundef(source) && isSource) {
      toggleSelectionOfPicture(elem);
      DA[aname] = elem;
    } else if (isdef(source)) {
      if (isTarget) { elem.innerHTML = source.innerHTML; toggleSelectionOfPicture(source); DA[aname] = null; }
      else if (isSource) {
        toggleSelectionOfPicture(source);
        if (source != elem) { toggleSelectionOfPicture(elem); DA[aname] = elem; }
        else { DA[aname] = null; }
      }
    }
  }
  if (isSource) elem.addEventListener('dragstart', OnDragStart);
  elem.addEventListener('dragover', OnDragOver);
  elem.addEventListener('dragleave', OnDragLeave);
  elem.addEventListener('drop', OnDrop);
  elem.onclick = OnClickClick;
  DA.data_transport = null;
}
function ipaddX_v1(elem, role) {
  let isSource = role != 'target';
  let isTarget = role != 'source';
  if (isSource) elem.setAttribute('draggable', true);
  function OnDragOver(ev) {
    elem.setAttribute('DragOver', true);
    ev.stopPropagation();
    ev.preventDefault();
    ev.dataTransfer.dropEffect = 'copy';
  }
  function OnDragLeave(ev) {
    elem.removeAttribute('DragOver');
  }
  function OnDrop(ev) {
    elem.removeAttribute('DragOver');
    ev.preventDefault();
    ev.stopPropagation();
    if (isTarget) elem.innerHTML = ev.dataTransfer.getData('text/plain');
  }
  function OnDragStart(ev) {
    ev.stopPropagation();
    ev.dataTransfer.dropEffect = 'move';
    ev.dataTransfer.setData('text/plain', this.innerHTML);
  }
  function OnClickClick(ev) {
    ev.preventDefault();
    ev.stopPropagation();
    let aname = 'data_transport';
    let source = DA[aname];
    if (nundef(source) && isSource) {
      toggleSelectionOfPicture(elem);
      DA[aname] = elem;
    } else if (isdef(source)) {
      if (isTarget) {
        if (source == elem) {
          console.log('INPUT');
          elem.innerHTML = '_';
        } else {
          elem.innerHTML = source.innerHTML;
        }
        toggleSelectionOfPicture(source);
        DA[aname] = null;
      }
      else if (isSource) {
        toggleSelectionOfPicture(source);
        if (source != elem) { toggleSelectionOfPicture(elem); DA[aname] = elem; }
        else {
          let is_letter = !isTarget;
          if (is_letter) {
            let l = elem.innerHTML;
            let inp_empty;
            for (const inp of Goal.inputs) {
              let di = iDiv(inp);
              let inner = di.innerHTML;
              if (iDiv(inp).innerHTML == '_') { inp_empty = inp; break; }
            }
            if (isdef(inp_empty)) iDiv(inp_empty).innerHTML = l;
          }
          DA[aname] = null;
        }
      }
    }
  }
  if (isSource) elem.addEventListener('dragstart', OnDragStart);
  elem.addEventListener('dragover', OnDragOver);
  elem.addEventListener('dragleave', OnDragLeave);
  elem.addEventListener('drop', OnDrop);
  elem.onclick = OnClickClick;
  DA.data_transport = null;
}
function iPanel(dParent, styles, classes, id, inner) {
  let item = { id: isdef(id) ? id : getUID(), type: 'plain' };
  let dOuter = mDiv(dParent);
  mCenterCenterFlex(dOuter);
  let d = mDiv(dOuter);
  if (isdef(inner)) d.innerHTML = inner;
  if (nundef(styles)) styles = {};
  let picStyles = { fz: valf(styles.fz, valf(styles.h / 2, 25)), display: 'inline-block' };
  mStyle(dOuter, styles);
  mStyle(d, picStyles);
  if (isdef(classes)) mClass(dOuter, classes);
  iAdd(item, { div: dOuter, dPic: d });
  return item;
}
function iParentBounds(i) {
  if (isdef(i.div)) i = i.div;
  let b = getBounds(i);
  let [x, y, w, h] = [Math.round(b.left), Math.round(b.top), Math.round(b.width), Math.round(b.height)];
  return { x: x, y: y, w: w, h: h };
}
function iPic(i) { return isdef(i.live) ? i.live.dPic : isdef(i.dPic) ? i.dPic : null; }
async function iPrepper() {
  symbolDict = Syms = await localOrRoute('syms', '../assets/allSyms.yaml');
  SymKeys = Object.keys(Syms);
  initTable();
}
function iPresentHand(h, dParent, styles, redo = true) {
  if (nundef(h.zone)) h.zone = iHandZone(dParent, styles); else clearElement(h.zone);
  if (nundef(h.iHand)) {
    let items = i52(h.deck.cards());
    h.iHand = iSplay(items, h.zone);
  } else if (redo) {
    clearElement(h.zone);
    let items = i52(h.deck.cards());
    h.iHand = iSplay(items, h.zone);
  }
  return h;
}
function iPresentHand_test(dParent, h, redo = true) {
  if (nundef(h.zone)) h.zone = iHandZone_test(dParent); else clearElement(h.zone);
  if (nundef(h.iHand)) {
    let items = i52(h.deck.cards());
    h.iHand = iSplay(items, h.zone);
  } else if (redo) {
    clearElement(h.zone);
    let items = i52(h.deck.cards());
    h.iHand = iSplay(items, h.zone);
  }
  return h;
}
function iReg(item, liveprops, addprops) {
  iRepair(item);
  if (isdef(liveprops)) for (const k in liveprops) { lookupSetOverride(item, ['live', k], liveprops[k]) }
  if (isdef(addprops)) copyKeys(addprops, item);
  let umain = iDiv(item); if (nundef(umain) && isdef(item.live)) { umain = get_values(item.live)[0]; }
  let id = item.id;
  if (nundef(id) && umain) { id = valnwhite(umain.id, getUID()); item.id = id; }
  else if (nundef(id)) { id = getUID(); item.id = id; }
  if (umain) { umain.id = id; }
  if (nundef(Items[id])) Items[id] = item;
  return item;
}
function iRegister(item, id) { let uid = isdef(id) ? id : getUID(); Items[uid] = item; return uid; }
function iRegisterX(item, keyProp, id) {
  let uid = isdef(id) ? id : getUID(); Items[uid] = item;
  if (isdef(item[keyProp])) ItemsByKey[item[keyProp]] = uid; return uid;
}
function iRemakeHand(data) {
  let zone = data.zone;
  let deck = data.deck;
  let items = i52(deck.cards());
  clearElement(zone);
  data.iHand = iSplay(items, zone);
  return data;
}
function iRemoveFromLive(pid, id) {
  if (pid == id) { console.log('!!!!!!!!!!!!!!!!!!!!', id, 'member of itself!!!'); return; }
  let comp = Items[pid];
  let l = comp.live;
  let tbr = null;
  for (const k in l) {
    let el = l[k];
    if (el.id == id) { tbr = k; break; }
  }
  if (tbr) delete l[tbr];
}
function iRepair(item) {
  let todelete = [];
  delete item.funcs;
  for (const k in item) {
    let val = item[k];
    if (isDOM(val) || k == 'cx') {
      lookupSetOverride(item, ['live', k], val);
      todelete.push(k);
    } else if (typeof val == 'function') {
      lookupSet(item, ['funcs', k], true);
    }
  }
  for (const k of todelete) delete item[k];
  return item;
}
function iResize(i, w, h) { return isList(i) ? i.map(x => iSize(x, w, h)) : iSize(i, w, h); }
function iResize52(i, h) { let w = h * .7; return iResize(i, w, h); }
function iRoom(dParent, ch, styles) {
  let def = { 'grid-area': ch, position: 'relative' };
  copyKeys(def, styles);
  let dCell = mDiv(dParent, styles);
  let rect = getRect(dCell);
  let size = Math.round(rect.w * rect.h / 1000);
  let room = { id: ch, ch: ch, bg: dCell.style.backgroundColor, rect: rect, size: size };
  delete Items[ch];
  iAdd(room, { div: dCell });
  room.doors = [];
  room.furniture = [];
  room.hasDoor = () => !isEmpty(room.doors)
  room.hasPassThrough = () => room.doors.length >= 2;
  return room;
}
function is_a_word(w, lang) { return lookup(Dictionary, [lang, w]) != null; }
function is_admin(name) { return ['mimi'].includes(isdef(name) ? name : Session.cur_user); }
function is_advanced_user() {
  let advancedUsers = ['mimi', 'bob', 'buddy', 'minnow', 'nimble', 'leo'];
  return isdef(U) && ((advancedUsers.includes(DA.secretuser) || advancedUsers.includes(U.name)));
}
function is_ai_player(plname) {
  let [fen, name] = [Z.fen, valf(plname, Z.uplayer)];
  return lookup(fen, ['players', name, 'playmode']) == 'bot';
}
function is_bid_higher_than(bid, oldbid) {
  bid = jsCopy(bid);
  if (bid[0] == '_') bid[0] = 0;
  if (bid[2] == '_') bid[2] = 0;
  if (oldbid[0] == '_') oldbid[0] = 0;
  if (oldbid[2] == '_') oldbid[2] = 0;
  let higher = bid[0] > oldbid[0]
    || bid[0] == oldbid[0] && is_higher_ranked_name(bid[1], oldbid[1])
    || bid[0] == oldbid[0] && bid[1] == oldbid[1] && bid[2] > oldbid[2]
    || bid[0] == oldbid[0] && bid[1] == oldbid[1] && bid[2] == oldbid[2] && is_higher_ranked_name(bid[3], oldbid[3]);
  return higher;
}
function is_bw_loggedin() {
  let bw_state = S.bw_state;
  return bw_state == 'loggedin';
}
function is_canvas(item) { return isdef(item.cx) && isdef(item.cv); }
function is_card(o) { return isdef(o.rank) || isdef(o.o) && isdef(o.o.rank); }
function is_card_key(ckey, rankstr = '*A23456789TJQK', suitstr = 'SHCD') { return rankstr.includes(ckey[0]) && suitstr.includes(ckey[1]); }
function is_chessvar(o) {
  if (o.type == 'var' && o.filename == 'chess.js' && o.name.startsWith('brd_')) {
    lookupSet(superdi, ['chessvar', o.name], true);
  }
  let yes = o.history.some(x => x.includes('chess.js'));
  return yes;
  if (o.name.startsWith('brd_')) return true;
}
function is_collect_mode() { return Z.turn.length > 1; }
function is_correct_group(j, n = 3) { let r = j[0][0]; return j.length >= n && has_at_most_n_jolly(j, Z.options.jokers_per_group) && j.every(x => is_jolly(x) || x[0] == r); }
function is_correct_group_illegal(cards) {
  let keys = cards.map(x => x.key);
  let isgroup = is_group(keys);
  if (isgroup) return false;
  if (is_fixed_goal() && get_round_goal() != '7R') {
    return `the goal for this round is ${get_round_goal()}!`;
  }
  let [fen, uplayer] = [Z.fen, Z.uplayer];
  let pl = fen.players[uplayer];
  if (!is_fixed_goal() && pl.goals['7R'] == true) return `you can only have one sequence of 7!`;
  if (pl.journeys.find(x => is_sequence(x))) return `you can only have one sequence of 7!`;
  if (pl.roundgoal) return `row of 7 NOT allowed except if it is the round goal!`;
  return false;
}
function is_current_player_bot() {
  let [fen, uplayer, turn] = [Z.fen, Z.uplayer, Z.turn];
  let curplayer = Z.turn[0];
  if (fen.players[curplayer].playmode == 'bot') return true; else return false;
}
function is_fixed_goal() { return Z.options.phase_order == 'fixed'; }
function is_game_card(k) { return isdef(Session.cards[k]); }
function is_game_host() { return Session.cur_table.host == Session.cur_user; }
function is_group(j) {
  if (j.length < 3) return false;
  let rank = firstCond(j, x => !is_jolly(x))[0];
  return j.every(x => is_jolly(x) || x[0] == rank);
}
function is_higher_ranked_name(f1, f2) {
  let di2 = { _: 0, three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine: 9, ten: 10, jack: 11, queen: 12, king: 13, ace: 14 };
  return di2[f1] > di2[f2];
}
function is_human_player(plname) {
  let [fen, name] = [Z.fen, valf(plname, Z.uplayer)];
  return lookup(fen, ['players', name, 'playmode']) == 'human';
}
function is_in_middle_of_church() {
  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];
  return isdef(fen.players[uplayer].tithes);
}
function is_it_my_turn(r, uname) { return r.uname == uname; }
function is_joker(card) { return is_jolly(card.key); }
function is_jolly(ckey) { return ckey[0] == '*'; }
function is_journey(cards) {
  let jlist = find_sequences(cards, cards.length, 'A23456789TJQK');
  let j = firstCond(jlist, x => x.length == cards.length);
  return j;
}
function is_just_my_turn() {
  return isEmpty(Z.turn.filter(x => x != Z.uplayer));
}
function is_key_down(key) {
  if (nundef(DA.keystate)) {
    DA.keystate = {};
    window.addEventListener('keyup', (e) => DA.keystate[e.key] = false);
    window.addEventListener('keydown', (e) => { DA.keystate[e.key] = true; });
  }
  return DA.keystate.hasOwnProperty(key) && DA.keystate[key] || false;
}
function is_lat_lng(p) { return isdef(p.lat); }
function is_lat_long(p) { return is_lat_lng(p); }
function is_legal_if_7R(cards) {
  let keys = cards.map(x => x.key);
  let isgroup = is_group(keys);
  if (isgroup) return true;
  if (is_fixed_goal() && get_round_goal() != '7R') {
    return false;
  }
  let [fen, uplayer] = [Z.fen, Z.uplayer];
  let pl = fen.players[uplayer];
  if (!is_fixed_goal() && pl.goals['7R'] == true) return false;
  if (pl.journeys.find(x => is_sequence(x))) return false;
  return true;
}
function is_map(o) { return isdef(o.map) || isdef(o._panes); }
function is_multi_stage() { return isdef(Z.fen.trigger); }
function is_multi_trigger(plname) { return lookup(Z, ['fen', 'trigger']) == plname; }
function is_online() { return lookup(DA, ['internet']); }
function is_overlapping_set(cards, max_jollies_allowed = 1, seqlen = 7, group_same_suit_allowed = true) {
  let istart = 0;
  let inextstart = 0;
  let lmin = 3;
  let legal = true;
  if (cards.length < lmin) return false;
  while (legal && istart <= cards.length - lmin) {
    let cl = cards.slice(istart, istart + lmin);
    let set = ferro_is_set(cl, max_jollies_allowed, seqlen, group_same_suit_allowed);
    if (set) { istart++; inextstart = Math.min(istart + lmin, cards.length - 3); }
    else if (!set && inextstart == istart) return false;
    else istart++;
  }
  return cards.map(x => x.key);
}
function is_playerdata_set(plname) {
  return isdef(Z.playerdata) && !isEmpty(Z.playerdata) && !isEmpty(Z.playerdata.find(x => x.name == plname).state);
}
function is_playing(pl, fen) {
  return isList(fen.plorder) && fen.plorder.includes(pl) || isList(fen.roundorder) && fen.roundorder.includes(pl) || Z.game == 'feedback' && isdef(Z.fen.players[pl]);
}
function is_polling_on() { return IS_POLLING_ALLOWED; }
function is_race_game(gname) { return DB.games[gname].game_type == 'race'; }
function is_really_online() { return navigator.onLine; }
function is_round_over(otree) { return otree.round.length >= otree.plorder.length; }
function is_sequence(j) { return !is_group(j); }
function is_Set(x) {
  return '_set' in x;
}
function is_setup_commissions_complete() {
  let [fen, A, uplayer, plorder] = [Z.fen, Z.A, Z.uplayer, Z.plorder];
  let next = get_next_player(Z, uplayer);
  return next == plorder[0] && fen.comm_setup_num == 1;
}
function is_shield_mode() {
  return Z.role == 'spectator'
    || Z.mode == 'multi' && Z.role == 'inactive' && Z.host != Z.uname
    || Z.mode == 'multi' && Z.role == 'inactive' && Z.pl.playmode != 'bot'
}
function is_solved(board) {
  let expected = [1, 2, 3, 4, 5, 6, 7, 8, 9]
  let valid = true
  for (r = 0; r < 9 && valid == true; r++) {
    if (!compare(expected, get_row(board, r))) {
      valid = false
    }
  }
  for (c = 0; c < 9 && valid == true; c++) {
    if (!compare(expected, get_column(board, c))) {
      valid = false
    }
  }
  for (q = 1; q < 9 && valid == true; q++) {
    if (!compare(expected, get_square(board, q))) {
      valid = false
    }
  }
  return valid
}
function is_stall_selection_complete() { return Z.fen.stallSelected.length == Z.fen.plorder.length; }
function is_stringified(obj) {
  if (isString(obj)) {
    return '"\'{[('.includes(obj[0]);
  }
  return false;
}
function is_Tuple(x) {
  return isDict(x) && ('_tuple' in x);
}
function is_turn_counter_clockwise(a1, a2) {
  let diff = Math.abs(a2 - a1);
  let q1 = get_quadrant(a1);
  let q2 = get_quadrant(a2);
  let cclock = false;
  if (q1 == q2) { cclock = a2 < a1; }
  else {
    if (a2 > a1 && diff > 180) cclock = true;
    if (a2 < a1 && diff < 180) cclock = true;
  }
  return cclock;
}
function is_user_spectating(g) { return isdef(U) && !g.plorder.includes(U.name); }
function is_visible(id) { return !mBy(id).classList.includes('d-block'); }
function isAcceptableAnswerButNewSound(info, reqAnswer, s) {
  let sParts = s.split(' ');
  let aParts = reqAnswer.split(' ');
  if (isTimeString(s)) s = convertTimesAndNumbersToWords(s);
  if (isTimeString(reqAnswer)) reqAnswer = convertTimesAndNumbersToWords(reqAnswer);
  if (sParts.length != aParts.length) return false;
  for (let i = 0; i < sParts.length; i++) {
    if (!soundsSimilar(sParts[i], aParts[i])) return false;
  }
  return true;
}
function isActionElement(x) {
  return typeof x == 'object' && 'type' in x;
}
function isAlphaNum(s) { query = /^[a-zA-Z0-9]+$/; return query.test(s); }
function isAlphaNumeric(str) {
  var code, i, len;
  for (i = 0, len = str.length; i < len; i++) {
    code = str.charCodeAt(i);
    if (!(code > 47 && code < 58) &&
      !(code > 64 && code < 91) &&
      !(code > 96 && code < 123) && str[i] != '_') {
      return false;
    }
  }
  return true;
};
function isANS(unitType) {
  return ['AirForce', 'Submarine', 'Carrier', 'Fleet'].includes(unitType);
}
function isBoard(uid, R) {
  if (!uid) return false;
  let n = R.uiNodes[uid];
  return isdef(n) && isdef(n.bi) && isdef(n.bi.boardDiv);
}
function isBoardElement(oid) { let mobj = getVisual(oid); return mobj && mobj.idParent[2] == 's'; }
function isBoardElementObject(o) { return o.edges || o.corners; }
function isBoardMember(uid, R) {
  let n = R.uiNodes[uid];
  return isdef(n) ? isBoard(n.uidParent, R) : false;
}
function isBoardObject(o) { return o.map && o.fields; }
function isCapitalLetter(s) { return /^[A-Z]$/i.test(s); }
function isCapitalLetterOrDigit(s) { return /^[A-Z0-9ÖÄÜ]$/i.test(s); }
function isCardSet(o) {
  if (nundef(o)) return false;
  if (nundef(o._set)) return false;
  let arr = o._set;
  if (!isList(arr)) return false;
  for (const el of arr) {
    if (nundef(el)) return false;
    if (nundef(el._obj)) return false;
    let card = G.table[el._obj];
    if (nundef(card) || card.generic_type != 'card') return false;
  }
  return true;
}
function isCardType(o) {
  return 'obj_type' in o && endsWith(o.obj_type, 'card');
}
function isCloseTo(n, m, acc = 10) { return Math.abs(n - m) <= acc + 1; }
function isCodeWord(w) {
  return isdef(window[w]) || isdef(CODE.all[w])
}
function isColorName(s) { ensureColorNames(); return (isdef(ColorNames[s.toLowerCase()])); }
function isComplexColor(x) { return isString(x) && x.includes('('); }
function isContainerType(t) { return t == 'panel' || t == 'list' || t == 'hand'; }
function isCornerRoom(house, room) {
  let rr = room.rect;
  let rh = house.rect;
  let w = house.wallWidth;
  let isHorSide = isCloseTo(rr.x, rh.x, w) || isCloseTo(rr.r, rh.r, w);
  let isVertSide = isCloseTo(rr.y, rh.y, w) || isCloseTo(rr.b, rh.b, w);
  return isHorSide && isVertSide;
}
function isDeckObject(o) {
  if (nundef(o)) console.log(getFunctionsNameThatCalledThisFunction(), 'undefined object checked for is deck!!!')
  return isdef(o.deck_count);
}
function isdef(x) { return x !== null && x !== undefined; }
function isDetection() { return (S.settings.boardDetection || S.settings.deckDetection) && !S.settings.userStructures }
function isDict(d) { let res = (d !== null) && (typeof (d) == 'object') && !isList(d); return res; }
function isDictOrList(d) { return typeof (d) == 'object'; }
function isDigit(s) { return /^[0-9]$/i.test(s); }
function isDOM(x) { let c = lookup(x, ['constructor', 'name']); return c ? startsWith(c, 'HTML') || startsWith(c, 'SVG') : false; }
function isDynamic(x) { let t = lookup(x, ['meta', 'type']); return t == 'dynamic'; }
function isEastRoom(house, room) { return isCloseTo(room.rect.r, house.rect.r, house.wallWidth); }
function isEmosetMember(name, info) { return emoSets[name].f(info); }
function isEmpty(arr) {
  return arr === undefined || !arr
    || (isString(arr) && (arr == 'undefined' || arr == ''))
    || (Array.isArray(arr) && arr.length == 0)
    || Object.entries(arr).length === 0;
}
function isEmptyDict(x) { return isDict(x) && isEmpty(Object.keys(x)); }
function isEmptyOrWhiteSpace(s) { return isEmpty(s.trim()); }
function isEnglish(lang) { return startsWith(lang.toLowerCase(), 'e'); }
function isEnglishKeyboardGermanEquivalent(wreq, w) {
  wreq = fromUmlaut(wreq)
  w = fromUmlaut(w);
  return allLettersContained(wreq, w);
}
function isError(d) {
  let kathastrophicError = !(typeof d == 'object');
  let someErrorOccurred = 'error' in d;
  if (kathastrophicError) {
    error('KATHASTROPHIC ERROR!!!!!', d)
    alert('KATHASTROPHIC ERROR!!!!! data type ' + (typeof d));
    return true;
  } else if (someErrorOccurred) {
    switch (d.type) {
      case 'parse': return false;
      case 'ajax': return true;
      default: return true;
    }
  }
  return false;
}
function isEvent(param) { return getTypeOf(param) == 'event'; }
function isFaceUp(oCard) { return oCard.obj_type; }
function isFarbPerle(perle) { return isGermanColorName(perle.key); }
function isField(o) { return o.neighbors; }
function isFractionType(x) { return isDict(x) && isdef(x.n) && isdef(x.d); }
function isFrontAIPlayer(id) {
  if (USE_BACKEND_AI) return false;
  let players = S.gameConfig.players;
  let pl = firstCond(players, x => x.id == id);
  let playerType = pl.playerType;
  return playerType == 'AI';
}
function isGameWithSpeechRecognition() { return ['gSayPic', 'gSayPicAuto'].includes(currentGame); }
function isGermanColorName(s) { return isColorName(s) || isdef(GermanToEnglish[s]) && isColorName(GermanToEnglish[s]); }
function isGermanString(x) { return currentLanguage == 'D' && !isNumber(x) && !isTimeString(x); }
function isGridType(t) { return t == 'grid'; }
function iSidebar(d1, d2, dToggle = null, w = 100, startOpen = true, id) {
  mStyle(d1, { h: '100%', w: startOpen == true ? w : 0, position: 'absolute', z: 1, top: 0, left: 0, 'overflow': 'hidden' });
  mStyle(d2, { h: '100%', maleft: startOpen == true ? w : '0px', box: true }, null, null);
  d1.isOpen = startOpen;
  d1.wNeeded = w;
  let tell = () => console.log('sidebar is', d1.isOpen ? 'OPEN' : 'CLOSED');
  let fToggle = (ev, animate = true) => {
    d1.isOpen = !d1.isOpen;
    let val = d1.isOpen ? d1.wNeeded : 0;
    if (animate) multiStyleAnimation([[d1, { w: val }], [d2, { maleft: val }]], 500, tell);
    else { mStyle(d1, { w: val }); mStyle(d2, { maleft: val }); tell(); }
  }
  let fOpen = (ev, animate = true) => {
    if (d1.isOpen) return;
    fToggle(ev, animate);
  }
  let fClose = (ev, animate = true) => {
    if (!d1.isOpen) return;
    fToggle(ev, animate);
  }
  let fAddContent = (cont, styles) => {
    mAddContent(d1, cont, styles, { keepInLine: true, replace: false });
    let sz = getSizeNeeded(d1);
    d1.wNeeded = sz.w;
    if (d1.isOpen) { mStyle(d1, { w: d1.wNeeded }); mStyle(d2, { maleft: d1.wNeeded }); }
  };
  let fReplaceContent = (cont, styles) => { clearElement(d1); fAddContent(cont, styles); };
  id = isdef(id) ? id : !isEmpty(d1.id) ? d1.id : getUID('sb');
  let item = mItem(id, { div: d1 }, { type: 'sidebar', w: w, toggle: fToggle, open: fOpen, close: fClose, addContent: fAddContent, replaceContent: fReplaceContent }, true);
  if (!isEmpty(d2.id)) item.idContent = d2.id;
  if (isdef(dToggle)) { iAdd(item, { dToggle: dToggle }); dToggle.onclick = fToggle; }
  return item;
}
function iSidebar01(d, d1, d2, dToggle = null, w = 100) {
  mStyleX(d1, { h: '100%', w: 100, position: 'absolute', z: 1, top: 0, left: 0, overflow: 'hidden', transition: '0.5s' });
  mStyleX(d2, { maleft: 100, h: '100%', box: true, transition: '0.5s' }, null, null)
  let fToggle = () => {
    mToggle(d1, 'width', 0, w); mToggle(d2, 'margin-left', 0, w);
  }
  let item = mItem({ div: d1, dParent: d, dSibling: d2 });
  item.fToggle = fToggle;
  item.w = w;
  if (isdef(dToggle)) { item.dToggle = dToggle; dToggle.onclick = fToggle; }
  return item;
}
function iSidebar04(d, d1, d2, dToggle = null, w = 100, startOpen = true) {
  mStyleX(d1, { h: '100%', w: startOpen ? w : 0, position: 'absolute', z: 1, top: 0, left: 0, overflow: 'hidden', transition: '0.5s' });
  mStyleX(d2, { h: '100%', maleft: startOpen ? w : 0, box: true, transition: '0.5s' }, null, null);
  d1.isOpen = startOpen;
  let fToggle = () => {
    d1.isOpen = !d1.isOpen;
    let wOpen = valf(d1.wNeeded, w)
    mToggle(d1, 'width', 0, wOpen);
    mToggle(d2, 'margin-left', 0, wOpen);
  }
  let fOpen = () => {
    if (d1.isOpen) return;
    fToggle();
  }
  let fClose = () => {
    if (!d1.isOpen) return;
    fToggle();
  }
  let fReplaceContent = cont => {
    d1.style.width = 'auto';
    d1.innerHTML = cont;
    let wNeeded = d1.wNeeded = getRect(d1).w;
    d1.wCurrent = d1.style.width = makeUnitString(wNeeded);
    console.log('now wNeeded is', d1.wNeeded);
    if (!d1.isOpen) d1.style.width = 0;
  };
  let fAddContent = cont => {
    d1.style.width = 'auto';
    mAppend(d1, isString(cont) ? mText(cont, d1) : cont);
    let wNeeded = d1.wNeeded = getRect(d1).w;
    d1.wCurrent = d1.style.width = makeUnitString(wNeeded);
    console.log('now wNeeded is', d1.wNeeded);
    if (!d1.isOpen) d1.style.width = 0;
  };
  let item = mItem({ div: d1, dParent: d, dSibling: d2 });
  d1.item = item; d1.id = item.id;
  item.toggle = fToggle;
  item.open = fOpen;
  item.close = fClose;
  item.addContent = fAddContent;
  item.replaceContent = fReplaceContent;
  item.w = w;
  if (isdef(dToggle)) { item.dToggle = dToggle; dToggle.onclick = fToggle; }
  return item;
}
function isItem(i) { return isdef(i.div); }
function iSize(i, w, h) { i.w = w; i.h = h; mSize(i.div, w, h); }
function isJoinMenuOpen() {
  return isVisible(document.getElementById('bLobbyJoinOk'));
}
function isLabelVisible(id) { return isVisible(mBy(id).children[1]); }
function isLastTestOfSeries() {
  let tests = ALLTESTS[iTESTSERIES]();
  let numtests = Object.keys(tests).length;
  return iTEST >= numtests;
}
function isLeafType(t) { return t == 'info' || t == 'title' || t == 'card' || t == 'picto'; }
function isLetter(s) { return /^[a-zA-Z]$/i.test(s); }
function isLetterElement(elem) { return isCapitalLetterOrDigit(elem.innerHTML); }
function isList(arr) { return Array.isArray(arr); }
function isListOf(arr, predfunc) { return Array.isArray(arr) && !firstCond(arr, x => !predfunc(x)); }
function isListOf_Obj(x) {
  return isList(x) && !empty(x) && atleastOneElementOfXIsDictWithKey_obj(x);
}
function isListOfActionElements(lst) {
  if (!isList(lst)) return false;
  for (const el of lst) {
    if (isList(el)) return false;
  }
  return true;
}
function isListOfActions(l) {
  return isList(l) && !empty(l) && isActionElement(l[0]);
}
function isListOfListOfActions(x) {
  return isList(x) && x.length > 0 && isList(x[0]) && x[0].length > 0 && isActionElement(x[0][0]);
}
function isListOfLists(lst) {
  return isList(lst) && !isEmpty(lst) && isList(lst[0]);
}
function isListOfLiterals(lst) {
  if (!isList(lst)) return false;
  for (const el of lst) {
    if (!isLiteral(el)) return false;
  }
  return true;
}
function isListOfServerObjects(x) {
  let oids = getElements(x);
  console.log('getElements returns', oids);
  return false;
}
function isLiteral(x) { return isString(x) || isNumber(x); }
function isLiveInBrowser(s) {
  if (isdef(window[s])) return true;
  try {
    let res = eval(s);
    return isdef(res);
  } catch {
    return false;
  }
  return false;
}
function isll(ll) {
  if (!isList(ll)) {
    testHelpers('NOT a list', ll);
    return false;
  }
  for (const l of ll) {
    if (!isList(l)) {
      testHelpers('element', l, 'NOT a list!');
      return false;
    }
    for (const el of l) {
      if (!isString(el) && !isNumeric(el)) return false;
    }
  }
  return true;
}
function isllPlus(ll) {
  if (!isList(ll)) {
    testHelpers('NOT a list', ll);
    return false;
  }
  for (const l of ll) {
    if (!isList(l)) {
      testHelpers('element', l, 'NOT a list!');
      return false;
    }
  }
  return true;
}
function isMap(x) { let t = lookup(x, ['meta', 'type']); return t == 'map'; }
function isMergeableObject(val) {
  var nonNullObject = val && typeof val === 'object'
  return nonNullObject
    && Object.prototype.toString.call(val) !== '[object RegExp]'
    && Object.prototype.toString.call(val) !== '[object Date]'
}
function isMS(param) {
  return getTypeOf(param) == 'MS';
}
function isMyPlayer(id) {
  let uname = getUsernameForPlayer(id);
  return startsWith(uname, USERNAME);
}
function isMyTurn() {
  disableButton('c_b_PollStatus');
}
function isNorthRoom(house, room) { return isCloseTo(room.rect.t, house.rect.t, house.wallWidth); }
function isNumber(x) { return x !== ' ' && x !== true && x !== false && isdef(x) && (x == 0 || !isNaN(+x)); }
function isNumberOrTimeString(w) { return isNumber(w) || isTimeString(w); }
function isNumeric(x) { return !isNaN(+x); }
function isObject(v) {
  return '[object Object]' === Object.prototype.toString.call(v);
};
function isOppPiece(sym, plSym) { return sym && sym != plSym; }
function iSortHand(dParent, h) {
  let d = h.deck;
  d.sort();
  iPresentHand(dParent, h);
}
function iSortHand_test(dParent, h) {
  let d = h.deck;
  d.sort();
  iPresentHand_test(dParent, h);
}
function isOverflown(element) {
  return element.scrollHeight > element.clientHeight || element.scrollWidth > element.clientWidth;
}
function isPlain() { return !S.settings.boardDetection && !S.settings.deckDetection && !S.settings.userStructures }
function iSplay(items, iContainer, containerStyles, splay = 'right', ov = 20, ovUnit = '%', createHand = true, rememberFunc = true) {
  if (!isList(items)) items = [items];
  if (isEmpty(items)) return { w: 0, h: 0 };
  let [w, h] = [items[0].w, items[0].h];
  let isHorizontal = splay == 'right' || splay == 'left';
  for (let i = 0; i < items.length; i++) {
    let item = items[i];
    item.col = isHorizontal ? i : 0;
    item.row = isHorizontal ? 0 : i;
    item.index = item.z = i;
  }
  if (nundef(containerStyles)) containerStyles = {};
  let dContainer = iDiv(iContainer);
  let dParent, iParent;
  if (createHand) {
    dParent = mDiv(dContainer);
    iParent = { div: dParent };
  } else if (isItem(iContainer)) {
    dParent = iContainer.div;
    iParent = iContainer;
  } else dParent = iContainer;
  mStyleX(dParent, containerStyles);
  let gap = isdef(containerStyles.padding) ? containerStyles.padding : 0;
  let overlap = ov;
  if (ovUnit == '%') overlap = ov == 0 ? .5 : (isHorizontal ? w : h) * ov / 100;
  let x = y = gap;
  let sz = splayout(items.map(x => x.div), dParent, w, h, x, y, overlap, splay);
  dParent.style.width = '' + sz.w + 'px';
  dParent.style.height = '' + sz.h + 'px';
  if (isdef(iParent)) { iParent.w = sz.w; iParent.h = sz.h; iParent.items = items; }
  return isdef(iParent) ? iParent : dParent;
}
function iSplay52(i, iContainer, splay = 'right', ov = 20, ovUnit = '%', createiHand = true, rememberFunc = true) {
  let ilist = !isList(i) ? i : [i];
  let items = isNumber(i[0]) ? i52(ilist) : ilist;
  let res = iSplay(items, iContainer, null, 'right', 20, '%', true);
  return res;
}
function isPlayerChecked(i) {
  id = getidNum(i); return document.getElementById(id).checked == true;
}
function isPlaying() { return DA.isSound; }
function IsRepetition() {
  var index = 0;
  for (index = brd_hisPly - brd_fiftyMove; index < brd_hisPly - 1; ++index) {
    if (brd_posKey == brd_history[index].posKey) {
      return BOOL.TRUE;
    }
  }
  return BOOL.FALSE;
}
function isSeason(ph) {
  return ['Spring', 'Summer', 'Fall', 'Winter'].includes(ph);
}
function isSet(x) { return (isDict(x) && (x.set || x._set)); }
function isSimilar(reqAnswer, answer, lang) {
  if (answer == reqAnswer) return true;
  else if (replaceAll(answer, ' ', '') == replaceAll(reqAnswer, ' ', '')) return true;
  else if (differInAtMost(reqAnswer, answer, 1)) return true;
  else if (isSimilarSound(reqAnswer, answer, lang)) return true;
  else return false;
}
function isSimilarSound(reqAnswer, s, lang) {
  let sParts = s.split(' ');
  let aParts = reqAnswer.split(' ');
  if (isNumber(s) || isTimeString(s, lang)) s = convertTimesAndNumbersToWords(s);
  if (isNumber(reqAnswer) || isTimeString(reqAnswer, lang)) reqAnswer = convertTimesAndNumbersToWords(reqAnswer);
  if (sParts.length != aParts.length) return false;
  for (let i = 0; i < sParts.length; i++) {
    if (!soundsSimilar(sParts[i], aParts[i], lang)) return false;
  }
  return true;
}
function isSimple(x) { return isString(x) || isNumeric(x); }
function isSimpleType(type) { return !['list', 'object'].includes(type); }
function isSingleDigit(s) { return /^[0-9]$/i.test(s); }
function isSingleton(x) {
  return (isSet(x) &&
    ('set' in x && x.set.length == 1 || '_set' in x && x._set.length == 1))
    ||
    (isTuple(x) &&
      ('tuple' in x && x.tuple.length == 1 || '_tuple' in x && x._tuple.length == 1));
}
function isSizedNode(n) { return isdef(n.params.size) || isdef(n.params.width) || isdef(n.params.height); }
function isSouthRoom(house, room) { return isCloseTo(room.rect.b, house.rect.b, house.wallWidth); }
function isSpecType(t) { return isdef(R.lastSpec[t]); }
function isStatic(x) { let t = lookup(x, ['meta', 'type']); return t == 'static'; }
function isString(param) { return typeof param == 'string'; }
function isStructuralElement(oid) { if (nundef(G.table) || !(oid in G.table)) return false; return 'map' in G.table[oid]; }
function isSvg(elem) { return startsWith(elem.constructor.name, 'SVG'); }
function isTimeForAddon() {
  if (nundef(ADS)) return false;
  if (isEmpty(U.avAddons)) return false;
  if (isdef(AD) && AD.running && AD.checkEndCondition()) {
    console.log('END!')
    AD.die();
    U.addons[AD.key].open = false;
    AD = null;
  }
  if (isdef(AD)) return AD.isTimeForAddon();
  let open = allCondDict(U.addons, x => x.open == true);
  if (isEmpty(open)) {
    console.log('open is empty! choosing a random addon!')
    let k = chooseRandom(U.avAddons);
    AD = new ADS[k].cl(k, ADS[k], {});
  } else if (open.length == 1) {
    let k = open[0];
    AD = new ADS[k].cl(k, ADS[k], U.addons[k]);
  } else {
    let k = chooseRandom(open);
    AD = new ADS[k].cl(k, ADS[k], U.addons[k]);
  }
  return AD.isTimeForAddon();
}
function isTimeString(w, lang) {
  let res1 = (w.includes(':') && w.length >= 4 && w.length <= 5);
  let res2 = (lang == 'D' && stringAfterLast(w.toLowerCase(), ' ') == 'uhr');
  return res1 || res2;
}
function isTooEarly(optYear, curYear, optStep, curStep) {
  return Number(curYear) < optYear || curStep < optStep;
}
function iStrip(item) { delete item.live; return item; }
function isTuple(x) {
  return Array.isArray(x);
}
function iStyle(i, styles) { mStyleX(iDiv(i), styles); }
function isType(sType, val) {
  switch (sType) {
    case 'region':
      return val in regions;
    case 'power':
      return val in unitsPerPower;
    case 'unit':
      return val in units;
    case 'faction':
      return val in ['Axis', 'West', 'USSR'];
  }
  return false;
}
function isVariableColor(c) { return c == 'random' || c == 'randPastel' || c == 'randDark' || c == 'randLight' || isList(c); }
function iSvg(i) { return isdef(i.live) ? i.live.svg : isdef(i.svg) ? i.svg : i; }
function isVisible(elem) {
  if (isString(elem)) elem = document.getElementById(elem);
  let x = elem.style.flex;
  return (elem.style.display != 'none' || elem.offsetParent !== null) && (nundef(elem.style.flex) || !endsWith(elem.style.flex, '0%'));
}
function isVisible2(elem) {
  if (isString(elem)) elem = document.getElementById(elem);
  return (elem.style.display != 'none' || elem.offsetParent !== null);
}
function isVisibleToPlayer(o, player) {
  let vis = getVisibleSet(o);
  if (vis && vis.includes(player)) return true;
}
function isWestRoom(house, room) { return isCloseTo(room.rect.l, house.rect.l, house.wallWidth); }
function isWhiteSpace(ch) { return /\s/.test(ch) }
function isWhiteSpace1(s) { let white = new RegExp(/^\s$/); return white.test(s.charAt(0)); }
function isWhiteSpace2(ch) {
  const alphanum = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_';
  return !alphanum.includes(ch);
}
function isWhiteSpaceString(s) { return isEmptyOrWhiteSpace(s); }
function isWord(w) { return lookup(Dictionary, [G.language, w]); }
function isWrongPhase(optPhase, curPhase) {
  return optPhase != 'any' && !startsWithCaseIn(curPhase, optPhase);
}
function isWrongPlayer(optPlayer, curPlayer) {
  return optPlayer != 'any' && !startsWithCaseIn(curPlayer, optPlayer);
}
function isYesNo(choices) { return !firstCond(choices, x => !(['yes', 'no'].includes(x.text))); }
function iSym(kItem, dParent, styles, classes) {
  let item;
  if (isString(kItem)) { item = { id: getUID(), key: kItem, info: Syms[kItem] }; }
  else if (nundef(kItem.info)) { item = { id: getUID(), key: kItem.key, info: kItem }; }
  else item = kItem;
  let info = item.info;
  let dOuter = mDiv(dParent);
  mCenterCenterFlex(dOuter);
  let d = mDiv(dOuter);
  d.innerHTML = info.text;
  if (nundef(styles)) styles = {};
  let picStyles = { family: info.family, fz: valf(styles.fz, valf(styles.h / 2, 25)), display: 'inline-block' };
  mStyle(dOuter, styles);
  mStyle(d, picStyles);
  if (isdef(classes)) mClass(dOuter, classes);
  iAdd(item, { div: dOuter, dPic: d });
  return item;
}
function iTableBounds(i) { return iBounds(i, dTable); }
function iTag(tags = ['canvas', 'textarea', 'a'], ignore_empty = true) {
  for (const t of tags) {
    let uis = Array.from(document.getElementsByTagName(t));
    if (ignore_empty) uis = uis.filter(d => !isEmpty(d.innerHTML));
    for (const ui of uis) {
      if (isEmptyOrWhiteSpace(ui.id)) ui.id = getUID();
      iAdd({}, { div: ui });
    }
  }
  setTimeout(show_tagged, 100);
}
async function iTest00() {
  await iPrepper();
  let keys = SymKeys;
  let k = chooseRandom(keys);
  let item = miPic(k, dTable, { w: 100, h: 100, fz: 80, bg: 'blue' });
}
function ithWord(s, n, allow_) {
  let ws = toWords(s, allow_);
  return ws[Math.min(n, ws.length - 1)];
}
function iTitle(item, msg) { let dm = diTitle(item); if (isdef(dm)) dm.innerHTML = msg; }
function iToggleMultipleSelection(item, items) {
  let ui = iDiv(item);
  item.isSelected = !item.isSelected;
  if (item.isSelected) mClass(ui, 'framedPicture'); else mRemoveClass(ui, 'framedPicture');
  if (isdef(items)) {
    for (const i1 of items) {
      if (i1.isSelected) {
        console.assert(!items.includes(i1), 'UNSELECTED PIC IN PICLIST!!!!!!!!!!!!')
        items.push(i1);
      } else {
        console.assert(items.includes(i1), 'PIC NOT IN PICLIST BUT HAS BEEN SELECTED!!!!!!!!!!!!')
        removeInPlace(items, i1);
      }
    }
  }
}
function iToggleSingleSelection(item, items) {
  let ui = iDiv(item);
  let selItem = null;
  item.isSelected = !item.isSelected;
  if (item.isSelected) { mClass(ui, 'framedPicture'); selItem = item; }
  else { mRemoveClass(ui, 'framedPicture'); selItem = null; }
  if (isdef(items) && selItem) {
    for (const i1 of items) {
      if (i1.isSelected && i1 != item) {
        i1.isSelected = false;
        mRemoveClass(iDiv(i1), 'framedPicture');
        break;
      }
    }
  }
  return selItem;
}
function iToRowCol(idx, rows, cols) { let c = idx % cols; let r = (idx - c) / rows; return [r, c]; }
function iToSuit52_G(suit) {
  return suit === 0 ? 'spades' : suit === 1 ? 'hearts' : suit === 2 ? 'clubs' : suit === 3 ? 'diamonds' : 'joker';
}
function iToValue(l) { if (isdef(l)) l = l % 13; return isdef(l) ? l == 0 ? 13 : l : null; }
function iTrim(item, serialize = true) {
  let todelete = [];
  for (const k in item) {
    let val = item[k];
    if (isDOM(val)) {
      if (!serialize) { if (isEmptyOrWhiteSpace(val.id)) val.id = getUID(); lookupSetOverride(item, ['live', val.id], val); }
      todelete.push(k);
    } else if (typeof val == 'function') {
      console.log('funcname', val.name);
      if (serialize) item[k] = val.name;
      else { lookupSetOverride(item, ['funcs', val.name], val); todelete.push(k); }
    }
  }
  if (serialize) { delete item.live; delete item.funcs };
  for (const k of todelete) delete item[k];
  return item;
}
function iUnhigh(item) { let d = iDiv(item); mStyle(d, { bg: 'transparent' }); }
function iZMax(n) { if (isdef(n)) ZMax = n; ZMax += 1; return ZMax; }
function join_table(user, tid) { to_server({ uname: user, tid: tid }, 'join_table'); }
function joinMultiplayerGame() { }
function jolly_matches(key, j, rankstr = 'A23456789TJQKA') {
  let jolly_idx = find_index_of_jolly(j);
  if (jolly_idx == -1) return false;
  if (is_group(j)) {
    let r = get_group_rank(j);
    if (key[0] == r) return true;
  } else if (jolly_idx > 0) {
    let rank_before_index = j[jolly_idx - 1][0];
    let suit_needed = j[jolly_idx - 1][1];
    let rank_needed = rankstr[rankstr.indexOf(rank_before_index) + 1];
    if (key[0] == rank_needed && key[1] == suit_needed) return true;
  } else {
    let rank_after_index = j[jolly_idx + 1][0];
    let suit_needed = j[jolly_idx + 1][1];
    let rank_needed = rank_after_index == 'A' ? 'K' : rankstr[rankstr.indexOf(rank_after_index) - 1];
    if (key[0] == rank_needed && key[1] == suit_needed) return true;
  }
  return false;
}
function Joy() {
  this.SENSITIVITY = 50;
  this.diffX = 0;
  this.diffY = 0;
  var touches = [];
  var startX;
  var startY;
  this.onTouchStart = function (event) {
    result = "touch: ";
    touches = event.touches;
    startX = touches[0].screenX;
    startY = touches[0].screenY;
    result += "x: " + startX + ", y: " + startY;
    console.log(result);
  }
  this.onTouchMove = function (event) {
    result = "move: "
    event.preventDefault();
    touches = event.touches;
    this.diffX = touches[0].screenX - startX;
    this.diffY = touches[0].screenY - startY;
    result += "dx: " + this.diffX + ", dy: " + this.diffY;
    console.log(result);
  }
  this.onTouchEnd = function (event) {
    result = "no touch";
    touches = event.touches;
    this.diffX = 0;
    this.diffY = 0;
  }
  touchable = 'createTouch' in document;
  if (touchable) {
    document.addEventListener('touchstart', this.onTouchStart, false);
    document.addEventListener('touchmove', this.onTouchMove, false);
    document.addEventListener('touchend', this.onTouchEnd, false);
  }
  this.getDX = function () {
    return "At least I work...";
    return this.diffX;
  }
  this.getDY = function () {
    return this.diffY;
  }
}
function jsClean(o) {
  if (nundef(o)) return o;
  else if (isDOM(o)) return null;
  else if (isLiteral(o)) return o;
  else if (isList(o)) {
    let onew = o.map(x => jsClean(x));
    return onew.filter(x => x !== null);
  } else if (isDict(o)) {
    for (const k in o) o[k] = jsClean(o[k]);
    let onew = {};
    for (const k in o) if (o[k] !== null) onew[k] = o[k];
    return onew;
  }
}
function jsCopy(o) { return JSON.parse(JSON.stringify(o)); }
function jsCopyMinus(o) {
  let lstOmit = [...arguments].slice(1);
  let oNew = {};
  for (const k in o) {
    if (lstOmit.includes(k)) continue;
    oNew[k] = o[k];
  }
  return oNew;
}
function jsCopySafe(o) { return JSON.parse(JSON.stringify(jsClean(o))); }
function jsonToYaml(o) { let y = jsyaml.dump(o); return y; }
function jsSafeStringify(obj, indent = 2) {
  let cache = [];
  const retVal = JSON.stringify(
    obj,
    (key, value) =>
      typeof value === "object" && value !== null
        ? cache.includes(value)
          ? undefined
          : cache.push(value) && value
        : value,
    indent
  );
  cache = null;
  return retVal;
};
function just_map() {
  var map = L.map('map');
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '© OpenStreetMap contributors'
  }).addTo(map);
  return map;
}
function just_message(msg, styles = {}) {
  alert(msg);
}
function just_points(map) {
  console.log('geo', Geo)
  let [p1, p2] = [Geo.places.tuerkenschanzpark, Geo.places.vegagasse];
  return [p1, p2];
}
function justClick(ev) { console.log('click', ev.target, 'item', evToItemC(ev)); }
function justIds(o) {
  return Object.keys(o);
}

//#endregion

//#region K L
function keepOnlyElements(func, lst) {
  return lst.filter(func);
}
function keyDownHandler(ev) {
  checkArrowKeys(ev);
}
function keyhandler(ev) {
  if (ev.key == 'Enter') { }
  else if (ev.key == 'Escape') { close_popup(); }
}
function keyUpHandler(ev) {
  checkControlKey(ev);
}
function kriegTest00(game) {
  game.load({ pl1: { hand: ['TH', 'KH'] }, pl2: { hand: ['9C', 'QC'] } }); game.deck.sort(); game.print_state();
  for (let i = 0; i < 2; i++) { game.make_random_move(); game.make_random_move(); game.print_state(); if (game.is_out_of_cards()) { console.log('game over!'); break; } }
}
function kriegTest00UI() {
  setBackgroundColor(null, 'random');
  clearElement(dTable)
  let back = new GKriegBack();
  back.load({ pl1: { name: 'felix', hand: ['TH', 'KH'] }, pl2: { name: 'tom', hand: ['9C', 'QC'] } }); back.deck.sort(); back.print_state();
  let front = new GKriegFront(130, dTable);
  front.presentState(back.get_state(), dTable);
  mLinebreak(dTable, 50);
  mButton('Move!', () => kriegTest00UI_engine(back, front), dTable, { fz: 28, matop: 10, rounding: 10, padding: 16, border: 8 }, ['buttonClass']);
}
function kriegTest00UI_engine(back, front) {
  if (back.is_out_of_cards()) { console.log('!!!!!!!!!!!!!!!!'); front.presentGameover(back.winner(), kriegTest00UI); return; }
  clearTable(dTable);
  back.make_random_moveX();
  back.make_random_moveX();
  back.print_state();
  front.presentState(back.get_state(), dTable);
  if (back.is_out_of_cards()) { console.log('game over!'); front.presentGameover(back.winner(), kriegTest00UI); return; }
  mLinebreak(dTable, 50);
  mButton('Move!', () => kriegTest00UI_engine(back, front), dTable, { fz: 28, matop: 10, rounding: 10, padding: 16, border: 8 }, ['buttonClass']);
}
function kriegTest01(game) {
  game.load({ pl1: { hand: ['TH', 'QH'] }, pl2: { hand: ['9C', 'KC'] } }); game.deck.sort();
  game.print_state();
  for (let i = 0; i < 8; i++) {
    game.make_random_moveX();
    game.print_state();
    if (game.is_out_of_cards()) { console.log('game over!'); break; }
  }
}
function kriegTest02(game) {
  game.load({ pl1: { hand: ['TH'], trick: [['2H']] }, pl2: { hand: ['9C', 'KC'] } }); game.deck.sort();
  game.print_state('start:');
  for (let i = 0; i < 12; i++) {
    game.make_random_move();
    game.print_state('move:');
    game.resolve();
    game.swap_turn();
    if (i % 2 == 0) game.print_state('after resolve:');
    if (game.is_out_of_cards()) { console.log('game over!'); break; }
  }
}
function kriegTest03(game) {
  game.load({ pl1: { hand: ['TH'], trick: [['2H']] }, pl2: { hand: ['9C'], trick: [['KC']] } }); game.deck.sort();
  game.print_state('start:');
  for (let i = 0; i < 10; i++) {
    game.make_random_move();
    game.print_state('move:');
    game.resolve();
    game.swap_turn();
    if (i % 2 == 1) game.print_state('after resolve:');
    if (game.is_out_of_cards()) { console.log('game over!'); break; }
  }
}
function kriegTest04(game) {
  game.load({ pl1: { name: 'felix', hand: ['TH'], trick: [['2H']] }, pl2: { name: 'max', hand: ['9C'], trick: [['2C']] } }); game.deck.sort();
  game.print_state('start:');
  for (let i = 0; i < 2; i++) {
    game.make_random_move();
    game.print_state('move:');
    console.log('turn', game.iturn)
    if (game.iturn == 1) {
      game.resolve();
      game.swap_turn();
      game.print_state('after resolve:');
    } else game.swap_turn();
    if (game.is_out_of_cards()) { console.log('game over! winner', game.winner().name); break; }
  }
}
function kriegTest05(game) {
  game.load();
  game.print_state('start:');
  for (let i = 0; i < 25; i++) {
    game.make_random_move();
    game.print_state('move:');
    console.log('turn', game.iturn)
    if (game.iturn == 1) {
      game.resolve();
      game.swap_turn();
      game.print_state('after resolve:');
    } else game.swap_turn();
    if (game.is_out_of_cards()) { console.log('game over! winner', game.winner().index); break; }
  }
}
function kriegTest06(game) {
  game.load();
  game.print_state('start:');
  let front = new GKriegFront(130, dTable);
  front.presentState(game.get_state(), dTable);
  return;
  for (let i = 0; i < 25; i++) {
    game.make_random_move();
    game.print_state('move:');
    console.log('turn', game.iturn)
    if (game.iturn == 1) {
      game.resolve();
      game.swap_turn();
      game.print_state('after resolve:');
    } else game.swap_turn();
    if (game.is_out_of_cards()) { console.log('game over! winner', game.winner().index); break; }
  }
}
function labelDiv(label, color, w, h) {
  let d = mDiv();
  let dText = mAppendText(d, label);
  dText.classList.add('truncate');
  dText.classList.add('centerCentered');
  mColor(d, color);
  mSize(d, w, h);
  return d;
}
function labelPrepper(val) { return `<b>${val.toUpperCase()}</b>`; }
function labelToggler(ev) {
  let id = evToClosestId(ev);
  let info = symbolDict[id.substring(1)];
  if (isLabelVisible(id)) maHideLabel(id, info); else maShowLabel(id, info);
  mBy('dummy').focus();
}
function landing() { if (isdef(DA.landing)) DA.landing(); }
function last(arr) {
  return arr.length > 0 ? arr[arr.length - 1] : null;
}
function last_elem_from_to(arr1, arr2) { arr2.push(arr1.pop()); }
function last_n_digits(number, n = 2) {
  return number % Math.pow(10, n);
}
function lastCond(arr, func) {
  if (nundef(arr)) return null;
  for (let i = arr.length - 1; i >= 0; i--) { let a = arr[i]; if (func(a)) return a; }
  return null;
}
function lastCondDict(dict, func) {
  let keys = Object.keys(dict);
  for (let i = keys.length - 1; i >= 0; i--) {
    if (func(dict[i])) return dict[i];
  }
  return null;
}
function lastCondDictPlusKey(dict, func) {
  let keys = Object.keys(dict);
  for (let i = keys.length - 1; i >= 0; i--) {
    let key = keys[i];
    if (func(dict[key])) return [key, dict[key]];
  }
  return null;
}
function lastCondX(ad, func, keysSorted) {
  if (nundef(ad)) return null;
  else if (isDict(ad)) {
    if (isdef(keysSorted)) {
      for (let i = keysSorted.length - 1; i >= 0; i--) {
        let k = keysSorted[i];
        let v = ad[k];
        if (func(v)) { if (nundef(v.key)) v.key = k; return v; }
      }
    } else {
      for (const k in ad) {
        let v = ad[k];
        if (func(v)) { if (nundef(v.key)) v.key = k; return v; }
      }
    }
  } else {
    for (let i = ad.length - 1; i >= 0; i--) { if (func(ad[i])) return ad[i]; }
  }
  return null;
}
function lastDescendantOfType(type, parent) {
  if (getTypeOf(parent) == type) return parent;
  let children = arrChildren(parent);
  if (isEmpty(children)) return null;
  for (const ch of children.reverse()) {
    let res = lastDescendantOfType(type, ch);
    if (res) return res;
  }
  return null;
}
function lastIndexOfAny(s, list, pos) {
  let min = -1;
  let match = null;
  for (const w of list) {
    let i = s.lastIndexOf(w, pos);
    if (i >= 0 && i > min) { min = i; match = w; }
  }
  return match ? [min, match] : [-1, null];
}
function lastOfLanguage(key, language) {
  let y = symbolDict[key];
  let w = y[language];
  let last = stringAfterLast(w, '|');
  return last.trim();
}
function lastStreakCorrect(items) {
  let n = G.incrementLevelOnPositiveStreak;
  let iFrom = items.length - 1;
  let iTo = iFrom - n;
  for (let i = iFrom; i > iTo; i--) {
    if (i < 0) return false;
    else if (!items[i].isCorrect) return false;
  }
  return true;
}
function lastStreakFalse(items) {
  let n = G.decrementLevelOnNegativeStreak;
  let iFrom = items.length - 1;
  let iTo = iFrom - n;
  for (let i = iFrom; i > iTo; i--) {
    if (i < 0) return false;
    else if (items[i].isCorrect) return false;
  }
  return true;
}
function lastWord(s) { return stringAfterLast(s, ' '); }
function layoutCardsOverlapping(mkHand, mkCardList) {
  let dHand = mkHand.elem;
  let cardContainer = mkHand.parts.body;
  let bds = getBounds(cardContainer);
  if (bds.height < 10) {
    console.log('>>')
  }
  let gap = 2;
  let hCard = mkHand.hCard;
  if (!PREFERRED_CARD_HEIGHT) PREFERRED_CARD_HEIGHT = hCard;
  let wCard = hCard * .7;
  mkCardList.map(x => mStyle(x.elem, { height: hCard, width: wCard, position: 'absolute' }, 'px'));
  let ovl = wCard / 4;
  let numCards = mkCardList.length;
  let wHand = (numCards - 1) * ovl + wCard + gap;
  cardContainer.style.setProperty('width', wHand + 'px');
  cardContainer.style.setProperty('position', 'relative');
  let x = gap; let y = gap;
  for (const card of mkCardList) {
    card.setPos(x, y);
    x += ovl;
  }
  let iz = 10;
  for (const card of mkCardList) {
    card.loc = mkHand.id;
    card.attach('body');
    card.zIndex = card.elem.style.zIndex = iz;
    iz += 1;
    mkMan.setDone(card.oid);
  }
}
function layoutFlex(elist, dGrid, containerStyles, { rows, cols, isInline = false } = {}) {
  console.log(elist, elist.length)
  let dims = calcRowsCols(elist.length, rows, cols);
  console.log('dims', dims);
  let parentStyle = jsCopy(containerStyles);
  if (containerStyles.orientation == 'v') {
    parentStyle['writing-mode'] = 'vertical-lr';
  }
  parentStyle.display = 'flex';
  parentStyle.flex = '0 0 auto';
  parentStyle['flex-wrap'] = 'wrap';
  mStyleX(dGrid, parentStyle);
  let b = getRect(dGrid);
  return { w: b.w, h: b.h };
}
function layoutGrid(elist, dGrid, containerStyles, { rows, cols, isInline = false } = {}) {
  console.log('layoutGrid in _legacy!')
  let dims = calcRowsCols(elist.length, rows, cols);
  let parentStyle = jsCopy(containerStyles);
  parentStyle.display = isInline ? 'inline-grid' : 'grid';
  parentStyle['grid-template-columns'] = `repeat(${dims.cols}, auto)`;
  parentStyle['box-sizing'] = 'border-box';
  mStyleX(dGrid, parentStyle);
  let b = getRect(dGrid);
  return { w: b.w, h: b.h };
}
function layoutGridInfo(gContainer, fields, corners, edges, fw, fh) {
  for (const [id, f] of Object.entries(fields)) {
    gContainer.appendChild(f.ui);
    gPos(f.ui, fw * f.info.x, fh * f.info.y);
  }
  for (const [id, f] of Object.entries(edges)) {
    agLine(f.ui, f.info.x1 * fw, f.info.y1 * fw, f.info.x2 * fw, f.info.y2 * fw);
    gContainer.appendChild(f.ui);
  }
  for (const [id, f] of Object.entries(corners)) {
    gContainer.appendChild(f.ui);
    gPos(f.ui, fw * f.info.x, fh * f.info.y);
  }
}
function layoutHand(n) {
  if (isdef(n.params.overlap) && n.children.length > 1) {
    let cards = n.children.map(x => x.ui);
    let clast = arrLast(cards);
    let b = getBounds(clast);
    let wIs = b.width;
    let overlap = firstNumber(n.params.overlap);
    let sOverlap = '' + overlap;
    let unit = stringAfter(n.params.overlap, sOverlap);
    let wSoll = 0;
    if (unit == '%') {
      overlap /= 100;
      wSoll = wIs - wIs * overlap;
    } else { wSoll = wIs - overlap; }
    let wTotal = wIs + wSoll * (cards.length - 1);
    n.ui.style.maxWidth = '' + (wTotal + 2) + 'px';
  }
}
function layoutRow(uis, area, w, h, gap) {
  if (isEmpty(uis)) return [0, 0];
  let x = y = gap;
  uis.map(d => {
    mAppend(area, d);
    mPos(d, x, y);
    x += w + gap;
  });
  return [x, y + h + gap];
}
function layRow(olist, area, size = 50, gap = 4) {
  let res = [];
  let w = size, x = gap;
  olist.map(o => {
    let d = showPictoDiv(o.key, area, o.color, x, gap, w);
    res.push(d);
    x += w + gap;
  });
  return res;
}
function leaf_draw(o) {
  let [x, y] = [o.p.x, o.p.y];
  let [w, h] = [o.len * 1.5, o.len];
  cEllipse(x, y, w, h, { bg: o.color }, o.angle);
}
function length_of_each_array(arr) {
  let res = []
  for (const a of arr) {
    res.push(a.length);
  }
  return res.sort((a, b) => b - a);
}
function lerp(a, b, t) { return a + (b - a) * t; }
function lerpoint(i1, i2, frac = .5) {
  let o = { draw: i1.draw, update: i1.update };
  addKeys(i1, o);
  let pos = lerpos(i1, i2, frac);
  o.x = pos.x; o.y = pos.y;
  o.color = colorMix(i1.color, i2.color, frac * 100);
  if (isdef(i1.label)) o.label = `${(o.x / i1.ppp).toFixed(1)},${(o.y / i1.ppp).toFixed(1)}`;
  return o;
}
function lerpos(i1, i2, frac = .5) { return { x: lerp(i1.x, i2.x, frac), y: lerp(i1.y, i2.y, frac) }; }
function lettersToArray(s) { return toLetterList(s); }
function levDist(s, t) {
  var d = [];
  var n = s.length;
  var m = t.length;
  if (n == 0) return m;
  if (m == 0) return n;
  for (var i = n; i >= 0; i--) d[i] = [];
  for (var i = n; i >= 0; i--) d[i][0] = i;
  for (var j = m; j >= 0; j--) d[0][j] = j;
  for (var i = 1; i <= n; i++) {
    var s_i = s.charAt(i - 1);
    for (var j = 1; j <= m; j++) {
      if (i == j && d[i][j] > 4) return n;
      var t_j = t.charAt(j - 1);
      var cost = (s_i == t_j) ? 0 : 1;
      var mi = d[i - 1][j] + 1;
      var b = d[i][j - 1] + 1;
      var c = d[i - 1][j - 1] + cost;
      if (b < mi) mi = b;
      if (c < mi) mi = c;
      d[i][j] = mi;
      if (i > 1 && j > 1 && s_i == t.charAt(j - 2) && s.charAt(i - 2) == t_j) {
        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
      }
    }
  }
  return d[n][m];
}
function levelML() {
  let levelInfo = LevelsML[currentLevel];
  MaxNumTrials = levelInfo.MaxNumTrials;
  MaxWordLength = levelInfo.MaxWordLength;
  MinWordLength = levelInfo.MinWordLength;
  setKeys();
  NumPics = levelInfo.NumPics;
  NumLabels = levelInfo.NumLabels;
  NumMissingLetters = levelInfo.NumMissingLetters;
  MaxPosMissing = levelInfo.MaxPosMissing;
}
function levelSP() {
  let levelInfo = LevelsSP[currentLevel];
  MaxNumTrials = levelInfo.MaxNumTrials;
  MaxWordLength = levelInfo.MaxWordLength;
  MinWordLength = levelInfo.MinWordLength;
  setKeys(currentCategories, false, x => lastOfLanguage(x, currentLanguage), true, true);
  NumPics = levelInfo.NumPics;
  NumLabels = levelInfo.NumLabels;
}
function levelSPA() {
  let levelInfo = LevelsSPA[currentLevel];
  MaxNumTrials = levelInfo.MaxNumTrials;
  MaxWordLength = levelInfo.MaxWordLength;
  MinWordLength = levelInfo.MinWordLength;
  setKeys(currentCategories, true, (k) => lastOfLanguage(k, currentLanguage));
  boundary = currentKeys.length - 1;
  NextPictureIndex = 0;
  NumPics = levelInfo.NumPics;
  NumLabels = levelInfo.NumLabels;
}
function levelStep10() {
  mClass(document.body, 'aniFadeOutIn');
  hide('dLevelComplete');
  setTimeout(levelStep11, 500);
}
function levelStep11() {
  clearTable();
  setTimeout(levelStep12, 500);
}
function levelStep12() {
  addBadge(dLeiste, currentLevel);
  hide('dLevelComplete');
  clearTable();
  setTimeout(playRubberBandSound, 500);
  setBackgroundColor();
  showLevel();
  setTimeout(levelStep13, 2000);
}
function levelStep13() {
  mRemoveClass(document.body, 'aniFadeOutIn');
  proceedIfNotStepByStep();
}
function levelTC() {
  let levelInfo = LevelsTC[currentLevel];
  MaxNumTrials = levelInfo.MaxNumTrials;
  MaxWordLength = levelInfo.MaxWordLength;
  MinWordLength = levelInfo.MinWordLength;
  setKeys(['life'], true);
  NumPics = levelInfo.NumPics;
  NumLabels = levelInfo.NumLabels;
  NumColors = levelInfo.NumColors;
}
function levelTP() {
  let levelInfo = LevelsTP[currentLevel];
  MaxNumTrials = levelInfo.MaxNumTrials;
  MaxWordLength = levelInfo.MaxWordLength;
  MinWordLength = levelInfo.MinWordLength;
  setKeys();
  NumPics = levelInfo.NumPics;
  NumLabels = levelInfo.NumLabels;
}
function levelWP() {
  let levelInfo = LevelsWP[currentLevel];
  MaxNumTrials = levelInfo.MaxNumTrials;
  MaxWordLength = levelInfo.MaxWordLength;
  MinWordLength = levelInfo.MinWordLength;
  setKeys();
  NumPics = levelInfo.NumPics;
  NumLabels = levelInfo.NumLabels;
}
function lGrid(n, R) {
  resizeBoard(n, R);
  for (const uidMember of n.children) {
    let tile = R.uiNodes[uidMember];
    if (nundef(tile.children)) continue;
    wrapLayoutPosition(n, tile, R);
  }
  return { w: n.wTotal, h: n.hTotal };
}
function lHand(n, R) { return handLayout(n, R) }
function lighterColor(r, g, b) {
  let hsv = rgbToHsv(r, g, b);
  testHelpers(hsv);
  let h = hsv.h;
  let s = hsv.s;
  let v = hsv.v * 1.5;
  let hsl = hsvToHsl(h, s, v);
  h = hsl.h;
  s = hsl.s * 100;
  let l = hsl.l * 100;
  testHelpers('hsl:', h, s, l);
  return hslToHslaString(h, s, l);
}
function LineMatch(BookLine, gameline) {
  for (var len = 0; len < gameline.length; ++len) {
    if (len >= BookLine.length) { return BOOL.FALSE; }
    if (gameline[len] != BookLine[len]) { return BOOL.FALSE; }
  }
  return BOOL.TRUE;
}
function lineStyleFunction(feature, resolution) {
  return new Style({
    stroke: new Stroke({
      color: 'green',
      width: 2,
    }),
    text: createTextStyle(feature, resolution, myDom.lines),
  });
}
function lineupDecks(msDecks, deckArea) {
  let x = 0;
  let ysign = 1;
  let yfactor = 0;
  let yheight = 140;
  let y = yfactor * yheight * ysign;
  let areaCenter = { x: deckArea.w / 2, y: deckArea.h / 2 };
  let topLeftOffset = { x: areaCenter.x - 78 / 2, y: areaCenter.y - 110 / 2 };
  for (const mobj of msDecks) {
    mobj.attach();
    mobj.setPos(x + topLeftOffset.x, y + topLeftOffset.y);
    if (ysign > 0) { yfactor += 1; }
    ysign = -ysign;
    y = yfactor * yheight * ysign;
  }
}
function linkElement(s) {
  let el = document.createElement('div');
  el.style.backgroundColor = 'dimgray';
  el.innerHTML = s;
  el.onmouseenter = () => highlightContentIds(el);
  el.onmouseleave = () => unhighlightContentIds(el);
  return el;
}
function linkObjects(id, oid) {
  _addRelatives(id, oid);
  listKey(id2oids, id, oid);
  listKey(oid2ids, oid, id);
}
function list2dict(arr, keyprop = 'id', uniqueKeys = true) {
  let di = {};
  for (const a of arr) {
    if (uniqueKeys) lookupSet(di, [a[keyprop]], a);
    else lookupAddToList(di, [a[keyprop]], a);
  }
  return di;
}
function liste(areaName, oSpec, oid, o) {
  let [num, or, split, bg, fg, id, panels, parent] = getParams(areaName, oSpec, oid);
  parent.style.display = 'inline-grid';
  return parent;
}
function listFromString(s) {
  let words = s.split(',');
  return words.map(x => x.replace('"', '').trim());
}
function listKey(d, key, val, uniqueValues = true) {
  if (nundef(d[key])) { d[key] = []; }
  if (uniqueValues) { addIf(d[key], val); } else { d[key].push(val); }
  return d[key];
}
function listKeys(dict, keys, val, uniqueValues = true) {
  let d = dict;
  keysCopy = jsCopy(keys);
  let lastKey = keysCopy.pop();
  for (const k of keysCopy) {
    if (!(k in d)) {
      d[k] = {};
    }
    d = d[k];
  }
  return listKey(d, lastKey, val, uniqueValues);
}
function listToString(lst) { return isEmpty(lst) ? lst : lst.join(' '); }
async function load_all() {
  let o = await route_path_yaml_dict('../y/page.yaml');
  for (const item of o) { add_edit(item.x, item.y - 41, item.text); }
}
function load_assets(obj) {
  Config = jsyaml.load(obj.config);
  Syms = jsyaml.load(obj.syms);
  SymKeys = Object.keys(Syms);
  ByGroupSubgroup = jsyaml.load(obj.symGSG);
  C52 = jsyaml.load(obj.c52);
  Cinno = jsyaml.load(obj.cinno);
  Info = jsyaml.load(obj.info);
  Sayings = jsyaml.load(obj.sayings);
  create_card_assets_c52();
  KeySets = getKeySets();
  assertion(isdef(Config), 'NO Config!!!!!!!!!!!!!!!!!!!!!!!!');
}
function load_assets_direct(obj) {
  Config = jsyaml.load(obj.config);
  Syms = jsyaml.load(obj.syms);
  SymKeys = Object.keys(Syms);
  ByGroupSubgroup = jsyaml.load(obj.symGSG);
  Info = jsyaml.load(obj.info);
  KeySets = getKeySets();
  console.assert(isdef(Config), 'NO Config!!!!!!!!!!!!!!!!!!!!!!!!');
}
async function load_assets_fetch(basepath, baseminpath) {
  let path = basepath + 'assets/';
  Config = await route_path_yaml_dict(baseminpath + 'config.yaml');
  DB = await route_path_yaml_dict(basepath + 'DB.yaml');
  Syms = await route_path_yaml_dict(path + 'allSyms.yaml');
  SymKeys = Object.keys(Syms);
  ByGroupSubgroup = await route_path_yaml_dict(path + 'symGSG.yaml');
  C52 = await route_path_yaml_dict(path + 'c52.yaml');
  Cinno = await route_path_yaml_dict(path + 'fe/inno.yaml');
  Info = await route_path_yaml_dict(path + 'lists/info.yaml');
  create_card_assets_c52();
  KeySets = getKeySets();
  console.assert(isdef(Config), 'NO Config!!!!!!!!!!!!!!!!!!!!!!!!');
  return { users: dict2list(DB.users, 'name'), games: dict2list(Config.games, 'name'), tables: [] };
}
function load_coassets(obj) {
  Config = jsyaml.load(obj.config);
  Syms = jsyaml.load(obj.syms);
  SymKeys = Object.keys(Syms);
  ByGroupSubgroup = jsyaml.load(obj.symGSG);
  Info = jsyaml.load(obj.info);
  KeySets = getKeySets();
  console.assert(isdef(Config), 'NO Config!!!!!!!!!!!!!!!!!!!!!!!!');
}
async function load_codebase(paths, preserveRegionNames = false) {
  if (nundef(paths)) {
    paths = ['basemin', 'board', 'cards', 'gamehelpers', 'select'];
    paths = paths.map(f => `../basejs/${f}.js`);
  }
  let superdi = { cla: {}, func: {}, const: {}, var: {} };
  for (const f of paths) {
    console.log('...processing file', f);
    let current_file = stringBefore(stringAfterLast(f, '/'), '.');
    let base = await route_path_text(f);
    let res = parseCodefile(base, current_file, preserveRegionNames, {}, superdi);
  }
  return superdi;
}
async function load_config(port = 3000, apps = true, tables = false) {
  Config = await route_path_yaml_dict('../y/config.yaml');
  let server = 'http:/' + '/localhost:' + port;
  if (apps) {
    let files = await route_path_json(server + '/files?dir=appdata');
    console.log('apps', files)
    for (const f of files) {
      let appname = stringBefore(f, '.');
      Config.apps[appname].data = await route_path_yaml_dict(`../y/appdata/${appname}.yaml`);
    }
  }
  if (tables) {
    let files = await route_path_json(server + '/files?dir=tables');
    console.log('tables', files)
    Tables = {};
    for (const f of files) {
      let id = stringBefore(f, '.');
      Tables[id] = await route_path_yaml_dict(`../y/tables/${id}.yaml`);
    }
  }
}
async function load_config_fast(applist = [], tablelist = []) {
  Config = await route_path_yaml_dict('../y/config.yaml');
  for (const appname of applist) {
    Config.apps[appname].data = await route_path_yaml_dict(`../y/appdata/${appname}.yaml`);
    Config.apps[appname].name = appname;
  }
  Tables = {};
  for (const tableid of tablelist) {
    Tables[tableid] = await route_path_yaml_dict(`../y/tables/${tableid}.yaml`);
    Tables[tableid].name = tableid;
  }
}
async function load_config_new() {
  Config = await route_path_yaml_dict('../y/config.yaml');
  let data = await route_path_yaml_dict('../y/appdata.yaml');
  for (const k in data) {
    Config.apps[k].data = data[k];
  }
}
async function load_db() { DB = await route_path_yaml_dict('../y/db.yaml'); Config = DB; }
async function load_syms(path) {
  if (nundef(path)) path = '../base/assets/';
  Syms = await route_path_yaml_dict(path + 'allSyms.yaml');
  SymKeys = Object.keys(Syms);
  ByGroupSubgroup = await route_path_yaml_dict(path + 'symGSG.yaml');
  KeySets = getKeySets();
  Info = await route_path_yaml_dict(path + 'lists/info.yaml');
  C52 = await route_path_yaml_dict(path + 'c52.yaml');
  create_card_assets_c52();
  assertion(Syms, 'Syms undefined!');
}
function load_user(name, display_ui = true) {
  if (nundef(name)) name = 'guest';
  let udata = lookup(DB, ['users', name]);
  if (!udata) udata = add_new_user({ name: name, color: randomColor(), motto: random_motto(), image: false, games: {}, tables: {} });
  Session.cur_user = name;
  if (!is_admin(name)) localStorage.setItem('user', name);
  if (display_ui) show_user(udata);
  if (name == 'mimi') show('dAdminButtons'); else hide('dAdminButtons');
  return udata;
}
function load_yt_in_iframe(dParent) {
  var div = document.createElement('iframe');
  div.id = 'iframe1';
  mStyle(div, { w: 500, h: 300 });
  mAppend(dParent, div);
  div.src = "https://www.youtube.com/embed/3pNpHZ1yv3I"; //YES!
}
async function loadAllGames_dep() {
  if (allGames) return;
  allGames = vidCache_dep.load('allGames');
  if (!allGames) {
    allGames = await route_allGames();
    console.log(allGames)
  }
}
async function loadAsset() {
  let response = await fetch('/frontend/static/rsg/assets/gameIconCodes.yml');
  console.log(response);
}
async function loadAssets() {
  vidCache = new LazyCache(!USE_LOCAL_STORAGE);
  testCardsC = await vidCache.load('testCards', async () => await route_rsg_asset('testCards', 'yaml'));
  testCards = vidCache.asDict('testCards');
  iconCharsC = await vidCache.load('iconChars', route_iconChars);
  iconChars = vidCache.asDict('iconChars');
  allGamesC = await vidCache.load('allGames', route_allGames);
  allGames = vidCache.asDict('allGames');
  playerConfig = stubPlayerConfig(allGames);
}
async function loadassets() {
  C52 = await localOrRoute('C52', '../base/assets/c52.yaml');
  symbolDict = Syms = await localOrRoute('syms', '../base/assets/allSyms.yaml');
  SymKeys = Object.keys(Syms);
  ByGroupSubgroup = await localOrRoute('gsg', '../base/assets/symGSG.yaml');
  WordP = await route_path_yaml_dict('../base/assets/math/allWP.yaml');
  DB = await route_path_yaml_dict('../DB.yaml');
  start();
}
async function loadAssetsSIMA(assetsPath) {
  timit.show('assets*')
  c52 = await localOrRoute('c52', assetsPath + 'c52_blackBorder.yaml');
  cinno = await localOrRoute('cinno', assetsPath + 'fe/inno.yaml');
  symbolDict = await localOrRoute('symbolDict', assetsPath + 'symbolDict.yaml');
  symbolKeys = Object.keys(symbolDict);
  symbolList = dict2list(symbolDict);
  ensureSymBySet(); makeHigherOrderGroups();
  svgDict = await localOrRoute('svgDict', assetsPath + 'svgDict.yaml');
  svgKeys = Object.keys(svgDict);
  svgList = dict2list(svgDict);
  Syms = await localOrRoute('syms', assetsPath + 'syms.yaml');
  SymKeys = Object.keys(Syms);
  timit.show('assets done')
}
async function loadAsText(url) {
  let f = await fetch(url);
  let txt = await f.text();
  return txt;
}
function loadAutoState() {
  if ('auto' in HistoryOfStates) Socket.emit('state', HistoryOfStates.auto);
}
async function loadBasicAssets(assetsPath) {
  c52 = await localOrRoute('c52', assetsPath + 'c52_blackBorder.yaml');
  cinno = await localOrRoute('cinno', assetsPath + 'fe/inno.yaml');
  symbolDict = await localOrRoute('symbolDict', assetsPath + 'symbolDict.yaml');
  symbolKeys = Object.keys(symbolDict);
  symbolList = dict2list(symbolDict);
  ensureSymBySet(); makeHigherOrderGroups();
  svgDict = await localOrRoute('svgDict', assetsPath + 'svgDict.yaml');
  svgKeys = Object.keys(svgDict);
  svgList = dict2list(svgDict);
}
async function loadBestKeys() {
  BestKeySets = await loadYamlDict('/assets/speech/keysets.yaml');
  BestKeysD = await loadYamlDict('/assets/speech/bestKeysD.yaml');
  BestKeysE = await loadYamlDict('/assets/speech/bestKeysE.yaml');
  for (const e of BestKeysD) {
    let info = symbolDict[e.k];
    info.bestD = e.r;
    info.bestDConf = e.c;
  }
  for (const e of BestKeysE) {
    let info = symbolDict[e.k];
    info.bestE = e.r;
    info.bestEConf = e.c;
  }
  for (const setname in BestKeySets) {
    for (const k of BestKeySets[setname]) {
      let info = symbolDict[k];
      if (nundef(info.bestE)) info.bestE = lastOfLanguage(k, 'E');
      if (nundef(info.bestD)) info.bestD = lastOfLanguage(k, 'D');
      info[setname] = { E: info.bestE, D: info.bestD };
    }
  }
}
function loadBoardImage(dOneBoard, s, b, scale, useCornerColor = false) {
  let boardFilename = s.boardFilename;
  if (boardFilename == 'none') { return; }
  let path = getBoardImagePath(boardFilename);
  var img = mCreate('img');
  img.onload = ev => {
    let sz = s.naturalImageSize = b.imgSize = { w: img.naturalWidth, h: img.naturalHeight };
    let szi = s.backgroundSize;
    if (szi == 'initial' && scale != 1) szi = getScaledSizeCss(sz, scale);
    b.dOuter.style.backgroundImage = `url(${img.src})`;
    mStyleX(b.dOuter, { 'background-size': szi, 'background-repeat': 'no-repeat', 'background-position': 'center center' });
    let [wb, hb] = [Math.max(sz.w * scale, b.wNeeded), Math.max(sz.h * scale, b.hNeeded)];
    mStyleX(b.dOuter, { wmin: wb, hmin: hb });
    if (useCornerColor) setLinearBackground(b.d0, s.baseColor, 10);
    b.img = img;
  }
  img.src = path;
}
async function loadCode() {
  if (TESTING && !CODE_VERSION) return;
  let url = TESTING && !USE_NON_TESTING_DATA ? TEST_PATH + GAME + '/code' + CODE_VERSION + '.js'
    : '/games/' + GAME + '/_rsg/' + GAME + VERSION + '.js';
  let loader = new ScriptLoader();
  await loader.load(SERVER + url);
  if (TESTING) userCodeC = await vidCache.load('userCode', async () => await route_path_asText_dict(url), true, false);
  else userCodeC = await vidCache.load('userCode', async () => await route_userCode(GAME, GAME + VERSION), !CACHE_CODE, CACHE_CODE);
  userCode = vidCache.asDict('userCode');
  let d = mBy('OLDCODE');
  if (d && SHOW_CODE) { d.innerHTML = '<pre>' + userCode.asText + '</pre>'; }
}
function loadCode_dep(text) {
  if (isdef(text)) text = text.trim();
  if (isEmpty(text)) {
    return;
  }
  var scriptTag = document.createElement("script");
  scriptTag.onload = () => console.log('code loaded.....');
  scriptTag.setAttribute("type", "text/javascript");
  scriptTag.innerHTML = text;
  document.getElementsByTagName("body")[0].appendChild(scriptTag);
}
function loadCode0(text, codeToRunWhenScriptLoaded = null, callback = null) {
  if (isdef(text)) text = text.trim();
  if (isEmpty(text)) {
    console.log('code is empty!!! no script loaded!');
    if (callback) callback();
    return;
  }
  var scriptTag = document.createElement("script");
  scriptTag.setAttribute("type", "text/javascript");
  scriptTag.text = callback ? [text, codeToRunWhenScriptLoaded].join('\n') : text;
  document.getElementsByTagName("body")[0].appendChild(scriptTag);
}
async function loadCorrectWords() {
  CorrectKeysByLanguage = { E: [], EB: [], D: [] };
  CorrectByKey = {};
  let speechZira = await loadYamlDict('/assets/speech/speechZira.yaml');
  for (const k in speechZira) {
    let e = lookup(speechZira, [k, 'E', 'zira']);
    if (e && e.correct) {
      let c = Math.round(e.conf * 100);
      lookupSet(CorrectByKey, [k, 'E'], { r: e.req, c: c });
      addIf(CorrectKeysByLanguage.E, k);
    }
  }
  let speechBritish = await loadYamlDict('/assets/speech/speechBritish.yaml');
  for (const k in speechBritish) {
    let e = lookup(speechBritish, [k, 'E', 'ukMale']);
    if (e && e.correct) {
      let c = Math.round(e.conf * 100);
      lookupSet(CorrectByKey, [k, 'EB'], { r: e.req, c: c });
      addIf(CorrectKeysByLanguage.EB, k);
    }
  }
  let speechDeutsch = await loadYamlDict('/assets/speech/speechDeutsch.yaml');
  for (const k in speechDeutsch) {
    let e = lookup(speechDeutsch, [k, 'D', 'deutsch']);
    if (e && e.correct) {
      let c = Math.round(e.conf * 100);
      lookupSet(CorrectByKey, [k, 'D'], { r: e.req, c: c });
      addIf(CorrectKeysByLanguage.D, k);
    }
  }
}
async function loadCorrectWords_dep() {
  CorrectWords = await loadYamlDict('/assets/correctWordsX.yaml');
  CorrectWordsCorrect = { E: {}, D: {} };
  CorrectWordsExact = { E: {}, D: {} };
  CorrectWordsFailed = { E: {}, D: {} };
  if (isdef(CorrectWords) && isdef(CorrectWords.data)) {
    for (const cwentry of CorrectWords.data) {
      let key = cwentry.key;
      for (const lang of ['E', 'D']) {
        let cw = cwentry[lang];
        if (cw.isCorrect) {
          if (cw.answer == cw.req && !(cw.danger == true)) CorrectWordsExact[lang][key] = cw;
          else CorrectWordsCorrect[lang][key] = cw;
        } else CorrectWordsFailed[lang][key] = cw;
      }
    }
  }
}
function loader_off() { let d = mBy('loader_holder'); if (isdef(d)) d.className = 'loader_off'; }
function loader_on() { let d = mBy('loader_holder'); if (isdef(d)) d.className = 'loader_on'; }
function loadExerciser(dParent, row, col) {
  loadPic('exercises', 100, 100, dParent, { row: row, col: col, scale: 1.5 }, 'gif');
}
function loadGame(id) {
  if (nundef(id)) id = localStorage.getItem('game');
  if (nundef(id)) id = Object.keys(DB.games)[0];
  G = lookup(DB, ['games', id]);
  G.color = getColorDictColor(G.color);
  G.id = Gamename = id;
  updateGamenameUi(id, G.color);
}
async function loadGameInfo(useAllGamesStub = true) {
  if (useAllGamesStub) {
    allGames = {
      ttt: {
        name: 'TicTacToe',
        long_name: 'Tic-Tac-Toe',
        short_name: 'ttt',
        num_players: [2],
        player_names: ['Player1', 'Player2'],
      },
      s1: {
        name: 's1',
        long_name: 's1',
        short_name: 's1',
        num_players: [2, 3, 4, 5],
        player_names: ['Player1', 'Player2', 'Player3', 'Player4', 'Player5'],
      },
      starter: {
        name: 'Starter',
        long_name: 'Starter',
        short_name: 'starter',
        num_players: [2],
        player_names: ['Player1', 'Player2'],
      },
      catan: {
        name: 'Catan',
        long_name: 'The Settlers of Catan',
        short_name: 'catan',
        num_players: [3, 4],
        player_names: ['White', 'Red', 'Blue', 'Orange'],
      },
      aristocracy: {
        name: 'Aristocracy',
        long_name: 'Aristocracy',
        short_name: 'aristocracy',
        num_players: [2, 3, 4, 5],
        player_names: ['Player1', 'Player2', 'Player3', 'Player4', 'Player5'],
      }
    };
  } else {
    allGamesC = await vidCache.load('allGames', route_allGames);
    allGames = vidCache.asDict('allGames');
  }
  playerConfig = stubPlayerConfig(allGames);
}
async function loadGerman(justNouns = false) {
  let root = justNouns ? 'Nouns' : 'Dict';
  let ed = await route_path_yaml_dict('../assets/speech/ed' + root + '.yaml');
  let de = await route_path_yaml_dict('../assets/speech/de' + root + '.yaml');
  return [ed, de];
}
function loadHistoryExp() {
  let hist = localStorage.getItem('history');
  if (isdef(hist)) {
    HistoryOfStates = JSON.parse(hist);
    console.log('history loaded successfully...', HistoryOfStates);
  } else {
    console.log('no history found!!!');
  }
}
async function loadIcon_dep(key) {
  if (!iconChars) iconChars = await route_iconChars();
  return iconChars[key];
}
function loadIconChars(callbacks = []) {
  loadYML('/frontend/static/rsg/assets/gameIconCodes.yml', dga => {
    gaChars = dga;
    loadYML('/frontend/static/rsg/assets/faIconCodes.yml', dfa => {
      faChars = dfa;
      iconChars = {};
      faKeys = [];
      for (const k in faChars) {
        iconChars[k] = faChars[k];
      }
      for (const k in gaChars) {
        if (isdef(faChars[k])) faKeys.push(k);
        iconChars[k] = gaChars[k];
      }
      timit.showTime('loaded icons codes')
      if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));
    });
  });
}
function loadIcons(callback) {
  let faChars, gaChars;
  loadYML('/_lib/assets/icons/gameIconCodes.yml', dga => {
    gaChars = dga;
    loadYML('/_lib/assets/icons/faIconCodes.yml', dfa => {
      faChars = dfa;
      iconChars = {};
      for (const k in faChars) {
        iconChars[k] = faChars[k];
      }
      for (const k in gaChars) {
        iconChars[k] = gaChars[k];
      }
      timit.showTime('loaded icons codes');
      callback();
    });
  });
}
async function loadInitialServerData(unameStarts) {
  let initialPath = GAME + (USE_MAX_PLAYER_NUM ? '_max' : '');
  _syncUsernameOfSender(unameStarts);
  if (TESTING) {
    let url = SERVERDATA_PATH + '.yaml';
    serverDataC = initialDataC[GAME] = await vidCache.load('_initial_' + initialPath, async () => await route_path_yaml_dict(url), true, false);
  } else {
    serverDataC = initialDataC[GAME] = await vidCache.load('_initial_' + initialPath, async () => await route_initGame(GAME, playerConfig[GAME], Username), !CACHE_INITDATA, CACHE_INITDATA);
  }
  serverData = vidCache.asDict('_initial_' + initialPath);
  return serverData;
}
async function loadInitialServerDatafe(unameStarts) {
  _syncUsernameOfSender(unameStarts);
  let url = SERVERDATA_PATH;
  serverDataC = initialDataC[GAME] = await vidCache.load('serverData', async () => await route_path_yaml_dict(url), true, false);
  serverData = vidCache.asDict('serverData');
  return serverData;
}
function loadJSON(path, callback) {
  var xobj = new XMLHttpRequest();
  xobj.overrideMimeType('application/json');
  xobj.open('GET', path, true);
  xobj.onreadystatechange = function () {
    if (xobj.readyState == 4 && xobj.status == '200') {
      callback(JSON.parse(xobj.responseText));
    }
  };
  xobj.send(null);
}
async function loadJsonDict(url) { return await route_path_json_dict(url); }
function loadObject(name) { return JSON.parse(localStorage.getItem(name)); }
function loadPic(filename, w, h, dParent, { x, y, row, col, scale } = {}, ext = 'jpg', dir = '../assets/images/postures/') {
  let dPic = mDiv(dParent);
  dPic.style.width = '' + w + 'px';
  dPic.style.height = '' + h + 'px';
  if (isdef(row)) row *= w;
  if (isdef(col)) col *= h;
  if (isdef(x)) col = x;
  if (isdef(y)) row = y;
  if (nundef(row)) row = 0;
  if (nundef(col)) col = 0;
  dPic.style.background = `url(${dir}${filename}.${ext}) -${col}px -${row}px`;
  if (isdef(scale)) dPic.style.transform = `scale(${scale})`;
}
function loadRandomExerciser(dParent) {
  mLinebreak(dParent, 75);
  loadExerciser(dParent, randomNumber(0, 5), randomNumber(0, 7));
  mLinebreak(dParent, 25);
}
function loadRandomExerciser2(dParent, i) {
  let w = 280;
  let h = 240;
  let filename = 'exercises2';
  let table = [[30, 30], [30, 260], [30, 480], [30, 730], [20, 940],
  [350, 30], [350, 245], [350, 450], [350, 650], [330, 890],
  [620, 0], [620, 245], [620, 460], [620, 700], [560, 920],
  [880, 0], [900, 245], [890, 460], [860, 700], [870, 920],
  [1150, 0], [1170, 320], [1150, 620], [1120, 900],
  [1350, 30], [1400, 330], [1380, 630], [1350, 890]
  ];
  if (nundef(i)) i = randomNumber(0, table.length - 1);
  i = i % table.length;
  let x = table[i][0];
  let y = table[i][1];
  if (i == 9) { w = 240; h = 280; }
  else if (i == 13) { w = 240; h = 200; }
  else if (i == 14) { w = 260; h = 260; }
  else if (i == 20 || i == 21 || i == 22) { w = 240; h = 260; }
  else if (i == 24) { w = 280; h = 280; }
  else if (i == 25) { w = 200; h = 290; }
  else if (i == 26) { w = 230; h = 260; }
  else if (i == 27) { w = 240; h = 250; }
  console.log('i' + i, x, y)
  loadPic(filename, w, h, dParent, { x: x, y: y }, 'gif');
}
function loadRandomTaeOrPosturePic(dpics) {
  let imgs = ['tae', 'posture'];
  mImage(`../assets/images/postures/${chooseRandom(imgs)}0${randomNumber(1, 8)}.jpg`, dpics, 200, 200);
}
function loadScript(path, callback) {
  var script = document.createElement('script');
  script.onload = function () {
    if (callback) callback(path);
  };
  script.src = path;
  document.head.appendChild(script);
}
async function loadServerDataForTestSeries(series) {
  let path = '/assetsTEST/' + series + '/server.yaml';
  await loadTestServerData(path);
  preProcessData();
  sData = makeDefaultPool(jsCopy(serverData));
  return sData;
}
async function loadSIMA(callback) {
  let url = SERVERURL;
  fetch(url, {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    },
  }).then(async data => {
    let sData = await data.json();
    DB = sData[0];
    if (CLEAR_LOCAL_STORAGE) localStorage.clear();
    await loadAssetsSIMA('../assets/');
    if (isdef(callback)) callback();
  });
}
async function loadSolutions(series) {
  let solFilename = 'sol';
  let sol = await loadJsonDict('/assetsTEST/' + series + '/' + solFilename + '.json');
  let sol1 = {};
  for (const k in sol) { sol1[firstNumber(k)] = sol[k]; }
  let solutions = sol1;
  return solutions;
}
async function loadSpec(path) {
  if (TESTING) {
    let url = DSPEC_PATH + '.yaml';
    defaultSpecC = await vidCache.load('defaultSpec', async () => await route_path_yaml_dict(url), true, false);
    url = (isdef(path) ? path : SPEC_PATH) + '.yaml';
    if (USE_NON_TESTING_DATA) url = '/games/' + GAME + '/_rsg/' + GAME + VERSION + '.yaml';
    userSpecC = await vidCache.load('userSpec', async () => await route_test_userSpec(url), true, false);
  } else {
    url = DSPEC_PATH + '.yaml';
    defaultSpecC = await vidCache.load('defaultSpec', async () => await route_path_yaml_dict(url), !CACHE_DEFAULTSPEC, CACHE_DEFAULTSPEC);
    userSpecC = await vidCache.load('userSpec', async () => await route_userSpec(GAME, GAME + VERSION), !CACHE_USERSPEC, CACHE_USERSPEC);
  }
  defaultSpec = vidCache.asDict('defaultSpec');
  userSpec = vidCache.asDict('userSpec');
  SPEC = deepmerge(defaultSpec, userSpec);
  DEFS = SPEC.defaults;
  delete SPEC.defaults;
  if (userSpec.layout_alias) { SPEC.areas = userSpec.layout_alias; }
  if (userSpec.areas) { SPEC.areas = userSpec.areas; }
  delete SPEC.layout_alias;
  delete SPEC.asText;
}
async function loadSpecAndCode() {
  let initialPath = GAME + (USE_MAX_PLAYER_NUM ? '_max' : '');
  if (TESTING) {
    let url = TEST_PATH + 'defaultSpec' + DSPEC_VERSION + '.yaml';
    defaultSpecC = await vidCache.load('defaultSpec', async () => await route_path_yaml_dict(url), true, false);
    url = TEST_PATH + GAME + '/uspec' + USPEC_VERSION + '.yaml';
    if (USE_NON_TESTING_DATA) url = '/games/' + GAME + '/_rsg/' + GAME + VERSION + '.yaml';
    userSpecC = await vidCache.load('userSpec', async () => await route_test_userSpec(url), true, false);
    url = TEST_PATH + GAME + '/code' + CODE_VERSION + '.js';
    if (USE_NON_TESTING_DATA) url = '/games/' + GAME + '/_rsg/' + GAME + VERSION + '.js';
    userCodeC = await vidCache.load('userCode', async () => await route_path_asText_dict(url), true, false);
    url = TEST_PATH + GAME + '/data' + SERVERDATA_VERSION + '_' + initialPath + '.yaml';
    serverDataC = initialDataC[GAME] = await vidCache.load('_initial_' + initialPath, async () => await route_path_yaml_dict(url), true, false);
    serverData = vidCache.asDict('_initial_' + initialPath);
  } else {
    url = TEST_PATH + 'defaultSpec' + DSPEC_VERSION + '.yaml';
    defaultSpecC = await vidCache.load('defaultSpec', async () => await route_path_yaml_dict(url), !CACHE_DEFAULTSPEC, CACHE_DEFAULTSPEC);
    userSpecC = await vidCache.load('userSpec', async () => await route_userSpec(GAME, GAME + VERSION), !CACHE_USERSPEC, CACHE_USERSPEC);
    let fname = userSpecC['CODE'];
    userCodeC = await vidCache.load('userCode', async () => await route_userCode(GAME, GAME + VERSION), !CACHE_CODE, CACHE_CODE);
    serverDataC = initialDataC[GAME] = await vidCache.load('_initial_' + initialPath, async () => await route_initGame(GAME, playerConfig[GAME], USERNAME), !CACHE_INITDATA, CACHE_INITDATA);
  }
  defaultSpec = vidCache.asDict('defaultSpec');
  userSpec = vidCache.asDict('userSpec');
  userCode = vidCache.asDict('userCode');
  loadCode0(userCode.asText, 'setUserSpecAndCode();', () => {
    setUserSpecAndCode();
  });
  serverData = vidCache.asDict('_initial_' + initialPath);
}
async function loadSpecfe() {
  let url = DSPEC_PATH + DSPEC_VERSION + '.yaml';
  defaultSpecC = await vidCache.load('defaultSpec', async () => await route_path_yaml_dict(url), true, false);
  url = SPEC_PATH;
  let staticSpecC = await vidCache.load('staticSpec', async () => await route_test_userSpec(url), true, false);
  defaultSpec = vidCache.asDict('defaultSpec');
  staticSpec = vidCache.asDict('staticSpec');
  SPEC = deepmerge(defaultSpec, staticSpec, { arrayMerge: overwriteMerge });
  delete SPEC.asText;
  let d = mBy('SPEC');
  if (d && SHOW_SPEC) { d.innerHTML = '<pre>' + jsonToYaml(SPEC) + '</pre>'; }
}
function loadStyle(href, callback) {
  let style = document.createElement('link');
  style.rel = href == 'favicon' ? 'shortcut icon' : 'stylesheet';
  style.onload = function () {
    if (callback) callback(href);
  };
  style.href = href;
  document.head.appendChild(style);
}
function loadTable(id) {
  if (nundef(id)) id = localStorage.getItem('table');
  if (nundef(id)) id = findTable(true);
  T = lookup(DB, ['tables', id]);
  Tablename = id;
  logTable();
  updateTablenameUi(id, G.color);
}
async function loadTestServerData(url) {
  let initial = 'testServerData';
  serverDataC = initialDataC[GAME] = await vidCache.load(initial, async () => await route_path_yaml_dict(url), true, false);
  serverData = vidCache.asDict(initial);
  return serverData;
}
function loadText(path, callback) {
  $.ajax({
    url: path,
    type: 'GET',
    success: response => {
      if (callback) {
        callback(response);
      }
    },
    error: err => {
      error(err);
    }
  });
  return 'ok';
}
function loadUrlToJSON(url, callback) { }
function loadUser(newUser) {
  cleanupOldGame();
  Username = isdef(newUser) ? newUser : localStorage.getItem('user');
  if (nundef(Username)) Username = DEFAULTUSERNAME;
  let uData = lookupSet(DB, ['users', Username]);
  if (!uData) {
    if (startsWith(newUser, 'test')) { uData = DB.users[Username] = jsCopy(DB.users.test0); uData.id = Username; }
    else { uData = DB.users[Username] = jsCopy(DB.users.guest0); uData.id = Username; }
  }
  U = DB.users[Username];
  let uiName = 'spUser';
  let dUser = mBy(uiName);
  if (nundef(dUser)) { dUser = editableUsernameUi(dLineTopLeft); dUser.id = uiName; }
  let game = !window.navigator.onLine && U.lastGame == 'gSayPic' ? 'gTouchPic' : U.lastGame;
  if (nundef(game)) game = U.avGames[0];
  setGame(game);
}
function loadUserCode(callbacks = []) {
  let fname = S.user.spec ? S.user.spec.CODE : null;
  if (nundef(fname)) {
    S.user.script = 'no code';
    if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));
  } else {
    S.path.script = '/games/' + S.settings.game + '/_rsg/' + fname + '.js';
    loadScript(S.path.script, dScript => {
      loadText(S.path.script, code => {
        console.log('script.onload DOES WORK!!!!!!!!!!!!')
        S.user.script = code;
        if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));
      });
    });
  }
}
function loadUserSpec(callbacks = []) {
  sendRoute('/get_UI_spec/' + GAME, d1 => {
    try {
      S.user.spec = JSON.parse(d1);
      sendRoute('/spec/' + GAME, d2 => {
        S.user.specText = d2;
        if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));
      });
    } catch {
      S.user.spec = null;
      S.user.specText = 'null';
      if (!isEmpty(callbacks)) callbacks[0](arrFromIndex(callbacks, 1));
    }
  });
}
function loadWalker(dParent) { loadExerciser(dParent, 3, 2); }
async function loadYamlDict(url) { return await route_path_yaml_dict(url); }
function loadYML(path, callback) {
  res = undefined;
  $.get(path)
    .done(function (data) {
      var yml = jsyaml.load(data);
      var jsonString = JSON.stringify(data);
      var json = $.parseJSON(jsonString);
      callback(yml);
    });
}
function lobbyView() {
  view = 'lobby';
  hideLogin();
  showLobby();
  hideGame();
  updateLoginHeader();
  removeAllGlobalHandlers();
  addLobbyViewHandlers();
  if (isPlaying) enableResumeButton(); else disableResumeButton();
  enableCreateButton();
  enableJoinButton();
  if (!USE_SOCKETIO) hideEventList();
}
async function localOrRoute(key, url) {
  if (USE_LOCAL_STORAGE) {
    let x = localStorage.getItem(key);
    if (isdef(x)) return JSON.parse(x);
    else {
      let data = await route_path_yaml_dict(url);
      if (key != 'svgDict') localStorage.setItem(key, JSON.stringify(data));
      return data;
    }
  } else return await route_path_yaml_dict(url);
}
function localUpdate() {
  update();
}
function log_array(arr) {
  arr.map(x => console.log(x));
}
function log_object(o = {}, msg = '', props = [], indent = 0) {
  console.log(indent ? '.'.repeat(indent) : '____', msg, indent ? '' : `(caller:${getFunctionsNameThatCalledThisFunction()})`);
  let keys = get_keys(o); keys.sort();
  for (const k of keys) {
    if (isEmpty(props) || props.includes(k)) {
      if (isDict(o[k])) { log_object(o[k], k, get_keys(o[k]).join(' '), indent + 1); console.log(); }
      else if (isListOf(o[k], isLiteral)) console.log(' '.repeat(indent), k + ':', o[k].join(','));
      else console.log(' '.repeat(indent), k + ':', o[k]);
    }
  }
}
function log_objectX(o, props, msg) { console.log('___', getFunctionsNameThatCalledThisFunction(), msg); let keys = get_keys(o); keys.sort(); for (const k of props.split(' ')) { console.log('', k + ':', o[k]); } }
function logAddLine(div) { LOGDIVS.push(div); }
function logClearAll() { LOG = {}; clearElement('logDiv'); LOGDIVS = []; }
function logClientReceive(type, data) {
  MessageCounter++;
  if (VerboseSocket) console.log('#' + MessageCounter, 'receive', type, data)
}
function logClientSend(type, data) {
  MessageCounter++;
  if (VerboseSocket) console.log('#' + MessageCounter, 'send', type, data)
}
function logFormattedData(data, n, msgAfter = '') {
  let s = makeStrings(data, ['game', 'actions', 'waiting_for', 'created']);
}
function logGetDiv(plid) {
  let d = LOG[plid];
  if (!d) {
    let idParent = 'logDiv';
    let id = idParent + '_' + plid;
    d = mDiv(mBy(idParent));
    mStyle(d, { position: 'relative', left: 0, top: 0, width: 100, height: 100 }, '%');
    d.id = id;
    LOG[plid] = d;
  }
  d.style.maxHeight = getBounds('areaTable').height + 'px';
  return d;
}
function logicCheck(pic) { }
function logicFilter(allPics, exceptProps) {
  let props = { label: { vals: getDistinctVals(allPics, 'label'), friendly: '' } };
  if (G.numColors > 1) props.colorKey = { vals: getDistinctVals(allPics, 'colorKey'), friendly: 'color' };
  if (G.numRepeat > 1) props.iRepeat = { vals: getDistinctVals(allPics, 'iRepeat'), friendly: 'number' };
  if (sameList(Object.keys(props), exceptProps)) return ['no props left', 'no', [], 'unknown'];
  let lstSpoken, lstWritten, piclist = [];
  let prop = chooseRandom(arrWithout(Object.keys(props), exceptProps));
  let val = chooseRandom(props[prop].vals);
  lstSpoken = [];
  if (prop == 'label') {
    lstSpoken.push(val);
    lstWritten = [labelPrepper(val)];
    piclist = allPics.filter(x => x.label == val);
  } else if (prop == 'colorKey') {
    lstSpoken = lstSpoken.concat(['with', props[prop].friendly, ColorDict[val][G.language]]);
    lstWritten = ['with', props[prop].friendly, colorPrepper(val)];
    piclist = allPics.filter(x => x[prop] == val);
  } else if (prop == 'iRepeat') {
    let op = (G.level > 2 && G.numRepeat > 2 && val > 1 && val < G.numRepeat) ? chooseRandom(['leq', 'geq', 'eq']) : 'eq';
    let oop = OPS[op];
    lstSpoken = lstSpoken.concat(['with', props[prop].friendly, oop.sp, val]);
    lstWritten = ['with', props[prop].friendly, oop.wr, val];
    piclist = allPics.filter(x => oop.f(x[prop], val));
  }
  if (nundef(lstWritten)) lstWritten = lstSpoken;
  let s = lstSpoken.join(' ');
  let w = lstWritten.join(' ');
  if (G.language == 'D') {
    s = s.split(' ').map(x => translateToGerman(x)).join(' ');
    w = w.split(' ').map(x => translateToGerman(x)).join(' ');
  }
  return [s, w, piclist, prop];
}
function logicMulti(n) {
  let allPics = Pictures;
  let maxPics = 4;
  let [s1, w1, pics1, prop1] = logicFilter(allPics, []);
  let [s, w, pics, prop] = [s1, w1, pics1, prop1];
  let maxloop = 3; cntloop = 0; let propsUsed = [prop1];
  while (pics.length > maxPics && cntloop < maxloop) {
    cntloop += 1;
    let opp = arrMinus(allPics, pics);
    if (opp.length <= maxPics) {
      let lst = ['eliminate', 'all', 'EXCEPT'];
      if (G.language == 'D') lst = lst.map(x => DD[x]);
      let prefix = lst.join(' ');
      s = prefix + ' ' + s;
      w = prefix + ' ' + w;
      return [s, w, opp];
    }
    [s1, w1, pics1, prop1] = logicFilter(pics, propsUsed);
    if (isEmpty(pics1)) return [s, w, pics];
    else {
      pics = pics1;
      prop = prop1;
      if (prop1 == 'label') {
        s = s1 + ' ' + s;
        w = w1 + ' ' + w;
      } else if (arrLast(propsUsed) == 'label') {
        let conn = G.language == 'E' ? ' with ' : ' mit ';
        s1 = s1.substring(s1.indexOf(' '));
        w1 = w1.substring(w1.indexOf(' '));
        s = s + conn + s1; w = w + conn + w1;
      } else {
        let conn = G.language == 'E' ? ' and ' : ' und ';
        s1 = s1.substring(s1.indexOf(' '));
        w1 = w1.substring(w1.indexOf(' '));
        s = s + conn + s1; w = w + conn + w1;
      }
      propsUsed.push(prop1);
    }
  }
  let lst1 = ['click', 'all'];
  if (G.language == 'D') lst1 = lst1.map(x => DD[x]);
  let prefix = lst1.join(' ');
  s = prefix + ' ' + s;
  w = prefix + ' ' + w;
  return [s, w, pics];
}
function logicReset() { }
function login(username) {
  sendRoute('/login/' + username, d => {
    if (d != username) {
      alert('ERROR: ' + d);
    } else {
      USERNAME = clientData.name = d;
      document.title = 'RSG: ' + USERNAME;
      loggedIn = true;
      openSocket();
      lobbyView();
    }
  });
}
function loginView() {
  view = 'login'; hideLobby(); showLogin(); hideGame(); clearChat(); clearMessages();
  removeAllGlobalHandlers();
  addLoginViewHandlers();
}
function logout() {
  closeSocket();
  sendRoute('/logout/' + clientData.name, d => {
    clientData.name = null;
    loggedIn = false;
    loginView();
  });
}
function logRenew() { for (const d of LOGDIVS) { makeSimpleString(d); } }
function logTable() { console.log('T: game', T.game, '\nplayers', T.players.map(x => x.id), '\nstate', T.uiState) }
function logUpdateVisibility(plid, players) { for (const pl in players) { if (pl != plid) hideLog(pl); else showLog(pl); } }
function logVals(title, o) {
  let s = title + ':  ';
  for (const k in o) { s += k + ':' + o[k] + ' '; }
  console.log(s);
}
function long_polling_shield_on() {
  DA.long_polling = { type: 'table_status', data: Session.cur_tid, tid: Session.cur_tid, table: Session.cur_table, polling: true, waiting_for_prop: 'status', waiting_for_val: 'started' };
  polling_shield_on('waiting for host to start game...');
  TOMain = setTimeout(() => {
    check_poll_orig();
  }, 5000);
}
function longest_array(arr) {
  let max = 0;
  for (const a of arr) {
    if (a.length > max) max = a.length;
  }
  return max;
}
function lookup(dict, keys) {
  let d = dict;
  let ilast = keys.length - 1;
  let i = 0;
  for (const k of keys) {
    if (k === undefined) break;
    let e = d[k];
    if (e === undefined || e === null) return null;
    d = d[k];
    if (i == ilast) return d;
    i += 1;
  }
  return d;
}
function lookupAddIfToList(dict, keys, val) {
  let lst = lookup(dict, keys);
  if (isList(lst) && lst.includes(val)) return;
  lookupAddToList(dict, keys, val);
}
function lookupAddToList(dict, keys, val) {
  let d = dict;
  let ilast = keys.length - 1;
  let i = 0;
  for (const k of keys) {
    if (i == ilast) {
      if (nundef(k)) {
        console.assert(false, 'lookupAddToList: last key indefined!' + keys.join(' '));
        return null;
      } else if (isList(d[k])) {
        d[k].push(val);
      } else {
        d[k] = [val];
      }
      return d[k];
    }
    if (nundef(k)) continue;
    if (d[k] === undefined) d[k] = {};
    d = d[k];
    i += 1;
  }
  return d;
}
function lookupAsIdList(dict, keys) {
  let d = dict;
  let last = keys[keys.length - 1];
  for (const k of keys) {
    if (k in d) {
      d = d[k];
      if (k == last) return dict2list(d, 'id');
    } else return null;
  }
}
function lookupDef(o, proplist, def) { return lookup(o, proplist) || def; }
function lookupRemoveFromList(dict, keys, val, deleteIfEmpty = false) {
  let d = dict;
  let ilast = keys.length - 1;
  let i = 0;
  for (const k of keys) {
    if (i == ilast) {
      if (nundef(k)) {
        alert('lookupRemoveFromList: last key indefined!' + keys.join(' '));
        return null;
      } else if (isList(d[k])) {
        removeInPlace(d[k], val);
        if (deleteIfEmpty && isEmpty(d[k])) delete d[k];
      } else {
        if (d[k] === undefined) {
          error('lookupRemoveFromList not a list ' + d[k]);
          return null;
        }
      }
      return d[k];
    }
    if (nundef(k)) continue;
    if (d[k] === undefined) {
      error('lookupRemoveFromList key not found ' + k);
      return null;
    }
    d = d[k];
    i += 1;
  }
  return d;
}
function lookupSet(dict, keys, val) {
  let d = dict;
  let ilast = keys.length - 1;
  let i = 0;
  for (const k of keys) {
    if (nundef(k)) continue;
    if (d[k] === undefined) d[k] = (i == ilast ? val : {});
    if (nundef(d[k])) d[k] = (i == ilast ? val : {});
    d = d[k];
    if (i == ilast) return d;
    i += 1;
  }
  return d;
}
function lookupSetOverride(dict, keys, val) {
  let d = dict;
  let ilast = keys.length - 1;
  let i = 0;
  for (const k of keys) {
    if (i == ilast) {
      if (nundef(k)) {
        return null;
      } else {
        d[k] = val;
      }
      return d[k];
    }
    if (nundef(k)) continue;
    if (nundef(d[k])) d[k] = {};
    d = d[k];
    i += 1;
  }
  return d;
}
function loop(n) { return range(1, n); }
function lPicto() { }
function lsys_add() {
  C.items = {};
  let root = C.root; root.gen++;
  let [stack, gen, b, sentence, x, y, angle, len, id] = [[], root.gen, root, root.sentence, root.p2.x, root.p2.y, root.angle, root.len, root.id++];
  for (let i = 0; i < gen; i++) { len *= root.dlen; sentence = generate(sentence); }
  let step = 0;
  for (var i = 0; i < sentence.length; i++) {
    var ch = sentence[i];
    if ('ABCFVWXYZ'.includes(ch)) {
      b = create_branch(b, angle, len, b.color); lookupAddToList(C.items, ['branch'], b); b.id = id++;
    } else if (ch == '+') {
      angle -= root.dangle;
    } else if (ch == '-') {
      angle += root.dangle;
    } else if (ch == '[') {
      stack.push({ x: b.p2.x, y: b.p2.y, angle: angle, b: b });
    } else if (ch == ']') {
      let o = stack.pop();
      angle = o.angle; x = o.x; y = o.y; b = o.b;
    }
  }
  C.changed = true;
  if (root.gen < root.depth) TO.iv1 = setTimeout(lsys_add, 100); else TO.iv1 = setTimeout(() => G_init('lsys'), 5000);
}
function lsys_init(offx = 0, offy = 0, options = {}) {
  let n = NATURE.lsystems.length;
  let i = DA.isystem = (DA.isystem + 1) % n;
  let system = NATURE.lsystems[i];
  let maxdepth = calc_maxdepth(12000, system.rules);
  let root = {
    axiom: system.axiom, //'F',
    sentence: system.axiom,
    rules: system.rules,
    t: 'root',
    p2: { x: CV.width / valf(system.xstart, 2), y: CV.height },
    angle: toRadian(90),
    len: valf(system.len, 100),
    age: 0,
    gen: 0,
    id: 0,
    dangle: toRadian(valf(system.angle, 25)),
    dlen: valf(system.dlen, .5),
    thickness: valf(options.thick, 1),
    dthickness: 1,
    color: rColor(70), //'seagreen',
    depth: Math.min(valf(system.depth, NATURE.depth), maxdepth),
    animated: false,
    jitter: false,
    done: true,
  };
  return root;
}
function ltest_aristo_simple() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { commission: 'no' });
}
function ltest0() {
  let centers = cCircle({ x: 300, y: 300 }, 400, 6);
  for (const c of centers) {
    let item = mPic('bee', dMain, { fz: 40, bg: 'skyblue', rounding: '50%', padding: 10 });
    mPos(iDiv(item), c.x, c.y);
  }
}
function ltest0_card() { let c = ari_get_card('QSn'); mAppend(dTable, iDiv(c)); }
function ltest1_card() { let c = cLandscape(dTable, { margin: 12 }); }
function ltest1_hex(chex = { x: 200, y: 200 }) {
  let centers = cCircle(chex, 400, 6);
  for (const c of centers) {
    let item = mPic('bee', dMain, { fz: 40, bg: 'skyblue', rounding: '50%', padding: 10 });
    mPos(iDiv(item), c.x, c.y);
  }
  let item = mPic('bee', dMain, { fz: 40, bg: 'skyblue', rounding: '50%', padding: 10 });
  mPos(iDiv(item), chex.x, chex.y);
}
function ltest10_ferro_sim() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_one_player_0_coins], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.auto_moves = [['random']];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest100_auction() {
  TESTING = true; DA.testing = true; DA.test = { mods: [set_auction_phase], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat', commission: 'no', rumors: 'no' });
}
function ltest101_commission() {
  TESTING = true; DA.testing = true; DA.test = { mods: [set_queen_phase, give_player_multiple_commission_cards], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat', commission: 'yes', rumors: 'no' });
}
function ltest102_luxurycard() {
  let dTable = mBy('dTable'); clearElement(dTable); mStyle(dTable, { hmin: 400 });
  drawcard('AHl', dTable, 300);
  drawcard('AHl', dTable, 200);
  drawcard('AHl', dTable, 100);
}
function ltest103_aristo_journey() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_luxury_cards], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat', commission: 'no', rumors: 'no' });
}
function ltest105_aristo_church() {
  TESTING = true; DA.testing = true;
  DA.test = { mods: [give_players_stalls, make_church], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest106_aristo_build() {
  TESTING = true; DA.testing = true; DA.test = { mods: [set_king_phase, give_player_only_4_cards], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest107_aristo_build() {
  TESTING = true; DA.testing = true; DA.test = { mods: [set_king_phase, give_players_schweine_variety], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })));
}
function ltest107_aristo_inspect_schwein() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_schwein, set_queen_phase], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest108_animate_coin() {
  TESTING = true; DA.testing = true; DA.test = { mods: [set_king_phase, give_players_schweine_variety], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  DA.landing = () => {
    d = UI.player_stat_items[Z.uplayer].dCoin;
    anim1(d);
  };
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest108_aristo_inspect_schwein() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_schweine_variety, set_queen_phase], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest109_ferro() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_achieve_5], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'felix', 'gul'];
  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest109_spotit() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('spotit', playernames.map(x => ({ name: x, playmode: 'human' })), {});
}
function ltest11_ferro_discard() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { console.log('discard:', Z.fen.deck_discard); }
  DA.auto_moves = [['random'], [1], [1], ['random']];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest110_auction() {
  TESTING = true; DA.testing = true; DA.test = { mods: [set_auction_phase], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat', commission: 'no', rumors: 'no' });
}
function ltest110_fritz() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('fritz', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest111_start() {
  show_home_logo();
  if (nundef(U)) { show_users(); return; } show_username();
  if (DA.TEST0) show('dTestButtons');
}
function ltest12_ferro_buy() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { console.log('discard:', Z.fen.deck_discard); }
  DA.auto_moves = [['random']];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest2() {
  let boardInfo = iHexboard(2, 3, 35);
  mFlex(dMain);
  console.log('HALLO');
  let dParent = mPanel(dMain);
  let board = mItem(null, { div: dParent }, boardInfo);
  console.log('board', board, '\nboard panel', iDiv(board));
  console.log('------------------')
  let sym = chooseRandom(getAnimals());
  let items = [];
  for (const info of boardInfo.items) {
    let d = mDiv(dParent, { bg: 'random', w: board.dx / 2, h: board.dy * 2 });
    mPos(d, info.pt.y, info.pt.x);
    let item = mItem(null, { div: d }, info);
    items.push(item);
  }
}
function ltest2_card() {
  let c = cPortrait(dTable, { margin: 12, border: 'solid 4px lime', bg: 'lightgreen' });
  let d = iDiv(c);
  console.log('d', d)
  let ds = mSym('red apple', d, { sz: 30 }, 'tl');
  ds = mSymText(2, d, { sz: 25, rounding: '50%', bg: 'gold', margin: 3 }, 'tr');
  ds = mText('APPLES', d, { family: 'Algerian', w: '100%', fz: 12, align: 'center', position: 'absolute', bottom: 0 });
  ds = mSymText(2, d, { sz: 25, rounding: '50%', bg: 'crimson', margin: 3 }, 'br');
  ds = mSym('green apple', d, { sz: 70 }, 'cc');
}
function ltest2_hextest() {
  let [centers, wCont, hCont] = hexCenters(5, 4, 100, 100);
  console.log('centers', centers);
  let dCont = mDiv(dMain, { position: 'relative', w: wCont, h: hCont });
  for (const pt of centers) {
    let d = drawShape('hex', dCont);
    mCenterAt(d, pt.x, pt.y);
  }
  return dCont;
}
function ltest2_iHexboard() {
  let boardInfo = iHexboard(2, 3, 35);
  mFlex(dMain);
  console.log('HALLO');
  let dParent = mPanel(dMain);
  let board = mItem(null, { div: dParent }, boardInfo);
  console.log('board', board, '\nboard panel', iDiv(board));
  console.log('------------------')
  let sym = chooseRandom(getAnimals());
  let items = [];
  for (const info of boardInfo.items) {
    let d = mDiv(dParent, { bg: 'random', w: board.dx / 2, h: board.dy * 2 });
    mPos(d, info.pt.y, info.pt.x);
    let item = mItem(null, { div: d }, info);
    items.push(item);
  }
}
function ltest20_spotit_adaptive() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { console.log('discard:', Z.fen); }
  DA.auto_moves = [];
  startgame('spotit', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest21_spotit() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { console.log('discard:', Z.fen); }
  DA.auto_moves = [];
  startgame('spotit', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat', adaptive: false });
}
function ltest22_ferro_action1() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest23_aristo_building_downgrade() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_buildings], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest24_ferro_jolly() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_other_jolly_group], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest25_ferro_jolly() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_each_jolly_group], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest26_ferro_endgame() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [each_hand_of_one], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest27_ferro_commands() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [['random']];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest28_ferro_jolly_complex() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_other_jolly_group], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest29_ferro_play() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_hand_group, o => o.round = 2], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [[0, 1, 2], [1]];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest3_card() {
  let di = SHERIFF.cards;
  for (const name in di) {
    let c = sheriff_card(name);
    mAppend(dTable, iDiv(c));
  }
}
function ltest3_catan() {
  let [rows, cols, wCell, hCell, wCorner, hCorner, cover] = [5, 5, 100, 100, 25, 25, true];
  let [centers, wCont, hCont] = cover ? hexCenters(rows, cols, wCell, hCell) : hex1Centers(rows, cols, wCell, hCell);
  let dBoard = mDiv(dMain, { position: 'relative', w: wCont, h: hCont, margin: 25 });
  for (const pt of centers) {
    let d = drawShape('hex', dBoard, { w: wCell - 4, h: hCell - 4 });
    mClass(d, 'field');
    mCenterAt(d, pt.x, pt.y);
  }
  let vertices = getCornerVertices(centers, wCell, hCell);
  for (const pt of vertices) {
    let d = mDiv(dBoard, { rounding: '50%', w: wCorner, h: hCorner });
    mClass(d, 'corner');
    mCenterAt(d, pt.x, pt.y);
  }
  mButton('mod colors', modifyColor, dMain);
  let items = [];
  centers.map(x => items.push({ x: x.x, y: x.y, type: 'field' }));
  vertices.map(x => items.push({ x: x.x, y: x.y, type: 'corner' }));
  let byrc = addRowsCols(items);
  console.log(byrc);
  console.log(items);
}
function ltest30_ferro_jolly_jolly() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_each_jolly_group, give_player_jolly], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest31_ferro_rollback() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [small_hands, give_other_jolly_group, o => o.round = 1], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest32_select_error() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [small_hands, give_other_jolly_group, o => o.round = 4], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => ferro_transaction_error(['44', '5', '55', '7R'], ['jolly', 'anlegen'], 'take_turn_single');
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest33_ferro_sequence() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_sequence, give_other_jolly_group, o => o.round = 1], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [[2, 3, 6, 9, 10, 11, 12]];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest34_ferro_anlegen() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_other_jolly_group, o => o.round = 1], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [[0, 14]];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest35_ferro_sequence_anlegen() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_other_jolly_sequence, o => o.round = 1], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest36_ferro_two_sequence() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_jolly_sequence, give_player_sequence, o => o.round = 1], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [[0, 1, 2, 3, 4, 5, 6, 7, 8]];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest37_ferro_4_players() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'gul', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest38_ferro_end_of_round() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_group, give_player_only_one_card], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'nasi', playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'gul', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest39_ferro_7R() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_7R], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [[0, 1, 2, 3, 4, 5, 6, 7]];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'gul', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest4_catan_1hex() {
  let [rows, cols, wCell, hCell, wCorner, hCorner, cover] = [1, 1, 400, 400, 100, 50 * Math.sqrt(3), true];
  let [centers, wCont, hCont] = cover ? hexCenters(rows, cols, wCell, hCell) : hex1Centers(rows, cols, wCell, hCell);
  let dBoard = mDiv(dMain, { position: 'relative', w: wCont, h: hCont, margin: 100 });
  for (const pt of centers) {
    let d = drawShape('hex', dBoard, { w: wCell - 4, h: hCell - 4 });
    mClass(d, 'field');
    mCenterAt(d, pt.x, pt.y);
  }
  let vertices = getCornerVertices(centers, wCell, hCell);
  for (const pt of vertices) {
    let d = drawShape('hexF', dBoard, { w: wCorner, h: hCorner });
    mClass(d, 'corner');
    mCenterAt(d, pt.x, pt.y);
  }
  setCssVar('--color1', YELLOW);
  setCSSVariable('--color2', GREEN);
  mButton('mod colors', modifyColor, dMain);
  let items = [];
  centers.map(x => items.push({ x: x.x, y: x.y, type: 'field' }));
  vertices.map(x => items.push({ x: x.x, y: x.y, type: 'corner' }));
  let byrc = addRowsCols(items);
  addIds(items);
  neighborhood(items, byrc);
  console.log('items', items);
  let di = {};
  let edges = [];
  for (const item of items) {
    if (item.type != 'field') continue;
    for (let i = 0; i < 6; i++) {
      let v1 = item.nodes[i];
      let v2 = item.nodes[(i + 1) % 6];
      if (lookup(di, [v1, v2]) || lookup(di, [v2, v1])) continue;
      let e = makeEdge(dBoard, Items[v1], Items[v2], hCorner / 2);
      edges.push(e);
      lookupSet(di, [v1, v2], e);
    }
  }
}
function ltest4_sheriff() {
  let di = SHERIFF.cards;
  for (const name in di) { let c = sheriff_card(name); mAppend(dTable, iDiv(c)); }
}
function ltest40_ferro_7R_anlegen() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_7R], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [[0, 1, 2, 3, 4, 5, 6, 7]];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'gul', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest41_frenzy_DD() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest42_aristo() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest43_fritz_discard_pile() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [make_deck_discard], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest44_ferro_7R() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_7R], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'gul', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest45_fritz() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest46_fritz_endgame() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = {
    mods: [o => { let pl = o.fen.players[o.fen.turn[0]].hand = ['4Hn', '2Cn', '3Cn']; }], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest47_aristo() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest48_aristo_church() {
  TESTING = true; DA.testing = true; DA.test = {
    mods: [give_players_stalls], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest49_aristo_church() {
  TESTING = true; DA.testing = true; DA.test = {
    mods: [give_players_stalls, make_church, set_player_tithes], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest5_catan() {
  let [rows, cols, wCell, hCell, wCorner, hCorner, cover] = [10, 10, 80, 80, 20, 10 * Math.sqrt(3), true];
  let [centers, wCont, hCont] = cover ? hexCenters(rows, cols, wCell, hCell) : hex1Centers(rows, cols, wCell, hCell);
  let dBoard = mDiv(dMain, { position: 'relative', w: wCont, h: hCont, margin: 100 });
  for (const pt of centers) {
    let d = drawShape('hex', dBoard, { w: wCell - 4, h: hCell - 4 });
    mClass(d, 'field');
    mCenterAt(d, pt.x, pt.y);
  }
  let vertices = getCornerVertices(centers, wCell, hCell);
  for (const pt of vertices) {
    let d = drawShape('hexF', dBoard, { w: wCorner, h: hCorner });
    mClass(d, 'corner');
    mCenterAt(d, pt.x, pt.y);
  }
  let items = [];
  centers.map(x => items.push({ x: x.x, y: x.y, type: 'field' }));
  vertices.map(x => items.push({ x: x.x, y: x.y, type: 'corner' }));
  let byrc = addRowsCols(items);
  addIds(items);
  neighborhood(items, byrc);
  console.log('items', items);
  let di = {};
  let edges = [];
  for (const item of items) {
    if (item.type != 'field') continue;
    for (let i = 0; i < 6; i++) {
      let v1 = item.nodes[i];
      let v2 = item.nodes[(i + 1) % 6];
      if (lookup(di, [v1, v2]) || lookup(di, [v2, v1])) continue;
      let e = makeEdge(dBoard, Items[v1], Items[v2], hCorner / 2, 10);
      edges.push(e);
      lookupSet(di, [v1, v2], e);
    }
  }
}
function ltest5_jokerhtml() {
  let html = `
    <div style="position: absolute; top: 0px; left: 0px; width: 200px; height: 300px; background: blue">
      HALLLLLLLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOOO
      <!-- joker svg orig -->
      <svg
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        class="card"
        face="0J"
        height="100%"
        preserveAspectRatio="none"
        viewBox="-120 -168 240 336"
        width="100%"
      >
        <symbol id="J11" preserveAspectRatio="none" viewBox="0 0 1300 2000">
          <path fill="#FC4" d="M1095,1000A445,445 0 0 1 650,1445 445,445 0 0 1 205,1000 445,445 0 0 1 650,555 445,445 0 0 1 1095,1000Z"></path>
        </symbol>
        <symbol id="J12" preserveAspectRatio="none" viewBox="0 0 1300 2000">
          <path
            fill="red"
            d="M317.05664,1294.416 100,1620l220,-60 40,240 140,-200 160,200 40,-200 180,180 60,-220 260,60 -236.67969,-304.3027A445,445 0 0 1 650,1445 445,445 0 0 1 317.05664,1294.416ZM831.71484,249.10742C687.94378,262.65874 542.4812,256.33752 420,520 369.08062,331.38331 278.61481,370.61289 187.77148,412.01367a75,75 0 0 1 2.52344,19.12695 75,75 0 0 1 -16.78515,47.19532c66.827,55.25537 117.57478,127.8247 155.77539,213.90429A445,445 0 0 1 650,555 445,445 0 0 1 924.33984,650.26562c42.39917,-50.4556 91.60026,-93.34711 167.51176,-106.5332a75,75 0 0 1 -0.6524,-9.14258 75,75 0 0 1 14.6172,-44.3457C1026.3517,437.47479 931.12146,446.83238 840,440 761.98041,388.07638 804.10248,338.17898 853.51758,288.4043a75,75 0 0 1 -21.80274,-39.29688z"
          ></path>
        </symbol>
        <symbol id="J13" preserveAspectRatio="none" viewBox="0 0 1300 2000">
          <path
            fill="#44F"
            d="M879.65521,937.6026a40,40 0 0 1 -40,40 40,40 0 0 1 -40,-40 40,40 0 0 1 40,-40 40,40 0 0 1 40,40zm-379.31039,0a40,40 0 0 1 -40,40 40,40 0 0 1 -40,-40 40,40 0 0 1 40,-40 40,40 0 0 1 40,40z"
          ></path>
        </symbol>
        <symbol id="J14" preserveAspectRatio="none" viewBox="0 0 1300 2000">
          <path
            stroke="#44F"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="6"
            fill="none"
            d="M317.05664,1294.416 100,1620l220,-60 40,240 140,-200 160,200 40,-200 180,180 60,-220 260,60 -236.67969,-304.3027M1241.1987,534.58948a75,75 0 0 1 -75,75 75,75 0 0 1 -75,-75 75,75 0 0 1 75,-75 75,75 0 0 1 75,75zM980.11493,234.09686a75,75 0 0 1 -75,75 75,75 0 0 1 -75,-75 75,75 0 0 1 75,-75 75,75 0 0 1 75,75zM190.29556,431.1412a75,75 0 0 1 -75,75 75,75 0 0 1 -74.999997,-75 75,75 0 0 1 74.999997,-75 75,75 0 0 1 75,75zM924.3457,650.27148c42.40088,-50.45397 91.5936,-93.35356 167.5059,-106.53906 -0.4037,-3.03138 -0.6215,-6.0846 -0.6524,-9.14258 0.03,-15.96068 5.1503,-31.4957 14.6172,-44.3457C1026.3517,437.47479 931.12146,446.83238 840,440 761.98041,388.07638 804.10248,338.17898 853.51758,288.4043 842.40414,277.84182 834.79487,264.12701 831.71484,249.10742 687.94378,262.65874 542.4812,256.33752 420,520 369.08062,331.38331 278.61481,370.61289 187.77148,412.01367c1.66108,6.24042 2.50924,12.66925 2.52344,19.12695 -0.0209,17.1896 -5.94587,33.85038 -16.7832,47.19336 66.82714,55.25532 117.5686,127.8306 155.76953,213.91016M384.88867,1140c51.89013,98.343 153.91815,159.9189 265.11133,160 111.19809,-0.076 213.23257,-61.6527 265.125,-160M1095,1000A445,445 0 0 1 650,1445 445,445 0 0 1 205,1000 445,445 0 0 1 650,555 445,445 0 0 1 1095,1000Z"
          ></path>
        </symbol>
        <rect width="239" height="335" x="-119.5" y="-167.5" rx="12" ry="12" fill="white" stroke="black"></rect>
        <text x="-110" y="-115" fill="red" stroke="red" style="font:bold 60px sans-serif">*</text>
        <use width="202.8" height="312" x="-101.4" y="-156" xlink:href="#J11"></use>
        <use width="202.8" height="312" x="-101.4" y="-156" xlink:href="#J12"></use>
        <use width="202.8" height="312" x="-101.4" y="-156" xlink:href="#J13"></use>
        <use width="202.8" height="312" x="-101.4" y="-156" xlink:href="#J14"></use>
      </svg>
    </div>
  `;
  document.body.appendChild(mCreateFrom(html));
}
function ltest50_aristo_church() {
  TESTING = true; DA.testing = true; DA.test = {
    mods: [give_players_stalls, make_church], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest51_aristo_church_downgrade() {
  TESTING = true; DA.testing = true; DA.test = {
    mods: [give_players_stalls, prep_for_church_downgrade], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest52_aristo_church_empty() {
  TESTING = true; DA.testing = true; DA.test = {
    mods: [give_players_empty_stalls], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest53_fritz_endround() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = {
    mods: [o => { let pl = o.fen.players[o.fen.turn[0]].hand = ['4Hn']; }], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest54_fritz_outoftime() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = {
    mods: [make_both_run_out_of_time], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest55_fritz_set_with_same_suits() {
  DA.magnify_on_select = true;
  TESTING = true; DA.testing = true; DA.test = {
    mods: [give_player_hand_groups], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0]
  };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('fritz', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest56_algo_overlapping_sets() {
  let cards = ['2Hn', '3Hn', '4Hn', '5Hn', '6Hn', '7Hn', '7Cn', '7Dn', '7Hn'].map(x => fritz_get_card(x));
  let res = is_overlapping_set(cards, 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['2Hn', '3Hn', '4Hn', '3Hn', '2Hn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['2Hn', '3Hn', '4Hn', '3Hn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['2Hn', '3Hn', '3Hn', '3Cn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['2Hn', '3Hn', '4Hn', '5Hn', '5Cn', '5Dn', '5Cn', '5Hn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['2Hn', '3Hn', '4Hn', '5Hn', '5Cn', '5Cn', '5Cn', '5Hn', '6Hn', '7Hn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['2Hn', '*Hn', '2Cn', '3Hn', '4Cn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['2Hn', '*Hn', '2Cn', '3Cn', '4Cn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['4Hn', '3Hn', '2Hn', '2Cn', '2Sn', '3Sn', '4Sn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['4Hn', '3Hn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
  res = is_overlapping_set(['4Hn'].map(x => fritz_get_card(x)), 1, 3, false);
  console.log('res:', res);
}
function ltest57_aristo() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest58_aristo_building_rumor_harvest() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_buildings_plus, add_rumors_to_buildings, give_player_queen], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest59_arrTakeLast() {
  let x = arrTakeLast([0, 1, 2, 3, 4, 5], 3, 2); console.log('x', x);
  x = arrTakeLast({ blue: 1, red: 2, green: 3 }, 2, 2); console.log('x', x);
  x = arrTakeLast([0, 1, 2, 3, 4, 5], 10, 0); console.log('x', x);
}
function ltest6_bluff_skin() {
  startgame('bluff', [{ name: 'valerie', playmode: 'human' }, { name: 'felix', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest60_aristo_inspect_schwein() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_schwein, add_rumors_to_buildings], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest61_aristo_inspect_correct() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_buildings, add_rumors_to_buildings], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest62_aristo_inspect_closed_schwein() {
  TESTING = true; DA.testing = true; DA.test = { mods: [x => give_players_schwein(x, false), add_rumors_to_buildings], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest63_aristo_blackmail() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_other_various_buildings, set_queen_phase], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest64_aristo_blackmailed_building() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_other_blackmailed_building], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest65_stamp() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest66_stamp_style() {
  dTable = mBy('dTable'); mClass('dTexture', 'wood'); mCenterFlex(dTable);
  let hand = ['2Hn', '3Hn', '4Hn', '5Hn', '6Hn', '7Hn', '8Hn', '9Hn', 'THn', 'JHn', 'QHn', 'KHn', 'AHn'];
  let ui = ui_type_hand(hand, dTable);
  mStamp(ui.container, 'blackmail');
}
function ltest67_aristo_blackmail_owner() {
  TESTING = true; DA.testing = true; DA.test = { mods: [set_blackmail_owner_stage], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest68_aristo_blackmail_owner_defend() {
  TESTING = true; DA.testing = true; DA.test = { mods: [set_blackmail_owner_stage_defend], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  startgame('aristo', [{ name: U.name, playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest69_ferro_is_group() {
  let j = ['*Hn', '8Dn', '8Hn'];
  let x = is_group(j);
  console.log('is_group', x);
  j = ['8Hn', '*Dn', '8Hn'];
  x = is_group(j);
  console.log('is_group', x);
}
function ltest7_ferro_skin() {
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest70_aristo_church() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_stalls, make_church], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'leo', 'gul'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest71_ferro() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'leo', 'gul'];
  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest72_ferro() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren', 'valerie', 'guest', 'nimble', 'sheeba', 'sarah'];
  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest73_ferro_deck_empty() {
  TESTING = true; DA.testing = true; DA.test = { mods: [make_deck_empty], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'gul', 'amanda', 'lauren', 'valerie', 'guest', 'nimble', 'sheeba', 'sarah'];
  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest74_ferro_scroll_history() {
  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'felix', 'gul', 'amanda', 'lauren', 'valerie', 'guest', 'nimble', 'sheeba', 'sarah'];
  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest75_ferro_multi() {
  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [['random']];
  let playernames = ['mimi', 'felix', 'gul', 'amanda', 'lauren', 'valerie', 'guest', 'nimble', 'sheeba', 'sarah'];
  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'multi' });
}
function ltest76_aristo_multi() {
  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'felix', 'gul'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'multi', rumors: 'no', commission: 'no', journey: 'no' });
}
function ltest77_aristo_church() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_stalls, make_church], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'leo', 'gul'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest78_aristo_church() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_stalls, make_church], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [['random'], ['random']];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest79_bluff_multi() {
  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'felix'];
  startgame('bluff', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'multi' });
}
function ltest8_ferro_sim() {
  TESTING = true; DA.testing = true; DA.test = { iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.auto_moves = [['last']];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest80_fritz_multi() {
  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'felix'];
  startgame('fritz', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'multi' });
}
function ltest81_spotit_multi() {
  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'felix'];
  startgame('spotit', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'multi' });
}
function ltest82_ferro() {
  TESTING = true; DA.testing = true; DA.test = { mods: [make_long_history], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'felix', 'gul'];
  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest83_ferro_multi() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'felix'];
  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'multi' });
}
function ltest83_svg() {
  dTable = mBy('dTexture'); mCenterFlex(dTable); mStyle(dTable, { hmin: 500 }); mClass(dTable, 'wood');
  mStyle(dTable, { gap: 10 });
  let card;
  card = cBlankSvg(dTable);
  console.log('card', card);
  let g = iG(card);
  let x = mgSuit('Pik');
  mgSize(x, 40);
  mgPos(card, x);
}
function ltest84_svg() {
  let dTable = mBy('dTable'); clearElement(dTable); mStyle(dTable, { hmin: 400 })
  let card = cBlank(dTable); let d = iDiv(card); let sz = card.h / 6;
  let i = 0;
  for (let suit of ['H', 'S', 'D', 'C']) {
    let s1 = mSuit(suit, d, { w: sz, h: sz });
    mPos(s1, sz * i, 0); i++;
  }
}
function ltest85_card_short_text() {
  let dTable = mBy('dTable'); clearElement(dTable); mStyle(dTable, { hmin: 400 });
  let ckey = 'KCn';
  let sz = 20;
  let d = mDiv(dTable, {}, null, `hallo das ist ein ${mCardText(ckey)}.`);
  return;
}
function ltest86_ferro() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_player_two_ferro_sets, make_long_history], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'felix', 'gul'];
  startgame('ferro', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest87_aristo() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest88_aristo_market() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_stalls], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest89_aristo_journey() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'amanda', 'lauren'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat', commission: 'no', rumors: 'no' });
}
function ltest9_ferro_sim() {
  TESTING = true; DA.testing = true; DA.test = { iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.auto_moves = [['random']];
  startgame('ferro', [{ name: U.name, playmode: 'human' }, { name: 'felix', playmode: 'human' }, { name: 'amanda', playmode: 'human' }], { mode: 'hotseat' });
}
function ltest90_bluff() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'amanda', 'lauren'];
  startgame('bluff', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest90_bluff_ueberbiete() {
  TESTING = true; DA.testing = true; DA.test = { mods: [bluff_start_bid], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'amanda', 'lauren'];
  startgame('bluff', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest91_bluff_strategy() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'lauren', 'felix'];
  let playmodes = ['human', 'bot', 'bot'];
  let strategy = ['', 'random', 'clairvoyant'];
  let i = 0; let players = playernames.map(x => ({ name: x, strategy: strategy[i], playmode: playmodes[i++] }));
  let options = { mode: 'hotseat' };
  startgame('bluff', players, options);
}
function ltest92_bluff_bots() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = ['mimi', 'lauren', 'felix'];
  let playmodes = ['bot', 'bot', 'bot'];
  let strategy = ['random', 'perfect', 'clairvoyant'];
  let i = 0; let players = playernames.map(x => ({ name: x, strategy: strategy[i], playmode: playmodes[i++] }));
  let options = { mode: 'hotseat' };
  startgame('bluff', players, options);
}
function ltest93_bluff() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'amanda', 'lauren'];
  startgame('bluff', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest94_aristo_journey() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_hand_journey], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat', commission: 'no', rumors: 'no' });
}
function ltest95_aristo_rumor_action() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_buildings_plus, set_queen_phase, give_player_king], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'amanda', 'lauren'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat' });
}
function ltest96_aristo_visit() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_schwein, set_queen_phase, give_player_queen], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix', 'amanda', 'lauren'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat', commission: 'no', rumors: 'no' });
}
function ltest97_find_sequences() {
  let x = follows_in_rank('ACn', '2Cn', 'A23456789TJQK');
  console.log('follows', x);
  x = find_sequences(['ACn', '2Cn', '3Hn', '5Hn', '7Hn', '7Sn', '7Cn', '7Dn'], 2, 'A23456789TJQK');
  console.log('follows', x);
}
function ltest98_weired_blatt_aendern() {
  TESTING = true; DA.testing = true; DA.test = { mods: [give_players_hand_A2], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('aristo', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat', commission: 'no', rumors: 'no' });
}
function ltest99_fritz() {
  TESTING = true; DA.testing = true; DA.test = { mods: [], iter: 0, maxiter: 200, running: false, step: true, suiteRunning: false, number: 0, list: [0] };
  DA.test.end = () => { };
  DA.auto_moves = [];
  let playernames = [U.name, 'felix'];
  startgame('fritz', playernames.map(x => ({ name: x, playmode: 'human' })), { mode: 'hotseat', commission: 'no', rumors: 'no' });
}
function luminance(r, g, b) {
  var a = [r, g, b].map(function (v) {
    v /= 255;
    return v <= 0.03928
      ? v / 12.92
      : Math.pow((v + 0.055) / 1.055, 2.4);
  });
  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
}
function luxury_card_deco(card) {
  let d = iDiv(card); mStyle(d, { position: 'relative' });
  let d1 = mDiv(d, { fg: 'dimgray', fz: 11, family: 'tangerine', position: 'absolute', left: 0, top: 0, 'writing-mode': 'vertical-rl', transform: 'scale(-1)', top: '35%' }, null, 'Luxury');
  let html = `<img height=${18} src="../base/assets/icons/deco0.svg" style="transform:scaleX(-1);">`;
  d1 = mDiv(d, { position: 'absolute', bottom: -2, left: 3, opacity: .25 }, null, html);
}

//#endregion

//#region M
function maButton(caption, handler, dParent, styles) {
  let a = mLink("javascript:void(0)", dParent, {}, null, caption, 'a');
  a.onclick = handler;
  if (isdef(styles)) mStyle(a, styles);
  return a;
}
function mAddBehavior(ui, beh, params) {
  switch (beh) {
    case 'magnifyOnHover': addMagnifyOnHover(ui, ...params); break;
    case 'selectOnClick': addSelectOnClick(ui, ...params); break;
  }
}
function mAddContent(d, content, styles, opt) { return mAddContentAndMeasure(d, content, styles, opt, false, false); }
function mAddContentAndMeasure(d, content, styles, opts = {}, wNeeded = true, hNeeded = true) {
  let keepInLine = valf(opts.keepInLine, false);
  let replace = valf(opts.replace, false);
  let newline = valf(opts.newline, false);
  let d1 = content;
  if (isDOM(content)) mAppend(d, content);
  else if (isDict(content)) {
    d1 = iDiv(content);
    if (isDOM(d1)) {
      mAppend(d, d1);
    } else if (nundef(d1)) {
      d1 = mDiv(d, { bg: 'random' });
      mNode(content, d1);
    } else {
      doms = recFindDOMs(content);
      d1 = mDiv(d, { bg: 'random' });
      for (const dom of doms) { mAppend(d1, dom); }
    }
  } else if (isList(content)) {
    d1 = mDiv(d, { bg: 'random' });
    content = content.join(',');
    d1.innerHTML = content;
  } else if (isString(content) && content[0] === '<') {
    d1 = createElementFromHtml(cont);
    mAppend(d, d1);
  } else {
    d1 = mText(content, d);
  }
  if (replace) clearElement(d);
  if (keepInLine) styles['white-space'] = 'nowrap';
  if (newline) styles.display = 'block';
  if (isdef(styles)) mStyle(d1, styles);
  if (wNeeded && hNeeded) setSizeNeeded(d);
  else if (wNeeded) setWNeeded(d);
  else if (hNeeded) setHNeeded(d);
  return d1;
}
function mAddContentAndMeasureH(d, content, styles, opt) { return mAddContentAndMeasure(d, content, styles, opt, false, true); }
function mAddContentAndMeasureW(d, content, styles, opt) { return mAddContentAndMeasure(d, content, styles, opt, true, false); }
function magnifyFront(id) {
  let card = UIS[id];
  let hand = UIS[card.hand];
  if (hand.scale != 1) {
    card.setScale(1);
  }
  _bringCardToFront(id)
}
function maHideLabel(id, info) {
  let d = mBy(id);
  let dPic = d.children[0];
  let dText = d.children[1];
  dText.style.display = 'none';
  let dPicText = dPic.children[0];
  let family = dPicText.style.fontFamily;
  let i = (family == info.family) ? 0 : EMOFONTLIST.indexOf(family) + 1;
  let wInfo = info.w[i];
  let hInfo = info.h[i];
  let b = getBounds(d);
  let styles = { w: b.width, h: b.height };
  let [ptop, pbottom] = [firstNumber(d.style.paddingTop), firstNumber(d.style.paddingBottom)];
  let p = (isdef(ptop) && isdef(pbottom)) ? Math.min(ptop, pbottom) :
    isdef(ptop) ? ptop : isdef(pbottom) ? pbottom / 2 : 0;
  let [padw, padh] = [p, p];
  let [wtotal, htotal] = [styles.w, styles.h];
  let [wpic, hpic] = [wtotal - 2 * padw, htotal - 2 * padh];
  let fw = wpic / wInfo;
  let fh = hpic / hInfo;
  f = Math.min(fw, fh);
  fzreal = f * info.fz;
  wreal = f * wInfo;
  hreal = f * hInfo;
  padw += isdef(styles.w) ? (wpic - wreal) / 2 : 0;
  padh += isdef(styles.h) ? (hpic - hreal) / 2 : 0;
  if (!(padw >= 0 && padh >= 0)) { console.log(info); }
  let innerStyles = {};
  innerStyles.fz = fzreal;
  innerStyles.weight = 900;
  info.fzOrig = dPicText.style.fontSize;
  info.textColorOrig = dPicText.style.color;
  dPicText.style.fontSize = fzreal + 'px';
  info.wOrig = dPic.style.width;
  info.hOrig = dPic.style.height;
  innerStyles.w = wreal;
  innerStyles.h = hreal + 2 * padh;
  mStyleX(dPic, innerStyles);
  let outerStyles = {};
  info.paddingOrig = d.style.padding;
  info.paddingTopOrig = d.style.paddingTop;
  info.paddingBottomOrig = d.style.paddingBottom;
  outerStyles.padding = '' + 2 * padh + 'px ' + padw + 'px' + '0' + 'px ' + padw + 'px';
  mStyleX(d, outerStyles);
}
function main_menu_off() { close_sidebar(); open_mini_user_info(); }
function main_menu_on() { open_sidebar(); close_mini_user_info(); }
function mainCOOL() {
  const imgFile = document.getElementById("imgfile");
  const image = new Image();
  const file = imgFile.files[0];
  const fileReader = new FileReader();
  fileReader.onload = () => {
    image.onload = () => {
      const canvas = document.getElementById("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      const ctx = canvas.getContext("2d");
      ctx.drawImage(image, 0, 0);
      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
      const rgbArray = buildRgb(imageData.data);
      const quantColors = quantization(rgbArray, 0);
      buildPalette(quantColors);
    };
    image.src = fileReader.result;
  };
  fileReader.readAsDataURL(file);
}
function mainVisualExists(oid) {
  return firstCond(oid2ids[oid], x => x[0] == 'm');
}
function make_both_run_out_of_time(o) {
  let [fen, uplayer] = [o.fen, o.fen.turn[0]];
  for (const plname in fen.players) {
    let pl = fen.players[plname];
    pl.time_left = 100;
  }
}
function make_card_selectable(item) { let d = iDiv(item.o); mClass(d, 'selectable'); if (Z.game != 'aristo') { spread_hand(item.path, .3); } mClass(d.parentNode, 'selectable_parent'); }
function make_card_selected(item) {
  let color = isdef(Z.func.get_selection_color) ? Z.func.get_selection_color(item) : 'red';
  set_card_border(item, 13, color);
  if (DA.magnify_on_select) mClass(iDiv(item.o), 'mag');
}
function make_card_unselectable(item) { let d = iDiv(item.o); d.onclick = null; mClassRemove(d, 'selectable'); mClassRemove(d.parentNode, 'selectable_parent'); spread_hand(item.path); }
function make_card_unselected(item) { set_card_border(item); if (DA.magnify_on_select) mClassRemove(iDiv(item.o), 'mag'); }
function make_church(o) {
  let [fen, uplayer] = [o.fen, o.fen.turn[0]];
  fen.stage = 1004;
  fen.market = ['JHn', 'QSn'];
}
function make_container_selectable(item) { let d = iDiv(item); mClass(d, 'selectable'); mClass(d, 'selectable_parent'); }
function make_container_selected(item) { let d = iDiv(item); mClass(d, 'selected_parent'); }
function make_container_unselectable(item) { let d = iDiv(item); d.onclick = null; mClassRemove(d, 'selectable'); mClassRemove(d, 'selectable_parent'); }
function make_container_unselected(item) { let d = iDiv(item); mClassRemove(d, 'selected_parent'); }
function make_csv_for_rankings() {
  let csv = 'players,';
  let games = get_values(DB.games);
  let gamenames = games.map(x => x.friendly).join(',');
  csv += gamenames;
  for (const name in DB.users) {
    let [dbuser, values, usergames] = [DB.users[name], [], []];
    for (const gname in dbuser.games) {
      let rec = dbuser.games[gname];
      if (isdef(rec.total) && rec.total > 0) usergames.push(gname);
    }
    if (isEmpty(usergames)) continue;
    for (const gname in DB.games) {
      let info = lookupSet(DB.users, [name, 'games', gname], {});
      if (nundef(info.total)) values.push('0/0'); else values.push(`${info.wins}/${info.total}`);
    }
    if (!isEmpty(values)) csv += `\n${name},` + values.join(',');
  }
  return csv;
}
function make_deck_discard(o) {
  let fen = o.fen;
  let uplayer = o.uplayer;
  fen.deck_discard = ['2Sn', '3Sn', '4Sn', '5Sn', '6Sn', '7Sn', '8Sn', '9Sn', 'TSn'];
  fen.journeys = [['2Dn', '3Dn', '4Dn'], ['5Sn', '6Sn', '7Sn']];
}
function make_deck_empty(o) {
  let fen = o.fen;
  fen.deck_discard = fen.deck;
  output_arr_short(fen.deck);
  fen.deck = [];
}
function make_deck_selectable(item) { }
function make_deck_selected(item) { }
function make_deck_unselectable(item) { }
function make_deck_unselected(item) { }
function make_favicon(key) {
  let url = valf(Emicons[key], Emicons.maus);
  var link = document.querySelector("link[rel*='icon']") || document.createElement('link');
  link.type = 'image/png';
  link.rel = 'shortcut icon';
  link.href = url; 
  document.getElementsByTagName('head')[0].appendChild(link);
}
function make_goal_set(deck, prob_different) {
  let [fen1, fen2, fen3] = [deck[0], '', ''];
  let n = fen1.length;
  let different = randomNumber(0, n - 1);
  for (let i = 0; i < n; i++) {
    let l1 = fen1[i];
    let same = i == different ? false : coin(prob_different);
    let inc = coin() ? 1 : -1;
    let [l2, l3] = same ? [l1, l1] : ['' + (3 + Number(l1) + inc * 1) % 3, '' + (3 + Number(l1) + inc * 2) % 3];
    fen2 += l2; fen3 += l3;
  }
  return [fen1, fen2, fen3];
}
function make_hand_selectable(item) { }
function make_hand_selected(item) { }
function make_hand_unselectable(item) { }
function make_hand_unselected(item) { }
function make_long_history(o) {
  let [fen, uplayer] = [o.fen, o.fen.turn[0]];
  fen.history = [];
  for (let i = 0; i < 100; i++) {
    let lines = [`${rChoose(get_keys(fen.players))} discards ${rCard()}`];
    let title = 'discard';
    fen.history.push({ title: title, lines: lines });
  }
}
function make_market_selectable(item) { }
function make_market_selected(item) { }
function make_market_unselectable(item) { }
function make_market_unselected(item) { }
function make_payments_challenge_eval(inp) {
  let val = inp.value;
  let solution = { amount: DA.bill.nums.balance, index: DA.bill.acc.index };
  let answer = { amount: Number(val.substring(1).trim()), index: Number(inp.id.substring(3)) };
  let correct = solution.amount.toFixed(2) == answer.amount.toFixed(2) && solution.index == answer.index;
  show_eval_message(correct, null, correct ? onclick_home : null);
}
function make_players(playernames) {
  let o = Session.cur_players = {};
  for (const plname of playernames) {
    o[plname] = { name: plname, color: getColorDictColor(DB.users[plname].color), imgPath: `../base/assets/images/${plname}.jpg`, score: 0 };
  }
  Session.cur_me = o[Session.cur_user];
  Session.cur_others = get_values(o).filter(x => x.name != Session.cur_user);
}
function make_set_deck(n_or_attr_list) {
  let all_attrs = gSet_attributes();
  let keys = get_keys(all_attrs);
  let n = isNumber(n_or_attr_list) ? n_or_attr_list : n_or_attr_list.length;
  let attrs = isNumber(n_or_attr_list) ? arrTake(keys, n) : n_or_attr_list;
  let list = ['0', '1', '2'];
  let i = 1;
  while (i < n) {
    let [l1, l2, l3] = [jsCopy(list), jsCopy(list), jsCopy(list)];
    l1 = l1.map(x => '0' + x); l2 = l2.map(x => '1' + x); l3 = l3.map(x => '2' + x);
    list = l1.concat(l2).concat(l3);
    i++;
  }
  return list;
}
function make_string_selectable(item) { let d = mBy(item.id); mClass(d, 'selectable_button'); }
function make_string_selected(item) { let d = mBy(item.id); item.bg = mGetStyle(d, 'bg'); item.fg = mGetStyle(d, 'fg'); mStyle(d, { bg: 'yellow', fg: 'black' }); }
function make_string_unselectable(item) { let d = mBy(item.id); d.onclick = null; mClassRemove(d, 'selectable_button'); }
function make_string_unselected(item) { let d = mBy(item.id); mStyle(d, { bg: item.bg, fg: item.fg }); }
function make_superdi() {
  let filenames = ['basemin', 'legacy', 'apiserver', 'apisimphp', 'gamehelpers', 'onclick', 'select', 'sim', 'cards'];
  let list = getFiles(filenames, 'C:\\xampp\\htdocs\\aroot\\SAFE\\bundle');
  let superdi = {};
  for (const file of list) {
    let text = fromFile(file.path);
    if (text.includes('= require(') || text.includes(' ol.')) { continue; } //console.log('skip file', file.path); 
    parseCodefile1(text, file.fname, true, file, superdi);
  }
  return superdi;
}
function makeArea(areaName, idParent) {
  let mobj = new MOBJ();
  let id = 'm_A_' + areaName;
  mobj.id = id;
  let domel = document.createElement('div');
  domel.style.position = 'absolute';
  mobj.elem = domel;
  mobj.elem.id = id;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(mobj.elem);
  mobj.cat = DOMCATS[mobj.domType];
  mobj.idParent = idParent;
  let parent = UIS[idParent];
  parent.children.push(id);
  mobj.attach();
  UIS[id] = mobj;
  linkObjects(id, areaName);
  listKey(IdOwner, id[2], id);
  return mobj;
}
function makeAreaNameDomel(areaName) { return `<div style='width:100%'>${areaName}</div>`; }
function makeAreas(dParent, layout) {
  let dGrid = mDiv(dParent, { gap: 10, bg: 'white', w: '90%', padding: 10, display: 'inline-grid', rounding: 10 }, 'dGrid');
  if (nundef(layout)) layout = ['T', 'H A'];
  let x = createGridLayout(dGrid, layout);
  let areaStyles = { bg: 'green', rounding: 6 };
  let contentStyles = { lowerRounding: 6 };
  let messageStyles = { fg: 'yellow' };
  let titleStyles = { bg: 'dimgray', family: 'AlgerianRegular', upperRounding: 6 };
  let areas = {
    T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles, titleOnTop: true },
    H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles, titleOnTop: false },
    A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles, titleOnTop: false },
  };
  let items = [];
  for (const k in areas) {
    let item = areas[k];
    item.areaStyles['grid-area'] = k;
    let dCell = mTitledMessageDiv(item.title, dGrid, item.id, item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles, item.titleOnTop)
    iRegister(item, item.id);
    if (item.titleOnTop) iAdd(item, { div: dCell, dTitle: dCell.children[0], dMessage: dCell.children[1], dContent: dCell.children[2] });
    else iAdd(item, { div: dCell, dTitle: dCell.children[2], dMessage: dCell.children[0], dContent: dCell.children[1] });
    mCenterCenterFlex(diContent(item));
    mStyleX(diContent(item), { gap: 10 });
    items.push(item);
  }
  return items;
}
function makeAreasKrieg(dParent) {
  let dGrid = mDiv(dParent, { gap: 10, bg: 'white', w: '90%', padding: 10, display: 'inline-grid', rounding: 10 }, 'dGrid');
  let layout = ['T', 'H A'];
  let x = createGridLayout(dGrid, layout);
  let areaStyles = { bg: 'green', rounding: 6 };
  let contentStyles = { lowerRounding: 6 };
  let messageStyles = { fg: 'yellow' };
  let titleStyles = { bg: 'dimgray', family: 'AlgerianRegular', upperRounding: 6 };
  let areas = {
    T: { title: 'table', id: 'dTrick', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles, titleOnTop: true },
    H: { title: 'YOU', id: 'dHuman', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles, titleOnTop: false },
    A: { title: 'opponent', id: 'dAI', showTitle: true, messageArea: true, areaStyles: areaStyles, contentStyles: contentStyles, messageStyles: messageStyles, titleStyles: titleStyles, titleOnTop: false },
  };
  let items = [];
  for (const k in areas) {
    let item = areas[k];
    item.areaStyles['grid-area'] = k;
    let dCell = mTitledMessageDiv(item.title, dGrid, item.id, item.areaStyles, item.contentStyles, item.titleStyles, item.messageStyles, item.titleOnTop)
    iRegister(item, item.id);
    if (item.titleOnTop) iAdd(item, { div: dCell, dTitle: dCell.children[0], dMessage: dCell.children[1], dContent: dCell.children[2] });
    else iAdd(item, { div: dCell, dTitle: dCell.children[2], dMessage: dCell.children[0], dContent: dCell.children[1] });
    mCenterCenterFlex(diContent(item));
    mStyleX(diContent(item), { gap: 10 });
    items.push(item);
  }
  return items;
}
function makeAux(s, oid, areaName, directParent) {
  let id = 'x_l_' + getUID() + '@' + oid;
  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
  let mobj = new MOBJ();
  mobj.id = id;
  let domel = document.createElement('div');
  domel.classList.add('hallo');
  domel.innerHTML = s;
  mobj.elem = domel;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  let idParent = areaName;
  mobj.idParent = idParent;
  let parent = UIS[idParent];
  parent.children.push(id);
  mobj.isa.aux = true;
  linkObjects(id, oid);
  listKey(IdOwner, id[2], id);
  UIS[id] = mobj;
  if (isdef(directParent)) { mobj.isAttached = true; directParent.appendChild(mobj.elem) } else mobj.attach();
  return mobj;
}
function makeBestMove(color) {
  if (color === 'b') {
    var move = getBestMove(G.game, color, globalSum)[0];
    return move;
  } else {
    var move = getBestMove(G.game, color, -globalSum)[0];
  }
  globalSum = evaluateBoard(move, globalSum, 'b');
  G.game.move(move);
  G.board.position(G.game.fen());
}
function makeBoard(idBoard, o, areaName) {
  let id = 'm_s_' + idBoard;
  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
  let mobj = new MOBJ();
  mobj.id = id;
  let domel = addSvgg(UIS[areaName].elem, id, { originInCenter: true });
  mobj.elem = domel;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  let idParent = areaName;
  mobj.idParent = areaName;
  let parent = UIS[idParent];
  parent.children.push(id);
  mobj.o = o;
  mobj.isa.board = true;
  linkObjects(id, idBoard);
  listKey(IdOwner, id[2], id);
  UIS[id] = mobj;
  mobj.isAttached = true;
  return mobj;
}
function makeBoardElement(oid, o, idBoard, elType) {
  let id = 'm_t_' + oid;
  if (isdef(UIS[id])) {
    error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
    return;
  }
  let mobj = new MOBJ();
  mobj.id = id;
  let domel = document.createElementNS('http://www.w3.org/2000/svg', 'g');
  mobj.elem = domel;
  mobj.elem.id = id;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  let idParent = idBoard;
  mobj.idParent = idParent;
  let parent = UIS[idParent];
  parent.children.push(id);
  mobj.o = o;
  mobj.isa[elType] = true;
  linkObjects(id, oid);
  listKey(IdOwner, id[2], id);
  UIS[id] = mobj;
  return mobj;
}
function makeCadreTable(powers) {
  let cadreTypes = ['Infantry', 'Fortress', 'Tank', 'AirForce', 'Fleet', 'Carrier', 'Submarine'];
  let table = makeTable('AvailableCadres', cadreTypes, powers);
  addTableTo(table);
}
function makeCanvas(d) {
  let canvas = mCreate('canvas');
  mAppend(d, canvas);
  canvas.id = 'sheet';
  return canvas;
}
function makeCard(oid, o, areaName) {
  let idArea = getIdArea(areaName);
  let id = 'm_t_' + oid;
  if (isdef(UIS[id])) {
    error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
    return;
  }
  let mobj = new MOBJ();
  mobj.id = id;
  let cardName = isdef(o.name) ? o.name : 'King';
  let domel;
  if (GAME == 'catan') domel = _makeCardDivCatan(oid, o);
  else if (GAME == 'aristocracy') domel = _makeCardDivAristocracy(oid, o);
  else domel = _makeCardDivDefault(oid, o);
  domel.id = id;
  mobj.elem = domel;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  let parent = UIS[idArea];
  let idParent = parent.id;
  mobj.idParent = idParent;
  parent.children.push(id);
  mobj.o = o;
  mobj.isa.card = true;
  linkObjects(id, oid);
  listKey(IdOwner, id[2], id);
  UIS[id] = mobj;
  return mobj;
}
function makeCard_dep(oid, o, areaName) {
  let idArea = getIdArea(areaName);
  let id = 'm_t_' + oid;
  if (isdef(UIS[id])) {
    error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
    return;
  }
  let mk = new MK();
  mk.id = id;
  let cardName = isdef(o.name) ? o.name : 'King';
  let domel;
  if (GAME == 'catan') domel = _makeCardDivCatan(oid, o);
  else if (GAME == 'aristocracy') domel = _makeCardDivAristocracy(oid, o);
  else domel = _makeCardDivDefault(oid, o);
  domel.id = id;
  mk.elem = domel;
  mk.parts.elem = mk.elem;
  mk.domType = getTypeOf(domel);
  mk.cat = DOMCATS[mk.domType];
  let parent = UIS[idArea];
  let idParent = parent.id;
  mk.loc = idParent;
  parent.children.push(id);
  mk.o = o;
  mk.isa.card = true;
  linkObjects(id, oid);
  listKey(IdOwner, id[2], id);
  UIS[id] = mk;
  return mk;
}
function makeCard123(oid, o) {
  let mk = new MK();
  let id = getIdForOid(oid);
  mk.id = id;
  let domel = makeCardDomel(o);
  evAddCounter += 1;
  domel.style.position = 'absolute';
  mk.elem = domel;
  mk.elem.id = id;
  mk.parts.elem = mk.elem;
  mk.domType = getTypeOf(mk.elem);
  mk.cat = DOMCATS[mk.domType];
  mk.o = o;
  mk.oid = oid;
  mk.isa.card = true;
  UIS[id] = mk;
  linkObjects(id, oid);
  listKey(IdOwner, id[2], id);
  return mk;
}
function makeCardDomel(oCard) {
  if (lookup(SPEC, ['typeMappings', 'card'])) {
    for (const k in SPEC.typeMappings.card) {
      oCard[k] = oCard[SPEC.typeMappings.card[k]];
    }
  }
  let el = cardFace(oCard);
  return el;
}
function makeCategories() {
  let keys = Categories = {
    animal: getGSGElements(g => g == 'Animals & Nature', s => startsWith(s, 'animal')),
    clothing: getGSGElements(g => g == 'Objects', s => s == 'clothing'),
    emotion: getGSGElements(g => g == 'Smileys & Emotion', s => startsWith(s, 'face') && !['face-costume', 'face-hat'].includes(s)),
    food: getGSGElements(g => g == 'Food & Drink', s => startsWith(s, 'food')),
    'game/toy': (['sparkler', 'firecracker', 'artist palette', 'balloon', 'confetti ball'].concat(ByGroupSubgroup['Activities']['game'])).sort(),
    gesture: getGSGElements(g => g == 'People & Body', s => startsWith(s, 'hand')),
    job: ByGroupSubgroup['People & Body']['job'],
    mammal: ByGroupSubgroup['Animals & Nature']['animal-mammal'],
    music: getGSGElements(g => g == 'Objects', s => startsWith(s, 'musi')),
    object: getGSGElements(g => g == 'Objects', s => true),
    place: getGSGElements(g => g == 'Travel & Places', s => startsWith(s, 'place')),
    plant: getGSGElements(g => g == 'Animals & Nature' || g == 'Food & Drink', s => startsWith(s, 'plant') || s == 'food-vegetable' || s == 'food-fruit'),
    sport: ByGroupSubgroup['Activities']['sport'],
    tool: getGSGElements(g => g == 'Objects', s => s == 'tool'),
    transport: getGSGElements(g => g == 'Travel & Places', s => startsWith(s, 'transport')),
  };
  let incompatible = DA.incompatibleCats = {
    animal: ['mammal'],
    clothing: ['object'],
    emotion: ['gesture'],
    food: ['plant', 'animal'],
    'game/toy': ['object', 'music'],
    gesture: ['emotion'],
    job: ['sport'],
    mammal: ['animal'],
    music: ['object', 'game/toy'],
    object: ['music', 'clothing', 'game/toy', 'tool'],
    place: [],
    plant: ['food'],
    sport: ['job'],
    tool: ['object'],
    transport: [],
  }
}
function makeCells(d, rows, cols, gap = '2px') {
  d.style.setProperty('--grid-rows', rows);
  d.style.setProperty('--grid-cols', cols);
  d.style.setProperty('--grid-gap', gap);
  let cells = [];
  for (rows = 0; rows < rows; rows++) {
    cells[rows] = [];
    for (cols = 0; cols < cols; cols++) {
      let cell = document.createElement("div");
      cell.innerText = (rows + ',' + cols);
      d.appendChild(cell).className = "grid-item";
      cells[rows].push(cell);
    }
  }
  return cells;
}
function makeCollectionArea(key, parentAreaId) {
  let parentArea = UIS[parentAreaId];
  let handAreaName = key;
  if (isdef(parentArea)) {
    let mobj = makeArea(handAreaName, parentAreaId);
    mobj.setBg(randomColor());
    mobj.title(stringAfter(key, '.'));
    let bTitle = getBounds(mobj.parts.title);
    mobj.parts['title'].fontSize = '12px';
    mobj.elem.style.minWidth = bTitle.width + 'px'; //'90px';
    mobj.elem.style.minHeight = '146px';
    mobj.body('hand');
    let div = mobj.parts['hand'];
    div.style.position = 'relative';
    div.style.left = '10px';
    div.style.top = '10px';
    div.style.width = 'auto';
    div.style.height = 'auto';
    mobj.collectionKey = key;
    mobj.adjustSize = true;
    let divCollection = mobj.elem;
    divCollection.style.position = null;
    return mobj;
  }
}
function makeColumns(dParent, divList, wFit, hFit, yStart) {
  let h = maxFit(divList, 'offsetHeight', 0, hFit);
  let wmax = maxFit(divList, 'offsetWidth', 0, wFit);
  let w = sumProp(divList, 'offsetWidth');
  if (w > wFit) {
    h = Math.min(h + 20, hFit);
    dParent.style.overflow = 'auto';
  }
  let hPlus = hFit - h;
  let margin = '5';
  let wIdeal = (wFit / divList.length) - (divList.length + 1) * margin;
  if (wIdeal >= wmax) wmax = wIdeal;
  let wPlus = wFit - (wmax * divList.length);
  let dy = hPlus / 3;
  let dx = wPlus / (divList.length + 1);
  let x = dx;
  let y = dy + yStart;
  for (const div of divList) {
    div.style = `height:${h}px;width:${wmax}px;background-color:dimgrey;position:absolute;left:${x}px;top:${y}px`;
    x += dx + wmax;
  }
}
function makeCorners(pool, board, serverBoard) {
  let serverFieldIds = _setToList(serverBoard.fields).map(x => x._obj);
  board.structInfo.corners = _setToList(serverBoard.corners).map(x => x._obj);
  let dhelp = {};
  for (const fid of serverFieldIds) {
    let sfield = pool[fid];
    let ffield = getVisual(fid);
    if (nundef(sfield.corners)) continue;
    let iPoly = 0;
    let cornerIds = sfield.corners.map(x => x._obj);
    for (const cid of cornerIds) {
      if (!cid) {
        iPoly += 1;
        continue;
      } else if (isdef(dhelp[cid])) {
        iPoly += 1;
        continue;
      } else {
        let corner = makeBoardElement(cid, pool[cid], board.id, 'corner');
        let poly = ffield.memInfo.poly[iPoly];
        corner.memInfo = { shape: 'circle', memType: 'corner', x: poly.x, y: poly.y, w: 1, h: 1 };
        dhelp[cid] = corner;
        iPoly += 1;
      }
    }
  }
}
function makeDeck({ kind, N, nJokers, fPrep, fDraw, bDraw, x, y, w, h } = {}) {
  if (nundef(kind)) kind = 'deck52';
  let params = {
    kind: kind,
    fPrepFace: isdef(fPrep) ? fPrep : window[kind + 'Prep'],
    fUpdateFace: isdef(fDraw) ? fDraw : window[kind + 'Update'],
    fPrepBack: isdef(bDraw) ? bDraw : window[kind + 'Back'],
    fUpdateBack: isdef(bDraw) ? bDraw : window[kind + 'Back'],
    size: { w: 78, h: 110 },
    orientation: 'portrait',
    repeat: 1,
    numJokers: isdef(nJokers) ? nJokers : 0,
  };
  let defStyle = { deck52: { n: 52 }, catan: { n: 20 }, free: {}, deckEmpty: { n: 0 } };
  N = isdef(N) ? N : defStyle[params.kind].n;
  params.N = N;
  params.NTotal = N + (isdef(nJokers) ? nJokers : 0);
  return DeckB.fDeck(params);
}
function makeDeckArea(areaName, numDecks) {
  let parentOfDeckArea = UIS[areaName];
  let deckHeight = 140;
  let deckHeightNeeded = numDecks * deckHeight;
  if (deckHeightNeeded > parentOfDeckArea.h) setAreaHeight(areaName, deckHeightNeeded);
  else deckHeightNeeded = parentOfDeckArea.h;
  let deckAreaName = 'deckArea';
  let mobj = makeArea(deckAreaName, areaName);
  mobj.setBg('seagreen');
  mobj.setBounds(0, 0, 200, deckHeightNeeded, 'px');
  return mobj;
}
function makeDeckMS(oid, o, deck1, areaName, x, y) {
  let id = 'm_t_' + oid;
  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
  let mobj = new MOBJ();
  mobj.id = id;
  mobj.o = o;
  mobj.deck = deck1;
  mobj.oid = oid;
  mobj.elem = document.createElement('div');
  mobj.elem.id = id;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(mobj.elem);
  mobj.cat = DOMCATS[mobj.domType];
  mobj.idParent = areaName;
  UIS[areaName].children.push(id);
  mobj.isa.deck = true;
  listKey(IdOwner, id[2], id);
  linkObjects(id, oid);
  UIS[id] = mobj;
  return mobj;
}
function makeDeckSuccess(oid, o, areaName) {
  let id = 'm_t_' + oid;
  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
  let mobj = new MOBJ();
  mobj.id = id;
  mobj.oid = oid;
  mobj.o = o;
  mobj.isa.deck = true;
  mobj.elem = document.createElement('div');
  mobj.elem.id = id;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(mobj.elem);
  mobj.cat = DOMCATS[mobj.domType];
  mobj.idParent = areaName;
  UIS[areaName].children.push(id);
  listKey(IdOwner, id[2], id);
  linkObjects(id, oid);
  UIS[id] = mobj;
  mobj.elem.classList.add('deckBase');
  let num = o.deck_count == 0 ? 0 : o.deck_count / 2 + 1;
  let topmost = makeStapel(mobj.elem, num);
  mobj.topmost = topmost;
  if (topmost != mobj.elem) mobj.parts['topmost'] = topmost;
  return mobj;
}
function makeDefaultAction(boat, areaName) {
  let mobj = new MOBJ();
  let id = 'd_a_' + boat.iTuple;
  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return null; }
  mobj.id = id;
  let domel = document.createElement('div');
  domel.textContent = boat.text;
  domel.style.cursor = 'pointer';
  mobj.elem = domel;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  let idParent = areaName;
  mobj.idParent = idParent;
  let parent = UIS[idParent];
  parent.children.push(id);
  mobj.o = boat;
  mobj.isa.boat = true;
  for (const tupleEl of boat.tuple) {
    if (tupleEl.type == 'obj' && isdef(tupleEl.ID)) {
      let oid = tupleEl.ID;
      boat.oids.push(oid);
      linkObjects(id, oid);
    }
  }
  listKey(IdOwner, id[2], id);
  UIS[id] = mobj;
  mobj.attach();
  return mobj;
}
function makeDefaultObject(oid, o, areaName) { return _makeDefault(makeIdDefaultObject(oid), oid, o, areaName, oid + ': ' + o.obj_type); }
function makeDefaultPlayer(oid, o, areaName) { return _makeDefault(makeIdDefaultPlayer(oid), oid, o, areaName, 'player: ' + oid + '(' + getPlayerColorString(oid) + ', ' + getUser(oid) + ')'); }
function makeDefaultPool(fromData) {
  if (nundef(fromData) || isEmpty(fromData.table) && isEmpty(fromData.players)) return {};
  if (nundef(fromData.table)) fromData.table = {};
  let data = jsCopy(fromData.table);
  for (const k in fromData.players) {
    data[k] = jsCopy(fromData.players[k]);
  }
  return data;
}
async function makeDictionaries() {
  let ddd = await route_path_text('../assets/speech/ddAlles.txt');
  console.log(ddd)
  let lines = ddd.split('\n');
  console.log(lines);
  let newLines = [];
  let deDict = {};
  let deNouns = {};
  let edDict = {};
  let edNouns = {};
  for (let i = 0; i < lines.length; i++) {
    let l = lines[i];
    if (startsWith(l, 'German')) console.log(l);
    else if (startsWith(l, 'A ')) console.log(l);
    else {
      newLines.push(l);
      let d = stringBefore(l, ' :');
      let gen = null;
      if (d.includes('{')) {
        let parts = d.split('{');
        d = parts[0].trim();
        gen = stringBefore(parts[1], '}').trim();
        lookupSet(deDict, [d, 'gen'], gen);
        lookupSet(deNouns, [d, 'gen'], gen);
      }
      let elist = stringAfter(l, ': ').split(',').map(x => x.trim());
      for (const e of elist) {
        lookupAddIfToList(deDict, [d, 'e'], e);
        lookupAddIfToList(edDict, [e, 'd'], d);
        if (isdef(gen)) {
          lookupAddIfToList(edNouns, [e, 'd'], d);
          lookupAddIfToList(deNouns, [d, 'e'], e);
        }
      }
    }
  }
  console.log(deDict);
  console.log(edDict);
  downloadTextFile(newLines.join('\n'), 'ddText', ext = 'txt')
  downloadAsYaml(deDict, 'deDict');
  downloadAsYaml(edDict, 'edDict');
  downloadAsYaml(deNouns, 'deNouns');
  downloadAsYaml(edNouns, 'edNouns');
}
function makeDomArea(domel) {
  if (nundef(domel.id)) return;
  let mobj = new MOBJ();
  let id = domel.id;
  mobj.id = id;
  mobj.elem = domel;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  let idParent = domel.parentNode.id;
  mobj.idParent = idParent;
  let parent = UIS[idParent];
  parent.children.push(id);
  mobj.isAttached = true;
  UIS[id] = mobj;
  listKey(IdOwner, id[2], id);
  return mobj;
}
function makeDragDrop(objElems, dropzoneElems) {
  let dropzones = document.querySelectorAll('.dropzone');
  let droppable = new Draggable.Droppable(
    dropzones,
    {
      draggable: '.draggable',
      dropzone: '.dropzone',
      mirror: { constrainDimensions: true }
    }
  );
  return;
  let droppableOrigin;
  droppable.on('drag:start', (ev) => {
    console.log('drag', droppableOrigin, ev)
  });
  droppable.on('droppable:dropped', (ev) => {
    console.log('drop!', droppableOrigin, ev);
  });
  return droppable;
}
function makeDraggable(elem, dropPos) {
  elem.draggable = true;
  elem.ondragstart = drag;
  if (isdef(dropPos)) elem.dropPosition = dropPos;
}
function makeDraggableInner(elem) {
  elem.setAttribute('draggable', true);
  elem.ondragstart = ev => {
    if (!canAct()) return;
    let id = evToClosestId(ev);
    let source = mBy(id);
    if (isLetterElement(source)) {
      ev.dataTransfer.setData("Text", source.innerHTML);
    }
  }
  mClass(elem, 'draggable');
}
function makeDraggableX(elem, dropPos) {
  elem.draggable = true;
  elem.ondragstart = dragX;
  if (isdef(dropPos)) elem.dropPosition = dropPos;
}
function makeDraggableX2(elem, dropPos) {
  elem.draggable = true;
  elem.ondragstart = dragX2;
  if (isdef(dropPos)) elem.dropPosition = dropPos;
}
function makeDrawingArea(id, idArea, addToUIS = false) {
  if (addToUIS && isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
  let mobj = new MOBJ();
  mobj.id = id;
  let idParent = idArea;
  mobj.idParent = idArea;
  let parent = UIS[idParent];
  if (parent) parent.children.push(id);
  let parentElem = parent ? parent.elem : document.getElementById(idArea);
  let domel = addSvgg(parentElem, id, { originInCenter: true });
  mobj.w = parent.w;
  mobj.h = parent.h;
  mobj.isAttached = true;
  mobj.elem = domel;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  mobj.isa.drawingArea = true;
  if (addToUIS) {
    listKey(IdOwner, id[2], id);
    UIS[id] = mobj;
  }
  return mobj;
}
function makeDrawingElement(id, idDrawingArea, addToUIS = false) {
  if (isdef(UIS[id])) {
    error('CANNOT create ' + id + ' TWICE!!!!!!!!!');
    return;
  }
  let mobj = new MOBJ();
  mobj.id = id;
  let domel = document.createElementNS('http://www.w3.org/2000/svg', 'g');
  mobj.elem = domel;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  let idParent = idDrawingArea;
  mobj.idParent = idParent;
  let parent = UIS[idParent];
  if (parent) parent.children.push(id);
  if (addToUIS) {
    listKey(IdOwner, id[2], id);
    UIS[id] = mobj;
  }
  return mobj;
}
function makeDroppable(target) {
  target.ondragover = allowDrop;
  target.ondrop = drop;
}
function makeDroppableX(target) {
  target.ondragover = allowDrop;
  target.ondrop = dropX;
}
function makeDroppableX2(target) {
  target.ondragover = allowDrop;
  target.ondrop = dropX2;
}
function makeEdge(dParent, v1, v2, dFromEdge, ew = 20) {
  let switched = false;
  if (v1.x == v2.x) {
    if (v1.y > v2.y) { let h = v2; v2 = v1; v1 = h; switched = true; }
    let w = ew / 2;
    let sp = `polygon(${v1.x - w + ew}px ${v1.y + dFromEdge + ew}px, ${v1.x + w + ew}px ${v1.y + dFromEdge + ew}px, ${v2.x + w + ew}px ${v2.y - dFromEdge + ew}px, ${v2.x - w + ew}px ${v2.y - dFromEdge + ew}px)`;
    let de = mDiv(dParent, { position: 'absolute', left: -ew, top: -ew, w: '120%', h: '120%' });
    mClass(de, 'edge');
    mStyle(de, { 'clip-path': sp });
    return mItem(null, { div: de }, { type: 'edge' }, true);
  }
  if (v1.x > v2.x) { let h = v2; v2 = v1; v1 = h; switched = true; }
  let dx = v2.x - v1.x;
  let dy = v2.y - v1.y;
  let m = dy / dx;
  let [x1, y1, x2, y2] = [v1.x, v1.y, v2.x, v2.y];
  let alpha = Math.atan(m);
  let xa = x1 + dFromEdge * Math.cos(alpha);
  let ya = y1 + dFromEdge * Math.sin(alpha);
  let xe = x2 - dFromEdge * Math.cos(alpha);
  let ye = y2 - dFromEdge * Math.sin(alpha);
  let m2 = -1 / m;
  let beta = Math.atan(m2);
  let w = ew / 2;
  let x1t = xa + w * Math.cos(beta);
  let y1t = ya + w * Math.sin(beta);
  let x1b = xa - w * Math.cos(beta);
  let y1b = ya - w * Math.sin(beta);
  let x2t = xe + w * Math.cos(beta);
  let y2t = ye + w * Math.sin(beta);
  let x2b = xe - w * Math.cos(beta);
  let y2b = ye - w * Math.sin(beta);
  let de = mDiv(dParent, { position: 'absolute', left: 0, top: 0, w: '120%', h: '120%' });
  mStyle(de, { 'clip-path': `polygon(${x1t}px ${y1t}px, ${x2t}px ${y2t}px, ${x2b}px ${y2b}px, ${x1b}px ${y1b}px)` });
  mClass(de, 'edge');
  return mItem(null, { div: de }, { type: 'edge' }, true);
}
function makeEdge1(dParent, v1, v2) {
  let poly = get2Points(v1, v2);
  let minx = 100000, miny = 100000, maxx = -100000, maxy = -100000;
  for (const k in poly) {
    let pt = poly[k];
    minx = Math.min(pt.x, minx);
    miny = Math.min(pt.y, miny);
    maxx = Math.max(pt.x, maxx);
    maxy = Math.max(pt.y, maxy);
  }
  let bb = { x: minx, y: miny, w: maxx - minx, h: maxy - miny };
  let de = mDiv(dParent, { position: 'absolute', left: minx, top: miny, w: bb.w, h: bb.h, bg: 'red' });
  let [x1, y1, x2, y2] = [v1.x, v1.y, v2.x, v2.y];
  let stroke = 10;
  let sp = '';
  if (x1 == x2) {
    if (y1 < y2) sp = 'polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)';
    else sp = 'polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)';
  } else if (y1 == y2) {
    sp = 'polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)';
  } else if (x1 < x2 && y1 < y2) {
    sp = `polygon(0% 0%, 0% 20%, 100% 100%, 100% 80%)`;
  } else if (x1 < x2 && y1 > y2) {
    sp = `polygon(0% 100%, 0% 80%, 100% 0%, 100% 20%)`;
  } else if (x1 > x2 && y1 < y2) {
    sp = `polygon(0% 100%, 0% 80%, 100% 0%, 100% 20%)`;
  } else {
    sp = `polygon(0% 0%, 0% 20%, 100% 100%, 100% 80%)`;
  }
  mStyle(de, { 'clip-path': sp });
  let e = mItem(null, { div: de }, { type: 'edge', nodes: [v1.id, v2.id] });
  return e;
}
function makeEdges(pool, board, serverBoard) {
  let serverFieldIds = _setToList(serverBoard.fields).map(x => x._obj);
  board.structInfo.edges = _setToList(serverBoard.edges).map(x => x._obj);
  dhelp = {};
  for (const fid of serverFieldIds) {
    let sfield = pool[fid];
    if (nundef(sfield.edges)) continue;
    let edgeIds = sfield.edges.map(x => x._obj);
    for (const eid of edgeIds) {
      if (!eid) {
        continue;
      } else if (isdef(dhelp[eid])) {
        continue;
      } else {
        let edge = makeBoardElement(eid, pool[eid], board.id, 'edge');
        let el = G.table[eid];
        let n1 = getVisual(el.corners[0]._obj);
        let n2 = getVisual(el.corners[1]._obj);
        edge.memInfo = {
          shape: 'line',
          memType: 'edge',
          x1: n1.memInfo.x,
          y1: n1.memInfo.y,
          x2: n2.memInfo.x,
          y2: n2.memInfo.y,
          x: (n1.x + n2.x) / 2,
          y: (n1.y + n2.y) / 2,
          thickness: 1,
          w: 1,
          h: 1,
        };
        dhelp[eid] = edge;
      }
    }
  }
}
function makeEdgeW(dParent, v1, v2, dFromEdge, ew = 20) {
  mCircle(dParent, v1.x, v1.y, 5, 'red');
  let switched = false;
  if (v1.x == v2.x) {
    if (v1.y > v2.y) { let h = v2; v2 = v1; v1 = h; switched = true; }
    let w = ew / 2;
    let sp = `polygon(${v1.x - w + ew}px ${v1.y + dFromEdge + ew}px, ${v1.x + w + ew}px ${v1.y + dFromEdge + ew}px, ${v2.x + w + ew}px ${v2.y - dFromEdge + ew}px, ${v2.x - w + ew}px ${v2.y - dFromEdge + ew}px)`;
    console.log('sp', sp)
    let de = mDiv(dParent, { position: 'absolute', left: -ew, top: -ew, w: '120%', h: '120%', bg: 'random' });
    mStyle(de, { 'clip-path': sp });
    return de;
  }
  if (v1.x > v2.x) { let h = v2; v2 = v1; v1 = h; switched = true; }
  let dx = v2.x - v1.x;
  let dy = v2.y - v1.y;
  let m = dy / dx;
  let [x1, y1, x2, y2] = [v1.x, v1.y, v2.x, v2.y];
  let alpha = Math.atan(m);
  let xa = x1 + dFromEdge * Math.cos(alpha);
  let ya = y1 + dFromEdge * Math.sin(alpha);
  mCircle(dParent, xa, ya, 10, 'orange');
  let xe = x2 - dFromEdge * Math.cos(alpha);
  let ye = y2 - dFromEdge * Math.sin(alpha);
  mCircle(dParent, xe, ye, 10, 'orange');
  let m2 = -1 / m;
  let beta = Math.atan(m2);
  let w = ew / 2;
  let x1t = xa + w * Math.cos(beta);
  let y1t = ya + w * Math.sin(beta);
  mCircle(dParent, x1t, y1t, 5, 'green');
  let x1b = xa - w * Math.cos(beta);
  let y1b = ya - w * Math.sin(beta);
  mCircle(dParent, x1b, y1b, 5, 'green');
  let x2t = xe + w * Math.cos(beta);
  let y2t = ye + w * Math.sin(beta);
  mCircle(dParent, x2t, y2t, 5, 'violet');
  let x2b = xe - w * Math.cos(beta);
  let y2b = ye - w * Math.sin(beta);
  mCircle(dParent, x2b, y2b, 5, 'violet');
  let de = mDiv(dParent, { position: 'absolute', left: 0, top: 0, w: '120%', h: '120%', bg: 'random' });
  mStyle(de, { 'clip-path': `polygon(${x1t}px ${y1t}px, ${x2t}px ${y2t}px, ${x2b}px ${y2b}px, ${x1b}px ${y1b}px)` });
  return de;
}
function makeElemDraggableTo(elem, target, key) {
  if (isdef(key)) {
    if (nundef(target.ddKeys)) target.ddKeys = [];
    if (nundef(elem.ddKeys)) elem.ddKeys = [];
    addIf(target.ddKeys, key);
    addIf(elem.ddKeys, key);
  }
  if (nundef(elem.id)) elem.id = getUID();
  elem.draggable = true;
  elem.ondragstart = isdef(key) ? dragKey : drag;
  target.ondragover = isdef(key) ? allowDropKey : allowDrop;
  target.ondrop = isdef(key) ? dropKey : drop;
}
function makeElemY(type, idParent, gName, level, { row = undefined, col = undefined, w = 0, h = 0, x = 0, y = 0, x1 = 0, y1 = 0, x2 = 0, y2 = 0, gap = 0, ipal = 0, bg = 0, fg = 0, shape = 'rect', border = 0, thickness = 0 }) {
  let uid = getUID();
  let elem = { id: uid, type: type, parent: idParent, gName: gName, level: level };
  if (row !== undefined) {
    elem.row = row;
  }
  if (col !== undefined) {
    elem.col = col;
  }
  register(elem, uid, type, x, y);
  if (level > 1) {
    elem.w = w - gap;
    elem.h = h - gap;
    elem.x = x;
    elem.y = y;
  }
  if (level > 2) {
    elem.ms = new MS(uid, gName);
  }
  if (level > 3) {
    let ms = elem.ms;
    if (ipal) {
      ms.setbg(getpal(ipal));
    }
    if (bg) ms.setbg(bg);
    if (fg) ms.setfg(fg);
    switch (shape) {
      case 'circle':
        ms.ellipse({ w: elem.w, h: elem.h });
        break;
      case 'hex':
        ms.hex({ w: elem.w, h: elem.h });
        break;
      case 'line':
        let fill = ipal ? getpal(ipal) : fg ? fg : border;
        ms.line({ x1: x1, y1: y1, x2: x2, y2: y2, fill: fill, thickness: thickness });
        break;
      default:
        ms.rect({ w: elem.w, h: elem.h });
        break;
    }
  }
  if (level > 4) {
    let ms = elem.ms;
    switch (shape) {
      case 'circle':
        ms.ellipse({ className: 'overlay', w: elem.w, h: elem.h });
        break;
      case 'hex':
        ms.hex({ className: 'overlay', w: elem.w, h: elem.h });
        break;
      case 'line':
        let fill = ipal ? getpal(ipal) : fg ? fg : border;
        ms.line({ className: 'overlay', x1: x1, y1: y1, x2: x2, y2: y2, thickness: thickness });
        break;
      default:
        ms.rect({ className: 'overlay', w: elem.w, h: elem.h });
        break;
    }
  }
  if (elem.ms && type != 'edge') {
    elem.ms.setPos(x, y);
  }
  return elem;
}
function makeEmoSetIndex() {
  if (isdef(symBySet)) return;
  symBySet = {}; symKeysBySet = {}; symListBySet = {};
  for (const k in emoSets) {
    let set = emoSets[k];
    let name = set.name;
    let f = set.f;
    symBySet[name] = [];
    for (const k1 in symbolDict) {
      let info = symbolDict[k1];
      if (info.type == 'icon') continue;
      let o = info;
      if (nundef(o.group) || nundef(o.subgroups)) continue;
      let passt = f(o);
      if (!passt) continue;
      if (passt) {
        lookupSet(symBySet, [name, k1], info);
        lookupAddToList(symKeysBySet, [name], k1);
        lookupAddToList(symListBySet, [name], info);
      }
    }
  }
  makeGroupSub();
}
function makeExpSequence() {
  G.operand = randomNumber(G.minNum, G.maxNum);
  G.op = chooseRandom(G.ops);
  G.step = G.op == 'minus' ? randomNumber(0, G.operand) : randomNumber(G.minFactor, G.maxFactor);
  G.oop = OPS[G.op];
  G.result = G.oop.f(G.operand, G.step);
  G.seq = [G.operand, G.oop.wr, G.step, '=', G.result];
  return G.seq;
}
function makeFields(pool, board, serverBoard, shape) {
  let serverFieldIds = _setToList(serverBoard.fields).map(x => x._obj);
  board.structInfo.fields = serverFieldIds;
  for (const fid of serverFieldIds) {
    let sField = pool[fid];
    let r = sField.row;
    let c = sField.col;
    let field = makeBoardElement(fid, sField, board.id, 'field');
    field.memInfo = shape == 'hex' ? getHexFieldInfo(board.structInfo, r, c) : getQuadFieldInfo(board.structInfo, r, c);
  }
  board.structInfo.vertices = correctPolys(board.structInfo.fields.map(x => getVisual(x).memInfo.poly), 1);
}
function makeGreyTransparent(ctx, color = 'white', sz = 200) {
  var image = ctx.getImageData(0, 0, sz, sz);
  var imageData = image.data, length = imageData.length;
  let im = imageData;
  const x = 245;
  for (var i = 0; i < length; i += 4) {
    if (im[i] > x && im[i + 1] > x && im[i + 2] > x) {
      im[i + 3] = 0;
    }
  }
  image.data = imageData;
  ctx.putImageData(image, 0, 0);
}
function makeGrid9(d, centerW = '3fr', centerH = '3fr', gap = '2px') {
  d.style.setProperty('--grid_center_w', makeUnitString(centerW, 'fr'));
  d.style.setProperty('--grid_center_h', makeUnitString(centerH, 'fr'));
  d.style.setProperty('--grid-gap', gap);
  d.classList.add('grid9');
  let cells = [];
  for (rows1 = 0; rows1 < 3; rows1++) {
    cells[rows1] = [];
    for (cols1 = 0; cols1 < 3; cols1++) {
      let cell = document.createElement("div");
      cell.innerText = (rows1 + ',' + cols1);
      d.appendChild(cell).className = "grid-item";
      cells[rows1].push(cell);
    }
  }
  return cells;
}
function makeGroupSub() {
  symKeysByGroupSub = {};
  for (const k of symKeysBySet['all']) {
    let info = symbolDict[k];
    if (isEmpty(info.E) || isEmpty(info.D)) lookupAddIfToList(symKeysByGroupSub, ['NA', info.group + '-' + info.subgroups], k);
    else lookupAddIfToList(symKeysByGroupSub, [info.group, info.subgroups], k);
  }
}
function makeHand(key, idParent, color, padding = 4, margin = 4) {
  let mk = makeArea(key, idParent);
  if (SPEC.showCardHandBackground) mk.setBg(isdef(color) ? color : randomColor());
  let dParent = mById(idParent);
  let bParent = getBounds(dParent);
  let areaTitleHeight = SPEC.showAreaNames ? getTextSize('happy', dParent).h : 0;
  let clearBoth = bParent.height > bParent.width;
  let zusatz = 2 * (padding + margin) + areaTitleHeight;
  let hCard = PREFERRED_CARD_HEIGHT ? PREFERRED_CARD_HEIGHT
    : bParent.height ? bParent.height - zusatz
      : 100;
  if (hCard < MIN_CARD_HEIGHT) hCard = MIN_CARD_HEIGHT;
  if (hCard > MAX_CARD_HEIGHT) hCard = MAX_CARD_HEIGHT;
  hParent = hCard + zusatz;
  let hTotal = hParent - 2 * (padding + margin) - areaTitleHeight;
  h = hTotal - 2 * padding;
  if (h > MAX_CARD_HEIGHT) {
    h = MAX_CARD_HEIGHT;
    hTotal = h + 2 * padding;
  }
  let bTitle = { height: 0 };
  if (SPEC.showCardHandName) {
    mk.title(stringAfter(key, '.'));
    bTitle = getBounds(mk.parts.title);
    mk.parts.title.style.setProperty('width', bTitle.width + 'px');
  }
  let hBody = h - bTitle.height;
  mk.body();
  let dBody = mk.parts.body;
  dBody.style.setProperty('height', hBody + 'px');
  let d = mk.elem;
  d.style.setProperty('padding', padding + 'px');
  d.style.setProperty('border-radius', padding + 'px');
  d.style.setProperty('margin', margin + 'px');
  d.style.setProperty('position', 'relative');
  d.style.setProperty('float', 'left');
  if (clearBoth) d.style.setProperty('clear', 'both');
  mk.hCard = hCard;
  mk.collectionKey = key;
  mk.adjustSize = true;
  return mk;
}
function makeHigherOrderGroups() {
  for (const honame in higherOrderEmoSetNames) {
    for (const name of (higherOrderEmoSetNames[honame])) {
      for (const k in symBySet[name]) {
        let info = symbolDict[k];
        lookupSet(symBySet, [honame, k], info);
        lookupAddToList(symKeysBySet, [honame], k);
        lookupAddToList(symListBySet, [honame], info);
      }
    }
  }
  let s = '';
  for (const k in symKeysBySet) {
    s += k + ':' + symKeysBySet[k].length + ', ';
  }
  ensureSymByType();
}
function makeHugeBoardInBoard(num, rowsPerBoard) {
  let r = makeTreeNNEach(num, num);
  let params = { contentwalign: 'center', contenthalign: 'center', orientation: 'w', rows: rowsPerBoard, cols: num / rowsPerBoard };
  let uidRoot = r.tree.uid;
  let root = r.rNodes[uidRoot];
  root.params = params;
  for (const ch of root.children) {
    let n = r.rNodes[ch];
    n.params = params;
  }
  return r;
}
function makeHugeBoardInBoardOld(num, rowsPerBoard) {
  let r = makeTreeNNEach(num, num);
  return r;
  let params = { contentwalign: 'center', contenthalign: 'center', orientation: 'w', rows: rowsPerBoard, cols: num / rowsPerBoard };
  let uidRoot = r.tree.uid;
  let root = r.rNodes[uidRoot];
  root.params = params;
  for (const ch of root.children) {
    let n = r.rNodes[ch];
    n.params = params;
  }
  return r;
}
function makeIdDefaultObject(oid) { return 'd_t_' + oid; }
function makeIdDefaultPlayer(oid) { return 'd_p_' + oid; }
function makeIdInfobox(oid) { return 'i_i_' + oid; }
function makeInfobox(ev, elem, scale) {
  let t = ev.target; while (isdef(t) && t != elem) t = t.parentNode; if (nundef(t)) { console.log('WRONG click', ev.target); return; }
  let di = DA.infobox; if (isdef(di)) {
    let inner = di.innerHTML;
    di.remove();
    DA.infobox = null;
    if (inner == elem.innerHTML) return;
  }
  let r = getRectInt(elem, dTable);
  let d = DA.infobox = mDiv(dTable, {
    bg: 'black', rounding: 10, fz: 24, position: 'absolute',
    w: r.w, h: r.h, left: r.l, top: r.t, transform: `scale(${scale})`
  }, 'dInfoBox', elem.innerHTML);
  d.innerHTML += '<div style="font-size:6px">click to close</div><br>';
  d.onclick = () => { d.remove(); DA.infobox = null; }
}
function makeInnoNumberDiv(n, fz) {
  return `<span style='background:white;color:black;padding:2px 10px;border-radius:50%'>${n}</span>`;
}
function makeInnoSymbolDiv(info, bg, fz = 20) {
  return `<div style='text-align:center;display:inline;background-color:${bg};width:40px;padding:2px ${fz / 2}px;
  font-size:${fz}px;font-family:${info.family}'>${info.text}</div>`;
}
function makeItemDiv(item, options) {
  if (isdef(options.outerStyles) && isdef(options.ifs)) copyKeys(item, options.outerStyles, {}, Object.keys(options.ifs));
  let dOuter = mCreate('div', options.outerStyles, item.id);
  if (isdef(item.textShadowColor)) {
    let sShade = '0 0 0 ' + item.textShadowColor;
    if (options.showPic) {
      options.picStyles['text-shadow'] = sShade;
      options.picStyles.fg = colorFrom('black', options.contrast); //'#00000080' '#00000030' 
    } else {
      options.labelStyles['text-shadow'] = sShade;
      options.labelStyles.fg = colorFrom('black', options.contrast); //'#00000080' '#00000030' 
    }
  }
  let dLabel;
  if (options.showLabels && options.labelTop == true) { dLabel = mText(item.label, dOuter, options.labelStyles); }
  let dPic;
  if (options.showPic) {
    dPic = mDiv(dOuter, { family: item.info.family });
    dPic.innerHTML = item.info.text;
    if (isdef(options.picStyles)) mStyleX(dPic, options.picStyles);
  }
  if (options.showLabels && options.labelBottom == true) { dLabel = mText(item.label, dOuter, options.labelStyles); }
  if (isdef(options.handler)) dOuter.onclick = options.handler;
  iAdd(item, { options: options, div: dOuter, dLabel: dLabel, dPic: dPic });
  if (isdef(item.textShadowColor)) { applyColorkey(item, options); }
  return dOuter;
}
function makeItemDivs(items, options) { for (let i = 0; i < items.length; i++) { makeItemDiv(items[i], options) } }
function makeItemHintable(item) {
  let d = iDiv(item);
  let dov = mDiv100(d);
  let rect = getRect(d);
  mStyleX(dov, { position: 'absolute', w: rect.w, h: rect.h })
  iAdd(item, { overlay: dov });
  dov.style.userSelect = 'none';
}
function makeKeyValueTable(data) {
  let cols = 2;
  let rows = data.length;
  let res = `<table>`;
  for (const k in data) {
    res += `<tr><th>${k}</th><td>${data[k]}</td></tr>`;
  }
  res += `</table>`;
  let res1 = (elem = new DOMParser().parseFromString(res, 'text/html').body.firstChild);
  return res1;
}
function makeLineSegment(mobj, o, msLoc, sz, color) {
  let [x1, y1, x2, y2] = msLoc.getEndPointsOfLineSegmentOfLength(sz);
  mobj.line({ cap: 'round', thickness: msLoc.thickness, x1: x1, y1: y1, x2: x2, y2: y2 }).setBg(color).attach();
  mobj.line({ className: 'overlay', cap: 'round', thickness: msLoc.thickness, x1: x1, y1: y1, x2: x2, y2: y2 });
}
function makeLogArea(plid) {
  let mobj = new MOBJ();
  let idParent = 'a_d_log';
  let id = idParent + '_' + plid;
  mobj.id = id;
  let el = document.createElement('div');
  el.style.position = 'absolute';
  el.style.left = '0px';
  el.style.top = '0px';
  el.style.width = '100%';
  el.style.height = '100%';
  el.style.overflowY = 'auto';
  mobj.elem = el;
  mobj.elem.id = id;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(mobj.elem);
  mobj.cat = DOMCATS[mobj.domType];
  mobj.idParent = idParent;
  let parent = UIS[idParent];
  parent.children.push(id);
  mobj.attach();
  UIS[id] = mobj;
  listKey(IdOwner, id[2], id);
  return mobj;
}
function makeMainBoardElementVisual(oid, o) {
  let id = 'm_t_' + oid;
  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
  let mobj = new MOBJ();
  mobj.id = id;
  let domel = document.createElementNS('http://www.w3.org/2000/svg', 'g');
  mobj.elem = domel;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  let locElem = getVisual(o.loc._obj);
  let parent = UIS[locElem.idParent];
  let idParent = parent.id;
  mobj.idParent = idParent;
  parent.children.push(id);
  mobj.o = o;
  mobj.isa.movable = 'loc';
  linkObjects(id, oid);
  listKey(IdOwner, id[2], id);
  UIS[id] = mobj;
  let color = S.settings.useColorHintForObjects ? getColorHint(o) : randomColor();
  if (nundef(color)) color = 'black';
  let boardElemType = getBoardElementStandardType(locElem);
  let sizeInfo = S.settings.pieceSizeRelativeToLoc[boardElemType];
  let baseValue = locElem[sizeInfo[0]];
  let percent = Number(sizeInfo[1]);
  let sz = (baseValue * percent) / 100;
  if (boardElemType != 'edge') {
    makePictoPiece(mobj, o, sz, color)
    mobj.setPos(locElem.x, locElem.y);
  } else {
    makeLineSegment(mobj, o, locElem, sz, color);
  }
  mobj.attach();
  return mobj;
}
function makeMainPlayer(oid, o, areaName) {
  let id = 'm_p_' + oid;
  if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
  let mobj = new MOBJ();
  mobj.id = id;
  let title = 'player: ' + oid + '(' + getPlayerColorString(oid) + ', ' + getUser(oid) + ')';
  let domel = document.createElement('div');
  domel.style.cursor = 'default';
  mobj.elem = domel;
  mobj.parts.elem = mobj.elem;
  mobj.domType = getTypeOf(domel);
  mobj.cat = DOMCATS[mobj.domType];
  let idParent = areaName;
  mobj.idParent = idParent;
  let parent = UIS[idParent];
  parent.children.push(id);
  let sTitle = title;
  let color = G.playersAugmented[oid].color;
  mobj.title(sTitle, 'title', color);
  mobj.o = o;
  mobj.isa.player = true;
  linkObjects(id, oid);
  listKey(IdOwner, id[2], id);
  UIS[id] = mobj;
  mobj.attach();
  return mobj;
}
function makeMainVisual(oid, o) {
  if (!('loc' in o) || !isBoardElement(o.loc._obj)) return null;
  let id = 'm_t_' + oid;
  if (isdef(UIS[id])) { console.log('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
  let ms = new RSG();
  ms.id = id;
  let domel = document.createElementNS('http://www.w3.org/2000/svg', 'g');
  ms.elem = domel;
  ms.parts.elem = ms.elem;
  ms.domType = getTypeOf(domel);
  ms.cat = DOMCATS[ms.domType];
  let locElem = getVisual(o.loc._obj);
  let parent = UIS[locElem.idParent];
  let idParent = parent.id;
  ms.idParent = idParent;
  parent.children.push(id);
  ms.o = o;
  ms.isa.movable = 'loc';
  linkObjects(id, oid);
  listKey(IdOwner, id[2], id);
  UIS[id] = ms;
  let color = getColorHint(o);
  let [w, h] = locElem.isa.corner ? [locElem.w / 2, locElem.h / 2]
    : locElem.isa.field ? [locElem.w / 4, locElem.h / 4] : [locElem.thickness + 2, locElem.thickness + 2];
  let [x, y] = [locElem.x, locElem.y];
  ms.ellipse({ w: w, h: h, fill: color }); ms.setPos(x, y); ms.attach();
  return ms;
}
function MakeMove(move) {
  var from = FROMSQ(move);
  var to = TOSQ(move);
  var side = brd_side;
  brd_history[brd_hisPly].posKey = brd_posKey;
  if ((move & MFLAGEP) != 0) {
    if (side == COLOURS.WHITE) {
      ClearPiece(to - 10);
    } else {
      ClearPiece(to + 10);
    }
  } else if ((move & MFLAGCA) != 0) {
    switch (to) {
      case SQUARES.C1:
        MovePiece(SQUARES.A1, SQUARES.D1);
        break;
      case SQUARES.C8:
        MovePiece(SQUARES.A8, SQUARES.D8);
        break;
      case SQUARES.G1:
        MovePiece(SQUARES.H1, SQUARES.F1);
        break;
      case SQUARES.G8:
        MovePiece(SQUARES.H8, SQUARES.F8);
        break;
      default: break;
    }
  }
  if (brd_enPas != SQUARES.NO_SQ) HASH_EP();
  HASH_CA();
  brd_history[brd_hisPly].move = move;
  brd_history[brd_hisPly].fiftyMove = brd_fiftyMove;
  brd_history[brd_hisPly].enPas = brd_enPas;
  brd_history[brd_hisPly].castlePerm = brd_castlePerm;
  brd_castlePerm &= CastlePerm[from];
  brd_castlePerm &= CastlePerm[to];
  brd_enPas = SQUARES.NO_SQ;
  HASH_CA();
  var captured = CAPTURED(move);
  brd_fiftyMove++;
  if (captured != PIECES.EMPTY) {
    ClearPiece(to);
    brd_fiftyMove = 0;
  }
  brd_hisPly++;
  brd_ply++;
  if (PiecePawn[brd_pieces[from]] == BOOL.TRUE) {
    brd_fiftyMove = 0;
    if ((move & MFLAGPS) != 0) {
      if (side == COLOURS.WHITE) {
        brd_enPas = from + 10;
      } else {
        brd_enPas = from - 10;
      }
      HASH_EP();
    }
  }
  MovePiece(from, to);
  var prPce = PROMOTED(move);
  if (prPce != PIECES.EMPTY) {
    ClearPiece(to);
    AddPiece(to, prPce);
  }
  brd_side ^= 1;
  HASH_SIDE();
  if (SqAttacked(brd_pList[PCEINDEX(Kings[side], 0)], brd_side)) {
    TakeMove();
    return BOOL.FALSE;
  }
  return BOOL.TRUE;
}
function makemove(t) {
  let myMoves = t.moves[Session.cur_user];
  Session.cur_step = myMoves.length + 1;
  myMoves.push(randomNumber(1000, 2000));
  Session.cur_move = arrLast(myMoves);
  DA.next = get_play_dep(Session.cur_step, Session.cur_move);
  save_tables();
}
function makeNewLayout(g1) {
  let nodes = g1.getNodes();
  let x = 10; let y = 10;
  for (n of nodes) {
    n.position({ x: x, y: y });
    x += 50; y += 50; if (y > 250) { y = 10; } if (x > 550) { x = 10; }
  }
}
async function makeNewSyms() {
  let etext = await route_path_text('../assets/speech/di/_wE.txt');
  let ew = etext.split('\n');
  console.log('eng', ew);
  let dtext = await route_path_text('../assets/speech/di/_wD.txt');
  let ftext = await route_path_text('../assets/speech/di/_wF.txt');
  let stext = await route_path_text('../assets/speech/di/_wS.txt');
  let ctext = await route_path_text('../assets/speech/di/_wC.txt');
  let dw = dtext.split('\n');
  let fw = ftext.split('\n');
  let sw = stext.split('\n');
  let cw = ctext.split('\n');
  let edict = {};
  for (let i = 0; i < ew.length; i++) {
    edict[ew[i]] = { E: ew[i], D: dw[i], F: fw[i], S: sw[i], C: cw[i] };
  }
  let symNew = {};
  for (const k in symbolDict) {
    let info = symbolDict[k];
    let inew = {};
    for (const k1 of ['key', 'hexcode', 'hex', 'family', 'text', 'type', 'isDuplicate']) {
      if (isdef(info[k1])) inew[k1] = info[k1];
    }
    inew.w = info.w;
    inew.h = info.h;
    let wk = inew.E = isdef(info.bestE) ? info.bestE : k;
    let e = edict[wk];
    if (isdef(e)) {
      inew.D = e.D;
      inew.F = e.F;
      inew.S = e.S;
      inew.C = e.C;
    }
    if (nundef(inew.D) && isdef(info.bestD)) inew.D = info.bestD;
    symNew[k] = inew;
    console.log('key', k, inew)
  }
  return symNew;
}
function makeNumberSpan(n, bg, fg, fz, rounding = '50%') {
  return `<span style='font-size:${fz}px;background:${bg};color:${fg};padding:0px 5px;border-radius:${rounding}'>${n}</span>`;
}
function makePage() {
  var dMain = document.getElementById('dMain');
  mStyle(dMain, { bg: 'indigo' });
  let [dHeaderLeft, dTitle, dHeaderRight] = std3title(dMain, 'Aristocracy', { family: 'AlgerianRegular' });
  let [dLeft, dMiddle, dRight] = std3fold(dMain);
  let dFooter = mDiv(dMain, { bg: '#00000050' }, 'dFooter', 'footer');
  let bMenuLeft = stdMenuButton(dHeaderLeft);
  stdSidebarController(bMenuLeft, 'dLeft');
  let bMenuRight = stdMenuButton(dHeaderRight);
  stdSidebarController(bMenuRight, 'dRight');
  return dMiddle;
}
function makePerleDiv(item, outerStyles, imgStyles, labelStyles, labelPos = null, magnify = true, handler = null, useNewImage = false) {
  let defOuterStyles = {
    display: 'inline-flex', 'flex-direction': 'column',
    'justify-content': 'center', 'align-items': 'center', 'vertical-align': 'top',
    padding: 0, box: true
  };
  addKeys(defOuterStyles, outerStyles);
  let dOuter = mCreate('div', outerStyles);
  if (labelPos && nundef(item.label)) { item.label = item.text.toLowerCase(); }
  let dLabel;
  let [w, h, fz] = [labelStyles.wmax, labelStyles.hmax, labelStyles.fz];
  let sz = simpleFit(item.label, w, h, fz);
  labelStyles = sz;
  dLabel = mTextFit(item.label, { wmax: w, hmax: h }, null, labelStyles);
  if (labelPos[0] == 't') dLabel = mText(item.label, dOuter, labelStyles);
  let x;
  imgStyles.rounding = '50%';
  if (useNewImage) {
    imgStyles.rounding = '50%';
    x = mAppend(dOuter, NEWLY_CREATED_IMAGE);
    mStyleX(x, imgStyles);
  } else {
    x = mImg(item.path, dOuter, imgStyles);
  }
  if (magnify) {
    x.onmouseenter = ev => { if (ev.ctrlKey) mMagnify(x, item); }
    x.onmouseleave = ev => mCancelMagnify(x, item.path);
  }
  if (labelPos[0] == 'b') dLabel = mText(item.label, dOuter, labelStyles);
  if (isdef(handler)) dOuter.onclick = ev => handler(ev, item);
  item.type = 'perle'; dOuter.id = iRegister(item);
  iAdd(item, { div: dOuter, dLabel: dLabel, dImg: x });
  return dOuter;
}
function makePictoCard(oid, o) {
  let symbolKeyPropName = 'name';
  let key = _getSymbolKey(o[symbolKeyPropName]);
  let symbol = symbols[key];
  let color = symbolColors[key];
  let d = document.createElement('div');
  $(d).on("mouseenter", function () { magnifyFront(this.id); });
  $(d).on("mouseleave", function () { minifyBack(this.id); });
  d.innerHTML = 'hallo';
  d.style.position = 'absolute';
  let dx = 0;
  d.style.left = '' + dx + 'px';
  d.style.top = '0px';
  let ch = iconChars[symbol];
  let text = String.fromCharCode('0x' + ch);
  let family = (ch[0] == 'f' || ch[0] == 'F') ? 'pictoFa' : 'pictoGame';
  d.innerHTML = `
    <div class="cardCatan">
      <p style='font-size:22px;'>${o.name}</p>
      <div class="cardCenter">
        <div class="circular" style='background:${color}'><span style='color:white;font-size:70px;font-weight:900;font-family:${family}'>${text}</span></div>
      </div>
      <hr>
      <p style='font-size:20px;'>${o.desc}</p>
      <div style='color:${color};position:absolute;left:8px;top:8px;width:35px;height:35px'>
        <span style='font-family:${family}'>${text}</span>
      </div>
    </div>
  `;
  return d;
}
function makePictoCardDomel(oCard) {
  if (lookup(SPEC, ['typeMappings', 'card'])) {
    for (const k in SPEC.typeMappings.card) {
      oCard[k] = oCard[SPEC.typeMappings.card[k]];
    }
  }
  let el = cardFace(oCard);
  return el;
}
function makePictoPiece(mobj, o, sz, color) {
  let [w, h] = [sz, sz];
  let sym = o.obj_type;
  if (sym in S.settings.symbols) { sym = S.settings.symbols[sym]; }
  if (!(sym in iconChars)) {
    symNew = Object.keys(iconChars)[randomNumber(5, 120)];
    S.settings.symbols[sym] = symNew;
    sym = symNew;
  }
  mobj.ellipse({ w: w, h: h, fill: color, alpha: .3 });
  let pictoColor = color == 'black' ? randomColor() : color;
  mobj.pictoImage(sym, pictoColor, sz * 2 / 3);
}
function makePlayermodeReadOnly(mode) {
  let el = getPlayermodeRadio(mode);
  el = document.getElementById('c_b_mm_' + mode);
  $(el).attr({ 'disabled': true, });
  document.getElementById('span_' + mode).style.color = 'silver';
}
function makePlayerReadOnly(i) {
  let el = getPlayerRadio(i);
  $(el).attr({ 'disabled': true, });
}
function makePlayerTypeReadOnlyX(i) {
  let prefixPl = 'c_b_mm_pl';
  let pltId = prefixPl + 't' + i;
  document.getElementById(pltId).readOnly = true;
}
function makePlayerTypesReadOnly() {
  for (let i = 1; i <= 8; i += 1) {
    makePlayerTypeReadOnly(i);
  }
}
function makePool(cond, source, R) {
  if (nundef(cond)) return [];
  else if (cond == 'all') return source;
  let pool = [];
  for (const oid of source) {
    let o = R.getO(oid);
    if (!evalConds(o, cond)) continue;
    pool.push(oid);
  }
  return pool;
}
function makeRandomElement() {
  let domel = document.createElement('div');
  mStyle(domel, { width: 100, height: 100, 'background-color': 'red', position: 'fixed', left: 0, top: 0 });
  return domel;
}
function makeRandomTree() {
  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };
  let n = r.tree = addManual00Node(null, r);
  recPopulateTree(n, r, 3);
  return r;
}
function makeRect(x, y, w, h) { let r = { x: x, y: y, w: w, h: h }; extendRect(r); return r; }
function makeRefLinkDiv(val, refs, prop, prefix) {
  let cl = prefix + '_r_' + getUID(); let ref = { oids: [val[prop]], id: cl }; refs.push(ref);
  let sval = `<div id=${cl} class='up10 hallo'>${val[prop].toString()}</div>`;
  return sval;
}
function makeRefLinkDiv4_obj(val, refs) { return makeRefLinkDiv(val, refs, '_obj', 't'); }
function makeRefLinkDiv4_player(val, refs) { return makeRefLinkDiv(val, refs, '_player', 'p'); }
function makeRefLinkDiv4ListOf_obj(val, refs, className = 'up10 hallo') {
  return makeRefLinkDivList(val, refs, '_obj', 't', className);
}
function makeRefLinkDiv4ListOf_player(val, refs, className = 'up10 hallo') {
  return makeRefLinkDivList(val, refs, '_player', 'p', className);
}
function makeRefLinkDiv4MatrixOf_obj(val, refs) {
  let rows = val._ndarray;
  let sval = `<div>`;
  let rowClass = 'up2 hallo';
  for (const row of rows) {
    sval += makeRefLinkDiv4ListOf_obj(row, refs, rowClass) + '<br>';
    rowClass = 'hallo';
  }
  sval += '</div>';
  return sval;
}
function makeRefLinkDivList(val, refs, prop, prefix, className = 'up10 hallo') {
  let cl = prefix + '_r_' + getUID(); let ref = { oids: val.filter(x => isdef(x)).map(x => x[prop]), id: cl }; refs.push(ref);
  let sval = `<div id=${cl} class='${className}'>${val.map(x => !x ? '_' : x[prop]).toString()}</div>`;
  return sval;
}
function makeRefs(idParent, refs) {
  for (const ref of refs) {
    let id = ref.id;
    let oids = ref.oids;
    if (isdef(UIS[id])) { error('CANNOT create ' + id + ' TWICE!!!!!!!!!'); return; }
    let mobj = new MOBJ();
    mobj.id = id;
    let domel = document.getElementById(id);
    mobj.elem = domel;
    mobj.parts.elem = mobj.elem;
    mobj.domType = getTypeOf(domel);
    mobj.cat = DOMCATS[mobj.domType];
    mobj.idParent = idParent;
    let parent = UIS[idParent];
    parent.children.push(id);
    mobj.isAttached = true;
    mobj.isa.ref = true;
    mobj.o = ref.oids;
    for (const oid of ref.oids) linkObjects(id, oid);
    listKey(IdOwner, id[2], id);
    UIS[id] = mobj;
  }
}
function makeRoot() {
  let mobj = new MOBJ();
  let id = 'R_d_root';
  mobj.id = id;
  mobj.elem = document.getElementById(id);
  mobj.domType = getTypeOf(mobj.elem);
  mobj.IdParent = null;
  mobj.isAttached = true;
  UIS[id] = mobj;
  return mobj;
}
function makeRows(d, rows, cols, gap = '2px') {
  d.style.setProperty('--grid-rows', rows);
  d.style.setProperty('--grid-cols', cols);
  d.style.setProperty('--grid-gap', gap);
  for (cols = 0; cols < (rows * cols); cols++) {
    let cell = document.createElement("div");
    cell.innerText = (cols + 1);
    d.appendChild(cell).className = "grid-item";
  };
};
function makeSidebar00(d, d1, d2) {
  mStyleX(d1, { h: '100%', w: 100, position: 'absolute', z: 1, top: 0, left: 0, overflow: 'hidden', transition: '0.5s' });
  mStyleX(d2, { maleft: 100, h: '100%', box: true, transition: '0.5s' }, null, null)
  d2.onclick = () => {
    mToggle(d1, 'width', 0, 100); mToggle(d2, 'margin-left', 0, 100);
  }
}
function makeSimpleString(d) {
  show(d);
  let html = '';
  for (const node of d.childNodes) { if (isdef(node.innerHTML)) html += node.innerHTML; else html += node.nodeValue; }
  d.innerHTML = html;
}
function makeSimplestTree() {
  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };
  let n = r.tree = addManual00Node(null, r);
  addManual00Node(n, r);
  return r;
}
function makeSimpleTree(numChildren = 2) {
  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };
  let n = r.tree = addManual00Node(null, r);
  for (let i = 0; i < numChildren; i++) addManual00Node(n, r);
  return r;
}
function makeStapel(elem, n) {
  let parent = elem;
  for (let i = 1; i <= n; i++) {
    let dummy = document.createElement('div');
    elem.appendChild(dummy);
    dummy.classList.add('cardBack');
    elem = dummy;
  }
  return elem;
}
function makeString(obj, prop, maxlen = 50, isStart = true) {
  let s = prop + ':';
  if (prop in obj) {
    let s1 = JSON.stringify(obj[prop]);
    if (maxlen > 0) {
      s += isStart ? s1.substring(0, maxlen) : s1.substring(s.length - maxlen);
    } else {
      s += s1;
    }
  } else {
    s += ' not present';
  }
  return s;
}
function makeStrings(obj, props, maxlen = 50, isStart = true) {
  strs = props.map(x => makeString(obj, x)).join('\n');
  return strs;
}
function makeSurePlayerColorsAreContrasting(human, ai) {
  ai.color = RED;
}
function makeSvg(w, h) {
  const svg1 = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  svg1.setAttribute('width', w);
  svg1.setAttribute('height', h);
  return svg1;
}
function makeSymbolSpan(info, bg, fg, fz, rounding = '50%') {
  let patop = Math.min(2, fz * .2);
  let pad = '5% 10%'; pad = '3px 5px'; pad = `${patop}px ${patop * 2}px`;
  if (info.key == 'queen-crown') pad = `${patop}px ${patop}px ${1}px ${patop}px`;
  else if (info.key == 'leaf') pad = `${1}px ${patop}px ${patop}px ${patop}px`;
  else if (info.key == 'white-tower') pad = `${patop}px ${patop * 2}px ${patop - 1}px ${patop * 2}px`;
  return `<div style='box-sizing:border-box;padding:${pad};min-height:${fz + 3}px;display:inline-block;font-family:${info.family};font-size:${fz}px;background:${bg};color:${fg};border-radius:${rounding}'>${info.text}</div>`;
}
function makeTable(tableName, rowHeaders, colHeaders) {
  let cols = colHeaders.length + 1;
  let rows = rowHeaders.length + 1;
  let sh = `<table id='${tableName}'><tr><th></th>`;
  for (const ch of colHeaders) {
    sh += `<th id='${ch}Header'>${ch}</th>`;
  }
  sh += `</tr>`;
  for (const rh of rowHeaders) {
    sh += `<tr id='${rh}${tableName}'><th>${rh}</th>`;
    for (const ch of colHeaders) {
      sh += `<td id='${rh}${ch}'>0</td>`;
    }
    sh += `</tr>`;
  }
  sh += `</table>`;
  let res = (elem = new DOMParser().parseFromString(sh, 'text/html').body.firstChild);
  return res;
}
function makeTableTreeX(fStruct, { presentationStrategy, fContent, fType, autoType, positioning = 'none', params } = {}) {
  R = fStruct();
  if (isdef(params)) { for (const uid in params) { R.rNodes[uid].params = params[uid]; } }
  if (isdef(autoType)) {
    for (const uid in R.rNodes) {
      let v = R.rNodes[uid];
      let val = autoType;
      if (!val) delete v.type; else v.type = val;
    }
  }
  if (isdef(fType)) {
    for (const uid in R.rNodes) {
      let v = R.rNodes[uid];
      let val = fType(v, R);
      if (!val) delete v.type; else v.type = val;
    }
  }
  if (isdef(fContent)) {
    for (const uid in R.rNodes) {
      let v = R.rNodes[uid];
      let val = fContent(v, R);
      if (!val) delete v.content; else v.content = val;
    }
  }
  let d = mBy('table');
  d.style.position = 'relative';
  R.baseArea = 'table';
  recUiTestX(R.tree, R);
  let root = R.uiNodes[R.tree.uid];
  if (positioning == 'random') {
    recPosRandomUiTreeX(R.tree.uid, R, { wmax: 6, hmax: 4, xmax: 50, ymax: 25, granularity: 10 });
    delete root.params.size;
    delete root.params.pos;
  } else if (positioning == 'regular') {
    recPosRegularUiTree(R.tree.uid, R);
    delete root.params.size;
    delete root.params.pos;
  } else {
  }
  R.presentationStrategy = isdef(presentationStrategy) ? presentationStrategy : R.defs.defaultPresentationStrategy;
  return R;
}
function makeTestButton(caption, func, container) {
  let b = document.createElement('button')
  b.textContent = capitalize(caption);
  container.appendChild(b)
  b.addEventListener('click', func);
  return b;
}
function makeTree33() {
  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };
  let n = r.tree = addManual00Node(null, r);
  let n1;
  for (let i = 0; i < 3; i++) {
    n1 = addManual00Node(n, r);
  }
  for (let i = 0; i < 3; i++) {
    addManual00Node(n1, r);
  }
  return r;
}
function makeTree332x2() {
  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };
  let n = r.tree = addManual00Node(null, r);
  let n1;
  for (let i = 0; i < 3; i++) {
    n1 = addManual00Node(n, r);
  }
  let n2, n3;
  for (let i = 0; i < 3; i++) {
    let nChild = addManual00Node(n1, r);
    if (i == 0) n2 = nChild;
    else if (i == 2) n3 = nChild;
  }
  for (let i = 0; i < 2; i++) { addManual00Node(n2, r); }
  for (let i = 0; i < 2; i++) { addManual00Node(n3, r); }
  return r;
}
function makeTreeNN(num1, num2) {
  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };
  let n = r.tree = addManual00Node(null, r);
  let n1;
  for (let i = 0; i < num1; i++) {
    n1 = addManual00Node(n, r);
  }
  for (let i = 0; i < num2; i++) {
    addManual00Node(n1, r);
  }
  return r;
}
function makeTreeNNEach(num1, num2) {
  let r = { rNodes: {}, uiNodes: {}, defs: DEFS };
  let n = r.tree = addManual00Node(null, r);
  for (let i = 0; i < num1; i++) {
    let n1 = addManual00Node(n, r);
    for (let j = 0; j < num2; j++) {
      addManual00Node(n1, r);
    }
  }
  return r;
}
function makeUnitString(nOrString, unit = 'px', defaultVal = '100%') {
  if (nundef(nOrString)) return defaultVal;
  if (isNumber(nOrString)) nOrString = '' + nOrString + unit;
  return nOrString;
}
function makeUserAvatar(username) {
  let a = { username: username };
  let d = mDiv(document.body, { rounding: '50%', align: 'center', position: 'fixed', w: 30, h: 30, fz: 25, bg: 'random', fg: 'contrast' }, 'd' + username);
  d.innerHTML = username[0];
  d.style.zIndex = 20;
  Avatars[username] = d;
  return d;
}
function MakeUserMove() {
  if (UserMove.from != SQUARES.NO_SQ && UserMove.to != SQUARES.NO_SQ) {
    console.log("User Move:" + PrSq(UserMove.from) + PrSq(UserMove.to));
    var parsed = ParseMove(UserMove.from, UserMove.to);
    DeselectSq(UserMove.from);
    DeselectSq(UserMove.to);
    console.log("Parsed:" + parsed);
    if (parsed != NOMOVE) {
      MakeMove(parsed);
      MoveGUIPiece(parsed);
      CheckAndSet();
      PreSearch();
    } else {
      ShowChessMessage('illegal move!', 1000);
    }
    UserMove.from = SQUARES.NO_SQ;
    UserMove.to = SQUARES.NO_SQ;
  }
}
function makeVisual(mobj, x, y, w, h, color, shape, { x1, y1, x2, y2 } = {}) {
  if (shape == 'circle') {
    mobj.ellipse({ w: w, h: h }).ellipse({ className: 'overlay', w: w, h: h });
    mobj.setPos(x, y);
  } else if (shape == 'hex') {
    mobj.hex({ w: w, h: h }).hex({ className: 'overlay', w: w, h: h });
    mobj.setPos(x, y);
  } else if (shape == 'quad' || shape == 'rect') {
    mobj.rect({ w: w, h: h }).rect({ className: 'overlay', w: w, h: h });
    mobj.setPos(x, y);
  } else if (shape == 'triangle') {
    mobj.triangle({ w: w, h: h }).triangle({ className: 'overlay', w: w, h: h });
    mobj.setPos(x, y);
  } else if (shape == 'line') {
    let thickness = w;
    let fill = color;
    mobj.line({ className: 'ground', x1: x1, y1: y1, x2: x2, y2: y2, fill: fill, thickness: thickness })
      .line({ className: 'overlay', x1: x1, y1: y1, x2: x2, y2: y2, thickness: thickness, });
  } else {
    mobj[shape]({ className: 'ground', w: w, h: h });
    mobj[shape]({ className: 'overlay', w: w, h: h });
    mobj.setPos(x, y);
  }
  mobj.setBg(color, shape != 'line');
  mobj.orig.bg = color;
  mobj.originalBg = color;
  mobj.orig.shape = shape;
  mobj.originalSize = { w: w, h: h };
  mobj.orig.w = w;
  mobj.orig.h = h;
  return mobj;
}
function makeVisualsForHexboard(boardInfo) {
  let infos = boardInfo.items;
  let sym = chooseRandom(getAnimals());
  let items = [];
  for (const info of infos) {
    let item = drawText(info.trow + ',' + info.tcol, info.pt);
    if (info.isHexCenter) mStyle(iDiv(item), { bg: 'pink' })
    items.push(item);
  }
}
async function makeWordProblemsDict() {
  let wp = await route_path_text('../assets/math/hallo.txt');
  wp = wp.split('*');
  wp.splice(0, 1);
  let wpDict = {}; let wpList = [];
  for (const line of wp) {
    let index = firstNumber(line);
    let rest = stringAfter(line, '.');
    let title = stringBefore(rest, ':').trim();
    let sol = firstNumber(stringAfter(rest, '@'));
    let text = stringBetween(rest, ':', '@').trim();
    let nums = allNumbers(text);
    let inum = 0;
    let ersetzer = { a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9 };
    let kers = Object.keys(ersetzer);
    if (nums) {
      for (const n of nums) {
        let s = n.toString();
        let i = s.indexOf(text);
        let len = s.length;
        text = text.replace(s, '{N' + kers[inum] + '}');
        inum += 1;
      }
    }
    for (let j = 0; j < inum; j++) {
      let s = '{N' + kers[j];
      let by = '{N' + ersetzer[kers[j]];
      text = replaceAllSpecialChars(text, s, by);
    }
    let iname = 1;
    for (const name of PersonNames) {
      if (text.includes(name)) {
        text = replaceAll(text, name, '{P' + iname + '}');
        iname += 1;
      }
    }
    let p = { index: index, title: title, sol: sol, text: text };
    wpList.push(p);
    if (startsWith(title, 'Adding')) {
      lookupAddIfToList(wpDict, ['plus'], p);
      delete p.sol;
    }
  }
  downloadAsYaml(wpList, 'wp');
  console.log('dict', wpDict);
  downloadAsYaml(wpDict, 'wp');
  return wpDict;
}
function maLayout(pics, dParent) {
  mClass(dParent, 'flexWrap');
  let numPics = pics.length;
  let rows = Math.sqrt(numPics);
  rows = Math.floor(rows);
  let cols = Math.ceil(numPics / rows);
  let [pictureSize, picsPerLine] = calcDimsAndSize(cols, rows);
  clearElement(dParent);
  let i = 0;
  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      maResizePic(pics[i], dParent, pictureSize)
      i += 1;
      if (i >= pics.length) return;
    }
    mLinebreak(dParent);
  }
}
function mAnimate(elem, prop, valist, callback, msDuration = 1000, easing = 'cubic-bezier(1,-0.03,.86,.68)', delay = 0, forwards = 'none') {
  let kflist = [];
  for (const perc in valist) {
    let o = {};
    let val = valist[perc];
    o[prop] = isString(val) || prop == 'opacity' ? val : '' + val + 'px';
    kflist.push(o);
  }
  let opts = { duration: msDuration, fill: forwards, easing: easing, delay: delay };
  let a = toElem(elem).animate(kflist, opts);
  if (isdef(callback)) { a.onfinish = callback; }
  return a;
}
function mAnimateList(elem, ogoal, callback, msDuration = 1000, easing = 'cubic-bezier(1,-0.03,.86,.68)', delay = 0) {
  for (const k in ogoal) {
    ogoal[k] = isString(ogoal[k]) || k == 'opacity' ? ogoal[k] : '' + ogoal[k] + 'px';
  }
  let kflist = [ogoal];
  let opts = { duration: msDuration, fill: 'forwards', easing: easing, delay: delay };
  let a = toElem(elem).animate(kflist, opts);
  if (isdef(callback)) { a.onfinish = callback; }
  return a;
}
function mAnimateTo(elem, prop, val, callback, msDuration = 1000, easing = 'cubic-bezier(1,-0.03,.86,.68)', delay = 0) {
  let o = {};
  o[prop] = isString(val) || prop == 'opacity' ? val : '' + val + 'px';
  let kflist = [o];
  let opts = { duration: msDuration, fill: 'forwards', easing: easing, delay: delay };
  let a = toElem(elem).animate(kflist, opts);
  if (isdef(callback)) { a.onfinish = callback; }
  return a;
}
function map_add_layer(key = 'osm') {
  let layer;
  if (key == 'osm') {
    layer = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>', subdomains: ['a', 'b', 'c'] });
  } else if (key == 'watercolor') {
    let url = 'https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg';
  } else if (startsWith(key, 'mb')) {
    let url = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';
    let id = key.includes('sat') ? 'mapbox/satellite-v9' : 'mapbox/streets-v11';
    layer = L.tileLayer(url, { id: id, tileSize: 512, zoomOffset: -1, attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>' });
  } else if (key.includes('top')) {
    layer = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
      maxZoom: 22,
      attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
    });
  }
  layer.addTo(M.map);
  return layer;
}
function map_init(dParent, city, zoom) {
  let o = M.cities[city];
  let center = [o.lat, o.lon];
  var map = L.map(dParent, { center: center, minZoom: 2, zoom: zoom });
  return map;
}
function map_moveby(pin, fx, fy) {
  let pos = pin.getLatLng();
  let lat = fx(pos.lat);
  let lng = fy(pos.lng);
  pin.setLatLng([lat, lng]);
}
function map_moveto(pin, center) { pin.setLatLng(center); }
function map_range(x, min1, max1, min2, max2) { return convert_to_range(x, min1, max1, min2, max2); }
function maPic(infokey, dParent, styles, isText = true, isOmoji = false) {
  let info = isString(infokey) ? picInfo(infokey) : infokey;
  if (!isText && info.type == 'emo') {
    let dir = isOmoji ? 'openmoji' : 'twemoji';
    let hex = info.hexcode;
    if (isOmoji && hex.indexOf('-') == 2) hex = '00' + hex;
    let ui = mImg('/assets/svg/' + dir + '/' + hex + '.svg', dParent);
    if (isdef(styles)) mStyleX(ui, styles);
    return ui;
  }
  let outerStyles = isdef(styles) ? jsCopy(styles) : {};
  outerStyles.display = 'inline-block';
  let family = info.type == 'emo' && isString(isOmoji) ? isOmoji : isOmoji == true ? 'emoOpen' : info.family;
  let i = (family == info.family) ? 0 : EMOFONTLIST.indexOf(family) + 1;
  if (i < 0) {
    i = 1; console.log('iiiiiii', i, family, info.family);
  }
  let wInfo = info.w[i];
  let hInfo = info.h[i];
  let innerStyles = { family: family };
  let [padw, padh] = isdef(styles.padding) ? [styles.padding, styles.padding] : [0, 0];
  let dOuter = isdef(dParent) ? mDiv(dParent) : mDiv();
  let d = mDiv(dOuter);
  d.innerHTML = info.text;
  let wdes, hdes, fzdes, wreal, hreal, fzreal, f;
  if (isdef(styles.w) && isdef(styles.h) && isdef(styles.fz)) {
    [wdes, hdes, fzdes] = [styles.w, styles.h, styles.fz];
    let fw = wdes / wInfo;
    let fh = hdes / hInfo;
    let ffz = fzdes / info.fz;
    f = Math.min(fw, fh, ffz);
  } else if (isdef(styles.w) && isdef(styles.h)) {
    [wdes, hdes] = [styles.w, styles.h];
    let fw = wdes / wInfo;
    let fh = hdes / hInfo;
    f = Math.min(fw, fh);
  } else if (isdef(styles.w) && isdef(styles.fz)) {
    [wdes, fzdes] = [styles.w, styles.fz];
    let fw = wdes / wInfo;
    let ffz = fzdes / info.fz;
    f = Math.min(fw, ffz);
  } else if (isdef(styles.h) && isdef(styles.fz)) {
    [hdes, fzdes] = [styles.h, styles.fz];
    let fh = hdes / hInfo;
    let ffz = fzdes / info.fz;
    f = Math.min(fh, ffz);
  } else if (isdef(styles.h)) {
    hdes = styles.h;
    f = hdes / hInfo;
  } else if (isdef(styles.w)) {
    wdes = styles.w;
    f = wdes / wInfo;
  } else {
    mStyleX(d, innerStyles);
    mStyleX(dOuter, outerStyles);
    return dOuter;
  }
  fzreal = f * info.fz;
  wreal = Math.round(f * wInfo);
  hreal = Math.round(f * hInfo);
  wdes = Math.round(wdes);
  hdes = Math.round(hdes);
  padw += isdef(styles.w) ? (wdes - wreal) / 2 : 0;
  padh += isdef(styles.h) ? (hdes - hreal) / 2 : 0;
  if (!(padw >= 0 && padh >= 0)) {
    console.log(info)
    console.log('\nstyles.w', styles.w, '\nstyles.h', styles.h, '\nstyles.fz', styles.fz, '\nstyles.padding', styles.padding, '\nwInfo', wInfo, '\nhInfo', hInfo, '\nfzreal', fzreal, '\nwreal', wreal, '\nhreal', hreal, '\npadw', padw, '\npadh', padh);
  }
  innerStyles.fz = fzreal;
  innerStyles.weight = 900;
  innerStyles.w = wreal;
  innerStyles.h = hreal;
  mStyleX(d, innerStyles);
  outerStyles.padding = '' + padh + 'px ' + padw + 'px';
  outerStyles.w = wreal;
  outerStyles.h = hreal;
  mStyleX(dOuter, outerStyles);
  return dOuter;
}
function maPic4(info, dParent, styles) {
  mStyleX(dParent, { display: 'flex', 'flex-flow': 'row wrap' });
  maPic(info, table, styles, true);
  maPic(info, table, styles, true, 'segoe ui emoji');
  maPic(info, table, styles, false);
  maPic(info, table, styles, false, true);
  mLinebreak(table);
}
function maPicButton(key, handler, dParent, styles, classes = 'picButton', isText, isOmoji) {
  let x = maPic(key, dParent, styles, isText, isOmoji);
  if (isdef(handler)) x.onclick = handler;
  mClass(x, classes);
  return x;
}
function maPicFrame(info, dParent, containerStyles, picStyles, isText = true, isOmoji = false) {
  let d = mDiv(dParent);
  maPic(info, d, picStyles, isText, isOmoji);
  mStyleX(d, containerStyles);
  return d;
}
function maPicLabel(info, dParent, containerStyles, picStyles, textStyles, isText = true, isOmoji = false) {
  let d = mDiv(dParent);
  let dPic = maPic(info, d, picStyles, isText, isOmoji);
  let dText = mText(info.annotation, d, textStyles, ['might-overflow']);
  mStyleX(d, containerStyles);
  return d;
}
function maPicLabel_dep(info, dParent, styles, isText = true, isOmoji = false) {
  let d = mDiv(dParent, { bg: 'random', fg: 'contrast', padding: 4, margin: 2 });
  maPic(info, d, styles, isText, isOmoji);
  mText(info.annotation, d);
  d.style.textAlign = 'center';
  return d;
}
function maPicLabelButton(info, label, handler, dParent, styles, classes = 'picButton', isText, isOmoji) {
  let sz = isdef(styles) && isdef(styles.w) ? styles.w : 200;
  let [g, p, t] = getHarmoniousStyles1(styles.w, styles.h, 10, 'arial', 'random', 'random', true);
  g.display = 'inline-block';
  for (const k in styles) {
    g[k] = styles[k];
    if (k == 'rounding') p.rounding = styles.rounding;
  }
  console.log('g', g, '\np', p, '\nt', t)
  let x = maPicLabelX(info, label, dParent, g, p, t, isText, isOmoji);
  if (isdef(handler)) x.onclick = handler;
  mClass(x, classes);
  return x;
}
function maPicLabelButtonFitText(info, label, { w, h, bgPic, textShadowColor, contrast, sPic = {} }, handler, dParent, styles, classes = 'picButton', isText, isOmoji, focusElement) {
  let picLabelStyles = getHarmoniousStylesPlusPlus(styles, sPic, {}, w, h, 65, 0, 'arial', bgPic, 'transparent', null, null, true);
  let x = maPicLabelFitX(info, label.toUpperCase(), { wmax: w, textShadowColor: textShadowColor, contrast: contrast }, dParent, picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], isText, isOmoji);
  x.id = 'd' + info.key;
  if (isdef(handler)) x.onclick = handler;
  x.style.cursor = 'pointer';
  x.lastChild.style.cursor = 'pointer';
  x.style.userSelect = 'none';
  mClass(x, classes);
  return x;
}
function maPicLabelButtonX(info, label, handler, dParent, styles, classes = 'picButton', isText, isOmoji) {
  let handler1 = (ev) => {
    let id = evToClosestId(ev);
    let info = symbolDict[id.substring(1)];
    if (isLabelVisible(id)) maHideLabel(id, info); else maShowLabel(id, info);
    mBy('dummy').focus();
  }
  let picLabelStyles = getHarmoniousStylesPlus(styles, {}, {}, 200, 200, 0, 'arial', 'random', 'transparent', true);
  let x = maPicLabelX(info, label.toUpperCase(), dParent, picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], true, false);
  x.id = 'd' + label;
  x.onclick = handler;
  x.style.cursor = 'pointer';
  x.lastChild.style.cursor = 'pointer';
  x.style.userSelect = 'none';
  return x;
}
function maPicLabelButtonXX(info, label, handler, dParent, styles, classes = 'picButton', isText, isOmoji) {
  let handler1 = (ev) => {
    let id = evToClosestId(ev);
    let info = infoDictionary[id.substring(1)];
    if (isLabelVisible(id)) maHideLabel(id, info); else maShowLabel(id, info);
    mBy('dummy').focus();
  }
  let picLabelStyles = getHarmoniousStylesPlusPlus(styles, {}, {}, 200, 200, 65, 0, 'arial', 'random', 'transparent', null, null, true);
  let x = maPicLabelFit(info, label.toUpperCase(), dParent, picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], true, false);
  x.id = 'd' + label;
  x.onclick = handler;
  x.style.cursor = 'pointer';
  x.lastChild.style.cursor = 'pointer';
  x.style.userSelect = 'none';
  return x;
}
function maPicLabelFit(info, label, dParent, containerStyles, picStyles, textStyles, isText = true, isOmoji = false) {
  let d = mDiv(dParent);
  let dPic = maPic(info, d, picStyles, isText, isOmoji);
  let maxchars = 15; let maxlines = 1;
  console.log(containerStyles, picStyles, textStyles);
  let hAvail = containerStyles.h -
    (containerStyles.patop + picStyles.h + containerStyles.pabottom);
  let wAvail = containerStyles.w;
  let fz = textStyles.fz;
  console.log('_ avail:', wAvail, hAvail)
  let styles1 = textStyles;
  let size = getSizeWithStylesX(label, styles1, wAvail);
  console.log('__', size);
  let dText = mTextFit(label, maxchars, maxlines, d, textStyles, ['truncate']);
  mStyleX(d, containerStyles);
  return d;
}
function maPicLabelFitX(info, label, { wmax, hmax, textShadowColor, contrast = .35 }, dParent, containerStyles, picStyles, textStyles, isText = true, isOmoji = false) {
  let d = mDiv(dParent);
  if (isdef(textShadowColor)) {
    let sShade = '0 0 0 ' + textShadowColor;
    picStyles['text-shadow'] = sShade;
    picStyles.fg = colorFrom('black', contrast); //'#00000080' '#00000030' 
  }
  let dPic = maPic(info, d, picStyles, isText, isOmoji);
  let maxchars = 15; let maxlines = 1;
  let wAvail, hAvail;
  hAvail = containerStyles.h - (containerStyles.patop + picStyles.h);
  wAvail = containerStyles.w;
  if (isdef(hmax)) {
    hAvail = containerStyles.h - (containerStyles.patop + picStyles.h);
    if (hmax != 'auto') {
      hAvail = Math.min(hAvail, hmax);
    }
  }
  if (isdef(wmax)) {
    wAvail = containerStyles.w;
    if (wmax != 'auto') {
      wAvail = Math.min(wAvail, wmax);
    }
  }
  let fz = textStyles.fz;
  let styles1 = textStyles;
  let size = getSizeWithStylesX(label, styles1, isdef(wmax) ? wAvail : undefined, isdef(hmax) ? hAvail : undefined);
  let size1 = getSizeWithStylesX(label, styles1);
  let f1 = wAvail / size1.w;
  let isTextOverflow = f1 < 1;
  if (f1 < 1) {
    textStyles.fz *= f1;
    textStyles.fz = Math.floor(textStyles.fz);
  }
  let [wBound, hBound] = [isdef(wmax) ? size.w : undefined, isdef(hmax) ? size.h : undefined];
  let isOverflow = isdef(wBound) && size.w > wAvail || isdef(hBound) && size.h > hAvail;
  let dText = mTextFit(label, { wmax: wBound, hmax: hBound }, d, textStyles, isTextOverflow ? ['truncate'] : null);
  mStyleX(d, containerStyles);
  dText.style.margin = 'auto';
  return d;
}
function maPicLabelShowHideHandler(ev) {
  let id = evToClosestId(ev);
  let info = symbolDict[id.substring(1)];
  if (isLabelVisible(id)) maHideLabel(id, info); else maShowLabel(id, info);
  if (isdef(mBy('dummy'))) mBy('dummy').focus();
}
function maPicLabelX(info, label, dParent, containerStyles, picStyles, textStyles, isText = true, isOmoji = false) {
  let d = mDiv(dParent);
  let dPic = maPic(info, d, picStyles, isText, isOmoji);
  let dText = mText(label, d, textStyles, ['might-overflow']);
  mStyleX(d, containerStyles);
  return d;
}
function maPicOver(d, dParent, fz, color, picStyle) {
  let b = getBounds(dParent);
  d.style.top = picStyle == 'segoeBlack' ? (b.y + 60 - fz / 2 + 'px') : (b.y + 100 - fz / 2 + 'px');
  d.style.left = picStyle == 'segoeBlack' ? (b.x + 120 - fz / 2 + 'px') : (b.x + 100 - fz / 2 + 'px');
  d.style.color = color;
  d.style.fontSize = fz + 'px';
  d.style.display = 'block';
  let { isText, isOmoji } = getParamsForMaPicStyle(picStyle);
  d.style.fontFamily = isString(isOmoji) ? isOmoji : isOmoji ? 'emoOpen' : 'emoNoto';
  return d;
}
function maPicSimple(key) {
  let info = picInfo(key);
  let d = mText(info.text);
  d.style.setProperty('font-family', info.family);
  return d;
}
function maPicSimpleEmoHexText(hex, parent, fontSize) {
  if (isString(parent)) parent = mBy(parent);
  let d = mDiv(parent);
  let s1 = '&#' + hex + ';'; //'\u{1F436}';
  d.innerHTML = s1;
  d.style.fontSize = fontSize + 'pt';
  return d;
}
function mapOMap(omap, pool) {
  let olist = [];
  let ids = omap ? getElements(omap) : [];
  if (!isEmpty(ids)) {
    for (const id of ids) {
      let o = pool[id];
      o.id = id;
      olist.push(o);
    }
  } else {
    for (const k in omap) {
      let item = { key: k, value: omap[k] };
      olist.push(item);
    }
  }
  return olist;
}
function mAppear(d, ms = 800, callback = null) { return mAnimateTo(d, 'opacity', 1, callback, ms); }
function mAppend(d, child) { toElem(d).appendChild(child); return child; }
function mAppendS(d, child) { d = mEnsure(d); if (d) d.appendChild(child); return child; }
function mAppendText(d, text) { let dText = mCreate('div'); dText.innerHTML = text; d.appendChild(dText); return dText; }
function mAppendTextS(d, text) { let dText = mCreate('div'); dText.innerHTML = text; mAppendS(d, dText); return dText; }
function mappingsClear() {
  mappingTypes = {};
  mappingsInitialized = {};
}
function mAppPos(d, child) { d.style.position = 'relative'; return mAppend(d, child); }
function mAppPosS(d, child) { d = ensure(d); d.style.position = 'relative'; return mAppend(d, child); }
function mapSafe(func, listFunc, oid) {
  let uis = listFunc(oid);
  if (!isdef(uis)) return;
  if (!isList(uis)) uis = [uis];
  uis.map(x => x[func]());
}
function mapValues(o, p, pdef, spec) {
  let oNew = {};
  for (const k in p) {
    if (nundef(p[k])) continue;
    if (nundef(p[k]._map)) { oNew[k] = p[k]; continue; }
    let p1 = p[k];
    let m = p1._map;
    let mapName = m.map;
    let _map = spec[mapName];
    let propPath = m.key;
    let _key = decodePropertyPath(o, propPath);
    let val = _map[_key];
    let valKey = isdef(m.value) ? m.value : k;
    if (isdef(val) && isdef(val[valKey])) { oNew[k] = val[valKey]; }
    else if (isdef(m.default)) { oNew[k] = m.default; }
    else if (isdef(pdef[k])) { oNew[k] = pdef[k]; }
  }
  return oNew;
}
function mapzeug_sample_code() {
  M.markers.nasi = get_marker(map, center, { user: 'nasi', draggable: true });
  M.shapes = {};
  M.shapes.nasi = get_circle(center, { sz: 1000, bg: GREEN }).addTo(map);
  M.markers.nasi.on('drag', function (e) {
    var d = map.distance(e.latlng, M.shapes.nasi.getLatLng());
    var isInside = d < M.shapes.nasi.getRadius();
    console.log('inside?', isInside ? 'YES' : 'NO');
    M.shapes.nasi.setStyle({ fillColor: isInside ? 'green' : '#f03' });
  });
}
function maResizePic(p, dParent, pictureSize) {
  let d = p.div;
  mAppend(dParent, d);
  let oldSize = p.sz;
  if (oldSize >= 200) return;
  let x = pictureSize / oldSize;
  if (Math.abs(x - 1) <= .1) return;
  let dpic = d.children[0];
  let bpic = getBounds(dpic);
  let wPicOld = bpic.width;
  let wPicNew = bpic.width * x;
  let hPicOld = bpic.height;
  let hPicNew = bpic.height * x;
  console.log('pic will be resized from', wPicOld, hPicOld, 'to', wPicNew, hPicNew)
  console.log('info.hOrig', p.info.hOrig)
  console.log('info', p.info)
  mSize(d, pictureSize, pictureSize);
  let dsym = dpic.children[0];
  let fzPicOld = firstNumber(dsym.style.fontSize);
  let fzPicNew = fzPicOld * x;
  let hNew = fzPicNew * p.info.h[0] / 100;
  console.log('new h should be', hNew, 'but is', hPicNew)
  mStyleX(dpic, { w: wPicNew, h: hNew });
  mStyleX(dsym, { fz: fzPicNew });
  let dtext = d.children[1];
  let fzTextOld = firstNumber(dtext.style.fontSize);
  let fzTextNew = Math.round(fzTextOld * x);
  mStyleX(dtext, { fz: fzTextNew, w: 'auto', h: 'auto' });
  d.style.padding = '0px';
  p.sz = pictureSize;
  let htext = p.isLabelVisible ? getBounds(dtext).height : 0;
  let hpic = getBounds(dpic).height;
  d.style.paddingTop = '' + ((pictureSize - (htext + hpic)) / 2) + 'px';
  for (let i = 2; i < d.children.length; i++) {
    let dOrdinal = d.children[i];
    let fzOld = firstNumber(dOrdinal.style.fontSize);
    let fzNew = fzOld * x;
    let leftOld = firstNumber(dOrdinal.style.left);
    let leftNew = Math.floor(leftOld * x);
    let topOld = firstNumber(dOrdinal.style.top);
    let topNew = Math.floor(topOld * x);
    mStyleX(dOrdinal, { fz: fzNew, left: leftNew, top: topNew });
  }
}
function markerFail() { return createMarker(MarkerId.FAIL); }
function markerSuccess() { return createMarker(MarkerId.SUCCESS); }
function markerSuccessNew(ui, sz) {
  let d = createMarker(MarkerId.SUCCESS);
  if (nundef(ui)) return d;
  if (nundef(sz)) sz = getRect(ui).h;
  let top = (cy - sz * 2 / 3);
  let left = (cx - sz / 3);
  sz *= 4 / 5;
  mpOver(d, ui, sz, 'limegreen', 'segoeBlack');
  return d;
}
function maShowLabel(id, info) {
  let d = mBy(id);
  let dPic = d.children[0];
  let dText = d.children[1];
  let dPicText = dPic.children[0];
  dPicText.style.fontSize = info.fzOrig;
  dPicText.style.color = info.textColorOrig;
  dPic.style.width = info.wOrig;
  dPic.style.height = info.hOrig;
  d.style.paddingTop = info.paddingTopOrig;
  d.style.paddingBottom = info.paddingBottomOrig;
  dText.style.display = 'block';
  dText.style.width = 'auto'
}
function maShowPictures(keys, labels, dParent, onClickPictureHandler, { showRepeat, container, lang, border, picSize, bgs, colorKeys, contrast, repeat = 1,
  sameBackground, shufflePositions = true } = {}, { sCont, sPic, sText } = {}) {
  let pics = [];
  let numPics = keys.length * repeat;
  let items = [];
  for (let i = 0; i < keys.length; i++) {
    let k = keys[i];
    let info = isdef(lang) ? getRandomSetItem(lang, k) : symbolDict[k];
    let bg = isList(bgs) ? bgs[i] : isdef(colorKeys) ? 'white' : sameBackground ? computeColor('random') : 'random';
    let label = isList(labels) ? labels[i] : isdef(lang) ? info.best : k;
    items.push({ key: k, info: info, label: label, bg: bg, iRepeat: 1 });
  }
  let items1 = jsCopy(items);
  for (let i = 0; i < repeat - 1; i++) {
    items = items.concat(items1);
  }
  let isText = true;
  let isOmoji = false;
  if (isdef(lang)) {
    let textStyle = getParamsForMaPicStyle('twitterText');
    isText = textStyle.isText;
    isOmoji = textStyle.isOmoji;
  }
  numPics = items.length;
  if (shufflePositions) { shuffle(items); }
  let lines = isdef(colorKeys) ? colorKeys.length : 1;
  let [pictureSize, picsPerLine] = calcDimsAndSize(numPics, lines, container);
  let stylesForLabelButton = { rounding: 10, margin: pictureSize / 8 };
  if (isdef(border)) stylesForLabelButton.border = border;
  if (isdef(picSize)) pictureSize = picSize;
  let labelRepeat = {};
  for (let line = 0; line < lines; line++) {
    let textShadowColor, colorKey;
    if (isdef(colorKeys)) { colorKey = colorKeys[line]; textShadowColor = ColorDict[colorKey].c; labelRepeat = {}; }
    for (let i = 0; i < numPics; i++) {
      let item = items[i];
      let info = item.info;
      let label = item.label;
      let iRepeat = labelRepeat[label];
      if (nundef(iRepeat)) iRepeat = 1; else iRepeat += 1;
      labelRepeat[label] = iRepeat;
      let bg = item.bg;
      let ipic = (line * picsPerLine + i);
      if (ipic % picsPerLine == 0 && ipic > 0) { mLinebreak(dParent); }
      let id = 'pic' + ipic;
      let d1 = maPicLabelButtonFitText(info, label,
        { w: pictureSize, h: pictureSize, bgPic: bg, textShadowColor: textShadowColor, contrast: contrast, sPic: sPic },
        onClickPictureHandler, dParent, stylesForLabelButton, 'frameOnHover', isText, isOmoji);
      d1.id = id;
      if (showRepeat) addRepeatInfo(d1, iRepeat, pictureSize);
      let fzPic = firstNumber(d1.children[0].children[0].style.fontSize);
      pics.push({
        textShadowColor: textShadowColor, color: ColorDict[colorKey], colorKey: colorKey, key: info.key, info: info,
        bg: bg, div: d1, id: id, sz: pictureSize, fzPic: fzPic,
        index: ipic, row: line, col: i, iRepeat: iRepeat, label: label, isLabelVisible: true, isSelected: false
      });
    }
  }
  return pics;
}
function matchAllUnits_dep(arr, pl, tile, type) {
  let units = arr.filter(x => x.obj_type == 'unit' && getUnitOwner(x.nationality) == pl && x.tile == tile && x.type == type);
  if (units.length > 1) {
    msg = 'matchSingleUnit: MULTIPLE UNITS MATCH EXACTLY!!!';
    alert(msg);
  } else if (units.length == 1) {
    return units[0];
  }
  return null;
}
function matches_on_either_end(card, j) {
  let key = card.key;
  let jfirst = arrFirst(j.o.list);
  let jlast = arrLast(j.o.list);
  rankstr = 'A23456789TJQK';
  let [s, s1, s2] = [key[1], jfirst[1], jlast[1]];
  let anfang = s == s1 && follows_in_rank(key, jfirst, rankstr);
  let ende = s == s2 && follows_in_rank(jlast, key, rankstr);
  return anfang || ende;
}
function matchesAnyWordOrSound(info, s) {
  if (!isEnglish(currentLanguage)) return false;
  for (const w of info.words) {
    if (isTimeString(w)) return soundsSimilar(w, s);
  }
  return false;
}
function matchingNumberOrTime(info, answer) {
  if (infoHasNumberOrTimeString(info) && isNumberOrTimeString(answer)) {
    if (isNumber(answer) && infoHasNumber(info)) {
      let best1 = firstCond(info.words, x => isNumber(x));
      return best1 == answer;
    } else if (isTimeString(answer) && infoHasTimeString(info)) {
      let ts = firstCond(info.words, x => isTimeString(x));
      let x1 = convertGermanUhrzeitToNumbers(answer);
      let x2 = convertTimeStringToNumbers(ts);
      removeInPlace(x1, 0);
      removeInPlace(x2, 0);
      return sameList(x1, x2);
    } else if (infoHasTimeString(info)) {
      let best1 = firstCond(info.words, x => isTimeString(x));
      let x1 = convertTimesAndNumbersToWords(best1);
      let x2 = convertTimesAndNumbersToWords(answer);
      return x1 == x2;
    }
  }
}
function matchSingleUnit_dep(idDict, pl, tile, type) {
  let arr = dict2list(idDict, 'id');
  let units = arr.filter(x => x.obj_type == 'unit' && getUnitOwner(x.nationality) == pl && x.tile == tile && x.type == type);
  if (units.length > 1) {
    msg = 'matchSingleUnit: MULTIPLE UNITS MATCH EXACTLY!!!';
    alert(msg);
  } else if (units.length == 1) {
    return units[0];
  }
  return null;
}
function matchUnits(darr, option, pl = null, tile = null, type = null, cv = null) {
  let arr = null;
  if (typeof darr === 'object' && darr.constructor == Object) {
    arr = dict2list(darr, 'id');
  } else arr = darr;
  let result = [];
  for (const o of arr) {
    if (o.obj_type != 'unit') continue;
    if (pl && getUnitOwner(o.nationality) != pl) continue;
    if (tile && o.tile != tile) continue;
    if (type && (o.type != 'Convoy' && o.type != type || o.type == 'Convoy' && o.carrying != type)) {
      continue;
    }
    if (cv && o.cv != cv) continue;
    if (option == 'first') {
      return o;
    }
    result.push(o);
  }
  if (result.length == 0) return option == 'all' ? [] : null;
  return option == 'all' ? result : option == 'last' ? result[result.length - 1] : (result[0], result[result.length - 1]);
}
function MaterialDraw() {
  if (0 == brd_pceNum[PIECES.wR] && 0 == brd_pceNum[PIECES.bR] && 0 == brd_pceNum[PIECES.wQ] && 0 == brd_pceNum[PIECES.bQ]) {
    if (0 == brd_pceNum[PIECES.bB] && 0 == brd_pceNum[PIECES.wB]) {
      if (brd_pceNum[PIECES.wN] < 3 && brd_pceNum[PIECES.bN] < 3) { return BOOL.TRUE; }
    } else if (0 == brd_pceNum[PIECES.wN] && 0 == brd_pceNum[PIECES.bN]) {
      if (Math.abs(brd_pceNum[PIECES.wB] - brd_pceNum[PIECES.bB]) < 2) { return BOOL.TRUE; }
    } else if ((brd_pceNum[PIECES.wN] < 3 && 0 == brd_pceNum[PIECES.wB]) || (brd_pceNum[PIECES.wB] == 1 && 0 == brd_pceNum[PIECES.wN])) {
      if ((brd_pceNum[PIECES.bN] < 3 && 0 == brd_pceNum[PIECES.bB]) || (brd_pceNum[PIECES.bB] == 1 && 0 == brd_pceNum[PIECES.bN])) { return BOOL.TRUE; }
    }
  } else if (0 == brd_pceNum[PIECES.wQ] && 0 == brd_pceNum[PIECES.bQ]) {
    if (brd_pceNum[PIECES.wR] == 1 && brd_pceNum[PIECES.bR] == 1) {
      if ((brd_pceNum[PIECES.wN] + brd_pceNum[PIECES.wB]) < 2 && (brd_pceNum[PIECES.bN] + brd_pceNum[PIECES.bB]) < 2) { return BOOL.TRUE; }
    } else if (brd_pceNum[PIECES.wR] == 1 && 0 == brd_pceNum[PIECES.bR]) {
      if ((brd_pceNum[PIECES.wN] + brd_pceNum[PIECES.wB] == 0) && (((brd_pceNum[PIECES.bN] + brd_pceNum[PIECES.bB]) == 1) || ((brd_pceNum[PIECES.bN] + brd_pceNum[PIECES.bB]) == 2))) { return BOOL.TRUE; }
    } else if (brd_pceNum[PIECES.bR] == 1 && 0 == brd_pceNum[PIECES.wR]) {
      if ((brd_pceNum[PIECES.bN] + brd_pceNum[PIECES.bB] == 0) && (((brd_pceNum[PIECES.wN] + brd_pceNum[PIECES.wB]) == 1) || ((brd_pceNum[PIECES.wN] + brd_pceNum[PIECES.wB]) == 2))) { return BOOL.TRUE; }
    }
  }
  return BOOL.FALSE;
}
function mAttrs(elem, attrs) { for (const k in attrs) { elem.setAttribute(k, attrs[k]); } }
function mAutocomplete(dParent) {
  let form = mCreateFrom(`
    <form class='form' autocomplete="off" action="javascript:void(0);">
      <div class="autocomplete" style="width: 200px">
        <input id="myInput" type="text" name="myCity" placeholder="City" onclick="select()" />
      </div>
      <input style="margin-left:-15px" type="submit" value="Go!" />
    </form>
  `  );
  form.onsubmit = () => {
    let c = mBy('myInput').value.toLowerCase();
    let o = Geo.cities[c];
    if (nundef(o)) { c = toUmlaut(c); o = Geo.cities[c]; }
    console.log('c', c);
    let center = o.center;
    M.map.flyTo(center, M.map.getZoom(), { animate: false })
  }
  let d = mAppend(dParent, form);
  autocomplete('myInput', get_values(Geo.cities).map(x => x.name));
}
function maxFit(olist, prop, min, max) {
  let res = 0;
  for (const d of olist) {
    res = Math.max(res, d[prop]);
  }
  if (res < min) res = min; else if (res > max) res = max;
  return res;
}
function mBackground(bg, fg) { mStyle(document.body, { bg: bg, fg: fg }); }
function mBare(n, R, uidParent) {
  let ui;
  let dParent = mBy(n.idUiParent);
  ui = mDiv(dParent);
  if (isdef(n.content)) { mNode(n.content, ui) }
  return ui;
}
function mBg(d, color) { d.style.backgroundColor = color; }
function mBox(w, h, color, dParent = null) { let d = mDiv(dParent); return mStyle(d, { 'background-color': color, position: 'absolute', display: 'inline', width: w, height: h }); }
function mBoxFromMargins(dParent, t, r, b, l, styles, id, inner, classes) {
  let d = mDiv(dParent, { position: 'absolute', top: t, right: r, bottom: b, left: l }, id, inner, classes);
  let pos = dParent.style.position;
  if (pos != 'absolute') dParent.style.position = 'relative';
  if (isdef(styles)) mStyle(d, styles);
  return d;
}
function mButton(caption, handler, dParent, styles, classes, id) {
  let x = mCreate('button');
  x.innerHTML = caption;
  if (isdef(handler)) x.onclick = handler;
  if (isdef(dParent)) toElem(dParent).appendChild(x);
  if (isdef(styles)) mStyle(x, styles);
  if (isdef(classes)) mClass(x, classes);
  if (isdef(id)) x.id = id;
  return x;
}
function mButtonX(dParent, handler, pos = 'tr', sz = 25, color = 'white') {
  let d2 = mDiv(dParent, { fg: color, w: sz, h: sz, cursor: 'pointer' }, null, `<i class="fa fa-times" style="font-size:${sz}px;"></i>`, 'btnX');
  mPlace(d2, pos, 2);
  d2.onclick = handler;
  return d2;
}
function mBy(id) { return document.getElementById(id); }
function mById(id) { return document.getElementById(id); }
function mCancelMagnify(img, path) {
  if (isdef(MAGNIFIER_IMAGE)) { MAGNIFIER_IMAGE.remove(); MAGNIFIER_IMAGE = null; }
}
function mCanvas(dParent, styles = {}, bstyles = {}, play = null, pause = null, origin = 'tl') {
  let cv = mCreate('canvas');
  mAppend(toElem(dParent), cv);
  addKeys({ w: 500, h: 500, bg: '#222', rounding: 10 }, styles);
  mStyle(cv, styles);
  let [w, h] = [cv.width, cv.height] = [styles.w, styles.h];
  let cx = cv.getContext('2d');
  let [x, y] = posToPoint(origin, w, h);
  cx.translate(x, y);
  if (!play) return { cv: cv, cx: cx, origin: { x: x, y: y }, x: 0, y: 0, w: w, h: h };
  mLinebreak(dParent)
  addKeys({ fz: 28, fg: 'skyblue', display: 'flex', ajcenter: true, w: styles.w }, bstyles)
  let controls = mPlayPause(dParent, bstyles, play, pause);
  return { cv: cv, cx: cx, origin: { x: x, y: y }, x: 0, y: 0, w: w, h: h, controls: controls.ui, play: controls.play, pause: controls.pause, stop: controls.play, stop: controls.pause };
}
function mCanvas100(dParent) { let d = mDiv(dParent); mStyleX(d, { position: 'absolute', w: '100%', h: '100%' }); return d; }
function mCard(dParent, styles, classtr = '', id = null) {
  let classes = toWords("card300 wb " + classtr);
  return mDiv(dParent, styles, id, null, classes);
}
function mCard52(n, R, uidParent) {
  let dParent = mBy(n.idUiParent);
  console.log('...MCARD52')
  let ui;
  let w, h;
  if (n.params.size) { w = n.params.size.w; h = n.params.size.h; }
  else[w, h] = [70, 110];
  if (nundef(n.content)) ui = cardFace({}, w, h);
  else {
    if (isDict(n.content)) {
      let o = n.content;
      let rank = isdef(o.rank) ? o.rank : null;
      let key = isdef(o.key) ? o.key : null;
      let suit = isdef(o.suit) ? o.suit : null;
      let cardKey = isdef(o.cardKey) ? o.cardKey : null;
      ui = cardFace({ rank: rank, suit: suit, key: key, cardKey: cardKey }, w, h);
    } else if (isString(n.content)) {
      let s = n.content;
      let len = s.length;
      if (len == 1) ui = cardFace({ rank: s }, w, h);
      else if (len == 2) {
        ui = cardFace({ cardKey: s }, w, h);
      } else ui = cardFace({ key: s }, w, h);
    }
  }
  mAppend(dParent, ui);
  n.potentialOverlap = true;
  return ui;
}
function mCard52_Wrapper(n, R, uidParent) {
  let dParent = mBy(n.idUiParent);
  let uiWrapper = mDiv(dParent);
  addClass(uiWrapper, 'cardWrapper');
  let ui;
  let w, h;
  if (n.params.size) { w = n.params.size.w; h = n.params.size.h; }
  else[w, h] = [70, 110];
  if (nundef(n.content)) ui = cardFace({}, w, h);
  else {
    if (isDict(n.content)) {
      let o = n.content;
      let rank = isdef(o.rank) ? o.rank : null;
      let key = isdef(o.key) ? o.key : null;
      let suit = isdef(o.suit) ? o.suit : null;
      let cardKey = isdef(o.cardKey) ? o.cardKey : null;
      ui = cardFace({ rank: rank, suit: suit, key: key, cardKey: cardKey }, w, h);
    } else if (isString(n.content)) {
      let s = n.content;
      let len = s.length;
      if (len == 1) ui = cardFace({ rank: s }, w, h);
      else if (len == 2) {
        ui = cardFace({ cardKey: s }, w, h);
      } else ui = cardFace({ key: s }, w, h);
    }
  }
  mAppend(uiWrapper, ui);
  return ui;
}
function mCardButton(caption, handler, dParent, styles, classtr = '', id = null) {
  let classes = toWords("card300 wb fett no_outline btn" + classtr);
  return mButton(caption, handler, dParent, styles, classes, id);
}
function mCardText(ckey, sz, color) { return is_jolly(ckey) ? '<span style="font-family:Algerian">jolly</span>' : `${ckey[0]}${mSuit(ckey, sz, color)}`; }
function mCellContent(dCell, styles, html) {
  clearElement(dCell);
  let d = mDiv(dCell, { w: '100%', h: '100%' });
  mCenterCenterFlex(d);
  let d1 = mDiv(d, styles, null, html);
  mCenterCenterFlex(d1);
  return d1;
}
function mCenter(d, gap) { mCenterFlex(d, true, false, true, gap); }
function mCenterAbs(d, offsetX = 0, offsetY = 0) {
  let dParent = d.parentNode;
  if (nundef(dParent)) return;
  let b = getBounds(dParent);
  let b1 = getBounds(d);
  let h = b.height;
  let h1 = b1.height;
  let hdiff = h - h1;
  d.style.top = (offsetY + hdiff / 2) + 'px';
  let w = b.width;
  let w1 = b1.width;
  let wdiff = w - w1;
  d.style.left = (offsetX + wdiff / 2) + 'px';
  d.style.position = 'absolute';
  if (isEmpty(dParent.style.position)) dParent.style.position = 'relative';
}
function mCenterAbs_v0(d) {
  let dParent = d.parentNode;
  if (nundef(dParent)) return;
  let b = getBounds(dParent);
  let b1 = getBounds(d);
  let h = b.height;
  let h1 = b1.height;
  let hdiff = h - h1;
  d.style.top = (hdiff / 2) + 'px';
  let w = b.width;
  let w1 = b1.width;
  console.log('zone w:', w, 'item w:', w1);
  let wdiff = w - w1;
  d.style.left = (wdiff / 2) + 'px';
  d.style.position = 'absolute';
  console.log('parent position', dParent.style.position)
  if (isEmpty(dParent.style.position)) dParent.style.position = 'relative';
  console.log('d', d)
}
function mCenterAt(d, x, y) {
  let rect = getRect(d);
  mPos(d, x - rect.w / 2, y - rect.h / 2);
}
function mCenterCenter(d, gap) { mCenterCenterFlex(d, gap); }
function mCenterCenterFlex(d, gap) { mCenterFlex(d, true, true, true, gap); }
function mCenteredNode(content) {
  let d = mNode(content);
  return d;
}
function mCenterFlex(d, hCenter = true, vCenter = false, wrap = true, gap = null) {
  let styles = { display: 'flex' };
  if (hCenter) styles['justify-content'] = 'center';
  styles['align-content'] = vCenter ? 'center' : 'flex-start';
  if (wrap) styles['flex-wrap'] = 'wrap';
  if (gap) styles.gap = gap;
  mStyle(d, styles);
}
function mCenterFlexNowrap(d) { mCenterFlex(d, true, true, false); }
function mCenterH(d) {
  let dParent = d.parentNode;
  let b = getBounds(dParent);
  let h = b.width;
  let b1 = getBounds(d);
  let h1 = b1.width;
  let diff = h - h1;
  d.style.marginleft = (diff / 2) + 'px';
}
function mCenterText(d) { d.style.textAlign = 'center'; }
function mCenterV(d) {
  let dParent = d.parentNode;
  let b = getBounds(dParent);
  let h = b.height;
  let b1 = getBounds(d);
  let h1 = b1.height;
  let diff = h - h1;
  d.style.marginTop = (diff / 2) + 'px';
}
function mCheckbox(label, val, dParent, handler, styles) {
  styles.align = 'left';
  let d = mDiv(dParent, styles);
  let hpad = valf(styles.hpadding, 4);
  let dLabel = mDiv(d, { w: '40%', align: 'right', hpadding: hpad, display: 'inline-block' }, null, label);
  let d2 = mDiv(d, { display: 'inline', w: '50%', hpadding: hpad });
  let inp = createElementFromHTML(
    `<input type="checkbox" class="checkbox" ` + (val === true ? 'checked=true' : '') + ` >`);
  mAppend(d2, inp);
  inp.onchange = (ev) => { handler(inp.checked, ev); };
  return inp;
}
function mCheckbox_dep(label, val, dParent, styles = {}, id) {
  let d = mDiv(dParent, { display: 'inline-block', align: 'left' });
  let inp = createElementFromHTML(
    `<input type="checkbox" class="checkbox" ${(val === true ? 'checked=true' : '')} >`
  );
  if (isdef(id)) inp.id = id;
  let labelui = createElementFromHTML(`<label>${label}</label>`);
  mAppend(d, labelui);
  mAppend(labelui, inp);
  mStyleX(inp, styles);
  mClass(inp, 'input');
  return inp;
}
function mCheckit(elem, sz = 50) {
  if (nundef(sz)) sz = getRect(elem).h;
  let d = markerSuccess();
  mpOver(d, elem, sz * (4 / 5), 'limegreen', 'segoeBlack');
  mMoveBy(d, 0, -4);
  return d;
}
function mCircle(dParent, x, y, rad, color) {
  let d = mDiv(dParent, { w: 2 * rad, h: 2 * rad, bg: color, rounding: '50%' });
  mCenterAt(d, x, y);
  return d;
}
function mClass(d) {
  d = toElem(d);
  if (arguments.length == 2) {
    let arg = arguments[1];
    if (isString(arg) && arg.indexOf(' ') > 0) { arg = [toWords(arg)]; }
    else if (isString(arg)) arg = [arg];
    if (isList(arg)) {
      for (let i = 0; i < arg.length; i++) {
        d.classList.add(arg[i]);
      }
    }
  } else for (let i = 1; i < arguments.length; i++) d.classList.add(arguments[i]);
}
function mClass0(d) { d = toElem(d); d.className = ''; }
function mClasses(d, lst) { for (let i = 1; i < lst.length; i++) d.classList.add(lst[i]); }
function mClassOnly(d, s) { d.className = s; }
function mClassRemove(d) { d = toElem(d); for (let i = 1; i < arguments.length; i++) d.classList.remove(arguments[i]); }
function mClassReplace(d, weg, her) { mClassRemove(d, weg); mClass(d, her); }
function mClassToggle(d, classes) {
  let wlist = toWords(classes);
  d = toElem(d);
  for (const c of wlist) if (d.classList.contains(c)) mClassRemove(d, c); else mClass(d, c);
}
function mClear(d) { clearElement(toElem(d)); }
function mColFlex(dParent, chflex = [1, 5, 1], bgs) {
  let styles = { opacity: 1, display: 'flex', aitems: 'stretch', 'flex-flow': 'nowrap' };
  mStyle(dParent, styles);
  let res = [];
  for (let i = 0; i < chflex.length; i++) {
    let bg = isdef(bgs) ? bgs[i] : null;
    let d1 = mDiv(dParent, { flex: chflex[i], bg: bg });
    res.push(d1);
  }
  return res;
}
function mColor(d, bg, fg) { return mStyle(d, { 'background-color': bg, 'color': fg }); }
function mColorLetters(s, brightness) {
  return toLetters(s).map(x => `<div style='display:inline-block;transform:rotate(${rChoose([10, 5, -10, -5])}deg);color:${rColor(brightness)}'>${x == ' ' ? '&nbsp;' : x}</div>`).join('');
}
function mColorPicker0(dParent, palette, onColor) {
  let dPalette = mDiv(dParent, { margin: 4 }); mFlex(dPalette);
  let items = [];
  for (const c of palette) {
    dColor = mDiv(dPalette, { display: 'inline-block', w: 50, h: 50, bg: c, rounding: 4, margin: 4 });
    let item = { color: c, isSelected: false };
    iAdd(item, { div: dColor });
    items.push(item);
  }
  let picker = { div: dPalette, selected: null, items: items };
  for (const item of items) {
    iDiv(item).onclick = (ev) => {
      console.log('click!!!', ev.target);
      picker.selectedItem = iToggleSingleSelection(item, items);
      onColor(item.color);
    }
  }
  return picker;
}
function mColorPicker1(dParent, palette, onColor) {
  let dPalette = mDiv(dParent, { margin: 4 }); mFlex(dPalette);
  let items = [];
  for (const c of palette) {
    dColor = mDiv(dPalette, { display: 'inline-block', w: 50, h: 50, bg: c, rounding: 4, margin: 4 });
    let item = { color: c, isSelected: false };
    iAdd(item, { div: dColor });
    items.push(item);
  }
  let picker = { div: dPalette, selected: null, items: items };
  for (const item of items) {
    iDiv(item).onclick = (ev) => {
      console.log('click!!!', ev.target);
      picker.selectedItem = iToggleSingleSelection(item, items);
      onColor(item.color);
    }
  }
  let elem = mCreate('input'); mAppend(dPalette, elem);
  let alphaPicker = new JSColor(elem, {});
  let alphaItem = { isSelected: false };
  alphaPicker.onChange = () => { alphaItem.color = elem.value; onColor(elem.value); }
  alphaItem.picker = alphaPicker;
  iAdd(alphaItem, { div: elem });
  items.push(alphaItem);
  return picker;
}
function mColorPicker2(dParent, palette, onColor, initialColor) {
  let elem = mDiv(dParent, { w: 50, h: 50, display: 'inline-block' });
  let picker = new JSColor(elem, {
    alpha: 'ff',
    closeButton: true,
    value: initialColor,
    palette: palette,
  });
  picker.onInput = () => { let c = picker.toHEXAString(); onColor(c); console.log('picked', c); }
  return picker;
}
function mColorPicker3(elem, palette, onColor, initialColor) {
  let picker = new JSColor(elem, {
    alpha: 'ff',
    closeButton: true,
    value: initialColor,
    palette: palette,
  });
  picker.onInput = () => { let c = picker.toHEXAString(); onColor(c); console.log('picked', c); }
  return picker;
}
function mColorPickerBehavior(value, targetImage, elem, handler) {
  let hues = arrTake(colorHueWheel(value), 10);
  let colorPalette = hues.map(x => colorFrom(colorHSLBuild(x)));
  let palette = isdef(targetImage) ? colorPaletteFromImage(targetImage) : colorPalette;
  mStyle(elem, { bg: value });
  let inp = new JSColor(elem, { alpha: 'ff', closeButton: true, value: value, palette: palette, });
  inp.onInput = () => { let c = inp.toHEXAString(); handler(c); }
  return inp;
}
function mColorPickerControl(label, value, targetImage, dParent, handler, styles = { hpadding: 25 }) {
  let d = mDiv(dParent, styles);
  let hpad = valf(styles.hpadding, 6);
  let dLabel = mDiv(d, { 'vertical-align': 'top', w: '35%', align: 'right', hpadding: hpad, display: 'inline-block' }, null, label);
  let hues = arrTake(colorHueWheel(value), 10);
  let colorPalette = hues.map(x => colorFrom(colorHSLBuild(x)));
  let palette = isdef(targetImage) ? colorPaletteFromImage(targetImage) : colorPalette;
  let elem = mDiv(d, { w: '55%', hpadding: hpad, h: 24, rounding: hpad, display: 'inline-block' });
  let inp = new JSColor(elem, {
    alpha: 'ff',
    closeButton: true,
    value: value,
    palette: palette,
  });
  inp.onInput = () => { let c = inp.toHEXAString(); handler(c); }
  return inp;
}
function mColorX(d, bg, fg) {
  [bg, fg] = getExtendedColors(bg, fg);
  return mColor(d, bg, fg);
}
function mCols(dParent, arr, itemStyles = { bg: 'random' }, rowStyles, colStyles, akku) {
  let d0 = mDiv100(dParent, { display: 'flex', 'justify-content': 'space-between' });
  if (isdef(colStyles)) mStyle(d0, colStyles);
  for (let i = 0; i < arr.length; i++) {
    let content = arr[i];
    if (isList(content)) {
      d1 = mDiv(d0);
      mRows(d1, content, itemStyles, rowStyles, colStyles, akku);
    } else {
      d1 = mContent(content, d0, itemStyles);
      akku.push(d1);
    }
  }
}
function mCols100(dParent, spec, gap = 4) {
  let grid = mDiv(dParent, { padding: gap, gap: gap, box: true, display: 'grid', h: '100%', w: '100%' })
  grid.style.gridTemplateColumns = spec;
  let res = [];
  for (const i of range(stringCount(spec, ' ') + 1)) {
    let d = mDiv(grid, { h: '100%', w: '100%', box: true })
    res.push(d);
  }
  return res;
}
function mColsX(dParent, arr, itemStyles = { bg: 'random' }, rowStyles, colStyles, akku) {
  let d0 = mDiv100(dParent, { display: 'flex', 'justify-content': 'space-between' });
  if (isdef(colStyles)) mStyle(d0, colStyles);
  for (let i = 0; i < arr.length; i++) {
    let content = arr[i];
    if (isList(content)) {
      d1 = mDiv(d0);
      mRowsX(d1, content, itemStyles, rowStyles, colStyles, akku);
    } else {
      d1 = mContentX(content, d0, itemStyles);
      akku.push(d1);
    }
  }
}
function mConfine(n, modul, min, max) {
  rem = n % modul; n = n - rem;
  while (n < min) n += modul;
  while (n > max) n -= modul;
  return n;
}
function mContainer(d, styles = {}) {
  let defOuterStyles = {
    display: 'inline-flex', 'flex-direction': 'column',
    'justify-content': 'center', 'align-items': 'center', 'vertical-align': 'top',
    padding: 0, box: true
  };
  addKeys(d, defOuterStyles);
  mStyleX(d, styles);
}
function mContainerSplay(d, splay, w, h, num, ov) {
  if (nundef(splay)) splay = 2;
  if (!isNumber(splay)) splay = get_splay_number(splay);
  if (isString(ov) && ov[ov.length - 1] == '%') ov = splay == 0 ? 1 : splay == 3 ? Number(ov) * h / 100 : Number(ov) * w / 100;
  if (splay == 3) {
    d.style.display = 'grid';
    d.style.gridTemplateRows = `repeat(${num},${ov}px)`;
    console.log('HAAAAAAAAAAAALLLLLLLLLLLLLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOOOOOOOOO')
    d.style.minHeight = `${h + (num - 1) * (ov * 1.1)}px`;
  } else if (splay == 2 || splay == 1) {
    d.style.display = 'grid';
    d.style.gridTemplateColumns = `repeat(${num},${ov}px)`;
    let wnew = w + (num - 1) * (ov * 1.1);
    d.style.minWidth = `${w + (num - 1) * (ov * 1.1)}px`;
  } else if (splay == 0) {
    d.style.display = 'grid'; ov = .5
    d.style.gridTemplateColumns = `repeat(${num},${ov}px)`;
    d.style.minWidth = `${w + (num - 1) * (ov * 1.1)}px`;
  } else if (splay == 5) {
    d.style.display = 'grid';
    d.style.gridTemplateColumns = `${ov}px repeat(${num - 1},${ov / 2}px)`;
    d.style.minWidth = `${w + (num) * (ov / 2 * 1.1)}px`;
  } else if (splay == 4) {
    d.style.position = 'relative';
    if (nundef(ov)) ov = .5;
    d.style.minWidth = `${w + (num - 1) * (ov * 1.1)}px`;
    d.style.minHeight = `${h + (num - 1) * (ov * 1.1)}px`;
  }
}
function mContainerSplay_WORKS(d, splay, w, h, num, ov) {
  if (!isNumber(splay)) splay = get_splay_number(splay);
  if (isString(ov) && ov[ov.length - 1] == '%') ov = splay == 0 ? 1 : splay == 3 ? Number(ov) * h / 100 : Number(ov) * w / 100;
  if (splay == 3) {
    d.style.display = 'grid';
    d.style.gridTemplateRows = `repeat(${num},${ov}px)`;
    d.style.height = `${h + (num - 1) * (ov * 1.1)}px`;
  } else if (splay == 2 || splay == 1) {
    d.style.display = 'grid';
    d.style.gridTemplateColumns = `repeat(${num},${ov}px)`;
    d.style.width = `${w + (num - 1) * (ov * 1.1)}px`;
  } else if (splay == 0) {
    d.style.display = 'grid'; ov = .5
    d.style.gridTemplateColumns = `repeat(${num},${ov}px)`;
    d.style.width = `${w + (num - 1) * (ov * 1.1)}px`;
  } else if (splay == 4) {
    d.style.position = 'relative';
    if (nundef(ov)) ov = .5;
    d.style.width = `${w + (num - 1) * (ov * 1.1)}px`;
    d.style.height = `${h + (num - 1) * (ov * 1.1)}px`;
  }
}
function mContent(content, dParent, styles) {
  let d1 = isdef(Syms[content]) ? mSymInDivShrink(content, dParent, styles) : mDiv(dParent, styles, null, content);
  return d1;
}
function mContentX(content, dParent, styles = { sz: Card.sz / 5, fg: 'random' }) {
  let [key, scale] = isDict(content) ? [content.key, content.scale] : [content, 1];
  if (scale != 1) { styles.transform = `scale(${scale},${Math.abs(scale)})`; }
  let dResult = mDiv(dParent);
  let ds = isdef(Syms[key]) ? mSym(key, dResult, styles) : mDiv(dResult, styles, null, key);
  return dResult;
}
function mCreate(tag, styles, id) { let d = document.createElement(tag); if (isdef(id)) d.id = id; if (isdef(styles)) mStyle(d, styles); return d; }
function mcreate_map(opts) {
  let center = M.center = valf(opts.center, Geo.places.tuerkenschanzpark);
  let zoom = M.zoom = valf(opts.zoom, 19);
  let [minzoom, maxzoom] = [M.minzoom, M.maxzoom] = [2, 19];
  let map = mget_map(center, zoom);
  mset_bounds(minzoom, maxzoom);
  mset_layers(opts.base, opts.overlay);
  return map;
}
function mCreateFrom(htmlString) {
  var div = document.createElement('div');
  div.innerHTML = htmlString.trim();
  return div.firstChild;
}
function mDataTable(reclist, dParent, rowstylefunc, headers, id, showheaders = true) {
  if (nundef(headers)) headers = get_keys(reclist[0]);
  let t = mTable(dParent, headers, showheaders);
  if (isdef(id)) t.id = `t${id}`;
  let rowitems = [];
  let i = 0;
  for (const u of reclist) {
    let rid = isdef(id) ? `r${id}_${i}` : null;
    r = mTableRow(t, u, headers, rid);
    if (isdef(rowstylefunc)) mStyle(r.div, rowstylefunc(u));
    rowitems.push({ div: r.div, colitems: r.colitems, o: u, id: rid, index: i });
    i++;
  }
  return { div: t, rowitems: rowitems };
}
function mDefault(n, R, area) {
  let ui;
  let dParent = mBy(n.idUiParent);
  ui = mDiv(dParent);
  if (isdef(n.content)) {
    let d;
    if (n.type != 'manual00') d = mNode(n.content, ui, n.title, isSizedNode(n));
    else d = mNode(n.content, ui, n.title);
    if (isdef(n.params['text-align'])) d.style.textAlign = n.params['text-align'];
  }
  if (n.type != 'manual00') addClassInfo(ui, n);
  return ui;
}
function mDestroy(elem) { if (isString(elem)) elem = mById(elem); purge(elem); }
function mDictionary(o, { dParent, title, flattenLists = true, className = 'node', omitEmpty = false } = {}) {
  let oCopy = jsCopy(o);
  let d = mCreate('div');
  if (isdef(className)) mClass(d, className);
  mYaml(d, oCopy);
  let pre = d.getElementsByTagName('pre')[0];
  pre.style.fontFamily = 'inherit';
  if (isdef(title)) mInsert(d, mText(title));
  if (isdef(dParent)) mAppend(dParent, d);
  return d;
}
function mDictionary_dep(o, { dParent, title, flattenLists = true, className = 'node', omitEmpty = false } = {}) {
  let oCopy = jsCopy(o);
  if (flattenLists) { recFlattenLists(oCopy); }
  let d = mCreate('div');
  if (isdef(className)) mClass(d, className);
  mYaml(d, oCopy);
  let pre = d.getElementsByTagName('pre')[0];
  pre.style.fontFamily = 'inherit';
  if (isdef(title)) mInsert(d, mText(title));
  if (isdef(dParent)) mAppend(dParent, d);
  return d;
}
function mDisable(elem) { elem = toElem(elem); mStyle(elem, { cursor: 'default', opacity: 0 }); }
function mDiv(dParent, styles, id, inner, classes, sizing) {
  dParent = toElem(dParent);
  let d = mCreate('div');
  if (dParent) mAppend(dParent, d);
  if (isdef(styles)) mStyle(d, styles);
  if (isdef(classes)) mClass(d, classes);
  if (isdef(id)) d.id = id;
  if (isdef(inner)) d.innerHTML = inner;
  if (isdef(sizing)) { setRect(d, sizing); }
  return d;
}
function mDiv100(dParent, styles, id, sizing = false) { let d = mDiv(dParent, styles, id); mSize(d, 100, 100, '%', sizing); return d; }
function mDivCenteredAt(pt, dParent, styles = {}, id, inner, classes) {
  [w, h] = detect_size_from_styles(styles);
  addKeys({ position: 'relative' }, dParent);
  copyKeys({ position: 'absolute', x: w / 2, y: h / 2 }, styles);
  return mDiv(dParent, styles, id, inner, classes);
}
function mDivG(area, w, h, color) {
  let d = mDiv(mBy('table'));
  if (isdef(w)) mSize(d, w, h);
  if (isdef(color)) mColor(d, color);
  let g = aSvgg(d);
  return g;
}
function mDivItem(dParent, styles, id, content) {
  if (nundef(id)) id = getUID();
  let d = mDiv(dParent, styles, id, content);
  return mItem(id, { div: d });
}
function mDivLine(dParent, styles = {}, id = null, innerlist = ['', '', ''], classes = null) {
  addKeys({ w: '100%', box: true, padding: 4 }, styles);
  let d = mDiv(dParent, styles, id, `<div>${innerlist[0]}</div><div>${innerlist[1]}</div><div>${innerlist[2]}</div>`, classes);
  mStyle(d, { display: 'flex', 'justify-content': 'space-between', 'align-items': 'center' });
  return d;
}
function mDivLR(dParent, styles, id, innerlist, classes) {
  let d = mDiv(dParent, styles, id, `<div>${innerlist[0]}</div><div>${innerlist[1]}</div>`, classes);
  mStyle(d, { display: 'flex', 'justify-content': 'space-between', 'align-items': 'center' });
  return d;
}
function mDivPosAbs(x = 0, y = 0, dParent = null) { let d = mCreate('div'); if (dParent) mAppend(dParent, d); mPos(d, x, y); return d; }
function mDivPosRel(x = 0, y = 0, dParent = null) { let d = mCreate('div'); if (dParent) mAppend(dParent, d); mPosRel(d, x, y); return d; }
function mDivRestOfPage(dParent, dAbove, styles, id, inner, classes, sizing) {
  let d = mDiv(dParent, styles, id, inner, classes, sizing);
  let fSize = () => {
    let top = getRect(dAbove).h;
    console.log('top', top, '?');
    let h = window.innerHeight - (isNumber(top) ? top : 31);
    mSize(d, '100%', h);
    setRect(d);
    console.log('d', d);
  };
  new ResizeObserver(() => {
    let r = getRect(dAbove);
    console.log('haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaar', r);
    fSize();
  }).observe(dAbove);
  window.onresize = fSize;
  return d;
}
function mDivSvg(area, w, h, color) {
  let d = mDiv(mBy('table'));
  if (isdef(w)) mSize(d, w, h);
  if (isdef(color)) mColor(d, color);
  let g = aSvgg(d);
  return g;
}
function mdo(o, p, d) {
  p = { x: p.x, y: p.y + d };
  if (o) o.setPos(p.x, p.y);
  return p;
}
function mDom(dParent, styles = {}, opts = {}) {
  let tag = valf(opts.tag, 'div');
  let d = document.createElement(tag);
  mAppend(dParent, d);
  if (tag == 'textarea') styles.wrap = 'hard';
  const aliases = {
    classes: 'className',
    inner: 'innerHTML',
    html: 'innerHTML',
  };
  for (const opt in opts) { d[valf(aliases[opt], opt)] = opts[opt] };
  mStyle(d, styles);
  return d;
}
function mDom100(dParent, styles, opts) {
  if (nundef(styles.w) && nundef(styles.wrest)) addKeys({ w100: true }, styles);
  if (nundef(styles.h) && nundef(styles.hrest)) addKeys({ h100: true }, styles);
  return mDom(dParent, styles, opts);
}
function mDomRest(dParent, styles, opts) {
  if (nundef(styles.w) && nundef(styles.w100)) addKeys({ wrest: true }, styles);
  if (nundef(styles.h) && nundef(styles.h100)) addKeys({ hrest: true }, styles);
  return mDom(dParent, styles, opts);
}
function mDover(dParent, styles = {}, sizing = true) {
  let d = mDiv(dParent, styles);
  mIfNotRelative(dParent);
  mStyle(d, { position: 'absolute', left: 0, top: 0, w: '100%', h: '100%' });
  setRect(d, sizing);
  return d;
}
function mDraggable(item) {
  let d = iDiv(item);
  d.draggable = true;
  d.ondragstart = drag;
}
function mDropImage(e, img) {
  var dt = e.dataTransfer;
  console.log('dropped', dt)
  var files = dt.files;
  if (files.length) {
    let imgFile = files[0];
    var reader = new FileReader();
    reader.onload = function (e) {
      img.src = e.target.result;
      imgFile.data = e.target.result;
    }
    reader.readAsDataURL(imgFile);
  } else {
    console.log('dropped on', e.target, 'img', img);
    clearElement(img);
    var html = dt.getData('text/html');
    console.log('__________dataTransfer', html);
    let match = html && /\bsrc="?([^"\s]+)"?\s*/.exec(html);
    let url = match && match[1];
    if (url) {
      console.log('JA!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
      img.onerror = function () {
        alert("Error in uploading");
      }
      img.crossOrigin = "";
      img.src = url;
    }
  }
}
function mDroppable(item, handler, dragoverhandler) {
  let d = iDiv(item);
  d.ondragover = isdef(dragoverhandler) ? dragoverhandler : default_allowDrop;
  d.ondrop = handler;
}
function measure_fieldset(fs) {
  let legend = fs.firstChild;
  let r = getRect(legend);
  let labels = fs.getElementsByTagName('label');
  let wmax = 0;
  for (const l of labels) {
    let r1 = getRect(l);
    wmax = Math.max(wmax, r1.w);
  }
  let wt = r.w;
  let wo = wmax + 24;
  let diff = wt - wo;
  if (diff >= 10) {
    for (const l of labels) { let d = l.parentNode; mStyle(d, { maleft: diff / 2 }); }
  }
  let wneeded = Math.max(wt, wo) + 10;
  mStyle(fs, { wmin: wneeded });
  for (const l of labels) { let d = l.parentNode; mStyle(l, { display: 'inline-block', wmin: 50 }); mStyle(d, { wmin: wneeded - 40 }); }
}
function measureDefaultPlayerElement(plms) {
  let elem = plms.elem;
  let w = $(elem).width();
  if (nundef(S.vars.wDefaultPlayer)) S.vars.wDefaultPlayer = w;
  else if (w > S.vars.wDefaultPlayer) S.vars.wDefaultPlayer = w;
}
function measureDomel(mobj) {
  let el = mobj.elem;
  let info = window.getComputedStyle(el, null);
  mobj.x = getAsInt(mobj, info, 'left');
  mobj.y = getAsInt(mobj, info, 'top');
  mobj.w = getAsInt(mobj, info, 'width');
  mobj.h = getAsInt(mobj, info, 'height');
  mobj.bg = info.backgroundColor;
  mobj.fg = info.color;
  return [mobj.x, mobj.y, mobj.w, mobj.h];
}
function measureElem(ms) {
  let el = ms.elem;
  ms.w = el.offsetWidth; ms.h = el.offsetHeight; ms.x = el.offsetLeft; ms.y = el.offsetTop;
  return [ms.x, ms.y, ms.w, ms.h];
}
function measureMSTree(root) {
  let divs = root.elem.getElementsByTagName('div');
  let divNames = [...divs].map(x => x.id);
  divNames = divNames.filter(x => !isEmpty(x));
  divNames.map(x => { measureDomel(UIS[x]) });
  let tabDivs = document.getElementById('a_d_testing').getElementsByClassName('divInTab');
  let correctTabName = 'a_d_objects';
  let correctMS = UIS[correctTabName];
  for (const div of [...tabDivs]) {
    let id = div.id;
    if (id == correctTabName) continue;
    let mobj = UIS[id];
    mobj.x = correctMS.x; mobj.y = correctMS.y; mobj.w = correctMS.w; mobj.h = correctMS.h;
  }
}
function measureText(text, styles = {}, cx = null) {
  if (!cx) {
    var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));
    cx = canvas.getContext('2d');
  }
  cx.font = isdef(styles.font) ? styles.font : `${styles.fz}px ${styles.family}`;
  var metrics = cx.measureText(text);
  return { w: metrics.width, h: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent };
}
function measureText1(text, fz, family, weight = 900) {
  console.log(text, fz, family)
  let sFont = '' + weight + ' ' + fz + 'px ' + family;
  sFont = sFont.trim();
  var canvas = document.createElement('canvas');
  var context = canvas.getContext('2d');
  context.font = sFont;
  var metrics = context.measureText(text);
  let actualHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
  return { w: metrics.width, h: actualHeight };
}
function measureTextX(text, fz, family, weight = 900) {
  let sFont = '' + weight + ' ' + fz + 'px ' + family;
  sFont = sFont.trim();
  var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement('canvas'));
  var context = canvas.getContext('2d');
  context.font = sFont;
  var metrics = context.measureText(text);
  let actualHeight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
  console.log(metrics.width, actualHeight, fz)
  return { w: metrics.width, h: actualHeight, fz: fz };
}
function measureWord(w, fz) { let styles = { fz: fz, family: 'arial' }; return getSizeWithStyles(w, styles); }
function mEdit(label, value, dParent, handler, styles, classes, id) {
  let d = mDiv(dParent, styles);
  let hpad = valf(styles.hpadding, 4);
  let dLabel = mDiv(d, { w: '50%', align: 'right', hpadding: hpad, display: 'inline-block' }, null, label);
  let inp = mCreateFrom(`<div contenteditable="true" spellcheck="false">${value}</div>  `)
  mAppend(d, inp);
  mStyle(inp, { display: 'inline-block', w: '50%', align: 'left', hpadding: hpad });
  inp.addEventListener('keydown', unfocusOnEnter);
  inp.addEventListener('focusout', ev => { handler(inp.innerHTML, ev); });
  inp.onclick = ev => selectText(ev.target);
  if (isdef(classes)) mClass(inp, classes);
  if (isdef(id)) inp.id = id;
  return inp;
}
function mEditableInput(dParent, label, val, styles, classes, id) {
  let labelElem = mCreateFrom(`<span>${label}</span>  `)
  let elem = mCreateFrom(`<span contenteditable="true" spellcheck="false">${val}</span>  `)
  elem.addEventListener('keydown', (ev) => {
    if (ev.key === 'Enter') {
      ev.preventDefault();
      mBy('dummy').focus();
    }
  });
  let dui = mDiv(dParent, { margin: 2 });
  mAppend(dui, labelElem);
  mAppend(dui, elem);
  if (isdef(styles)) {
    if (isdef(styles.wInput)) mStyle(elem, { wmin: styles.wInput });
    mStyle(elem, styles);
  }
  if (isdef(classes)) mStyle(elem, classes);
  if (isdef(id)) elem.id = id;
  return elem;
}
function mEditableOnEdited(id, dParent, label, initialVal, onEdited, onOpening, styles, classes) {
  let inp = mEditableInput(dParent, label, initialVal, styles, classes);
  inp.id = id;
  if (isdef(onOpening)) { inp.addEventListener('focus', ev => onOpening(ev)); }
  inp.addEventListener('focusout', ev => {
    window.getSelection().removeAllRanges();
    if (isdef(onEdited)) onEdited(inp.innerHTML, ev);
  });
  return inp;
}
function mEditNumber(label, value, dParent, handler, styles, classes, id, triggerOnChange = false) {
  let d = mDiv(dParent, styles);
  let hpad = valf(styles.hpadding, 4);
  let dLabel = mDiv(d, { w: '50%', align: 'right', hpadding: hpad, display: 'inline-block' }, null, label);
  if (nundef(handler)) handler = x => console.log(x);
  let inp = mCreateFrom(`<div contenteditable="true" spellcheck="false">${value}</div>  `)
  mAppend(d, inp);
  mStyle(inp, { display: 'inline-block', w: '40%', align: 'left', hpadding: hpad });
  inp.addEventListener('keydown', unfocusOnEnter);
  inp.addEventListener('focusout', ev => { handler(inp.innerHTML, ev); });
  inp.onclick = ev => selectText(ev.target);
  if (isdef(classes)) mClass(inp, classes);
  if (isdef(id)) inp.id = id;
  return inp;
}
function mEditRange(label, value, min, max, step, dParent, handler, styles, classes, id, triggerOnChange = true) {
  let d = mDiv(dParent, styles);
  let hpad = valf(styles.hpadding, 4);
  let dLabel = mDiv(d, { w: '30%', align: 'right', hpadding: hpad, display: 'inline-block' }, null, label);
  let inpText = mCreateFrom(`<input type='number'  step=${step} min="${min}" max="${max}" value="${value}" ></input>`);
  let inp = mCreateFrom(`<input type="range" step=${step} min="${min}" max="${max}" value="${value}" ></input>`);
  mAppend(d, inpText);
  mAppend(d, inp);
  mStyle(inpText, { display: 'inline', w: '20%', align: 'left', hpadding: hpad });
  mStyle(inp, { display: 'inline', w: '40%', hpadding: hpad });
  inpText.onchange = (ev) => { inp.value = inpText.value; handler(inpText.value, ev); };
  inpText.onclick = ev => selectText(ev.target);
  inp.onchange = (ev) => { inpText.value = inp.value; handler(inpText.value, ev); };
  if (isdef(classes)) mClass(inp, classes);
  if (isdef(id)) inp.id = id;
  return inpText;
}
function mEditX(label, val, dParent, styles, classes, handler, id, opt = {}) {
  let defOptions = {
    alignLabel: 'right',
    fgLabel: 'silver',
    wminLabel: 120,
    alignInput: 'left',
    fgInput: 'white',
    wminInput: 50,
    wminRight: 120,
    align: 'center',
  }
  addKeys(defOptions, opt);
  let wminTotal = wminLabel + wminRight;
  if (nundef(styles)) styles = {};
  if (nundef(styles.wmin)) styles.wmin = 0;
  styles.wmin = Math.max(styles.wmin, wminTotal);
  styles.align = opt.align;
  let dOuter = mDiv(dParent, styles, id, null, classes);
  let dLabel = mDiv(dOuter, { fg: opt.fgLabel, wmin: opt.wminLabel, align: opt.alignLabel }, null, label);
  let dInput = mDiv(dOuter, { contenteditable: true, spellcheck: false, fg: opt.fgInput, wmin: opt.wminInput, align: opt.alignInput }, null, val);
  dInput.onfocusout = ev => handler(dInput.innerHTML, ev);
  dInput.onkeydown = (ev) => {
    if (ev.key === 'Enter') {
      ev.preventDefault();
      mBy('dummy').focus();
    }
  }
  return dInput;
}
function mEnable(elem) { elem = toElem(elem); mStyle(elem, { cursor: 'pointer', opacity: 1 }); }
function mEnsure(d) { return isString(d) ? mById(d) : d; }
function menu_disable(key, elem) {
  let d = menu_find_elem(key, elem);
  if (d) {
    mClassRemove(d, 'enabled');
    mClass(d, 'disabled');
    d.setAttribute('enabled', false);
  }
}
function menu_enable(key, elem) {
  let d = menu_find_elem(key, elem);
  if (d) {
    mClassRemove(d, 'disabled');
    mClass(d, 'enabled');
    d.setAttribute('enabled', true);
  }
}
function menu_enabled(key, elem) {
  let d = menu_find_elem(key, elem);
  return d ? mHasClass(d, 'enabled') : false;
}
function menu_find_elem(key, elem) {
  elem = isdef(elem) ? elem : isdef(mBy('label_' + key)) ? mBy('label_' + key) : isdef(mBy(key)) ? mBy(key) : isdef(Items[key]) ? iDiv(Items[key]) : null;
  if (nundef(elem)) { console.log('no menu with key', key); return null; }
  return elem;
}
function merge1(sp1, sp2, { dataMerge } = {}) {
  let options = {
    sub: (a, b, opt) => b.concat(a),
    data: (a, b, opt) => isLiteral(a) && isLiteral(b) ?
      nundef(dataMerge) || dataMerge == 'concat' ? a + ' ' + b
        : dataMerge == 'reverse' ? b + ' ' + a
          : b
      : dm1(a, b, opt),
  };
  return dm1(sp1, sp2, options);
}
function mergeAllRefsToIdIntoNode(n, R) {
  let loc = n._id;
  let refDictBySpecNodeName = R.refs[loc];
  let nNew = jsCopy(n);
  for (const spNodeName in refDictBySpecNodeName) {
    let reflist = refDictBySpecNodeName[spNodeName];
    for (const ref of reflist) {
      nNew = deepmergeOverride(nNew, ref);
    }
  }
  return nNew;
}
function mergeArr(a, b, opt) {
  var res = a.slice()
  b.forEach(function (e, i) {
    if (typeof res[i] === 'undefined') {
      res[i] = cloneIfNecessary(e, opt)
    } else if (isDictOrList(e)) {
      res[i] = dm1(a[i], e, opt);
    } else if (a.indexOf(e) === -1) {
      res.push(cloneIfNecessary(e, opt));
    }
  })
  return res
}
function mergeChildrenWithRefs(n, R) {
  for (const k in n) {
    let ch = n[k];
    if (nundef(ch._id)) continue;
    let loc = ch._id;
    let refs = R.refs[loc];
    if (nundef(refs)) continue;
    let spKey = Object.keys(refs)[0];
    let nSpec = R.lastSpec[spKey];
    let oNew = deepmerge(n[k], nSpec);
    n[k] = oNew;
  }
}
function mergeCombine(base, drueber) { return _deepMerge(base, drueber); }
function mergeCombineArrays(base, drueber) {
  return deepmerge(base, drueber);
}
function mergeCreatedAndUpdated(data) {
  if (!('created' in data)) data.created = {};
  data.created = extend(true, data.created, data.updated);
  let mergeFailed = false;
  let d = {};
  if ('created' in data && 'updated' in data) {
    for (const id in data.updated) {
      if (!(id in data.created)) {
        d.summary = 'missing id in data.created ' + id;
      } else {
        for (const key in data.updated[id]) {
          if (!(key in data.created[id]) || data.created[id][key] != data.updated[id][key]) {
            if (key == 'visible') {
              let set1 = getVisibleSet(data.created[id]);
              let set2 = getVisibleSet(data.updated[id]);
              if (sameList(set1, set2)) continue;
              if (empty(set1) && empty(set2)) continue;
            }
          }
        }
      }
      if (mergeFailed) {
        console.log('MERGE FAILED!!!', id, d.summary.toString(), data);
      }
    }
  }
}
function mergedSpecNode(n1, n2) {
  if (nundef(n1.cond) && nundef(n2.cond)) {
    return merge1(n1, n2);
  } else {
    return deepmerge(n1, n2);
  }
}
function mergeDynSetNodes(o) {
  let merged = {};
  let interpool = null;
  for (const nodeId in o.RSG) {
    let node = jsCopy(dynSpec[nodeId]);
    let pool = node.pool;
    if (pool) {
      if (!interpool) interpool = pool;
      else interpool = intersection(interpool, pool);
    }
    merged = deepmerge(merged, node);
  }
  merged.pool = interpool;
  return merged;
}
function mergeIncludingPrototype(oid, o) {
  let merged = mergeDynSetNodes(o);
  merged.oid = oid;
  let t = merged.type;
  let info;
  if (t && PROTO[t]) {
    info = deepmerge(merged, jsCopy(PROTO[t]));
  } else info = merged;
  return info;
}
function mergeObj(a, b, opt) {
  var res = {}
  if (nundef(a)) return b;
  else if (nundef(b)) return a;
  else if (isLiteral(a)) return b;
  else if (isLiteral(b)) return a;
  else if (isDictOrList(a)) {
    Object.keys(a).forEach(function (key) {
      res[key] = cloneIfNecessary(a[key], opt);
    })
  };
  Object.keys(b).forEach(function (key) {
    let func = opt[key];
    if (!res[key]) {
      res[key] = isLiteral(b[key]) ? b[key] : jsCopy(b[key]);
    } else if (func) {
      res[key] = func(a[key], b[key], opt);
    } else if (isLiteral(a[key])) {
      res[key] = cloneIfNecessary(b[key], opt);
    } else {
      res[key] = dm1(a[key], b[key], opt);
    }
  })
  return res;
}
function mergeObject(target, source, optionsArgument) {
  var destination = {}
  if (isMergeableObject(target)) {
    Object.keys(target).forEach(function (key) {
      destination[key] = cloneIfNecessary(target[key], optionsArgument)
    })
  }
  Object.keys(source).forEach(function (key) {
    if (!isMergeableObject(source[key]) || !target[key]) {
      destination[key] = cloneIfNecessary(source[key], optionsArgument)
    } else {
      destination[key] = deepmerge(target[key], source[key], optionsArgument)
    }
  })
  return destination;
}
function mergeOverride(base, drueber) { return _deepMerge(base, drueber, { arrayMerge: _overwriteMerge }); }
function mergeOverrideArrays(base, drueber) {
  return deepmerge(base, drueber, { arrayMerge: overwriteMerge });
}
function message_controls() {
  return `
  </div>
  <div style='display:flex;gap:10px;padding:10px;box-sizing:border-box;width:100%;height:60px;'>
    <label for='message_file'><img src='../base/assets/images/icons/clip.png' style='opacity:0.8;width:30px;cursor:pointer;' ></label>
    <input type='file' id='message_file' name='file' style='display:none' onchange='send_image(this.files)' />
    <input id='message_text' onkeyup='enter_pressed(event)' style='flex:6;border:solid thin #ccc;border-bottom:none;font-size:14px;padding:4px;outline:none;' type='text' placeHolder='type your message'/>
    <input style='flex:1;cursor:pointer;outline:none;' type='button' value='send' onclick='send_message(event)'/>
  </div>
  <span onclick='delete_thread(event)' style='color:white;cursor:pointer;'>Delete this thread </span>
  </div>`;
}
function message_left(msg, sender) {
  image = sender.imagePath;
  $a = `
  <div id='message_left'>
  <div></div>
    <img  id='prof_img' src='${image}' class='img_person sz50' style='float: left;margin:2px;'>
    <b>${sender.username}</b><br>
    ${msg.message}<br><br>`;
  if (msg.files != "") {
    $a += `<img src='${msg.files}' style='margin:30px;cursor:pointer;' onclick='image_show(event)' /> <br>`;
  }
  $a += `<span style='font-size:11px;color:white;'>${msg.date}<span>
  <img id='trash' src='../base/assets/images/icons/trash.png' onclick='delete_message(event)' msgid='${msg.id}' />
  </div>`;
  return $a;
}
function message_right(msg, sender) {
  image = sender.imagePath;
  $a = `
  <div id='message_right'>
  <div>`;
  if (msg.seen) {
    $a += "<img src='../base/assets/images/tick.png' style=''/>";
  } else if (msg.received) {
    $a += "<img src='../base/assets/images/tick_grey.png' style=''/>";
  }
  $a += `</div>
    <img id='prof_img' src='${image}' style='float:right;margin:2px;' class='img_person sz50'>
    <b>${sender.username}</b><br>
    ${msg.message}<br><br>`;
  if (msg.files != "") {
    $a += `<img src='${msg.files}' style='margin:30px;cursor:pointer;' onclick='image_show(event)' /> <br>`;
  }
  $a += `<span style='font-size:11px;color:#888;'>${msg.date}<span>
    <img id='trash' src='../base/assets/images/icons/trash.png' onclick='delete_message(event)' msgid='${msg.id}' />
  </div>`;
  return $a;
}
function mFade(d, ms = 800, callback = null) { return mAnimateTo(d, 'opacity', 0, callback, ms); }
function mFadeClear(d, ms = 800, callback = null) { return mAnimateTo(d, 'opacity', 0, () => { mClear(d); if (callback) callback(); }, ms); }
function mFadeClearShow(d, ms = 800, callback = null) { return mAnimate(d, 'opacity', [1, 0], () => { mClear(d); if (callback) callback(); }, ms); }
function mFadeRemove(d, ms = 800, callback = null) { return mAnimateTo(d, 'opacity', 0, () => { mRemove(d); if (callback) callback(); }, ms); }
function mFall(d, ms = 800, dist = 50) { toElem(d).animate([{ opacity: 0, transform: `translateY(-${dist}px)` }, { opacity: 1, transform: 'translateY(0px)' },], { fill: 'both', duration: ms, easing: 'ease' }); }
function mFg(d, color) { d.style.color = color; }
function mFileInput(dParent, dPreviewParent) {
  let dInput = mDiv(dParent, { padding: 4, h: 100, bg: '#fff', align: 'center', cursor: 'pointer', fg: 'gray' });
  let dMessage = mDiv(dInput, {}, null, 'click to browse');
  let dPreview = mDiv(dInput);
  var fakeInput = document.createElement("input");
  fakeInput.type = "file";
  fakeInput.accept = "image/*";
  fakeInput.multiple = false;
  dInput.onclick = () => { fakeInput.click(); };
  let item = { fileObject: null, filename: null, imgData: null, img: null, loaded: false };
  iAdd(item, { div: dInput, dPreview: dPreview });
  var img = mCreate("img"); mAppend(dPreview, img);
  mStyleX(img, { wmax: 100, hmax: 70, mabottom: 4 })
  fakeInput.onchange = function () {
    const reader = new FileReader();
    reader.onload = function () {
      img.src = this.result;
      const base64 = this.result.replace(/.*base64,/, '');
      Socket.emit('image2', base64);
    };
    reader.readAsDataURL(this.files[0]);
  };
  return item;
}
function mFilePreview(item, dParent, allowMultipleChildren = true) {
  let imgFile = item.fileObject;
  if (!allowMultipleChildren) clearElement(dParent);
  var img = mCreate("img"); mAppend(dParent, img);
  mStyleX(img, { wmax: 100, hmax: 70, mabottom: 4 })
  var reader = new FileReader();
  reader.onload = function (e) {
    img.src = e.target.result;
    let bytes = item.bytes = new Uint8Array(e.target.result);
    Socket.emit('image1', bytes);
    item.filenameWithExt = imgFile.name;
    item.filename = stringBefore(imgFile.name, '.');
    item.ext = stringAfter(imgFile.name, '.');
    item.img = img;
    item.previewParent = dParent;
    item.loaded = true;
    console.log('item', item);
  }
  reader.readAsArrayBuffer(imgFile);
}
function mFillText(text, box, padding = 10, perleft = 10, pertop = 20) {
  let r = mMeasure(box);
  let [fz, w, h] = fitFont(text, 14, r.w - padding, r.h - padding);
  let dText = mDiv(box, {
    w: w, h: h, fz: fz,
    position: 'absolute', transform: `translate(-${perleft}%,-${pertop}%)`, top: `${pertop}%`, left: `${perleft}%`
  }, null, text);
  return dText;
}
function mFleeting(inner, d, ms = 3000, styles = {}, classes = null) {
  d = toElem(d);
  addKeys({ transition: 'all .5s ease', padding: 10, box: true, fg: 'red' }, styles)
  if (isdef(styles)) mStyle(d, styles);
  if (isdef(classes)) mClass(d, classes);
  d.innerHTML = inner;
  TO.fleeting = setTimeout(() => mClear(d), ms);
}
function mFlex(d, or = 'h') {
  d = toElem(d);
  d.style.display = 'flex';
  d.style.flexFlow = (or == 'v' ? 'column' : 'row') + ' ' + (or == 'w' ? 'wrap' : 'nowrap');
}
function mFlex1(d) { d.style.display = 'flex'; d.style.flexWrap = 'wrap'; d.style.flex = 1; }
function mFlexCenterContent(d) { mStyle(d, { 'justify-content': 'center', 'align-items': 'center' }); }
function mFlexChild(d, grow = 1, shrink = 0, base = 'auto') {
  d.style.flex = '' + grow + ' ' + shrink + ' ' + base;
}
function mFlexChildSplit(d, split) {
  if (split != 1) { split *= 10; if (split % 2 == 0) split /= 2; }
  d.style.flex = '' + split + ' 0 auto';
}
function mFlexColumn(d, or = 'h') {
  d = toElem(d);
  d.style.display = 'flex';
  d.style.flexFlow = (or == 'v' ? 'column' : 'row') + ' ' + (or == 'w' ? 'wrap' : 'nowrap');
  d.style.alignItems = 'stretch';
  d.style.alignContent = 'stretch';
  d.style.justiifyItems = 'stretch';
  d.style.justifyContent = 'stretch';
}
function mFlexColumnWrap(d) { mStyle(d, { display: 'flex', 'flex-flow': 'column wrap' }); }
function mFlexEvenly(d) {
  let styles = { display: 'flex' };
  styles['justify-content'] = 'space-evenly';
  mStyle(d, styles);
}
function mFlexLinebreak(d) { if (isString(d)) d = mBy(d); let lb = mDiv(d); mClass(lb, 'linebreak'); return lb; }
function mFlexLR(d) { mStyle(d, { display: 'flex', 'justify-content': 'space-between', 'align-items': 'center' }); }
function mFlexSpacebetween(d) { mFlexLR(d); }
function mFlexWrap(d) { mFlex(d, 'w'); }
function mFlexWrapGrow(d) { d.style.display = 'flex'; d.style.flexWrap = 'wrap'; d.style.flex = 1; }
function mFlip(card, ms, callback) {
  let a = mAnimate(iDiv(card), 'transform', [`scale(1,1)`, `scale(0,1)`],
    () => {
      if (card.faceUp) face_down(card); else face_up(card);
      mAnimate(iDiv(card), 'transform', [`scale(0,1)`, `scale(1,1)`], callback, ms / 2, 'ease-in', 0, 'both');
    },
    ms / 2, 'ease-out', 0, 'both');
}
function mFont(d, fz) { d.style.setProperty('font-size', makeUnitString(fz, 'px')); }
function mForm(dParent) {
  return mAppend(dParent, mCreate('form'));
}
function mFromPoint(x, y) {
  var element, elements = [];
  var old_visibility = [];
  while (true) {
    element = document.elementFromPoint(x, y);
    if (!element || element === document.documentElement) {
      break;
    }
    elements.push(element);
    old_visibility.push(element.style.visibility);
    element.style.visibility = 'hidden';
  }
  for (var k = 0; k < elements.length; k++) {
    elements[k].style.visibility = old_visibility[k];
  }
  elements.reverse();
  return elements;
}
function mGap(d, gap) { d.style.setProperty('margin', gap + 'px'); }
function mget_map(center = Geo.places.tuerkenschanzpark, zoom = 17) {
  M.center = center;
  M.zoom = zoom;
  let map = M.map = L.map('map').setView(center, zoom);
  return map;
}
function mGetStyle(elem, prop) {
  let val;
  elem = toElem(elem);
  if (prop == 'bg') { val = getStyleProp(elem, 'background-color'); if (isEmpty(val)) return getStyleProp(elem, 'background'); }
  else if (isdef(STYLE_PARAMS[prop])) { val = getStyleProp(elem, STYLE_PARAMS[prop]); }
  else {
    switch (prop) {
      case 'vmargin': val = stringBefore(elem.style.margin, ' '); break;
      case 'hmargin': val = stringAfter(elem.style.margin, ' '); break;
      case 'vpadding': val = stringBefore(elem.style.padding, ' '); break;
      case 'hpadding': val = stringAfter(elem.style.padding, ' '); break;
      case 'box': val = elem.style.boxSizing; break;
      case 'dir': val = elem.style.flexDirection; break;
    }
  }
  if (nundef(val)) val = getStyleProp(elem, prop);
  if (val.endsWith('px')) return firstNumber(val); else return val;
}
function mGetStyleX(elem, prop) {
  let val;
  if (isdef(STYLE_PARAMS[prop])) { val = elem.style[STYLE_PARAMS[prop]]; }
  else {
    switch (prop) {
      case 'vmargin': val = stringBefore(elem.style.margin, ' '); break;
      case 'hmargin': val = stringAfter(elem.style.margin, ' '); break;
      case 'vpadding': val = stringBefore(elem.style.padding, ' '); break;
      case 'hpadding': val = stringAfter(elem.style.padding, ' '); break;
      case 'box': val = elem.style.boxSizing; break;
      case 'dir': val = elem.style.flexDirection; break;
    }
  }
  if (nundef(val)) val = elem.style[prop];
  if (val.endsWith('px')) return firstNumber(val); else return val;
}
function mgPos(card, el, x = 0, y = 0, unit = '%', anchor = 'center') {
  mAppend(iG(card), el);
  let box = el.getBBox();
  console.log('rect', box);
  el.setAttribute('x', x);
  el.setAttribute('y', y);
}
function mGrid(rows, cols, dParent, styles = {}) {
  let d = mDiv(dParent, styles);
  d.style.gridTemplateColumns = 'repeat(' + cols + ',1fr)';
  d.style.gridTemplateRows = 'repeat(' + rows + ',1fr)';
  d.style.display = 'inline-grid';
  d.style.padding = valf(styles.padding, styles.gap) + 'px';
  return d;
}
function mGridFrom(d, m, cols, rows, cellstyles = {}) {
  let gta = '';
  let words = [];
  for (const line of m) {
    gta = gta + `'${line}' `;
    let warr = toWords(line);
    for (const w of warr) if (!words.includes(w)) words.push(w);
  }
  let dParent = mDom100(d, { display: 'grid', 'grid-template-areas': gta });
  dParent.style.gridTemplateColumns = cols;
  dParent.style.gridTemplateRows = rows;
  for (const w of words) {
    let st = copyKeys({ 'grid-area': w, bg: rColor(50) }, cellstyles);
    let cell = window[w] = mDom(dParent, st, { id: w });
  }
  return dParent;
}
function mgShape(key) { }
function mgSize(el, h, w) {
  el.setAttribute('height', h);
  if (isdef(w)) el.setAttribute('width', w);
}
function mgSuit(key) {
  let el = gCreate('use');
  el.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', '#' + key);
  return el;
}
function mgSuit1(card, key, h, x, y) {
  el = document.createElementNS('http://www.w3.org/2000/svg', 'use');
  el.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', `#${key}`);
  el.setAttribute('height', h);
  el.setAttribute('width', h);
  el.setAttribute('x', x);
  el.setAttribute('y', y);
  mAppend(iG(card), el);
  return el;
}
function mgSvg(dParent, attrs) { return mgTag('svg', dParent, attrs); }
function mgSym(key) {
  let el = gCreate('text');
  let info = Syms[key];
  mStyle(el, { family: info.family });
  el.innerHTML = info.text;
  return el;
}
function mgTag(tag, dParent, attrs, styles = {}, innerHTML) {
  let elem = gCreate(tag);
  mStyle(elem, styles);
  mAttrs(elem, attrs);
  if (isdef(innerHTML)) elem.innerHTML = innerHTML;
  if (isdef(dParent)) mAppend(dParent, elem);
  return elem;
}
function mgText(text, dParent, attrs, styles) { return mgTag('text', dParent, attrs, styles, text); }
function mHand(n, R, uidParent) {
  let dParent = mBy(n.idUiParent);
  let ui = mDiv(dParent);
  addClass(ui, 'handStyle');
  return ui;
}
function mHasClass(el, className) {
  if (el.classList) return el.classList.contains(className);
  else return !!el.className.match(new RegExp('(\\s|^)' + className + '(\\s|$)'));
}
function mHeading(msg, dParent, level, id) {
  let p = mCreate('h' + level);
  if (!isEmpty(msg)) p.innerHTML = msg;
  if (isdef(id)) p.id = id;
  mAppend(dParent, p);
  return p;
}
function mHex00(dParent, styles, id) {
  let ui = gShape('hex', 100, 100, 'blue', 4);
  let gParent = findAncestorElemWithParentOfType(dParent, 'svg');
  gParent.appendChild(ui);
  return ui;
}
function mHex01(dParent, styles = {}, sz = 100) {
  let szNet = (isdef(styles.padding)) ? sz - 2 * styles.padding : sz;
  let h = sz; w = h * 0.866;
  let d = mDiv(dParent, { w: w, h: h });
  let g = asvg(d);
  let hh = szNet + sz; wh = hh * 0.866;
  let colors = ['yellow', 'orange', 'red', 'green', 'violet']
  let hex1 = agShape(g, 'hex', wh, hh, chooseRandom(colors));
  if (isdef(styles)) mStyleX(d, styles)
  return d;
}
function mHex02(dParent, w) {
  let gap = 4;
  let whex = w - gap;
  let wcont = w;
  let hbrut = w / .866;
  let hhex = hbrut - gap;
  let hcont = hbrut * .75;
  let d = mDiv(dParent, { w: wcont, h: hcont, display: 'inline-block' });
  let g = asvg(d);
  let hex1 = agShape(g, 'hex', whex, hhex, randomColor());
  return d;
  function asvg(dParent, sz, originInCenter = true) {
    if (!dParent.style.position) dParent.style.position = 'relative';
    let svg1 = gSvg();
    svg1.setAttribute('width', '100%');
    svg1.setAttribute('height', '150%');
    let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;background:transparent';
    svg1.setAttribute('style', style);
    dParent.appendChild(svg1);
    let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    svg1.appendChild(g1);
    if (originInCenter) { g1.style.transform = "translate(50%, 50%)"; }
    return g1;
  }
}
function mHex03(dParent, w, bg) {
  let gap = 4;
  let whex = w - gap;
  let wcont = w;
  let hbrut = w / .866;
  let hhex = hbrut - gap;
  let hcont = hbrut * .75;
  let d = mDiv(dParent, { w: wcont, h: hcont, display: 'inline-block' });
  let g = asvg(d);
  let hex1 = agShape(g, 'hex', whex, hhex, bg);
  return d;
  function asvg(dParent, sz, originInCenter = true) {
    if (!dParent.style.position) dParent.style.position = 'relative';
    let svg1 = gSvg();
    svg1.setAttribute('width', '100%');
    svg1.setAttribute('height', '150%');
    let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;background:transparent';
    svg1.setAttribute('style', style);
    dParent.appendChild(svg1);
    let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    svg1.appendChild(g1);
    if (originInCenter) { g1.style.transform = "translate(50%, 50%)"; }
    return g1;
  }
}
function mHex04(dParent, w, bg) {
  let gap = 4;
  let whex = w - gap;
  let wcont = w;
  let hbrut = w / .866;
  let hhex = hbrut - gap;
  let hcont = hbrut * .75;
  let d = mDiv(dParent, { w: wcont, h: hcont, display: 'inline-block' });
  let g = asvg(d);
  let hex1 = agShape(g, 'hex', whex, hhex, bg);
  return d;
  function asvg(dParent, sz, originInCenter = true) {
    if (!dParent.style.position) dParent.style.position = 'relative';
    let svg1 = gSvg();
    svg1.setAttribute('width', '100%');
    svg1.setAttribute('height', '150%');
    let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;background:transparent';
    svg1.setAttribute('style', style);
    dParent.appendChild(svg1);
    let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    svg1.appendChild(g1);
    if (originInCenter) { g1.style.transform = "translate(50%, 50%)"; }
    return g1;
  }
}
function mHex05(dParent, w, bg) {
  let gap = 4;
  let whex = w - gap;
  let wcont = w;
  let hbrut = w / .866;
  let hhex = hbrut - gap;
  let hcont = hbrut * .75;
  let d = mDiv(dParent, { w: wcont, h: hcont, display: 'inline-block' });
  let d1 = mDiv100(d, { position: 'absolute', top: -15, 'z-index': -1 });
  let g = asvg(d1);
  let hex1 = agShape(g, 'hex', whex, hhex, bg);
  let dField = mDiv100(d, { padding: '0%', 'z-index': 100 });
  let dInnerField = mDiv(dField, { w: '99%', h: '113%', bg: 'blue', rounding: '50%' });
  return d;
  function asvg(dParent, sz, originInCenter = true) {
    if (!dParent.style.position) dParent.style.position = 'relative';
    let svg1 = gSvg();
    svg1.setAttribute('width', '100%');
    svg1.setAttribute('height', '150%');
    let style = 'margin:0;padding:0;position:absolute;top:0px;left:0px;background:transparent';
    svg1.setAttribute('style', style);
    dParent.appendChild(svg1);
    let g1 = document.createElementNS('http://www.w3.org/2000/svg', 'g');
    svg1.appendChild(g1);
    if (originInCenter) { g1.style.transform = "translate(50%, 50%)"; }
    return g1;
  }
}
function mHexWeissNicht(dParent, styles = {}, sz = 100) {
  let szNet = (isdef(styles.padding)) ? sz - 2 * styles.padding : sz;
  let h = sz; w = h * 0.866;
  let d = mDiv(dParent, { w: 2 * w, h: h * 1.5 });
  let g = asvg(d);
  let hh = szNet + sz; wh = hh * 0.866;
  let colors = ['yellow', 'orange', 'red', 'green', 'violet']
  let hex1 = agShape(g, 'hex', wh, hh, chooseRandom(colors));
  if (isdef(styles)) mStyleX(d, styles)
  return d;
}
function mHide(d, ms = 0) { if (ms > 0) mFade(d, ms); else mStyle(d, { opacity: 0 }); }
function mHigh(ui) { mClass(ui, 'high'); }
function miAddLabel(item, styles) {
  let d = iDiv(item);
  if (getTypeOf(d.firstChild) == 'Text') {
    let handler = d.onmousedown;
    d.onmousedown = null;
    let dPic = d;
    let dParent = d.parentNode;
    let outerStyles = jsCopy(styles);
    addKeys({
      display: 'inline-flex', 'flex-direction': 'column',
      'justify-content': 'center', 'align-items': 'center', 'vertical-align': 'top',
    }, outerStyles);
    d = mDiv(dParent, outerStyles);
    mAppend(d, dPic);
    d.onmousedown = handler;
    let dLabel = mText(item.label, d, { fz: valf(styles.fz, 20) });
    iAdd(item, { div: d, dPic: dPic, dLabel: dLabel, options: outerStyles });
  } else if (nundef(iLabel(item))) {
    let dLabel = mText(item.label, d, { fz: valf(styles.fz, 20) });
    iAdd(item, { dLabel: dLabel });
  }
  return d;
}
function MicrophoneHide() {
  if (nundef(MicrophoneUi)) return;
  if (RecogOutput) console.log('* mic end')
  MicrophoneUi.style.opacity = .31;
}
function MicrophoneShow() {
  if (nundef(MicrophoneUi)) return;
  if (RecogOutput) console.log('* mic start')
  MicrophoneUi.style.opacity = 1;
}
function MicrophoneStart() {
  if (RecogOutput) console.log('* mic start')
  MicrophoneUi.style.opacity = 1;
}
function MicrophoneStop() {
  if (RecogOutput) console.log('* mic end')
  MicrophoneUi.style.opacity = .31;
}
function mIfNotRelative(d) { if (isEmpty(d.style.position)) d.style.position = 'relative'; }
function mImage() { return mImg(...arguments); }
function mImg(path, dParent, styles, classes, callback) {
  let d = mCreate('img');
  if (isdef(callback)) d.onload = callback;
  d.src = path;
  if (isdef(dParent)) mAppend(dParent, d);
  if (isdef(styles)) mStyle(d, styles);
  if (isdef(classes)) mClass(d, classes);
  if (isdef(styles.w)) d.setAttribute('width', styles.w + 'px');
  if (isdef(styles.h)) d.setAttribute('height', styles.h + 'px');
  return d;
}
function mInfo(n, R, uidParent) {
  let ui;
  let dParent = mBy(n.idUiParent);
  if (getTypeOf(dParent) == 'g') {
    return gInfo(n, R, uidParent);
  } else if (isdef(n.content)) {
    ui = mNode(n.content, dParent);
    mClass(ui, 'node');
  } else {
    ui = mDiv(dParent);
    ui.style.display = 'hidden';
  }
  return ui;
}
function minifyBack(id) {
  let card = UIS[id];
  let hand = UIS[card.hand];
  if (hand.scale != 1) {
    card.setScale(hand.scale);
  }
  _sendCardToBack(id)
}
function minimax(game, depth, alpha, beta, isMaximizingPlayer, sum, color) {
  if (G.id != 'gChess' || !aiActivated) return;
  positionCount++;
  var children = game.ugly_moves({ verbose: true });
  children.sort(function (a, b) { return 0.5 - Math.random() });
  var currMove;
  if (depth === 0 || children.length === 0) {
    return [null, sum]
  }
  var maxValue = Number.NEGATIVE_INFINITY;
  var minValue = Number.POSITIVE_INFINITY;
  var bestMove;
  for (var i = 0; i < children.length; i++) {
    currMove = children[i];
    var currPrettyMove = game.ugly_move(currMove);
    var newSum = evaluateBoard(currPrettyMove, sum, color);
    var [childBestMove, childValue] = minimax(game, depth - 1, alpha, beta, !isMaximizingPlayer, newSum, color);
    game.undo();
    if (isMaximizingPlayer) {
      if (childValue > maxValue) {
        maxValue = childValue;
        bestMove = currPrettyMove;
      }
      if (childValue > alpha) {
        alpha = childValue;
      }
    }
    else {
      if (childValue < minValue) {
        minValue = childValue;
        bestMove = currPrettyMove;
      }
      if (childValue < beta) {
        beta = childValue;
      }
    }
    if (alpha >= beta) {
      break;
    }
  }
  if (isMaximizingPlayer) {
    return [bestMove, maxValue]
  }
  else {
    return [bestMove, minValue];
  }
}
function minimaxCopy(node, depth, alpha, beta, maxDepth, maxim) {
  CCC += 1;
  if (depth >= maxDepth) return F_HEURISTIC(node, MAXIMIZER, MINIMIZER);
  let ec = F_END(node, depth); if (ec.reached) return ec.val;
  depth += 1;
  var move, result;
  var availableMoves = F_MOVES(node);
  let player = maxim ? MAXIMIZER : MINIMIZER;
  let nodeSafe = jsCopy(node);
  for (var i = 0; i < availableMoves.length; i++) {
    move = availableMoves[i];
    let node1 = jsCopy(node);
    console.assert(sameList(nodeSafe, node), 'HA!');
    F_APPLYMOVE(node1, move, player);
    result = minimaxCopy(node1, depth, alpha, beta, maxDepth, !maxim);
    if (maxim) {
      if (result > alpha) {
        alpha = result;
        if (depth == 1) SelectedMove = move;
      } else if (alpha >= beta) { return alpha; }
    } else {
      if (result < beta) {
        beta = result;
        if (depth == 1) SelectedMove = move;
      } else if (beta <= alpha) { return beta; }
    }
  }
  return maxim ? alpha : beta;
}
function minimizeObjects() { let ids = getDefaultObjectIds(); ids.map(x => UIS[x].minimize()); }
function mInner(html, dParent, styles) { dParent.innerHTML = html; if (isdef(styles)) mStyle(dParent, styles); }
function mInput(dParent, styles, id, placeholder, classtr = 'input', tabindex = null, value = '') {
  let html = `<input type="text" id=${id} class="${classtr}" placeholder="${valf(placeholder, '')}" tabindex="${tabindex}" value="${value}">`;
  let d = mAppend(dParent, mCreateFrom(html));
  if (isdef(styles)) mStyle(d, styles);
  return d;
}
function mInputGroup(dParent, styles) {
  let baseStyles = { display: 'inline-block', align: 'right', bg: '#00000080', rounding: 10, padding: 20, margin: 12 };
  if (isdef(styles)) styles = deepmergeOverride(baseStyles, styles); else styles = baseStyles;
  return mDiv(dParent, styles);
}
function mInputLineWithButtons(dParent, opts, val = '') {
  let html = `
    <form id="fSearch" action="javascript:void(0);" class='form' autocomplete='off'>
      <label>Keywords:</label>
      <input id="iKeywords" type="text" name="keywords" style="flex-grow:1" value="${val}" />
    </form>
    `;
  let elem = mCreateFrom(html);
  mAppend(dParent, elem);
  let handler;
  for (const cap in opts) {
    handler = opts[cap];
    mButton(cap, opts[cap], elem, {}, 'hop1');
  }
  elem.onsubmit = (ev) => { ev.preventDefault(); };
  return elem;
}
function mInputX(dParent, styles, { textPadding, label, value, submitOnEnter, autoComplete, autoFocus, autoSelect, handler, createContainer } = {}) {
  let d;
  if (createContainer) {
    d = mDiv(dParent, { align: 'center' });
    mAppend(dParent, d);
  } else if (isdef(label)) {
    d = createElementFromHTML(`<label>${isdef(label) ? label : ''}</label>`);
    mAppend(dParent, d);
  } else d = dParent;
  let inp = createElementFromHTML(`<input type="text" class="input" value="${isdef(value) ? value : ''}" />`);
  mAppend(d, inp);
  if (isdef(autoComplete)) inp.autoComplete = autoComplete ? 'on' : 'off';
  if (isdef(submitOnEnter))
    inp.onkeydown = (ev) => {
      if (ev.key === 'Enter') {
        ev.preventDefault();
        mBy('dummy').focus();
        if (isdef(handler)) handler(inp.value);
      }
    };
  if (isdef(styles)) { mStyleX(d, styles); }
  let inpStyles = isdef(styles) ? jsCopy(styles) : {};
  delete inpStyles.padding;
  if (isdef(textPadding)) inpStyles.padding = textPadding;
  if (isdef(inpStyles.w)) inpStyles.w = '100%';
  mStyleX(inp, inpStyles);
  if (isdef(autoFocus)) inp.focus();
  if (autoSelect == true) inp.select();
  return inp;
}
function mInsert(dParent, el, index = 0) { dParent.insertBefore(el, dParent.childNodes[index]); return el; }
function mInsertAfter(dParent, el, index = 0) {
  if (dParent.childNodes.length == index) mAppend(dParent, el);
  else mInsert(dParent, el, index + 1);
}
function mInsertAt(dParent, el, index = 0) { mInsert(dParent, el, index); }
function mInsertFirst(dParent, el) { mInsert(dParent, el, 0); }
function mInstruction(msg, dParent, hasExclamation = true) {
  let p = mCreate('h2');
  p.innerHTML = msg + (hasExclamation ? '!' : '');
  mAppend(dParent, p);
  return p;
}
function mInvisible(n, R, uidParent) {
  let dParent = mBy(n.idUiParent);
  let d = mDiv(dParent);
  if (n.content) {
    mText(n.content, d);
  }
  return d;
}
function miPic(item, dParent, styles, classes) {
  let info = isString(item) ? Syms[item] : isdef(item.info) ? item.info : item;
  let d = mDiv(dParent);
  d.innerHTML = info.text;
  if (nundef(styles)) styles = {};
  let family = info.family;
  addKeys({ family: family, fz: 50, display: 'inline-block' }, styles);
  mStyle(d, styles);
  if (isdef(classes)) mClass(d, classes);
  mCenterCenterFlex(d);
  return d;
}
function MIRROR120(sq) {
  var file = MirrorFiles[FilesBrd[sq]];
  var rank = MirrorRanks[RanksBrd[sq]];
  return FR2SQ(file, rank);
}
function MIRROR64(sq) { return Mirror64[sq]; }
function mist() {
  var map = L.map('map', {
    minZoom: 0,
    maxZoom: 20
  });
  var cartodbAttribution = '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attribution">CARTO</a>';
  var layer = L.tileLayer('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', { attribution: cartodbAttribution }).addTo(map);
  map.setView([0, 0], 0);
  return;
  setView(center, zoom);
  flyTo(center, zoom);
  zoomIn() / zoomIn(delta);
  zoomOut() / zoomOut(delta);
  setZoomAround(fixedPoint, zoom);
  fitBounds(bounds);
}
function mItem(id, diDOM, di = {}, addSizing = false) {
  let item = di;
  id = isdef(id) ? id : isdef(diDOM) && isdef(diDOM.div) && !isEmpty(diDOM.div.id) ? diDOM.div.id : getUID();
  item.id = iRegister(item, id);
  if (isdef(diDOM) && isdef(diDOM.div)) { diDOM.div.id = id; iAdd(item, diDOM); }
  if (addSizing) {
    if (nundef(item.sizing)) item.sizing = 'sizeToContent';
    if (nundef(item.positioning)) { item.positioning = 'absolute'; }
    if (nundef(item.posType)) { item.posType = 'center'; }
    if (isdef(diDOM) && item.sizing == 'sizeToContent') iMeasure(item, item.sizingOptions);
  }
  return item;
}
function mItemSplay(item, list, splay, ov = .5) {
  if (!isNumber(splay)) splay = get_splay_number(splay);
  let d = iDiv(item);
  let idx = list.indexOf(item.key);
  if (splay == 4) {
    let offset = (list.length - idx) * ov;
    mStyle(d, { position: 'absolute', left: offset, top: offset });
    d.style.zIndex = list.length - idx;
  } else {
    d.style.zIndex = splay != 2 ? list.length - idx : 0;
  }
}
function mixinChannel(n, rParent, R) {
  let chanav = buildChanav(n, rParent);
  chanavList = isList(chanav) ? chanav : isString(chanav) ? [chanav] : [];
  let chanimpl = n.channels;
  chanimpl = isDict(chanimpl) ? Object.keys(chanimpl) : isList(chanimpl) ? chanimpl : isString(chanimpl) ? [chanimpl] : [];
  let activeChannelKey = null; let activeChannel = null;
  for (const ch of chanimpl) {
    let k = Object.keys(ch)[0];
    let val = ch[k];
    if (chanavList.includes(k)) { activeChannelKey = k; activeChannel = val; }
  }
  if (activeChannel) {
    n = deepmerge(n, activeChannel);
  }
  return [n, chanav];
}
function mLabel(label) { return mText(label); }
function mle(o, p, d) {
  p = { x: p.x - d, y: p.y };
  if (o) o.setPos(p.x, p.y);
  return p;
}
function mLeft(dParent, d, margin = 0) {
  mStyle(dParent, { display: 'flex', 'justify-content': 'space-between', 'align-items': 'center' });
  mInsertFirst(dParent, d);
  mStyle(d, { margin: margin, 'align-self': 'flex-start' });
  return d;
}
function mLine(dParent, styles) { return mDiv(dParent, styles, null, '<hr>'); }
function mLine3(dParent, index, ids, styles) {
  let html = `<div class="lineOuter">
    <div>
      <div id="${ids[0]}" class="lineLeft"> </div>
      <div id="${ids[1]}" class="lineMiddle"> </div>
      <div id="${ids[2]}" class="lineRight"> </div>
    </div>
  </div>
  `;
  let x = createElementFromHTML(html);
  mInsert(dParent, x, index);
  return [mBy(ids[0]), mBy(ids[1]), mBy(ids[2])];
}
function mLinebreak(dParent, gap) {
  dParent = toElem(dParent);
  let d;
  let display = getComputedStyle(dParent).display;
  if (display == 'flex') {
    d = mDiv(dParent, { fz: 2, 'flex-basis': '100%', h: 0, w: '100%' }, null, ' &nbsp; ');
  } else {
    d = mDiv(dParent, {}, null, '<br>');
  }
  if (isdef(gap)) { d.style.minHeight = gap + 'px'; d.innerHTML = ' &nbsp; '; d.style.opacity = .2; }
  return d;
}
function mLinebreakFlex(dParent, gap) {
  dParent = toElem(dParent);
  let d = mDiv(dParent, { fz: 2, 'flex-basis': '100%', h: 0, w: '100%' }, null, ' &nbsp; ');
  if (isdef(gap)) { d.style.minHeight = gap + 'px'; d.innerHTML = ' &nbsp; '; d.style.opacity = .2; }
  return d;
}
function mLinebreakNew(d, gap) { mGap(d, gap); }
function mLink(href, dParent, styles, id, inner, classes, sizing) {
  let d = mCreate('a');
  if (dParent) mAppend(dParent, d);
  d.href = valf(href, '#');
  if (isdef(styles)) mStyle(d, styles);
  if (isdef(classes)) mClass(d, classes);
  if (isdef(id)) d.id = id;
  if (isdef(inner)) d.innerHTML = inner;
  if (isdef(sizing)) { setRect(d, sizing); }
  return d;
}
function mList(n, R, uidParent) {
  let dParent = mBy(n.idUiParent);
  let ui = mDiv(dParent);
  return ui;
}
function mMagnify(img, item) {
  let path = item.path;
  if (isdef(MAGNIFIER_IMAGE) && MAGNIFIER_IMAGE.src == path) {
    console.log('schon offen!!!')
    return;
  } else if (isdef(MAGNIFIER_IMAGE)) mCancelMagnify();
  let imgSize = 514, fontSize = 24;
  let [w, h, fz] = [imgSize, imgSize + fontSize + 10, fontSize];
  let dPresent = MAGNIFIER_IMAGE = mDiv(document.body, { bg: HeaderColor, position: 'absolute', left: 0, top: 0, w: w, h: h });
  let d = dPresent;
  d.style.zIndex = 100000;
  let dText = mText(item.text, d, { color: 'white', fz: fz });
  let dImage = mDiv(d, { rounding: '50%', w: w, h: w });
  mCenterCenterFlex(dImage);
  let img1 = mImg(path, dImage, {});
  mCenterCenterFlex(dPresent);
}
function mMagnifyOnHoverControl(elem) {
  elem.onmouseenter = ev => { if (ev.ctrlKey) mClass(elem, 'magnify_on_hover'); }
  elem.onmouseleave = ev => mClassRemove(elem, 'magnify_on_hover');
}
function mMagnifyOnHoverControlPopup(elem) {
  elem.onmouseenter = ev => {
    if (ev.ctrlKey) {
      let r = getRect(elem, document.body);
      let popup = mDiv(document.body, { rounding: 4, position: 'absolute', top: r.y, left: r.x }, 'popup');
      let clone = elem.cloneNode(true);
      popup.appendChild(clone);
      mClass(popup, 'doublesize')
      popup.onmouseleave = () => popup.remove();
    }
  }
}
function mMagnifyOnHoverControlRemove(elem) {
  elem.onmouseenter = elem.onmouseleave = null;
  mClassRemove(elem, 'magnify_on_hover');
}
function mManual00(n, R, area) {
  let ui = mDefault(n, R, area);
  if (isdef(n.idUiParent)) {
    let dParent = mBy(n.idUiParent);
    if (dParent && nundef(dParent.style.position)) dParent.style.position = 'relative';
  }
  return ui;
}
function mMarginAuto(d) { d.style.setProperty('margin', 'auto'); }
function mMeasure(d) { let r = getRect(d); mStyle(d, { w: r.w, h: r.h }); return r; }
function mMenuButton(dParent, caption, styles) {
  caption = valf(caption, UnicodeSymbols.menu);
  styles = valf(styles, { fz: 30, margin: 4 });
  let b = mButton(caption, null, dParent, styles, 'mybutton', getUID('b'));
  return b;
}
function mMenuLine(dParent, styles) {
  let menuStyles = isdef(styles) ? styles : { bg: wblack, alpha: .65 };
  let dMenu = mDiv(dParent, menuStyles);
  return dMenu;
}
function mMicrophone(dParent, color) {
  let d = mDiv(dParent);
  d.innerHTML = '🎤';
  let c = bestContrastingColor(color, ['yellow', 'orange', 'red']);
  let bg = c;
  let style = { bg: bg, rounding: '50%', fz: 50, padding: 5, transition: 'opacity .35s ease-in-out' };
  mStyle(d, style);
  mLinebreak(dParent);
  return d;
}
function mMinBounds(d) {
  let b = getBounds(d);
  mStyle(d, { 'min-width': b.width, 'min-height': b.height }, 'px');
}
function mMinSize(d, w, h, unit = 'px') { mStyle(d, { 'min-width': w, 'min-height': h }, unit); }
function mMoveBy(elem, dx, dy) { let rect = getRect(elem); mPos(elem, rect.x + dx, rect.y + dy); }
function mMultiline(s, tabvalue, dParent, styles, classes) {
  let spc = '&nbsp;';
  let lines = s.split('\n');
  let html = '';
  for (let i = 0; i < lines.length; i += 1) {
    let line = lines[i];
    let n = countIndent(line, tabvalue);
    let x = spc.repeat(n) + line;
    html += x + '<br>';
  }
  let d1 = mText(html, dParent);
  if (isdef(styles)) mStyle(d1, styles);
  if (isdef(classes)) mClass(d1, ...classes);
  return d1;
}
function mNode(o, dParent, title) {
  recConvertLists(o);
  console.log('mNode o', o);
  let d = mCreate('div');
  mYaml(d, o);
  let pre = d.getElementsByTagName('pre')[0];
  pre.style.fontFamily = 'inherit';
  if (isdef(title)) mInsert(d, mText(title));
  if (isdef(dParent)) mAppend(dParent, d);
  if (isDict(o)) d.style.textAlign = 'left';
  return d;
}
function mNodeChangeContent(ui, content) {
  let domel = ui.getElementsByTagName('pre')[0];
  domel.innerHTML = jsonToYaml(content);
}
function mNodeFilter(o, { sort, dParent, title, lstFlatten, lstOmit, lstShow, className = 'node', omitEmpty = false } = {}) {
  let oCopy = isList(lstShow) ? filterByKey(o, lstShow) : jsCopySafe(o);
  if (isList(lstFlatten)) recConvertToSimpleList(oCopy, lstFlatten);
  if (nundef(lstOmit)) lstOmit = [];
  if (omitEmpty || !isEmpty(lstOmit)) oCopy = recDeleteKeys(oCopy, omitEmpty, lstOmit);
  let d = mCreate('div');
  if (isdef(className)) mClass(d, className);
  switch (sort) {
    case 'keys': oCopy = sortKeys(oCopy); break;
    case 'all': oCopy = JSON.sort(oCopy); break;
  }
  mYaml(d, oCopy);
  let pre = d.getElementsByTagName('pre')[0];
  pre.style.fontFamily = 'inherit';
  if (isdef(title)) mInsert(d, mText(title));
  if (isdef(dParent)) mAppend(dParent, d);
  return d;
}
function mNull(d, attr) { d.removeAttribute(attr); }
function modal_off() { let d = mBy('dModal'); d.innerHTML = ''; d.style.display = 'none'; }
function modal_on() { let d = mBy('dModal'); return d; }
function modify_def_players(list) {
  console.log('list', list);
  return;
  let uname = Session.cur_user;
  Session.def_players = list;
  newlist = get_def_players_for_user(uname);
  populate_players(newlist);
}
function modify_item_for_adaptive(item, items, n) {
  item.numSyms = n;
  [item.rows, item.cols, item.colarr] = calc_syms(item.numSyms);
  let other_items = items.filter(x => x != item);
  let shared_syms = find_shared_keys(item.keys, other_items.map(x => x.keys));
  let other_symbols = item.keys.filter(x => !shared_syms.includes(x));
  item.keys = shared_syms;
  let num_missing = item.numSyms - item.keys.length;
  item.keys = item.keys.concat(rChoose(other_symbols, num_missing));
  shuffle(item.keys);
  item.scales = item.keys.map(x => rChoose([1, .75, 1.2, .9, .8]));
}
function modify_table() {
  let uname = Session.cur_user;
  let table = Session.cur_table;
  if (nundef(table)) { alert('no table available!'); return; }
  let game = Session.cur_game = table.game;
  let tid = Session.cur_tid = table.id;
  let t = {};
  t.id = Session.cur_tid;
  t.players = valf(lookup(Session, ['game_options', 'players']), table.players);
  t.options = valf(lookup(Session, ['game_options', 'game']), table.options);
  t.pl_options = get_player_options(t.players, game);
  console.log('settings to table:\nnew players', t.players, '\nnew options', t.options);
  t.player_init = {};
  return t;
}
function modifyColor() {
  const colors = [YELLOW, 'skyblue', "green", "purple", "yellow"];
  document.body.style.setProperty('--corner-color', colors[Math.floor(Math.random() * colors.length)]);
  document.body.style.setProperty('--color1', colors[Math.floor(Math.random() * colors.length)]);
  document.body.style.setProperty('--color2', colors[Math.floor(Math.random() * colors.length)]);
}
function modifyColorkey(item) {
  let colorkey = chooseRandom(Object.keys(ColorDict));
  let textShadowColor = ColorDict[colorkey].c;
  item.textShadowColor = textShadowColor;
  item.color = ColorDict[colorkey];
  item.colorKey = colorkey;
  applyColorkey(item);
}
function modifyServerData() {
  let pl = serverData.players[GAMEPLID];
  let o = GAME == 'catan' ? pl.devcards : pl.hand;
  if (!o) {
    for (const plid in serverData.players) {
      serverData.players[plid].hand = { _set: [] };
    }
    o = pl.hand;
  }
  let cards = getElements(o);
  if (cards.length > 5) resetPlayerCards(); else addCardsToPlayers();
  let opt = serverData.options;
  if (opt) {
    let keys = Object.keys(opt);
    let firstKey = keys[0];
    let actions = opt[firstKey].actions._set[0]._tuple[0]._set;
    if (actions.length > 50) removedActions = actions.splice(0, 8);
    else if (actions.length > 33) removedActions = removedActions.concat(actions.splice(0, 30));
    else removedActions.map(x => actions.push(x));
  }
}
function modifyServerDataRandom(username) {
  _syncUsernameOfSender(username);
  prevServerData = jsCopy(serverData);
  let ranks = ['2', '3', '4', 'Q', 'J', 'T', 'A', '9'];
  let dModify = serverData.table ? serverData.table : serverData;
  let keys = Object.keys(dModify);
  let nChange = randomNumber(1, keys.length);
  shuffle(keys);
  console.log('>>>change', nChange, 'items!')
  for (let i = 0; i < nChange; i++) {
    let id = keys[i];
    let val = dModify[id];
    if (isLiteral(val)) dModify[id] = { id: id, value: val };
    dModify[id].rank = chooseRandom(ranks);
  }
}
function modLabel(item, newLabel, styles) {
  let dLabel = iLabel(item);
  dLabel.innerHTML = newLabel;
  mStyleX(dLabel, styles);
  item.label = newLabel;
  return dLabel;
}
function more() {
  let sz = measureText(text, styles, cx);
  console.log('sz', sz)
  let [v, h] = [pos[0], pos[1]];
  let offy = v == 't' ? -sz.h : 'c' ? -sz.h / 2 : 0;
  let offx = h == 'l' ? -sz.w : 'c' ? -sz.w / 2 : 0;
  let [x, y] = [styles.x + offx, styles.y + offy];
  console.log('pos', pos, styles.x, styles.y, x, y)
  cx.fillText(text, x, y);
  return;
  if (pos[1] == 'c') cx.textAlign = 'center';
  cx.font = `16px Arial`;
  cx.fillStyle = color;
  cx.fillText(`${label}`, x, y + (pos[0] == 'b' ? 20 : -10));
}
function MOVE(from, to, captured, promoted, flag) { return (from | (to << 7) | (captured << 14) | (promoted << 20) | flag); }
function move_down(canvas, item) { item.y += 1; canvas.clamp(item); return true; }
function move_probs(canvas, item) {
  let pinc = get_with_prob(item.probs);
  item.x += pinc.x; item.y += pinc.y;
  canvas.clamp(item);
  return true;
}
function move_random(canvas, item) { item.x += rFloat(-1, 1); item.y += rFloat(-1, 1); canvas.clamp(item); return true; }
function move_todo_to_history(otree) {
  otree.history = otree.history.concat(otree.todo);
}
function Move2FromTo(move) {
  var ff = FilesBrd[FROMSQ(move)];
  var rf = RanksBrd[FROMSQ(move)];
  var ft = FilesBrd[TOSQ(move)];
  var rt = RanksBrd[TOSQ(move)];
  return { from: { sq: FROMSQ(move), file: ff, rank: rf }, to: { sq: TOSQ(move), file: ft, rank: rt } };
}
function moveAvatar(username, x, y) { mStyleX(getAvatar(username), { left: x, top: y }); }
function moveCardsFromTo(cards, from, to) { }
function MoveExists(move) {
  GenerateMoves();
  var index;
  var moveFound = NOMOVE;
  for (index = brd_moveListStart[brd_ply]; index < brd_moveListStart[brd_ply + 1]; ++index) {
    moveFound = brd_moveList[index];
    if (MakeMove(moveFound) == BOOL.FALSE) {
      continue;
    }
    TakeMove();
    if (move == moveFound) {
      return BOOL.TRUE;
    }
  }
  return BOOL.FALSE;
}
function moveFromTo_v0(item, d1, d2) {
  let bi = iTableBounds(item);
  let b1 = iTableBounds(d1);
  let b2 = iTableBounds(d2);
  console.log('item', bi);
  console.log('d1', b1);
  console.log('d2', b2);
  mStyleX(dTable, { bg: 'yellow' });
  let dist = { x: b2.x - b1.x, y: b2.y - b1.y };
  item.div.style.zIndex = 100;
  let a = aTranslateBy(item.div, dist.x, dist.y, 500);
  a.onfinish = () => { mAppend(d2, item.div); item.div.style.zIndex = item.z = iZMax(); };
  return;
  setTimeout(() => {
    console.log(item.div);
    let d = item.div;
    mRemove(d);
  }, 1500);
  setTimeout(() => {
    let item = iAppend52(28, d2);
    mCenterAbs(item.div);
  }, 1500);
}
function MoveGUIPiece(move) {
  var from = FROMSQ(move);
  var to = TOSQ(move);
  var flippedFrom = from;
  var flippedTo = to;
  var epWhite = -10;
  var epBlack = 10;
  if (GameController.BoardFlipped == BOOL.TRUE) {
    flippedFrom = MIRROR120(from);
    flippedTo = MIRROR120(to);
    epWhite = 10;
    epBlack = -10;
  }
  if (move & MFLAGEP) {
    var epRemove;
    if (brd_side == COLOURS.BLACK) {
      epRemove = flippedTo + epWhite;
    } else {
      epRemove = flippedTo + epBlack;
    }
    console.log("en pas removing from " + PrSq(epRemove));
    RemoveGUIPiece(epRemove);
  } else if (CAPTURED(move)) {
    RemoveGUIPiece(flippedTo);
  }
  var rank = RanksBrd[flippedTo];
  var file = FilesBrd[flippedTo];
  var rankName = "rank" + (rank + 1);
  var fileName = "file" + (file + 1);
  $(".Piece").each(function (index) {
    if ((RanksBrd[flippedFrom] == 7 - Math.round($(this).position().top / 60)) && (FilesBrd[flippedFrom] == Math.round($(this).position().left / 60))) {
      $(this).removeClass();
      $(this).addClass("Piece clickElement " + rankName + " " + fileName);
    }
  });
  if (move & MFLAGCA) {
    if (GameController.BoardFlipped == BOOL.TRUE) {
      switch (to) {
        case SQUARES.G1: RemoveGUIPiece(MIRROR120(SQUARES.H1)); AddGUIPiece(MIRROR120(SQUARES.F1), PIECES.wR); break;
        case SQUARES.C1: RemoveGUIPiece(MIRROR120(SQUARES.A1)); AddGUIPiece(MIRROR120(SQUARES.D1), PIECES.wR); break;
        case SQUARES.G8: RemoveGUIPiece(MIRROR120(SQUARES.H8)); AddGUIPiece(MIRROR120(SQUARES.F8), PIECES.bR); break;
        case SQUARES.C8: RemoveGUIPiece(MIRROR120(SQUARES.A8)); AddGUIPiece(MIRROR120(SQUARES.D8), PIECES.bR); break;
      }
    } else {
      switch (to) {
        case SQUARES.G1: RemoveGUIPiece(SQUARES.H1); AddGUIPiece(SQUARES.F1, PIECES.wR); break;
        case SQUARES.C1: RemoveGUIPiece(SQUARES.A1); AddGUIPiece(SQUARES.D1, PIECES.wR); break;
        case SQUARES.G8: RemoveGUIPiece(SQUARES.H8); AddGUIPiece(SQUARES.F8, PIECES.bR); break;
        case SQUARES.C8: RemoveGUIPiece(SQUARES.A8); AddGUIPiece(SQUARES.D8, PIECES.bR); break;
      }
    }
  }
  var prom = PROMOTED(move);
  console.log("PromPce:" + prom);
  if (prom != PIECES.EMPTY) {
    console.log("prom removing from " + PrSq(flippedTo));
    RemoveGUIPiece(flippedTo);
    AddGUIPiece(flippedTo, prom);
  }
  printGameLine();
}
function moveMinuteHands(containers) {
  for (var i = 0; i < containers.length; i++) {
    containers[i].style.webkitTransform = 'rotateZ(6deg)';
    containers[i].style.transform = 'rotateZ(6deg)';
  }
  setInterval(function () {
    for (var i = 0; i < containers.length; i++) {
      if (containers[i].angle === undefined) {
        containers[i].angle = 12;
      } else {
        containers[i].angle += 6;
      }
      containers[i].style.webkitTransform = 'rotateZ(' + containers[i].angle + 'deg)';
      containers[i].style.transform = 'rotateZ(' + containers[i].angle + 'deg)';
    }
  }, 60000);
}
function MovePiece(from, to) {
  var index = 0;
  var pce = brd_pieces[from];
  var col = PieceCol[pce];
  HASH_PCE(pce, from);
  brd_pieces[from] = PIECES.EMPTY;
  HASH_PCE(pce, to);
  brd_pieces[to] = pce;
  for (index = 0; index < brd_pceNum[pce]; ++index) {
    if (brd_pList[PCEINDEX(pce, index)] == from) {
      brd_pList[PCEINDEX(pce, index)] = to;
      break;
    }
  }
}
function moveSecondHands() {
  var containers = document.querySelectorAll('.seconds-container');
  setInterval(function () {
    for (var i = 0; i < containers.length; i++) {
      if (containers[i].angle === undefined) {
        containers[i].angle = 6;
      } else {
        containers[i].angle += 6;
      }
      containers[i].style.webkitTransform = 'rotateZ(' + containers[i].angle + 'deg)';
      containers[i].style.transform = 'rotateZ(' + containers[i].angle + 'deg)';
    }
  }, 1000);
}
function moveTo(card, dx, dy) { card.animateTo({ delay: 1000, duration: 500, ease: 'quartOut', x: dx, y: dy }) }
function mp_over(d, dParent, fz, color, picStyle) {
  let b = getRect(dParent);
  let cx = b.w / 2 + b.x;
  let cy = b.h / 2 + b.y;
  d.style.top = picStyle == 'segoeBlack' ? ((cy - fz * 2 / 3) + 'px') : ((cy - fz / 2) + 'px');
  d.style.left = picStyle == 'segoeBlack' ? ((cx - fz / 3) + 'px') : ((cx - fz * 1.2 / 2) + 'px');
  d.style.color = color;
  d.style.fontSize = fz + 'px';
  d.style.display = 'block';
  return d;
}
function mPane(dParent, pos, styles, id) {
  console.log(pos, pos[0])
  let d = mDiv(dParent, styles, id);
  if (nundef(pos)) pos = 't'; else pos = pos[0].toLowerCase();
  let posStyle = { display: 'flex' };
  switch (pos) {
    case 't': addKeys({ w: '100%' }, posStyle); break;
    case 'l': addKeys({ h: '100%', 'flex-direction': 'column' }, posStyle); break;
    case 'b': addKeys({ w: '100%', position: 'absolute', bottom: 0 }, posStyle); break;
    case 'r': addKeys({ h: '100%', 'flex-direction': 'column', position: 'absolute', right: 0 }, posStyle); break;
  }
  mStyleX(d, posStyle);
  return d;
}
function mPanel(dParent) {
  let d = mDiv(dParent, { position: 'relative' });
  mCenterCenterFlex(d);
  return d;
}
function mPara(text, dParent, styles, classes) {
  let d = mCreate('p');
  mAppend(dParent, d);
  if (!isEmpty(text)) d.innerHTML = text;
  if (isdef(styles)) mStyleX(d, styles);
  if (isdef(classes)) mClass(d, classes);
  return d;
}
function mParent(elem) { return elem.parentNode; }
function mPath(p) {
  if (!(p.path.includes('.'))) p.path += '.png';
  return PERLENPATH_FRONT + 'perlen/' + p.path;
}
function mpBadge(info, label, { w, h, bg, fgPic, fgText }, handler, dParent, styles, classes = 'picButton', isText, isOmoji) {
  if (nundef(handler)) handler = (ev) => { let id = evToClosestId(ev); let info = symbolDict[id.substring(1)]; if (isLabelVisible(id)) maHideLabel(id, info); else maShowLabel(id, info); mBy('dummy').focus(); }
  let picLabelStyles = getBadgeStyles(styles, {}, {}, w, h, 60, 2, 4, 'arial', bg, 'transparent', fgPic, fgText, true);
  let x = maPicLabelFitX(info, label.toUpperCase(), { wmax: w }, dParent, picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], true, false);
  x.id = 'd' + info.key;
  x.lastChild.style.cursor = 'default';
  x.style.userSelect = 'none';
  return x;
}
function mpButton(info, label, { w, h, bg, fgPic, fgText }, handler, dParent, styles, classes = 'picButton', isText, isOmoji) {
  if (nundef(handler)) handler = labelToggler;
  let picLabelStyles = getHarmoniousStylesPlusPlus(styles, {}, {}, w, h, 65, 0, 'arial', bg, 'transparent', fgPic, fgText, true);
  let x = maPicLabelFitX(info, label.toUpperCase(), { wmax: w }, dParent, picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], true, false);
  x.id = 'd' + info.key;
  x.onclick = handler;
  x.style.cursor = 'pointer';
  x.lastChild.style.cursor = 'pointer';
  x.style.userSelect = 'none';
  mClass(x, classes);
  return x;
}
function mpGridLabeled(dParent, list, picLabelStyles) {
  let dGrid = mDiv(dParent);
  let elems = [];
  let isText = true;
  let isOmoji = false;
  for (const k of list) {
    let info = symbolDict[k];
    let el = maPicLabel(info, dGrid, picLabelStyles[0], picLabelStyles[1], picLabelStyles[2], isText, isOmoji)
    elems.push(el);
  }
  let gridStyles = { 'place-content': 'center', gap: 4, margin: 4, padding: 4, rounding: 5 };
  let size = layoutGrid(elems, dGrid, gridStyles, { rows: 10, isInline: true });
}
function mPic(kItem, dParent, styles, classes) {
  let item;
  if (isString(kItem)) { item = { id: getUID(), key: kItem, info: Syms[kItem] }; }
  else if (nundef(kItem.info)) { item = { id: getUID(), key: kItem.key, info: kItem }; }
  else item = kItem;
  let info = item.info;
  let dOuter = mDiv(dParent);
  mCenterCenterFlex(dOuter);
  let d = mDiv(dOuter);
  d.innerHTML = info.text;
  if (nundef(styles)) styles = {};
  let picStyles = { family: info.family, fz: valf(styles.fz, valf(styles.h / 2, 25)), display: 'inline-block' };
  mStyle(dOuter, styles);
  mStyle(d, picStyles);
  if (isdef(classes)) mClass(dOuter, classes);
  iAdd(item, { div: dOuter, dPic: d });
  return item;
}
function mPicButton(key, handler, dParent, styles, classes) {
  let x = createPicto({
    key: key, w: 20, h: 20, unit: 'px', fg: 'yellow', bg: 'violet',
    padding: 2, margin: 0, cat: 'd', parent: dParent, rounding: 4
  });
  if (isdef(handler)) x.onclick = handler;
  if (isdef(styles)) {
    mStyle(x, styles);
  }
  if (isdef(classes)) { mClass(x, ...classes); }
  else mClass(x, 'picButton');
  return x;
}
function mPicButtonSimple(key, handler, dParent, styles, classes) {
  let x = createPictoSimple({ key: key, cat: 'd', parent: dParent });
  if (isdef(handler)) x.onclick = handler;
  if (isdef(styles)) { mStyle(x, styles); }
  if (isdef(classes)) { mClass(x, ...classes); }
  return x;
}
function mPicSimple(info, dParent, { w, h, unit = 'px', fg, bg, padding, border, rounding, shape }) {
  if (nundef(w)) w = 25;
  if (nundef(h)) h = w;
  let d = document.createElement('div');
  if (dParent) dParent.appendChild(d);
  d.style.textAlign = 'center';
  d.style.fontFamily = info.family;
  d.style.fontWeight = 900;
  d.style.fontSize = h + unit;
  [bg, fg] = getExtendedColors(bg, fg);
  if (isdef(bg)) d.style.backgroundColor = bg;
  if (isdef(fg)) d.style.color = fg;
  d.innerHTML = info.text;
  if (isdef(padding)) d.style.padding = padding + unit;
  d.style.display = 'inline-block';
  d.style.minHeight = h + padding + unit;
  d.style.minWidth = w + 2 * padding + unit;
  if (isdef(border)) d.style.border = border;
  if (isdef(rounding)) d.style.borderRadius = rounding + unit;
  else if (isdef(shape) && shape == 'ellipse') {
    let b = getBounds(d);
    let vertRadius = b.height / 2;
    let horRadius = b.width / 2;
    let r = Math.min(vertRadius, horRadius);
    console.log(b, r)
    d.style.borderRadius = `${r}${unit}`;
  }
  d.key = info.key;
  return d;
}
function mPicto(n, R, uidParent) {
  let dParent = mBy(n.idUiParent);
  let ui;
  let w = (isdef(n.params.size.w) ? n.params.size.w : 50);
  let h = (isdef(n.params.size.h) ? n.params.size.h : 50);
  let fz = (isdef(n.params.fontSize) ? n.params.fontSize : 20);
  let bg = isdef(n.params.bg) ? n.params.bg : randomColor();
  let fg = isdef(n.params.fg) ? n.params.fg : colorIdealText(bg);
  let key = n.content;
  ui = pictoDiv(key, bg, w, h)
  mAppend(dParent, ui);
  return ui;
}
function mPictoWrapper(n, R, uidParent) {
  let dParent = mBy(n.idUiParent);
  let uiWrapper = mDiv(dParent);
  addClass(uiWrapper, 'cardWrapper');
  let key = n.content;
  let ui = maPicSimple(key);
  mAppend(uiWrapper, ui);
  addClass(ui, 'pictoStyle');
  return ui;
}
function mPlace(elem, pos, offx, offy) {
  elem = toElem(elem);
  pos = pos.toLowerCase();
  let dParent = elem.parentNode; if (dParent.style.position != 'absolute') dParent.style.position = 'relative';
  let vert = valf(offx, 0);
  let hor = isdef(offy) ? offy : vert;
  if (pos[0] == 'c' || pos[1] == 'c') {
    let rParent = getRect(dParent);
    let [wParent, hParent] = [rParent.w, rParent.h];
    let rElem = getRect(elem);
    let [wElem, hElem] = [rElem.w, rElem.h];
    switch (pos) {
      case 'cc': mStyle(elem, { position: 'absolute', left: hor + (wParent - wElem) / 2, top: vert + (hParent - hElem) / 2 }); break;
      case 'tc': mStyle(elem, { position: 'absolute', left: hor + (wParent - wElem) / 2, top: vert }); break;
      case 'bc': mStyle(elem, { position: 'absolute', left: hor + (wParent - wElem) / 2, bottom: vert }); break;
      case 'cl': mStyle(elem, { position: 'absolute', left: hor, top: vert + (hParent - hElem) / 2 }); break;
      case 'cr': mStyle(elem, { position: 'absolute', right: hor, top: vert + (hParent - hElem) / 2 }); break;
    }
    return;
  }
  let di = { t: 'top', b: 'bottom', r: 'right', l: 'left' };
  elem.style.position = 'absolute';
  elem.style[di[pos[0]]] = hor + 'px'; elem.style[di[pos[1]]] = vert + 'px';
}
function mPlaceText(text, where, dParent, styles, innerStyles, classes) {
  let box;
  if (where.length == 4) {
    let [t, r, b, l] = where;
    box = mBoxFromMargins(dParent, t, r, b, l);
  } else if (where.length == 3) {
    let [wb, hb, place] = where;
    box = mDiv(dParent, { w: wb, h: hb });
    mPlace(box, place);
  }
  let r = mMeasure(box);
  let [fz, w, h] = fitFont(text, 20, r.w, r.h);
  console.log('res', fz, w, h);
  let dText = mDiv(box, {
    w: w, h: h, fz: fz,
    position: 'absolute', transform: 'translate(-50%,-50%)', top: '50%', left: '50%'
  }, null, text);
  if (isdef(styles)) mStyle(box, styles);
  if (isdef(innerStyles)) mStyle(dText, innerStyles);
  if (isdef(classes)) mStyle(box, classes);
  return box;
}
function mPlayPause(dParent, styles = {}, handle_play = null, handle_pause = null) {
  if (!handle_play) handle_play = audio_onclick_pp;
  if (!handle_pause) handle_pause = handle_play;
  let html = `
    <div id="dButtons">
      <a id="bPlay" href="#">
        <i class="fa fa-play fa-2x"></i>
      </a>
      <a id="bPause" href="#" style="display: none">
        <i class="fa fa-pause fa-2x"></i>
      </a>
    </div>
  `;
  let pp = mCreateFrom(html);
  mAppend(dParent, pp);
  addKeys({ fz: 28, fg: 'lightgreen', display: 'flex', ajcenter: true, w: getRect(dParent).w }, styles);
  mStyle(pp, styles);
  mBy('bPlay').onclick = () => { hide0('bPlay'); show0('bPause'); handle_play(); }
  mBy('bPause').onclick = () => { hide0('bPause'); show0('bPlay'); handle_pause(); }
  let [fg, fz] = [styles.fg, styles.fz];
  mStyle(mBy('bPlay'), { fg: fg, fz: fz })
  mStyle(mBy('bPause'), { fg: fg, fz: fz })
  return { ui: pp, play: () => fireClick(mBy('bPlay')), pause: () => fireClick(mBy('bPause')) };
}
function mpLineup(dParent, keys, bgs, fg, textColor, texts) {
  let g2Pics = [];
  let stylesForLabelButton = { rounding: 10, margin: 4 };
  const picStyles = ['twitterText', 'twitterImage', 'openMojiText', 'openMojiImage', 'segoe', 'openMojiBlackText', 'segoeBlack'];
  let isText = true; let isOmoji = false;
  for (let i = 0; i < keys.length; i++) {
    let k = replaceAll(keys[i], ' ', '-');
    let info = symbolDict[k];
    let label = "level " + i;
    let h = window.innerHeight; let hBadge = Math.floor((h) / 14);
    let d1 = mpBadge(info, label, { w: hBadge, h: hBadge, bg: bgs[i], fgPic: fg, fgText: textColor }, null, dParent, stylesForLabelButton, 'frameOnHover', isText, isOmoji);
    g2Pics.push({ key: info.key, info: info, div: d1, id: d1.id, index: i });
  }
  return g2Pics;
}
function mPopup(content, dParent, styles, id) {
  if (isdef(mBy(id))) mRemove(id);
  mIfNotRelative(dParent);
  if (nundef(styles)) styles = { top: 0, left: 0 };
  styles.position = 'absolute';
  let d1 = mDiv(dParent, styles, valf(id, getUID()), content);
  return d1;
}
function mPos(d, x, y, unit = 'px') { mStyle(d, { left: x, top: y, position: 'absolute' }, unit); }
function mPosAbs(d) { d.style.position = 'absolute'; }
function mPosBL(d, x, y, unit = 'px') { y = valf(y, x); mStyle(d, { left: x, bottom: y, position: 'absolute' }, unit); }
function mPosBottom(d, x, y, unit = 'px') { mStyle(d, { left: x, bottom: y, position: 'absolute' }, unit); }
function mPosBottomRight(d, x, y, unit = 'px') { mStyle(d, { right: x, bottom: y, position: 'absolute' }, unit); }
function mPosBR(d, x, y, unit = 'px') { y = valf(y, x); mStyle(d, { right: x, bottom: y, position: 'absolute' }, unit); }
function mPosRel(d, x, y, unit) { d.style.position = 'relative'; if (isdef(x)) mStyle(d, { left: x, top: y }, unit); }
function mPosRight(d, x, y, unit = 'px') { mStyle(d, { right: x, top: y, position: 'absolute' }, unit); }
function mPosTL(d, x, y, unit = 'px') { y = valf(y, x); mStyle(d, { left: x, top: y, position: 'absolute' }, unit); }
function mPosTR(d, x, y, unit = 'px') { y = valf(y, x); mStyle(d, { right: x, top: y, position: 'absolute' }, unit); }
function mpOver(d, dParent, fz, color, picStyle) {
  let b = getRect(dParent);
  let cx = b.w / 2 + b.x;
  let cy = b.h / 2 + b.y;
  d.style.top = picStyle == 'segoeBlack' ? ((cy - fz * 2 / 3) + 'px') : ((cy - fz / 2) + 'px');
  d.style.left = picStyle == 'segoeBlack' ? ((cx - fz / 3) + 'px') : ((cx - fz * 1.2 / 2) + 'px');
  d.style.color = color;
  d.style.fontSize = fz + 'px';
  d.style.display = 'block';
  let { isText, isOmoji } = getParamsForMaPicStyle(picStyle);
  d.style.fontFamily = isString(isOmoji) ? isOmoji : isOmoji ? 'emoOpen' : 'emoNoto';
  return d;
}
function mpOverImage(d, dParent, sz) {
  let b = getRect(dParent);
  let cx = b.w / 2 + b.x;
  let cy = b.h / 2 + b.y;
  sz = Math.max(sz, 50);
  d.style.top = (cy - sz / 2) + 'px';
  d.style.left = (cx - sz / 4) + 'px';
  d.style.color = 'green';
  d.style.fontSize = sz + 'px';
  d.style.display = 'block';
  return d;
}
function mpSimpleButton(key, dParent, handler) {
  let info = symbolDict[key];
  let label = stringAfterLast(info.E, '|');
  let st = { w: 200, h: 200, bg: 'random', fgPic: 'random', fgText: 'contrast' };
  let stylesForLabelButton = { rounding: 10, margin: 24 };
  let { isText, isOmoji } = getParamsForMaPicStyle('twitterText');
  let d1 = maPicLabelButtonFitText(info, label, st, handler, dParent, stylesForLabelButton, 'frameOnHover', isText, isOmoji);
  return d1;
}
function mPulse(d, ms, callback = null) { mClass(d, 'onPulse'); TO[getUID()] = setTimeout(() => { mClassRemove(d, 'onPulse'); if (callback) callback(); }, ms); }
function mPulse1(d, callback) { mPulse(d, 1000, callback); }
function mPulse2(d, callback) { mPulse(d, 2000, callback); }
function mPulse3(d, callback) { mPulse(d, 3000, callback); }
function mPuppet(key, dParent, styles = {}, dist = 250) {
  if (nundef(dParent)) dParent = document.body; else dParent = toElem(dParent);
  addKeys({ position: 'fixed', fz: 40, left: 40, top: 40 }, styles);
  dPuppet = miPic(key, dParent, styles);
  aRollby(dPuppet, dist);
}
function mRadio(label, val, name, dParent, styles = {}, handler, group_id, is_on) {
  let cursor = styles.cursor; delete styles.cursor;
  let d = mDiv(dParent, styles, group_id + '_' + val);
  let id = isdef(group_id) ? `i_${group_id}_${val}` : getUID();
  let type = isdef(group_id) ? 'radio' : 'checkbox';
  let checked = isdef(is_on) ? is_on : false;
  let inp = mCreateFrom(`<input class='radio' id='${id}' type="${type}" name="${name}" value="${val}">`);
  if (checked) inp.checked = true;
  let text = mCreateFrom(`<label for='${inp.id}'>${label}</label>`);
  if (isdef(cursor)) { inp.style.cursor = text.style.cursor = cursor; }
  mAppend(d, inp);
  mAppend(d, text);
  if (isdef(handler)) {
    inp.onclick = ev => {
      ev.cancelBubble = true;
      if (handler == 'toggle') {
      } else if (isdef(handler)) {
        handler(val);
      }
    };
  }
  return d;
}
function mRadio1(label, val, dParent, styles = {}, handler, group_id) {
  let cursor = styles.cursor; delete styles.cursor;
  let d = mDiv(dParent, styles, group_id + '_' + val);
  let inp = mCreateFrom(`<input class='radio' id='i_${group_id}_${val}' type="radio" name="${group_id}" value="${val}" >`);
  let text = mCreateFrom(`<label for='${inp.id}'>${label}</label>`);
  if (isdef(cursor)) { inp.style.cursor = text.style.cursor = cursor; }
  mAppend(d, inp);
  mAppend(d, text);
  if (isdef(handler)) d.onclick = () => handler(val);
  return d;
}
function mRadioGroup(dParent, styles, id, legend, legendstyles) {
  let f = mCreate('fieldset');
  f.id = id;
  if (isdef(styles)) mStyle(f, styles);
  if (isdef(legend)) {
    let l = mCreate('legend');
    l.innerHTML = legend;
    mAppend(f, l);
    if (isdef(legendstyles)) { mStyle(l, legendstyles); }
  }
  mAppend(dParent, f);
  return f;
}
function mRadioToggle(label, val, dParent, styles = {}, is_on = true) {
  let cursor = styles.cursor; delete styles.cursor;
  let d = mDiv(dParent, styles);
  let id = getUID();
  let inp = mCreateFrom(`<input class='radio' id='${id}' type="checkbox" checked="${is_on}" value="${val}" >`);
  let text = mCreateFrom(`<label for='${id}'>${label}</label>`);
  if (isdef(cursor)) { inp.style.cursor = text.style.cursor = cursor; }
  mAppend(d, inp);
  mAppend(d, text);
  return d;
}
function mRemove(elem) {
  elem = toElem(elem);
  var a = elem.attributes, i, l, n;
  if (a) {
    for (i = a.length - 1; i >= 0; i -= 1) {
      n = a[i].name;
      if (typeof elem[n] === 'function') {
        elem[n] = null;
      }
    }
  }
  a = elem.childNodes;
  if (a) {
    l = a.length;
    for (i = a.length - 1; i >= 0; i -= 1) {
      mRemove(elem.childNodes[i]);
    }
  }
  elem.remove();
}
function mRemoveChildrenFromIndex(dParent, i) { while (dParent.children[i]) { mRemove(dParent.children[i]); } }
function mRemoveClass(d) { for (let i = 1; i < arguments.length; i++) d.classList.remove(arguments[i]); }
function mRemoveClasses(d, lst) { for (let i = 1; i < lst.length; i++) d.classList.remove(lst[i]); }
function mRemoveGracefully(elem) {
  mClass(elem, 'aniFastDisappear');
  setTimeout(() => mRemove(elem), 500);
}
function mRemoveStyle(d, styles) { for (const k of styles) d.style[k] = null; }
function mReveal(d) { d.style.opacity = 1; }
function mri(o, p, d) {
  p = { x: p.x + d, y: p.y };
  if (o) o.setPos(p.x, p.y);
  return p;
}
function mRight(dParent, d, margin = 0) {
  mStyle(dParent, { display: 'flex', 'justify-content': 'space-between', 'align-items': 'center' });
  mAppend(dParent, d);
  mStyle(d, { margin: margin, 'align-self': 'flex-end' });
  return d;
}
function mRise(d, ms = 800) {
  toElem(d).animate([{ opacity: 0, transform: 'translateY(50px)' }, { opacity: 1, transform: 'translateY(0px)' },], { fill: 'both', duration: ms, easing: 'ease' });
}
function mRot(d, angle) { d.style.transform = 'rotate(' + angle + 'deg)'; }
function mRow(dParent, styles) {
  return mDiv(dParent, styles)
}
function mRows(dParent, arr, itemStyles = { bg: 'random' }, rowStyles, colStyles, akku) {
  let d0 = mDiv100(dParent, { display: 'flex', dir: 'column', 'justify-content': 'space-between' });
  if (isdef(rowStyles)) mStyle(d0, rowStyles);
  for (let i = 0; i < arr.length; i++) {
    let content = arr[i];
    if (isList(content)) {
      let d1 = mDiv(d0);
      mCols(d1, content, itemStyles, rowStyles, colStyles, akku);
    } else {
      d1 = mContent(content, d0, itemStyles);
      akku.push(d1);
    }
  }
}
function mRows100(dParent, spec, gap = 4) {
  let grid = mDiv(dParent, { padding: gap, gap: gap, box: true, display: 'grid', h: '100%', w: '100%' })
  grid.style.gridTemplateRows = spec;
  let res = [];
  for (const i of range(stringCount(spec, ' ') + 1)) {
    let d = mDiv(grid, { h: '100%', w: '100%', box: true })
    res.push(d);
  }
  return res;
}
function mRowsX(dParent, arr, itemStyles = { bg: 'random' }, rowStyles, colStyles, akku) {
  let d0 = mDiv100(dParent, { display: 'flex', dir: 'column', 'justify-content': 'space-between' });
  if (isdef(rowStyles)) mStyle(d0, rowStyles);
  for (let i = 0; i < arr.length; i++) {
    let content = arr[i];
    if (isList(content)) {
      let d1 = mDiv(d0);
      mColsX(d1, content, itemStyles, rowStyles, colStyles, akku);
    } else {
      d1 = mContentX(content, d0, itemStyles);
      akku.push(d1);
    }
  }
}
function mScale(d, scale) { mStyle(d, { 'transform-origin': 'top', transform: `scale(${scale})` }); }
function mScreen(dParent, styles) { let d = mDover(dParent); if (isdef(styles)) mStyleX(d, styles); return d; }
function mSearch(handler, dParent, styles, classes) {
  let html = `
    <form id="fSearch" action="javascript:void(0);" class='form'>
      <label>Keywords:</label>
      <input id="iKeywords" type="text" name="keywords" style="flex-grow:1" />
      <button type="submit" class='hop1' >Search</button>
    </form>
  `;
  let elem = mCreateFrom(html);
  mAppend(dParent, elem);
  elem.onsubmit = handler;
  return elem;
}
function mSearchGoLive(label, handler, dParent, styles = {}, opts = {}) {
  let html = `
    <form action="javascript:void(0);" autocomplete="off">
    <label>${label}</label>
    </form>
  `;
  let elem = mCreateFrom(html);
  mAppend(dParent, elem);
  mStyle(elem, { display: 'grid', 'align-items': 'center', w100: true, gap: 4, 'grid-template-columns': 'auto 1fr auto auto' });
  let inp = mInput(elem, styles, opts);
  let allhandler = () => handler(mBy(inp.id).value.trim(), false); 
  mButton('GO', allhandler, elem);
  let livehandler = () => handler(mBy(inp.id).value.trim(), true); 
  mButton('Live', livehandler, elem);
  elem.onsubmit = livehandler;
  return elem;
}
function mSection(styles = {}, id, inner, tag, classes) {
  let d = mBy(id);
  addKeys({ position: 'relative' }, styles);
  mStyle(d, styles);
  if (isdef(tag) && isdef(inner)) inner = `<${tag}>${inner}</${tag}>`;
  if (isdef(inner)) d.innerHTML = inner;
  if (isdef(classes)) mClass(d, classes);
  return d;
}
function msElapsedSince(msStart) { return Date.now() - msStart; }
function mSelect(dParent, optionList, friendlyList, initval, onselect, label, styles, classes) {
  let d = mDiv(dParent);
  val = valf(initval, optionList[0]);
  let inp = mCreate('select');
  inp.onchange = onselect;
  for (let i = 0; i < optionList.length; i++) {
    let opt = optionList[i];
    let friendly = friendlyList[opt];
    let el = mCreate('option');
    el.setAttribute('value', opt);
    el.innerHTML = friendly;
    mAppend(inp, el);
    if (opt == val) el.selected = true;
  }
  mAppend(d, inp);
  if (isdef(styles)) mStyle(inp, styles);
  if (isdef(classes)) mClass(inp, classes);
  return d;
}
function mSelectTableRow(r, color = 'pink') {
  let t = r.parentNode;
  for (const ch of t.children) mStyle(ch, { background: 'transparent' });
  mStyle(r, { background: color });
}
function mset_bounds(minzoom = 2, maxzoom = 20) {
  let map = M.map;
  map.options.minZoom = minzoom;
  map.options.maxZoom = maxzoom;
  var southWest = L.latLng(-89.98155760646617, -180),
    northEast = L.latLng(89.99346179538875, 180);
  var bounds = L.latLngBounds(southWest, northEast);
  map.setMaxBounds(bounds);
  map.on('drag', function () {
    map.panInsideBounds(bounds, { animate: false });
  });
}
function mset_layers(base, overlay) {
  let map = M.map;
  [base, overlay] = [toWords(base), toWords(overlay)];
  let baseLayers = {}, overlays = {};
  M.layers = {};
  for (const k of base) {
    let l = _get_layer(k, { opacity: 1 });
    l.overlay = false;
    l.key = k;
    M.layers[k] = baseLayers[k] = l;
  }
  for (const k of overlay) {
    let l = get_layer(k, { opacity: .5 });
    l.overlay = true;
    l.key = k;
    M.layers['ov_' + k] = overlays[k] = l;
  }
  M.layer_control = L.control.layers(baseLayers, overlays).addTo(map);
  baseLayers[base[0]].addTo(map);
  overlays[overlay[0]].addTo(map);
}
function mShape(shape, dParent, styles, pos, classes) {
  styles = valf(styles, { bg: 'random' });
  styles.display = 'inline-block';
  let x;
  if (isdef(PolyClips[shape])) {
    let d = mDiv(dParent, styles, null, null, classes);
    styles['clip-path'] = PolyClips[shape];
    mStyle(d, styles);
    x = d;
  } else {
    styles.rounding = shape == 'circle' || shape == 'ellipse' ? '50%' : valf(styles.rounding,0);
    x = mDiv(dParent, styles, null, null, classes);
  }
  if (isdef(pos)) { mPlace(x, pos); }
  return x;
}
function mShapeR(shape = 'hex', dParent = null, styles = {}, pos, classes) {
  let x;
  let bg = isdef(styles.bg) ? computeColorX(styles.bg) : 'conic-gradient(green,pink,green)';
  let sz = isdef(styles.sz) ? styles.sz : isdef(styles.w) ? styles.w : isdef(styles.h) ? styles.h : null;
  if (isdef(PolyClips[shape])) {
    sz = valf(sz, 80);
    let html = `<div style=
    "--b:${bg};
    --clip:${PolyClips[shape]};
    --patop:100%;
    --w:${sz}px;
    "></div>`;
    x = createElementFromHtml(html);
  } else {
    x = mShape(shape, dParent, styles, pos, classes);
    return x;
  }
  if (sz) {
    bvar = sz > 120 ? 8 : sz > 80 ? 5 : sz > 50 ? 3 : 1;
    mClass(x, "weired" + bvar);
    mStyle(x, { w: sz });
  }
  if (isdef(dParent)) mAppend(dParent, x);
  if (isdef(classes)) mClass(x, classes);
  if (isdef(pos)) { mPlace(x, pos); }
  return x;
}
function mShield(dParent, styles = { bg: '#00000020' }, id = null, classnames = null, hideonclick = false) {
  dParent = toElem(dParent);
  let d = mDiv(dParent, styles, id, classnames);
  lookupAddIfToList(DA, ['shields'], d);
  mIfNotRelative(dParent);
  mStyle(d, { position: 'absolute', left: 0, top: 0, w: '100%', h: '100%' });
  if (hideonclick) d.onclick = ev => { evNoBubble(ev); d.remove(); };
  else d.onclick = ev => { evNoBubble(ev); };
  mClass(d, 'topmost');
  return d;
}
function mShieldsOff() { if (nundef(DA.shields)) return; for (const d of DA.shields) d.remove(); }
function mShow(d, ms = 0) { if (ms > 0) mAppear(d, ms); else mStyle(d, { opacity: 1 }); }
function mShrink(d, x = .75, y = .75, ms = 800, callback = null) {
  let anim = toElem(d).animate([{ transform: `scale(${1},${1})` }, { transform: `scale(${x},${y})` },], { fill: 'both', duration: ms, easing: 'ease' });
  anim.onfinish = callback;
}
function mShrinkTranslate(child, scale, newParent, ms = 800, callback) {
  let [dx, dy] = get_screen_distance(child, newParent);
  mAnimate(child, 'transform', [`translateX(${dx}px) translateY(${dy}px) scale(${scale})`], callback, ms, 'ease');
}
function mShrinkUp(d, x = .75, y = 0, ms = 800, callback = null) {
  let anim = toElem(d).animate([{ transform: `scale(${1},${1})`, opacity: 1 }, { transform: `scale(${x},${y})`, opacity: 0 },], { fill: 'none', duration: ms, easing: 'ease' });
  anim.onfinish = mClear(d);
}
function mSidebar(title, dParent, styles, id, inner) {
  let elem = createElementFromHtml(`
  <div id="${id}" class="w3sidebar">
    <h1>${title}</h1>
    <a href="javascript:void(0)" class="closebtn">×</a>
  </div>  
  `);
  function openNav() {
    elem.style.width = "250px";
    dParent.style.marginLeft = "250px";
  }
  function closeNav() {
    elem.style.width = "0";
    dParent.style.marginLeft = "0";
  }
  elem.children[1].onclick = closeNav;
  mClass(dParent, 'w3sidebarParent');
  let dContent = mDiv(elem);
  mInsert(dParent.parentNode, elem);
  return { div: elem, dContent: dContent, fOpen: openNav, fClose: closeNav };
}
function mSimplest(n, R, uidParent) {
  let ui;
  let dParent = mBy(n.idUiParent);
  if (isdef(n.content)) {
    ui = mDiv(dParent);
    ui.innerHTML = n.content;
  } else {
    ui = mDiv(dParent);
  }
  let b = getBounds(ui, true);
  console.log('________createUi: ', n.uid, '\n', ui, '\nbounds', b.width, b.height);
  if (ui.id == '_1') ui.style.maxWidth = '140px';
  return ui;
}
function mSimplestInvisible(n, R, uidParent) {
  let dParent = mBy(n.idUiParent);
  let d = mDiv(dParent);
  if (n.content) {
    mText(n.content, d);
  }
  return d;
}
function MSInit() {
  ROOT = { id: 'root', elem: domId('root'), type: 'div', cat: 'd', children: [] };
  createMSTree(ROOT);
  simpleColors(S.options.colors[0]);
  measureMSTree(ROOT);
}
function mSize(d, w, h, unit = 'px', sizing) { if (nundef(h)) h = w; mStyle(d, { width: w, height: h }, unit); if (isdef(sizing)) setRect(d, sizing); }
function mSizePic(d, w, h = 0, unit = 'px') { return mStyle(d, { 'font-size': h / 2, 'font-weight': 900, 'padding-top': h / 4, 'text-align': 'center', 'box-sizing': 'border-box', width: w, height: h ? h : w }, unit); }
function msNow() { return Date.now(); }
function mSocketUploadImage(item, socket) {
  if (!item.loaded) {
    console.log('file not ready!click again!'); return;
  }
  socket.emit('testImageUpload', { filename: item.filename, image: item.base64 });
}
function mSpan(dParent, styles, innerHTML) {
  let d = mCreate('span');
  if (isdef(styles)) mStyle(d, styles);
  if (isdef(innerHTML)) d.innerHTML = innerHTML;
  if (isdef(dParent)) mAppend(dParent, d);
  return d;
}
function mStamp(d1, text, color, sz) {
  mStyle(d1, { position: 'relative' });
  let r = getRect(d1);
  let [w, h] = [r.w, r.h];
  color = valf(color, 'black');
  sz = valf(sz, r.h / 7);
  let [padding, border, rounding, angle] = [sz / 10, sz / 6, sz / 8, rChoose([-16, -14, -10, 10, 14])];
  let d2 = mDiv(d1, {
    fg: color,
    position: 'absolute', top: 25, left: 5,
    transform: `rotate(${angle}deg)`,
    fz: sz,
    hpadding: 2,
    vpadding: 0,
    rounding: rounding,
    border: `${border}px solid ${colorTrans(color, .8)}`,
    '-webkit-mask-size': `${w}px ${h}px`,
    '-webkit-mask-position': `50% 50%`,
    '-webkit-mask-image': 'url("../base/assets/images/textures/grunge.png")',
    weight: 400,
    display: 'inline-block',
    'text-transform': 'uppercase',
    family: 'blackops',
    'mix-blend-mode': 'multiply',
  }, null, text);
}
function msToTime(ms) {
  let secs = Math.floor(ms / 1000);
  let mins = Math.floor(secs / 60);
  secs = secs - mins * 60;
  let hours = Math.floor(mins / 60);
  mins = mins - hours * 60;
  return { h: hours, m: mins, s: secs };
}
function mStyle(elem, styles, unit = 'px') {
  elem = toElem(elem);
  if (isdef(styles.whrest)) { delete styles.whrest; styles.w = styles.h = 'rest'; } else if (isdef(styles.wh100)) { styles.w = styles.h = '100%'; delete styles.wh100; }
  if (isdef(styles.w100)) styles.w = '100%'; else if (isdef(styles.wrest)) styles.w = 'rest';
  if (isdef(styles.h100)) styles.h = '100%'; else if (isdef(styles.hrest)) styles.h = 'rest';
  let dParent = elem.parentNode;
  let pad = parseInt(valf(dParent.style.padding, '0'));
  let rp = getRect(dParent);
  let r = getRect(elem, dParent);
  if (styles.w == 'rest') {
    let left = r.l;
    let w = rp.w;
    let wrest = w - left - pad;
    styles.w = wrest;
  }
  if (styles.h == 'rest') {
    let r1 = getRect(dParent.lastChild, dParent);
    let hrest = rp.h - (r1.y) - pad;
    styles.h = hrest;
  }
  let bg, fg;
  if (isdef(styles.bg) || isdef(styles.fg)) {
    [bg, fg] = colorsFromBFA(styles.bg, styles.fg, styles.alpha);
  }
  if (isdef(styles.vpadding) || isdef(styles.hpadding)) {
    styles.padding = valf(styles.vpadding, 0) + unit + ' ' + valf(styles.hpadding, 0) + unit;
  }
  if (isdef(styles.vmargin) || isdef(styles.hmargin)) {
    styles.margin = valf(styles.vmargin, 0) + unit + ' ' + valf(styles.hmargin, 0) + unit;
  }
  if (isdef(styles.upperRounding) || isdef(styles.lowerRounding)) {
    let rtop = '' + valf(styles.upperRounding, 0) + unit;
    let rbot = '' + valf(styles.lowerRounding, 0) + unit;
    styles['border-radius'] = rtop + ' ' + rtop + ' ' + rbot + ' ' + rbot;
  }
  if (isdef(styles.box)) styles['box-sizing'] = 'border-box';
  if (isdef(styles.round)) styles['border-radius'] = '50%';
  for (const k in styles) {
    let val = styles[k];
    let key = k;
    if (isdef(STYLE_PARAMS[k])) key = STYLE_PARAMS[k];
    else if (k == 'font' && !isString(val)) {
      let fz = f.size; if (isNumber(fz)) fz = '' + fz + 'px';
      let ff = f.family;
      let fv = f.variant;
      let fw = isdef(f.bold) ? 'bold' : isdef(f.light) ? 'light' : f.weight;
      let fs = isdef(f.italic) ? 'italic' : f.style;
      if (nundef(fz) || nundef(ff)) return null;
      let s = fz + ' ' + ff;
      if (isdef(fw)) s = fw + ' ' + s;
      if (isdef(fv)) s = fv + ' ' + s;
      if (isdef(fs)) s = fs + ' ' + s;
      elem.style.setProperty(k, s);
      continue;
    } else if (k == 'classname') {
      mClass(elem, styles[k]);
    } else if (k == 'border') {
      if (isNumber(val)) val = `solid ${val}px ${isdef(styles.fg) ? styles.fg : '#ffffff80'}`;
      if (val.indexOf(' ') < 0) val = 'solid 1px ' + val;
    } else if (k == 'ajcenter') {
      elem.style.setProperty('justify-content', 'center');
      elem.style.setProperty('align-items', 'center');
    } else if (k == 'layout') {
      if (val[0] == 'f') {
        val = val.slice(1);
        elem.style.setProperty('display', 'flex');
        elem.style.setProperty('flex-wrap', 'wrap');
        let hor, vert;
        if (val.length == 1) hor = vert = 'center';
        else {
          let di = { c: 'center', s: 'start', e: 'end' };
          hor = di[val[1]];
          vert = di[val[2]];
        }
        let justStyle = val[0] == 'v' ? vert : hor;
        let alignStyle = val[0] == 'v' ? hor : vert;
        elem.style.setProperty('justify-content', justStyle);
        elem.style.setProperty('align-items', alignStyle);
        switch (val[0]) {
          case 'v': elem.style.setProperty('flex-direction', 'column'); break;
          case 'h': elem.style.setProperty('flex-direction', 'row'); break;
        }
      } else if (val[0] == 'g') {
        val = val.slice(1);
        elem.style.setProperty('display', 'grid');
        let n = allNumbers(val);
        let cols = n[0];
        let w = n.length > 1 ? '' + n[1] + 'px' : 'auto';
        elem.style.setProperty('grid-template-columns', `repeat(${cols}, ${w})`);
        elem.style.setProperty('place-content', 'center');
      }
    } else if (k == 'layflex') {
      elem.style.setProperty('display', 'flex');
      elem.style.setProperty('flex', '0 1 auto');
      elem.style.setProperty('flex-wrap', 'wrap');
      if (val == 'v') { elem.style.setProperty('writing-mode', 'vertical-lr'); }
    } else if (k == 'laygrid') {
      elem.style.setProperty('display', 'grid');
      let n = allNumbers(val);
      let cols = n[0];
      let w = n.length > 1 ? '' + n[1] + 'px' : 'auto';
      elem.style.setProperty('grid-template-columns', `repeat(${cols}, ${w})`);
      elem.style.setProperty('place-content', 'center');
    }
    if (key == 'font-weight') { elem.style.setProperty(key, val); continue; }
    else if (key == 'background-color') elem.style.background = bg;
    else if (key == 'color') elem.style.color = fg;
    else if (key == 'opacity') elem.style.opacity = val;
    else if (key == 'wrap') { if (val == 'hard') elem.setAttribute('wrap', 'hard'); else elem.style.flexWrap = 'wrap'; }
    else if (startsWith(k, 'dir')) {
      isCol = val[0] == 'c';
      elem.style.setProperty('flex-direction', 'column');
    } else if (key == 'flex') {
      if (isNumber(val)) val = '' + val + ' 1 0%';
      elem.style.setProperty(key, makeUnitString(val, unit));
    } else {
      elem.style.setProperty(key, makeUnitString(val, unit));
    }
  }
}
function mStyleGet(elem, prop) { return mGetStyle(elem, prop); }
function mStyleOrClass(elem, st) { if (isString(st)) mClass(elem, st); else mStyle(elem, st); }
function mStyleRemove(elem, prop) {
  if (isdef(STYLE_PARAMS[prop])) prop = STYLE_PARAMS[prop];
  elem.style.removeProperty(prop);
}
function mStyleS(elem, styles, unit = 'px') { elem = mEnsure(elem); for (const k in styles) { elem.style.setProperty(k, makeUnitString(styles[k], unit)); } return elem; }
function mStyleToCy(di, group) { return translateStylesToCy(di, group); }
function mStyleTranslate(prop, val, convertNumbers = true) {
  const paramDict = {
    align: 'text-align',
    bg: 'background-color',
    fg: 'color',
    hgap: 'column-gap',
    vgap: 'row-gap',
    matop: 'margin-top',
    maleft: 'margin-left',
    mabottom: 'margin-bottom',
    maright: 'margin-right',
    patop: 'padding-top',
    paleft: 'padding-left',
    pabottom: 'padding-bottom',
    paright: 'padding-right',
    rounding: 'border-radius',
    w: 'width',
    h: 'height',
    wmin: 'min-width',
    hmin: 'min-height',
    wmax: 'max-width',
    hmax: 'max-height',
    fontSize: 'font-size',
    fz: 'font-size',
    family: 'font-family',
    weight: 'font-weight',
    z: 'z-index'
  };
  let valDict = {
    random: randomColor(),
  };
  let propName = isdef(paramDict[prop]) ? paramDict[prop] : prop;
  let newVal = isdef(valDict[val]) ? valdict[val] : val;
  if (convertNumbers && isNumber(newVal)) newVal = '' + newVal + 'px';
  return [propName, newVal];
}
function mStyleUndo(ui, styles = {}) {
  for (const k in styles) {
    let key = valf(STYLE_PARAMS[k], k);
    ui.style[key] = null;
  }
}
function mStyleX(elem, styles, unit = 'px') {
  const paramDict = {
    bg: 'background-color',
    fg: 'color',
    align: 'text-align',
    matop: 'margin-top',
    maleft: 'margin-left',
    mabottom: 'margin-bottom',
    maright: 'margin-right',
    patop: 'padding-top',
    paleft: 'padding-left',
    pabottom: 'padding-bottom',
    paright: 'padding-right',
    rounding: 'border-radius',
    w: 'width',
    h: 'height',
    fontSize: 'font-size',
    fz: 'font-size',
    family: 'font-family',
    weight: 'font-weight',
  };
  let bg, fg;
  if (isdef(styles.bg) || isdef(styles.fg)) {
    [bg, fg] = getExtendedColors(styles.bg, styles.fg);
  }
  if (isdef(styles.vmargin) && isdef(styles.hmargin)) {
    styles.margin = vmargin + unit + ' ' + hmargin + unit;
  }
  if (isdef(styles.vpadding) && isdef(styles.hpadding)) {
    styles.padding = vpadding + unit + ' ' + hpadding + unit;
  }
  for (const k in styles) {
    let val = styles[k];
    let key = k;
    if (isdef(paramDict[k])) key = paramDict[k];
    else if (k == 'font' && !isString(val)) {
      let fz = f.size; if (isNumber(fz)) fz = '' + fz + 'px';
      let ff = f.family;
      let fv = f.variant;
      let fw = isdef(f.bold) ? 'bold' : isdef(f.light) ? 'light' : f.weight;
      let fs = isdef(f.italic) ? 'italic' : f.style;
      if (nundef(fz) || nundef(ff)) return null;
      let s = fz + ' ' + ff;
      if (isdef(fw)) s = fw + ' ' + s;
      if (isdef(fv)) s = fv + ' ' + s;
      if (isdef(fs)) s = fs + ' ' + s;
      elem.style.setProperty(k, s);
      continue;
    } else if (k == 'border') {
      if (val.indexOf(' ') < 0) val = 'solid 1px ' + val;
    }
    if (key == 'font-weight') { elem.style.setProperty(key, val); continue; }
    else if (key == 'background-color') elem.style.background = bg;
    else if (key == 'color') elem.style.color = fg;
    else {
      elem.style.setProperty(key, makeUnitString(val, unit));
    }
  }
}
function mSuit(ckey, sz = 20, color = null) {
  let suit = ckey.length == 1 ? ckey : ckey[1];
  let di = { S: '&spades;', H: '&hearts;', D: '&diams;', C: '&clubs;' };
  color = valf(color, suit == 'H' || suit == 'D' ? 'red' : 'black');
  let html = `<span style='color:${color};font-size:${sz}px'>${di[suit]}</span>`;
  return html;
}
function mSuitPos(svg, pos) {
  pos = pos.toLowerCase();
  if (pos[0] == 'c' || pos[1] == 'c') {
    let dCard = svg.parentNode;
    let r = getRect(dCard);
    let [wCard, hCard] = [r.w, r.h];
    let [wSym, hSym] = [svg.getAttribute('width'), svg.getAttribute('height')];
    switch (pos) {
      case 'cc': mStyle(svg, { position: 'absolute', left: (wCard - wSym) / 2, top: (hCard - hSym) / 2 }); break;
      case 'tc': mStyle(svg, { position: 'absolute', left: (wCard - wSym) / 2, top: 0 }); break;
      case 'bc': mStyle(svg, { position: 'absolute', left: (wCard - wSym) / 2, bottom: 0 }); break;
      case 'cl': mStyle(svg, { position: 'absolute', left: 0, top: (hCard - hSym) / 2 }); break;
      case 'cr': mStyle(svg, { position: 'absolute', right: 0, top: (hCard - hSym) / 2 }); break;
    }
    return;
  }
  let di = { t: 'top', b: 'bottom', r: 'right', l: 'left' };
  svg.style.position = 'absolute';
  svg.style[di[pos[0]]] = svg.style[di[pos[1]]] = 0;
}
function mSuitSize(suit, sz) { suit.setAttribute('sz', sz); suit.firstChild.setAttribute('height', sz); gSizeToContent(suit); }
function mSwap(obj1, obj2) {
  var parent2 = obj2.parentNode;
  var next2 = obj2.nextSibling;
  if (next2 === obj1) {
    parent2.insertBefore(obj1, obj2);
  } else {
    obj1.parentNode.insertBefore(obj2, obj1);
    if (next2) {
      parent2.insertBefore(obj1, next2);
    } else {
      parent2.appendChild(obj1);
    }
  }
}
function mSym(key, dParent, styles = {}, pos, classes) {
  let info = Syms[key];
  styles.display = 'inline-block';
  let family = info.family;
  styles.family = family;
  let sizes;
  if (isdef(styles.sz)) { sizes = mSymSizeToBox(info, styles.sz, styles.sz); }
  else if (isdef(styles.w) && isdef(styles.h)) { sizes = mSymSizeToBox(info, styles.w, styles.h); }
  else if (isdef(styles.fz)) { sizes = mSymSizeToFz(info, styles.fz); }
  else if (isdef(styles.h)) { sizes = mSymSizeToH(info, styles.h); }
  else if (isdef(styles.w)) { sizes = mSymSizeToW(info, styles.w); }
  else { sizes = mSymSizeToFz(info, 25); }
  styles.fz = sizes.fz;
  styles.w = sizes.w;
  styles.h = sizes.h;
  styles.align = 'center';
  if (isdef(styles.bg) && info.family != 'emoNoto') { styles.fg = styles.bg; delete styles.bg; }
  let x = mDiv(dParent, styles, null, info.text);
  if (isdef(classes)) mClass(x, classes);
  if (isdef(pos)) { mPlace(x, pos); }
  return x;
}
function mSymbol(key, dParent, sz, styles = {}) {
  console.log('key', key)
  let info = symbolDict[key];
  fzStandard = info.fz;
  hStandard = info.h[0];
  wStandard = info.w[0];
  let fzMax = fzStandard * sz / Math.max(hStandard, wStandard);
  fzMax *= .9;
  let fz = isdef(styles.fz) && styles.fz < fzMax ? styles.fz : fzMax;
  let wi = wStandard * fz / 100;
  let hi = hStandard * fz / 100;
  let vpadding = 2 + Math.ceil((sz - hi) / 2); console.log('***vpadding', vpadding)
  let hpadding = Math.ceil((sz - wi) / 2);
  let margin = '' + vpadding + 'px ' + hpadding + 'px'; //''+vpadding+'px '+hpadding+' ';
  let newStyles = deepmergeOverride({ fz: fz, align: 'center', w: sz, h: sz, bg: 'white' }, styles);
  newStyles.fz = fz;
  let d = mDiv(dParent, newStyles);
  console.log(key, info)
  let txt = mText(info.text, d, { family: info.family });
  console.log('-----------', margin, hpadding, vpadding);
  mStyle(txt, { margin: margin, 'box-sizing': 'border-box' });
  return d;
}
function mSymFramed(info, bg, sz) {
  let [w, h, fz] = [sz, sz, sz * .7];
  return mCreateFrom(`<div style='
  text-align:center;display:inline;background-color:${bg};
  font-size:${fz}px;overflow:hidden;
  font-family:${info.family}'>${info.text}</div>`);
}
function mSymInDiv(sym, dParent, styles = { sz: Card.sz / 5, fg: 'random' }) {
  dResult = mDiv(dParent);
  ds = mSym(sym, dResult, styles);
  return dResult;
}
function mSymInDivShrink(sym, dParent, styles = { sz: Card.sz / 5, fg: 'random' }) {
  dResult = mDiv(dParent);
  let ds = mSym(sym, dResult, styles);
  let scale = chooseRandom([.5, .75, 1, 1.25]);
  let [scaleX, scaleY] = [coin() ? scale : -scale, scale];
  if (coin()) ds.style.transform = `scale(${scaleX},${scaleY})`;
  return dResult;
}
function mSymInline(key, dParent, styles) {
  let info = Syms[key];
  styles.family = info.family;
  let el = mSpan(dParent, styles, null, info.text);
  return text;
}
function mSymSizeToBox(info, w, h) {
  let fw = w / info.w;
  let fh = h / info.h;
  let f = Math.min(fw, fh);
  return { fz: 100 * f, w: info.w * f, h: info.h * f };
}
function mSymSizeToFz(info, fz) { let f = fz / 100; return { fz: fz, w: info.w * f, h: info.h * f }; }
function mSymSizeToH(info, h) { let f = h / info.h; return { fz: 100 * f, w: info.w * f, h: h }; }
function mSymSizeToW(info, w) { let f = w / info.w; return { fz: 100 * f, w: w, h: info.h * f }; }
function mSymText(s, dParent, styles = {}, pos, classes) {
  styles.display = 'inline-block';
  styles.w = valfi(styles.w, styles.sz, styles.h, '25%');
  styles.h = valfi(styles.h, styles.sz, styles.w, styles.fz, '25%');
  styles.fz = valfi(styles.fz, styles.sz * 4 / 5, styles.h * 4 / 5, styles.w * 2, '20%');
  styles.align = 'center';
  let x = mDiv(dParent, styles, null, s); mCenterCenterFlex(x);
  if (isdef(classes)) mClass(x, classes);
  if (isdef(pos)) { mPlace(x, pos); }
  return x;
}
function mSzPic(d, sz, unit = 'px') { return mSizePic(d, sz, sz, unit); }
function mTable(dParent, headers, showheaders, styles = { mabottom: 0 }, className = 'table') {
  let d = mDiv(dParent);
  let t = mCreate('table');
  mAppend(d, t);
  if (isdef(className)) mClass(t, className);
  if (isdef(styles)) mStyle(t, styles);
  if (showheaders) {
    let code = `<tr>`;
    for (const h of headers) {
      code += `<th>${h}</th>`
    }
    code += `</tr>`;
    t.innerHTML = code;
  }
  return t;
}
function mTableCol(r, val) {
  let col = mCreate('td');
  mAppend(r, col);
  if (isdef(val)) col.innerHTML = val;
  return col;
}
function mTableCommandify(rowitems, di) {
  for (const item of rowitems) {
    for (const index in di) {
      let colitem = item.colitems[index];
      colitem.div.innerHTML = di[index](item, colitem.val);
    }
  }
}
function mTableCommandifyList(rowitem, val, func) {
  let names = isString(val) ? val.replaceAll(' ', ',').split(',') : val;
  let html = '';
  for (const name of names) {
    html += func(rowitem, name);
  }
  return html;
}
function mTableCommands(rowitems, di) {
  let t = rowitems[0].div.parentNode;
  mTableHeader(t, 'commands');
  for (const item of rowitems) {
    let drow = item.div;
    let dcol = mTableCol(drow);
    let colitem = { div: dcol, key: 'commands', val: null };
    item.colitems.push(colitem);
    let html = '';
    for (const k in di) {
      html += di[k](item);
    }
    dcol.innerHTML = html;
  }
}
function mTableHeader(t, val) {
  let col = mCreate('th');
  mAppend(t.firstChild, col);
  col.innerHTML = val;
  return col;
}
function mTableRow(t, o, headers, id) {
  let elem = mCreate('tr');
  if (isdef(id)) elem.id = id;
  mAppend(t, elem);
  let colitems = [];
  for (const k of headers) {
    let val = isdef(o[k]) ? isDict(o[k]) ? JSON.stringify(o[k]) : isList(o[k]) ? o[k].join(', ') : o[k] : '';
    let col = mTableCol(elem, val);
    colitems.push({ div: col, key: k, val: val });
  }
  return { div: elem, colitems: colitems };
}
function mTableTransition(d, ms = 800) {
  toElem(d).animate([{ opacity: .25 }, { opacity: 1 },], { fill: 'both', duration: ms, easing: 'ease' });
}
function mTag(tag, inner = null, dParent = null, styles = {}, id = null, classes = null) {
  let el = mCreate(tag);
  if (inner) el.innerHTML = inner; 
  if (dParent) mAppend(dParent, el);
  if (styles) mStyle(el, styles);
  if (id) el.id = id;
  if (classes) mClass(el, classes);
  return el;
}
function mTaPlain(dParent, styles = {}, opts = {}) {
  opts.tag = 'textarea';
  let ta = mDom(dParent, styles, opts);
  mClass(ta, 'plain');
  return ta;
}
function mText(text, dParent, styles, classes) {
  if (!isString(text)) text = text.toString();
  let d = mDiv(dParent);
  if (!isEmpty(text)) { d.innerHTML = text; }
  if (isdef(styles)) mStyle(d, styles);
  if (isdef(classes)) mClass(d, classes);
  return d;
}
function mTextArea(rows, cols, dParent, styles = {}, id) {
  let html = `<textarea id="${id}" rows="${rows}" cols="${cols}" wrap="hard"></textarea>`;
  let t = mCreateFrom(html);
  mAppend(dParent, t);
  mStyle(t, styles);
  return t;
}
function mTextarea(rows, cols, dParent, styles = {}, id) {
  let html = `<textarea id="${id}"`;
  if (isdef(rows)) html += ` rows="${rows}"`;
  if (isdef(cols)) html += ` cols="${cols}"`;
  html += ` wrap="hard"></textarea>`;
  let t = mCreateFrom(html);
  mAppend(dParent, t);
  mStyle(t, styles);
  return t;
}
function mTextArea100(dParent, styles = {}) {
  mCenterCenterFlex(dParent)
  let html = `<textarea style="width:100%;height:100%;box-sizing:border-box" wrap="hard"></textarea>`;
  let t = mCreateFrom(html);
  mStyle(t, styles);
  mAppend(dParent, t);
  return t;
}
function mTextDiv(text, dParent = null) { let d = mCreate('div'); d.innerHTML = text; return d; }
function mTextFit(text, { wmax, hmax }, dParent, styles, classes) {
  let d = mDiv(dParent);
  if (!isEmpty(text)) d.innerHTML = text;
  if (nundef(styles) && (isdef(wmax)) || isdef(hmax)) {
    styles = {};
  }
  if (isdef(wmax)) styles.width = wmax;
  if (isdef(hmax)) styles.height = hmax;
  if (isdef(styles)) mStyleX(d, styles);
  if (isdef(classes)) mClass(d, classes);
  return d;
}
function mTextWidth(txt, fz = 16) {
  let len = txt.length;
  let wprox = (len + 1.5) * fz / 2;
  return wprox;
}
function mTitle(n, R, uidParent) {
  let dParent = mBy(n.idUiParent);
  let ui = mText(n.content, dParent);
  return ui;
}
function mTitledDiv(title, dParent, outerStyles = {}, innerStyles = {}, id) {
  let d = mDiv(dParent, outerStyles);
  let dTitle = mDiv(d);
  dTitle.innerHTML = title;
  innerStyles.w = '100%';
  innerStyles.h = outerStyles.h - getRect(dTitle).h;
  let dContent = mDiv(d, innerStyles, id);
  return dContent;
}
function mTitledMessageDiv(title, dParent, id, outerStyles = {}, contentStyles = {}, titleStyles = {}, messageStyles = {}, titleOnTop = true) {
  let d = mDiv(dParent, outerStyles, id);
  let dTitle = mDiv(d, titleStyles, id + '.title'); dTitle.innerHTML = title;
  let dMessage = mDiv(d, messageStyles, id + '.message'); dMessage.innerHTML = 'hallo!';
  contentStyles.w = '100%';
  let hTitle = getRect(dTitle).h, hMessage = getRect(dMessage).h, hArea = getRect(d).h;
  let hContent = hArea - hTitle - hMessage - 4;
  mStyle(dMessage, { h: hMessage + 2 });
  mStyle(dTitle, { h: hTitle + 2 });
  contentStyles.hmin = hContent;
  let dContent = mDiv(d, contentStyles, id + '.content');
  if (!titleOnTop) { mAppend(d, dTitle); }
  return d;
}
function mToggle(label, dParent, styles = {}, handler, is_on, styleyes, styleno, classes = null) {
  let cursor = styles.cursor; delete styles.cursor;
  let name = replaceWhite(label);
  let checked = isdef(is_on) ? is_on : false;
  let b = mButton(label, null, dParent, styles, classes);
  mClass(b, 'noactive');
  b.setAttribute('checked', checked);
  b.onclick = ev => {
    ev.cancelBubble = true;
    let b = ev.target;
    assertion(b == ev.target, 'NOOOOOOOOOOOOOOOOOOOOOOO')
    let oldval = b.getAttribute('checked') == 'false' ? false : true;
    let newval = oldval ? false : true;
    if (newval === true) {
      mStyle(b, styleyes);
    } else {
      mStyle(b, styleno);
    }
    b.setAttribute('checked', newval);
    handler(name, newval);
  };
  return b;
}
function mToggle_orig_BROKEN(label, val, dParent, styles = {}, handler = null, is_on = true) {
  let cursor = styles.cursor; delete styles.cursor;
  let d = mDiv(dParent, styles);
  let id = getUID();
  let inp = createElementFromHTML(`<input class='radio' id='${id}' type="checkbox" checked="${is_on}" value="${val}" >`);
  let text = createElementFromHTML(`<label for='${id}'>${label}</label>`);
  if (isdef(cursor)) { inp.style.cursor = text.style.cursor = cursor; }
  mAppend(d, inp);
  mAppend(d, text);
  if (isdef(handler)) inp.onclick = ev => { ev.cancelBubble = true; handler(val); }
  return d;
}
function mTogglebar(di, handler, styleyes, styleno, dParent, styles, bstyles, id, classes, bclasses) {
  let d = mDiv(dParent, styles, id, classes);
  for (const k in di) {
    mToggle(k, d, bstyles, handler, di[k], styleyes, styleno, bclasses);
  }
}
function mToggleStyle(d, prop, val1, val2) {
  let val = d.style[prop];
  if (val === null && val1 == 0) val = val1;
  else if (isNumber(val1)) val = firstNumber(val);
  if (val == val1) d.style[prop] = makeUnitString(val2); else d.style[prop] = makeUnitString(val1);
}
function mToolbar(buttons, handler, dParent, styles = {}, bstyles = {}, id = null, classes = null, bclasses = null) {
  let d = mDiv(dParent, styles, id, classes);
  for (const arg of buttons) {
    let funcname = replaceWhite(arg);
    mButton(arg, () => handler(arg), d, bstyles, bclasses, `b${funcname}`);
  }
  return d;
}
function mTranslate(child, newParent, ms = 800, callback = null) {
  let [dx, dy] = get_screen_distance(child, newParent);
  onend = () => { mAppend(newParent, child); if (callback) callback(); };
  mAnimate(child, 'transform', [`translateX(${dx}px) translateY(${dy}px)`], onend, ms, 'ease');
}
function mTranslate1(child, newParent, ms = 800, callback = null) {
  child = toElem(child);
  newParent = toElem(newParent);
  const parentOriginal = child.parentNode;
  let children = arrChildren(parentOriginal);
  let iChild = children.indexOf(child);
  let sibling = iChild == children.length - 1 ? null : children[iChild + 1];
  const x0 = child.getBoundingClientRect().left;
  const y0 = child.getBoundingClientRect().top;
  newParent.appendChild(child);
  const x1 = child.getBoundingClientRect().left;
  const y1 = child.getBoundingClientRect().top;
  if (sibling) parentOriginal.insertBefore(child, sibling); else parentOriginal.appendChild(child);
  child.style.setProperty('--dx', (x1 - x0) + 'px');
  child.style.setProperty('--dy', (y1 - y0) + 'px');
  child.style.setProperty('--ms', `${ms}ms`);
  child.addEventListener('animationend', function () {
    newParent.appendChild(child);
    child.classList.remove('move');
    if (callback) callback();
  });
  child.classList.add('move');
}
function mTranslateBy(elem, x, y, ms = 800, callback = null) {
  mAnimate(elem, 'transform', [`translateX(${x}px) translateY(${y}px)`], callback, ms, 'ease');
}
function mTranslateByFade(elem, x, y, ms = 800, callback = null) {
  mAnimate(elem, 'transform', [`translateX(${x}px) translateY(${y}px)`], callback, ms, 'ease');
  let a = toElem(elem).animate([{ opacity: .25 }, { opacity: 1 },], { fill: 'both', duration: ms, easing: 'ease' });
}
function MUELL() {
  let [mean, stdev] = [0, 1];
  let f = x => gaussian_amp(x, mean, stdev);
  let y = f(0);
  console.log('y', y);
  let amp = .9 * (-canvas.miny) / (40 * y);
  f = x => gaussian_amp(x, mean, stdev, amp);
  canvas.draw_axes();
  canvas.plot(f, 'orange', 1);
  let x = 40 * search_end_point(f, 0, canvas.maxx, .1, .01);
  console.log('point x', x, canvas.minx, canvas.maxx);
  y = -40 * f(x / 40)
  console.log('point y', x, 0, canvas.maxy);
  console.log('scale', canvas.scale)
  let xreal = x / 40;
  let yreal = f(xreal) / (40);
  x = 0;
  for (let i = canvas.minx; i < canvas.maxx; i += canvas.scale) {
    let x1 = Math.round(convert_to_range(x, -4, 4, 50, 150));
    let x2 = Math.round(convert_to_range(-x, -4, 4, 50, 150));
    canvas.pp(x * 40, 0, 3, `${x1}`);
    canvas.pp(-x * 40, 0, 3, `${x2}`); x += 2;
  }
}
function muiCard(key, dParent, styles, classes) { }
function multiCartesi() {
  let arr = Array.from(arguments);
  if (arr.length > 2) {
    return cartesi(arr[0], stripSet(multiCartesi(...arr.slice(1))));
  } else if (arr.length == 2) return cartesi(arr[0], arr[1]);
  else if (arr.length == 1) return arr[0];
  else return [];
}
function multiSplit(s, seplist) {
  let res = [s];
  for (const sep of seplist) {
    let resNew = [];
    for (const s1 of res) {
      let parts = s1.split(sep);
      resNew = resNew.concat(parts);
    }
    res = resNew;
  }
  return res.filter(x => !isEmpty(x));
}
function multiStyleAnimation(elist, ms, callback) {
  let els = elist.map(x => x[0]);
  let styles = elist.map(x => x[1]);
  els.map(x => x.style.transition = '' + ms + 'ms');
  for (let i = 0; i < els.length; i++) { mStyleX(els[i], styles[i]); }
  DA.TO = setTimeout(() => {
    els.map(x => x.style.transition = 'unset');
    if (isdef(callback)) callback();
  }, ms);
}
function mUnhigh(ui) { mClassRemove(ui, 'high'); }
function munhigh(d) { d = isString(d) ? mBy(d) : d; mStyle(d, { border: 'none' }); }
function mup(o, p, d) {
  p = { x: p.x, y: p.y - d };
  if (o) o.setPos(p.x, p.y);
  return p;
}
function mutate_colors(type, colors) {
  let items = C.items[type];
  let changed = false;
  let lastcolor = arrLast(colors);
  for (const item of items) {
    if (item.color == lastcolor) continue;
    changed = true;
    if (coin()) continue;
    let i = colors.indexOf(item.color) + 1;
    item.color = colors[i];
    if (type == 'branch') item.thickness -= 1.5;
  }
  return changed;
}
function mXit(elem, sz = 50) {
  if (nundef(sz)) sz = getRect(elem).h;
  let d = markerFail();
  mpOver(d, elem, sz / 2, 'red', 'openMojiTextBlack');
  mMoveBy(d, 0, -4);
  return d;
}
function my_poly_center(f) {
  let pts = points_from_feature(f);
  let c2 = get_polygon_centroid(pts);
  if (isNaN(c2.x) || isNaN(c2.y)) return null;
  center = [c2.y, c2.x];
  return center;
}
function mYaml(d, js) {
  d.innerHTML = '<pre>' + jsonToYaml(js) + '</pre>';
  return d;
}
function myFunction() {
  console.log('onresize!!!');
}
function myMinimax(node, depth, alpha, beta, maxDepth, maxim) {
  CCC += 1;
  if (depth >= maxDepth) return 1;
  let ec = F_END(node, depth); if (ec.reached) return ec.val;
  depth += 1;
  var move, result;
  var availableMoves = F_MOVES(node);
  let player = maxim ? MAXIMIZER : MINIMIZER;
  for (var i = 0; i < availableMoves.length; i++) {
    move = availableMoves[i];
    F_APPLYMOVE(node, move, player);
    result = myMinimax(node, depth, alpha, beta, maxDepth, !maxim);
    F_UNDOMOVE(node, move, player);
    if (maxim) {
      if (result > alpha) {
        alpha = result;
        if (depth == 1) SelectedMove = move;
      } else if (alpha >= beta) { return alpha; }
    } else {
      if (result < beta) {
        beta = result;
        if (depth == 1) SelectedMove = move;
      } else if (beta <= alpha) { return beta; }
    }
  }
  return maxim ? alpha : beta;
}
function myOnclickCodeInSidebar(ev) {
  let key = isString(ev) ? ev : ev.target.innerHTML;
  let text = CODE.justcode[key];
  AU.ta.value = text;
  let download = false;
  if (download) downloadAsText(text, 'hallo', 'js');
  return text;
}
function myPresent(dArea, items, options) {
  let showLabels = options.showLabels;
  let w = options.w * valf(options.fw, .9);
  let h = options.h * valf(options.fh, .7);
  let wi, hi, rows, cols;
  if (isdef(options.rows) || isdef(options.cols)) {
    [wi, hi, rows, cols] = calcSizeAbWo(items.length, options.rows, options.cols, w, h, options.wimax, options.himax);
  } else[wi, hi, rows, cols] = calcRowsColsSizeAbWo(items.length, w, h, showLabels, options.wimax, options.himax);
  let gap = wi * .1; if (cols > 1) wi -= gap; if (rows > 1) hi -= gap;
  let fzPic = options.fzPic = getStandardFzPic(wi, hi, showLabels);
  let fz = getStandardFz(wi, hi, options.showPic, options.showLabels, options.wLongest);
  options.szPic = { w: wi, h: hi };
  if (nundef(options.ifs)) options.ifs = {};
  let outerStyles = {
    w: showLabels ? wi : 'auto', h: hi, rounding: 6,
    bg: valf(options.ifs.bg, 'random'), fg: 'contrast', display: 'inline-flex', 'flex-direction': 'column',
    'justify-content': 'center', 'align-items': 'center', 'vertical-align': 'top',
  };
  let picStyles = { fz: fzPic };
  let labelStyles = { fz: fz };
  for (const item of items) {
    for (const k in options.ifs) if (isdef(item[k])) outerStyles[k] = item[k];
    if (isdef(item.textShadowColor)) {
      let sShade = '0 0 0 ' + item.textShadowColor;
      if (options.showPic) {
        picStyles['text-shadow'] = sShade;
        picStyles.fg = colorFrom('black', options.contrast); //'#00000080' '#00000030' 
      } else {
        labelStyles['text-shadow'] = sShade;
        labelStyles.fg = colorFrom('black', options.contrast); //'#00000080' '#00000030' 
      }
    }
    let dOuter = mCreate('div', outerStyles, item.id);
    dOuter.onclick = options.handler;
    picStyles.family = item.info.family;
    let dLabel, dPic;
    if (options.showPic) { dPic = mDiv(dOuter, picStyles); dPic.innerHTML = item.info.text; }
    if (showLabels) dLabel = mText(item.label, dOuter, labelStyles);
    if (options.showRepeat) addRepeatInfo(dOuter, item.iRepeat, wi);
    iAdd(item, { options: options, div: dOuter, dLabel: dLabel, dPic: dPic });
  }
  mStyleX(dArea, { display: 'inline-grid', gap: gap, 'grid-template-columns': `repeat(${cols},${wi}px)` });
  items.map(x => mAppend(dArea, iDiv(x)));
  return getRect(dArea);
}
function mySearch(kws) {
  console.log(`'${kws}'`); return;
  let arr = CODE.codelist;
  let patt = isList(kws) ? kws.join('|') : replaceAll(kws, ' ', '|');
  let regex = new RegExp(`\\b${patt}\\b`);
  console.log('patt', patt)
  let res = arr.filter(x => regex.test(x.value));
  let keys = res.map(x => x.key);
  console.log('keys', keys);
  show_sidebar(keys, myOnclickCodeInSidebar);
  return;
  let di = CODE.justcode;
  let dilist = dict2list(di, 'key');
  let records = dilist.filter(x => words.some(w => x.key.match(new RegExp(`\\${w}\\b`, 'i'))));
  console.log('records', records)
  show_sidebar(records.map(x => x.key), myOnclickCodeInSidebar);
  return records;
}
function myShowLabels(onClickPictureHandler, ifs = {}, options = {}, keys, labels) {
  options.wimax = 200; options.himax = 50;
  options.w = window.innerWidth - 180; options.h = 50; options.fz = 22;
  options.showPic = false; options.showLabels = true;
  return showPictures(dTable, onClickPictureHandler, ifs, options, keys, labels);
}
function myShowPics(handler, ifs = {}, options = {}, keys, labels) {
  options.showPic = true;
  options.wimax = options.himax = 200;
  options.w = window.innerWidth - 180; options.h = window.innerHeight - 220;
  Pictures = showPictures(dTable, handler, ifs, options, keys, labels);
}
function mZone(dParent, styles, pos) {
  let d = mDiv(dParent);
  if (isdef(styles)) mStyleX(d, styles);
  if (isdef(pos)) {
    mIfNotRelative(dParent);
    mPos(d, pos.x, pos.y);
  }
  return d;
}
//#endregion

//#region N O

function name2id(name) { return 'd_' + name.split(' ').join('_'); }
function ncdf(x, mean = 100, std = 15) {
  var x = (x - mean) / std
  var t = 1 / (1 + .2315419 * Math.abs(x))
  var d = .3989423 * Math.exp(-x * x / 2)
  var prob = d * t * (.3193815 + t * (-.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))))
  if (x > 0) prob = 1 - prob
  return prob
}
function neighborhood(items, byrc) {
  let adjList = [];
  let di = {};
  for (const info of items) {
    if (info.type != 'field') continue;
    let [r, c] = [info.row, info.col];
    info.nodeItems = [
      lookup(byrc, [r - 2, c]),
      lookup(byrc, [r - 1, c + 1]),
      lookup(byrc, [r + 1, c + 1]),
      lookup(byrc, [r + 2, c]),
      lookup(byrc, [r + 1, c - 1]),
      lookup(byrc, [r - 1, c - 1]),
    ];
    info.nodes = info.nodeItems.map(x => isdef(x) ? x.id : null);
    delete info.nodeItems;
    for (let i = 0; i < 6; i++) {
      let n1 = info.nodes[i];
      if (n1 == null) continue;
      let n2 = info.nodes[(i + 1 % 6)];
      if (n2 == null) continue;
      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;
      lookupSet(di, [n1, n2], true);
      adjList.push([n1, n2]);
    }
    info.neiItems = [
      lookup(byrc, [r - 3, c + 1]),
      lookup(byrc, [r, c + 2]),
      lookup(byrc, [r + 3, c + 1]),
      lookup(byrc, [r + 3, c - 1]),
      lookup(byrc, [r, c - 2]),
      lookup(byrc, [r - 3, c - 1]),
    ];
    info.nei = info.neiItems.map(x => isdef(x) ? x.id : null);
    delete info.neiItems;
  }
}
function neighborhood1(items, byrc) {
  let adjList = [];
  let di = {};
  for (const info of items) {
    let [r, c] = [info.row, info.col];
    info.nodes = [
      lookup(byrc, [r - 2, c]),
      lookup(byrc, [r - 1, c + 1]),
      lookup(byrc, [r + 1, c + 1]),
      lookup(byrc, [r + 2, c]),
      lookup(byrc, [r + 1, c - 1]),
      lookup(byrc, [r + 1, c - 1]),
    ];
    for (let i = 0; i < 6; i++) {
      let n1 = info.nodes[i];
      if (n1 == null) continue;
      let n2 = info.nodes[(i + 1 % 6)];
      if (n2 == null) continue;
      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;
      lookupSet(di, [n1, n2], true);
      adjList.push([n1, n2]);
    }
    info.neighbors = [
      lookup(byrc, [r - 3, c + 1]),
      lookup(byrc, [r, c + 2]),
      lookup(byrc, [r + 3, c + 1]),
      lookup(byrc, [r + 3, c - 1]),
      lookup(byrc, [r, c - 2]),
      lookup(byrc, [r - 3, c - 1]),
    ];
  }
}
function neighborhood2(items, byrc) {
  let adjList = [];
  let di = {};
  for (const info of items) {
    let [r, c] = [info.row, info.col];
    info.nodeItems = [
      lookup(byrc, [r - 2, c]),
      lookup(byrc, [r - 1, c + 1]),
      lookup(byrc, [r + 1, c + 1]),
      lookup(byrc, [r + 2, c]),
      lookup(byrc, [r + 1, c - 1]),
      lookup(byrc, [r + 1, c - 1]),
    ];
    info.nodes = info.nodeItems.map(x => x ? x.id : null);
    delete info.nodeItems;
    for (let i = 0; i < 6; i++) {
      let n1 = info.nodes[i];
      if (n1 == null) continue;
      let n2 = info.nodes[(i + 1 % 6)];
      if (n2 == null) continue;
      if (lookup(di, [n1, n2]) || lookup(di, [n2, n1])) continue;
      lookupSet(di, [n1, n2], true);
      adjList.push([n1, n2]);
    }
    info.neighbors = [
      lookup(byrc, [r - 3, c + 1]),
      lookup(byrc, [r, c + 2]),
      lookup(byrc, [r + 3, c + 1]),
      lookup(byrc, [r + 3, c - 1]),
      lookup(byrc, [r, c - 2]),
      lookup(byrc, [r - 3, c - 1]),
    ];
  }
}
function nerd_custom_function() {
  var core = nerdamer.getCore();
  var _ = core.PARSER;
  core.Math2.custom = function (a, b) {
    return (2 * a + b) / a;
  };
  _.functions.custom = [, 2];
  var x = nerdamer('custom(2, 6)').evaluate();
  console.log(x.toString());
  var y = nerdamer('custom(a, b)').evaluate();
  console.log(y.toString());
}
function netHandSize(nmax, hCard, wCard, ovPercent = 20, splay = 'right') {
  let isHorizontal = splay == 'right' || splay == 'left';
  if (nundef(hCard)) hCard = 110;
  if (nundef(wCard)) wCard = Math.round(hCard * .7);
  return isHorizontal ? { w: wCard + (nmax - 1) * wCard * ovPercent / 100, h: hCard } : { w: wCard, h: hCard + (nmax - 1) * hCard * ovPercent / 100 };
}
function new_cards_animation(n = 2) {
  let [stage, A, fen, plorder, uplayer, deck] = [Z.stage, Z.A, Z.fen, Z.plorder, Z.uplayer, Z.deck];
  let pl = fen.players[uplayer];
  if (stage == 'card_selection' && !isEmpty(pl.newcards)) {
    let anim_elems = [];
    for (const key of pl.newcards) {
      let ui = lastCond(UI.players[uplayer].hand.items, x => x.key == key);
      if (nundef(ui)) { pl.newcards = []; return; }
      ui = iDiv(ui);
      anim_elems.push(ui);
    }
    delete pl.newcards;
    anim_elems.map(x => mPulse(x, n * 1000));
  }
}
function new_deal(fen) {
  let deck = fen.deck = create_fen_deck('n', fen.num_decks);
  shuffle(deck);
  for (const plname in fen.players) {
    let pl = fen.players[plname];
    let handsize = pl.handsize;
    pl.hand = deck_deal(deck, handsize);
  }
}
function newColors() {
  color_areas(25);
  renderVisualStructures(2);
}
function NewGame(fen) {
  if (nundef(fen)) fen = START_FEN;
  ParseFen(fen);
  PrintBoard();
  SetInitialBoardPieces();
  GameController.PlayerSide = brd_side;
  CheckAndSet();
  GameController.GameSaved = BOOL.FALSE;
  if (SideChar[brd_side] == 'b') {
    GameController.PlayerSide = brd_side ^ 1;
    PreSearch();
  }
}
function NewGameAjax() { }
function newGameAjax() {
  console.log('new Game Ajax');
  $.ajax({
    url: "insertNewGame.php",
    cache: false
  }).done(function (html) {
    console.log('result:' + html);
  });
}
function newItemSelection(item, items, onSelectSelected = null) {
  console.log('===>', item, items)
  let selectedItem = firstCond(items, x => x.isSelected);
  if (selectedItem && selectedItem != item) toggleItemSelection(selectedItem);
  else if (onSelectSelected && selectedItem) { onSelectSelected(item); }
  toggleItemSelection(item);
}
function newtree() {
  tree = []; leaves = []; numlayers = 0;
}
function next_task(otree, r) {
  let i = otree.itask += 1;
  let n_todo = otree.todo.length;
  if (i >= n_todo) {
    move_todo_to_history(otree);
    start_new_todo_list(otree, r);
  }
}
async function nextTestOfSeries(downloadRequested = true) {
  if (isLastTestOfSeries()) { console.log('...press reset!'); return; }
  await onClickClearTable();
  let tests = ALLTESTS[iTESTSERIES]();
  let solutions = ALLTESTSOLUTIONS[iTESTSERIES];
  let context = tests[iTEST];
  mBy('message').innerHTML = '(test) ' + iTESTSERIES + ' / ' + iTEST;
  await rParse('test', context);
  let uiNodeSizes = {};
  recCollectSizeInfo(R.uiNodes[R.tree.uid], R, uiNodeSizes);
  if (isdef(solutions) && isdef(solutions[iTEST])) {
    let changes = propDiffSimple(uiNodeSizes, solutions[iTEST]);
    if (changes.hasChanged) {
      console.log('FAIL!!! ', iTESTSERIES + '.' + iTEST, 'changes: ', changes);
    } else {
      console.log('verifying test case', iTESTSERIES + '.' + iTEST, 'correct!');
    }
  } else {
  }
  let testDict = ALLTESTSOLUTIONS[iTESTSERIES];
  if (nundef(ALLTESTSOLUTIONS[iTESTSERIES])) { testDict = ALLTESTSOLUTIONS[iTESTSERIES] = {}; }
  testDict[iTEST] = uiNodeSizes;
  iTEST += 1;
  if (isLastTestOfSeries() && !IS_START && downloadRequested) {
    if (isdef(testDict)) downloadFile(testDict, 'testDict');
    console.log('...press reset!');
  } else if (IS_START) {
    IS_START = false;
  }
}
function niceColor(rgb) {
  let hsl = rgb2hsl(rgb);
  hsl[0] = (hsl[0] + 0.5) % 1;
  hsl[1] = (hsl[1] + 0.5) % 1;
  hsl[2] = (hsl[2] + 0.5) % 1;
  return 'hsl(' + hsl[0] * 360 + ',' + hsl[1] * 100 + '%,' + hsl[2] * 100 + '%)';
}
function noc0_randomwalkers() {
  let [c1, c2] = [G.items[0], G.items[1]];
  c1.add({ update: move_random, w: 2, h: 2 });
  c2.add({ label: 'tom', draw: draw_label, update: move_random });
  c2.add(new CItemWalker('tim'));
}
function noc1_randomwalkers() {
  let [c1, c2] = [G.items[0], G.items[1]];
  let probs = [{ val: { x: -1, y: 0 }, p: 1 }, { val: { x: 1, y: 0 }, p: 2 }, { val: { x: 0, y: -1 }, p: 3 }, { val: { x: 0, y: 1 }, p: 3 }];
  c1.add({ probs: probs, update: move_probs, w: 2, h: 2 });
  c2.add({ label: 'tom', draw: draw_label, update: move_random });
}
function noc2_explicit_distribution() {
  let [c1, c2] = [G.items[0], G.items[1]];
  const sampler = new WeightedSampler([{ x: 1 }, { x: -1 }, { y: 1 }, { y: -1 }], [1, 2, 1, 2]);
  let randomArray = Array.apply(null, Array(100000)).map(() => sampler.get());
  let randomArray2 = Array.apply(null, Array(100000)).map(() => sampler.get());
  console.log(randomArray);
}
function noc3_gaussian() {
  let canvas = arrLast(G.items);
  let [mean, stdev] = [0, 1]
  let f = x => gaussian1(x, mean, stdev);
  let y = f(0);
  console.log('y', y);
  let amp = .9 * (-canvas.miny) / (40 * y);
  f = x => gaussian1(x, mean, stdev, amp);
  canvas.draw_axes();
  canvas.plot(f, 'orange', 1);
  let x = 40 * search_end_point(f, 0, canvas.maxx, .1, .01);
  console.log('point x', x, canvas.minx, canvas.maxx);
  y = -40 * f(x / 40)
  console.log('point y', x, 0, canvas.maxy);
  console.log('scale', canvas.scale)
  let xreal = x / 40;
  let yreal = f(xreal) / (40);
  x = 0;
  for (let i = canvas.minx; i < canvas.maxx; i += canvas.scale) {
    let x1 = Math.round(convert_to_range(x, -4, 4, 50, 150));
    let x2 = Math.round(convert_to_range(-x, -4, 4, 50, 150));
    canvas.pp(x * 40, 0, `${x1}`);
    canvas.pp(-x * 40, 0, `${x2}`); x += 2;
  }
}
function noc4_gaussian() {
  let canvas = arrLast(G.items);
  draw_gaussian(canvas, 100, 15, 'lime', 1, 'silver', 'IQ');
  return;
  canvas.draw_axes();
  canvas.scale = 40; console.log('canvas', canvas)
  let f = gaussian_amp(canvas, 1)
  canvas.plot(f, 'orange', 1);
  draw_ticks_gaussian(canvas, f, 100, 15, 'silver');
}
function noc5_draw_text() {
  let canvas = arrLast(G.items);
  let d = mInsert(dTable, mCreate('div'));
  mText('hallo', d, { fz: 40, family: 'algerian' });
  draw_text(canvas, 'hallo', { family: 'algerian', fg: 'white', pos: 'tr' });
}
function noc6_simple_gaussian() {
  let canvas = arrFirst(G.items);
  simple_gaussian(canvas);
}
function normalcdf(x, mean, stdev) {
  x = (x - mean) / stdev;
  var a1 = 1 / (1 + .2316419 * Math.abs(x));
  var a2 = .3989423 * Math.exp(-x * x / 2);
  var p = a2 * a1 * (.3193815 + a1 * (-.3565638 + a1 * (1.781478 + a1 * (-1.821256 + a1 * 1.330274))));
  if (x > 0) {
    p = 1 - p
  }
  return p;
}
function normalDistribution(mu, sigma) {
  this.mu = eval(mu);
  this.sigma = eval(sigma);
  this.mean = mean;
  this.variance = variance;
  this.sd = sd;
  this.pdf = pdf;
  this.cdf = cdf;
  this.percentile = percentile;
  this.printMoments = printMoments;
  this.printPdf = printPdf;
  function mean() {
    return jStat.normal.mean(this.mu, this.sigma);
  }
  function variance() {
    return jStat.normal.variance(this.mu, this.sigma);
  }
  function sd() {
    return Math.sqrt(this.variance());
  }
  function pdf(x) {
    if (!isNaN(eval(x))) {
      return jStat.normal.pdf(x, this.mu, this.sigma);
    }
    return '';
  }
  function cdf(x) {
    if (!isNaN(eval(x))) {
      return jStat.normal.cdf(x, this.mu, this.sigma);
    }
    return '';
  }
  function percentile(p) {
    if (!isNaN(eval(p))) {
      return jStat.normal.inv(p, this.mu, this.sigma);
    }
    return '';
  }
  function printMoments() {
    var txt = "";
    txt += '$ \\mu = E(X) = ' + roundNumber(this.mean(), 3) + '\\hspace{0.5cm}$';
    txt += '$ \\sigma = SD(X) = ' + roundNumber(this.sd(), 3) + '\\hspace{0.5cm}$';
    txt += '$ \\sigma^2 = Var(X) = ' + roundNumber(this.variance(), 3) + '$';
    document.getElementById("moments").innerHTML = txt;
    MathJax.Hub.Queue(["Typeset", MathJax.Hub, "moments"]);
  }
  function printPdf(x, direction) {
    var data = new google.visualization.DataTable();
    data.addColumn('number', 'x');
    data.addColumn('number', 'f(x)');
    data.addColumn('number', 'f(x)');
    data.addColumn('number', 'f(x)');
    x = eval(x);
    var lo = this.mean() - 4 * this.sd();
    var hi = this.mean() + 4 * this.sd();
    data.addRows(401);
    var i, grd;
    for (i = 0; i < 401; i++) {
      grd = lo + (hi - lo) * i / 400;
      data.setCell(i, 0, grd);
      data.setCell(i, 1, this.pdf(grd));
      if (!isNaN(x)) {
        if (grd < x) {
          if (direction == 'less')
            data.setCell(i, 2, this.pdf(grd));
        }
        else {
          if (direction == 'greater')
            data.setCell(i, 2, this.pdf(grd));
        }
        if (direction == 'twotail') {
          if (grd < -Math.abs(x)) data.setCell(i, 2, this.pdf(grd));
          if (grd > Math.abs(x)) data.setCell(i, 2, this.pdf(grd));
        }
        if (direction == 'twotailinside') {
          if (grd > -Math.abs(x) && grd < Math.abs(x)) data.setCell(i, 2, this.pdf(grd));
        }
        var xdelta = (hi - lo) / 140;
        if (direction == 'less' || direction == 'greater') {
          if (grd > x - xdelta && grd < x + xdelta) {
            data.setCell(i, 3, this.pdf(grd));
          }
        }
        if (direction == 'twotail') {
          if (grd > -Math.abs(x) - xdelta && grd < -Math.abs(x) + xdelta)
            data.setCell(i, 3, this.pdf(grd));
          if (grd > Math.abs(x) - xdelta && grd < Math.abs(x) + xdelta)
            data.setCell(i, 3, this.pdf(grd));
        }
        if (direction == 'twotailinside') {
          if (grd > -Math.abs(x) - xdelta && grd < -Math.abs(x) + xdelta)
            data.setCell(i, 3, this.pdf(grd));
          if (grd > Math.abs(x) - xdelta && grd < Math.abs(x) + xdelta)
            data.setCell(i, 3, this.pdf(grd));
        }
      }
    }
    var options = {
      backgroundColor: 'transparent',
      areaOpacity: 0,
      hAxis: {
        title: 'x', titleTextStyle: { color: '#000000' },
        min: lo,
        max: hi,
        gridlines: { color: 'transparent', count: 7 },
        baseline: lo
      },
      vAxis: {
        title: 'f(x)', titleTextStyle: { color: '#000000' },
        gridlines: { count: 5, color: 'transparent' },
        viewWindow: { min: 0 },
        viewWindowMode: 'explicit'
      },
      legend: { position: 'none' },
      series: {
        0: { color: 'black', areaOpacity: 0, lineWidth: 1.2 },
        1: { color: '#e7b0b0', areaOpacity: 1, lineWidth: 0 },
        2: { color: '#83aaf1', areaOpacity: 1, lineWidth: 0 },
        3: { color: '#E8E8E8', areaOpacity: 1, lineWidth: 0 }
      },
      tooltip: { trigger: 'none' }
    };
    var chart = new google.visualization.AreaChart(document.getElementById('pdfPlot'));
    chart.draw(data, options);
  }
}
function normalize(text, language) {
  text = text.toLowerCase();
  if (language == 'D') {
    text = convertUmlaute(text);
  }
  return text;
}
function normalize_bid(bid) {
  let need_to_sort = bid[0] == '_' && bid[2] != '_'
    || bid[2] != '_' && bid[2] > bid[0]
    || bid[2] == bid[0] && is_higher_ranked_name(bid[3], bid[1]);
  if (need_to_sort) {
    let [h0, h1] = [bid[0], bid[1]];
    [bid[0], bid[1]] = [bid[2], bid[3]];
    [bid[2], bid[3]] = [h0, h1];
  }
  return bid;
}
function normalize_string(s, sep = '_') {
  s = s.toLowerCase().trim();
  let res = '';
  for (let i = 0; i < s.length; i++) { if (isAlphaNum(s[i])) res += s[i]; else if (s[i] == ' ') res += sep; }
  return res;
}
function normalizeDict(t) {
  let tNew = {};
  let keys = Object.keys(t);
  let minKey = Math.min(...keys.map(x => firstNumber(x)));
  for (const k in t) {
    tNew['_' + (firstNumber(k) - minKey)] = jsCopy(t[k]);
  }
  return { num: minKey, result: sortKeys(tNew) };
}
function normalizeNode(o, num) {
  if (isdef(o.uid)) normalizeSimpleUidProp(o, 'uid', num);
  if (isdef(o.children)) { o.children = o.children.map(x => normalizeVal(x, num)); }
  if (isdef(o.uidParent)) normalizeSimpleUidProp(o, 'uidParent', num);
  if (isdef(o._NODE)) normalizeSpecKeyProp(o, '_NODE', num);
  if (isdef(o.here)) normalizeSpecKeyProp(o, 'here', num);
}
function normalizeRTree(R) { return normalizeTree(R.rNodes, R); }
function normalizeSimpleUidProp(o, prop, num) {
  o[prop] = normalizeVal(o[prop], num);
}
function normalizeSpec(sp) {
  let spNew = {};
  for (const k in sp) {
    spNew[k] = recNormalize(sp[k], sp);
  }
  return spNew;
}
function normalizeSpecKeyProp(o, prop, num) {
  let node1 = o[prop];
  if (isString(node1) && node1.includes('_')) {
    o[prop] = correctNumbersInString(node1, num);
  } else if (isList(node1)) {
    let newlist = [];
    for (const el of node1) {
      if (el.includes('_')) {
        newlist.push(correctNumbersInString(el, num));
      }
    }
    console.log('SOLLTE NIEEEEEEEEEEEEEEEEEEE VORKOMMEN!!!!!!');
    o[prop] = newlist;
  }
}
function normalizeToList(n, prop) {
  let val = n[prop];
  if (isdef(val) && !isList(val)) n[prop] = [val];
}
function normalizeTree(t, r) {
  let tNew = jsCopy(t);
  let first = r.tree.uid;
  let num = firstNumber(first);
  safeRecurse(tNew, normalizeNode, num, false);
  let newRTree = {};
  for (const k in tNew) {
    let kNew = normalizeVal(k, num);
    newRTree[kNew] = tNew[k];
  }
  tNew = newRTree;
  return sortKeys(tNew);
}
function normalizeVal(val, num) {
  let nval = firstNumber(val);
  nval -= num;
  return '_' + nval;
}
function normalWalk({ peep, props }) {
  const {
    startX,
    startY,
    endX
  } = props
  const xDuration = 10
  const yDuration = 0.25
  const tl = gsap.timeline()
  tl.timeScale(randomRange(0.5, 1.5))
  tl.to(peep, {
    duration: xDuration,
    x: endX,
    ease: 'none'
  }, 0)
  tl.to(peep, {
    duration: yDuration,
    repeat: xDuration / yDuration,
    yoyo: true,
    y: startY - 10
  }, 0)
  return tl
}
function notImplemented(msg = '!') {
  let fname = getFunctionsNameThatCalledThisFunction();
  console.log('NOT IMPLEMENTED:', fname, msg);
}
function notMyTurn() {
  enableButton('c_b_PollStatus');
}
function nRandomNumbers(n, from, to, step) {
  let arr = range(from, to, step);
  return choose(arr, n);
}
// function Number(div, board, n) {
//   var self = this;
//   this.div = div;
//   this.board = board;
//   this.n = n;
// }
function numberSequenceCorrectionAnimation(stringFunc) {
  let wrong = getWrongWords();
  if (nundef(TOList)) TOList = {};
  let msg = stringFunc();
  showFleetingMessage(msg, 0, { fz: 32 });
  Selected.feedbackUI = wrong.map(x => iDiv(x));
  failPictureGoal();
  let t1 = setTimeout(removeMarkers, 1000);
  let t2 = setTimeout(() => wrong.map(x => { correctWordInput(x); animate(iDiv(x), 'komisch', 1300); }), 1000);
  t4 = setTimeout(() => { if (G.spokenFeedback) sayRandomVoice(msg); }, 500);
  TOList.numseq = [t1, t2, t4];
  return 2800;
}
function nundef(x) { return x === null || x === undefined; }

//#endregion

//#region P Q

















